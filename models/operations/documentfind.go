// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

// QueryParamSource - Filter documents by how it was created.
type QueryParamSource string

const (
	QueryParamSourceDocument           QueryParamSource = "DOCUMENT"
	QueryParamSourceTemplate           QueryParamSource = "TEMPLATE"
	QueryParamSourceTemplateDirectLink QueryParamSource = "TEMPLATE_DIRECT_LINK"
)

func (e QueryParamSource) ToPointer() *QueryParamSource {
	return &e
}
func (e *QueryParamSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		fallthrough
	case "TEMPLATE_DIRECT_LINK":
		*e = QueryParamSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamSource: %v", v)
	}
}

// QueryParamStatus - Filter documents by the current status
type QueryParamStatus string

const (
	QueryParamStatusDraft     QueryParamStatus = "DRAFT"
	QueryParamStatusPending   QueryParamStatus = "PENDING"
	QueryParamStatusCompleted QueryParamStatus = "COMPLETED"
	QueryParamStatusRejected  QueryParamStatus = "REJECTED"
)

func (e QueryParamStatus) ToPointer() *QueryParamStatus {
	return &e
}
func (e *QueryParamStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "PENDING":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "REJECTED":
		*e = QueryParamStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamStatus: %v", v)
	}
}

type OrderByColumn string

const (
	OrderByColumnCreatedAt OrderByColumn = "createdAt"
)

func (e OrderByColumn) ToPointer() *OrderByColumn {
	return &e
}
func (e *OrderByColumn) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "createdAt":
		*e = OrderByColumn(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderByColumn: %v", v)
	}
}

type OrderByDirection string

const (
	OrderByDirectionAsc  OrderByDirection = "asc"
	OrderByDirectionDesc OrderByDirection = "desc"
)

func (e OrderByDirection) ToPointer() *OrderByDirection {
	return &e
}
func (e *OrderByDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = OrderByDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderByDirection: %v", v)
	}
}

type DocumentFindRequest struct {
	// The search query.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// The pagination page number, starts at 1.
	Page *float64 `queryParam:"style=form,explode=true,name=page"`
	// The number of items per page.
	PerPage *float64 `queryParam:"style=form,explode=true,name=perPage"`
	// Filter documents by the template ID used to create it.
	TemplateID *float64 `queryParam:"style=form,explode=true,name=templateId"`
	// Filter documents by how it was created.
	Source *QueryParamSource `queryParam:"style=form,explode=true,name=source"`
	// Filter documents by the current status
	Status *QueryParamStatus `queryParam:"style=form,explode=true,name=status"`
	// Filter documents by folder ID
	FolderID         *string           `queryParam:"style=form,explode=true,name=folderId"`
	OrderByColumn    *OrderByColumn    `queryParam:"style=form,explode=true,name=orderByColumn"`
	OrderByDirection *OrderByDirection `default:"desc" queryParam:"style=form,explode=true,name=orderByDirection"`
}

func (d DocumentFindRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentFindRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (d *DocumentFindRequest) GetQuery() *string {
	if d == nil {
		return nil
	}
	return d.Query
}

func (d *DocumentFindRequest) GetPage() *float64 {
	if d == nil {
		return nil
	}
	return d.Page
}

func (d *DocumentFindRequest) GetPerPage() *float64 {
	if d == nil {
		return nil
	}
	return d.PerPage
}

func (d *DocumentFindRequest) GetTemplateID() *float64 {
	if d == nil {
		return nil
	}
	return d.TemplateID
}

func (d *DocumentFindRequest) GetSource() *QueryParamSource {
	if d == nil {
		return nil
	}
	return d.Source
}

func (d *DocumentFindRequest) GetStatus() *QueryParamStatus {
	if d == nil {
		return nil
	}
	return d.Status
}

func (d *DocumentFindRequest) GetFolderID() *string {
	if d == nil {
		return nil
	}
	return d.FolderID
}

func (d *DocumentFindRequest) GetOrderByColumn() *OrderByColumn {
	if d == nil {
		return nil
	}
	return d.OrderByColumn
}

func (d *DocumentFindRequest) GetOrderByDirection() *OrderByDirection {
	if d == nil {
		return nil
	}
	return d.OrderByDirection
}

type DocumentFindVisibility string

const (
	DocumentFindVisibilityEveryone        DocumentFindVisibility = "EVERYONE"
	DocumentFindVisibilityManagerAndAbove DocumentFindVisibility = "MANAGER_AND_ABOVE"
	DocumentFindVisibilityAdmin           DocumentFindVisibility = "ADMIN"
)

func (e DocumentFindVisibility) ToPointer() *DocumentFindVisibility {
	return &e
}
func (e *DocumentFindVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = DocumentFindVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindVisibility: %v", v)
	}
}

type DataStatus string

const (
	DataStatusDraft     DataStatus = "DRAFT"
	DataStatusPending   DataStatus = "PENDING"
	DataStatusCompleted DataStatus = "COMPLETED"
	DataStatusRejected  DataStatus = "REJECTED"
)

func (e DataStatus) ToPointer() *DataStatus {
	return &e
}
func (e *DataStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "PENDING":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "REJECTED":
		*e = DataStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataStatus: %v", v)
	}
}

type DataSource string

const (
	DataSourceDocument           DataSource = "DOCUMENT"
	DataSourceTemplate           DataSource = "TEMPLATE"
	DataSourceTemplateDirectLink DataSource = "TEMPLATE_DIRECT_LINK"
)

func (e DataSource) ToPointer() *DataSource {
	return &e
}
func (e *DataSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		fallthrough
	case "TEMPLATE_DIRECT_LINK":
		*e = DataSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataSource: %v", v)
	}
}

// DocumentFindGlobalAccessAuth - The type of authentication required for the recipient to access the document.
type DocumentFindGlobalAccessAuth string

const (
	DocumentFindGlobalAccessAuthAccount       DocumentFindGlobalAccessAuth = "ACCOUNT"
	DocumentFindGlobalAccessAuthTwoFactorAuth DocumentFindGlobalAccessAuth = "TWO_FACTOR_AUTH"
)

func (e DocumentFindGlobalAccessAuth) ToPointer() *DocumentFindGlobalAccessAuth {
	return &e
}
func (e *DocumentFindGlobalAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = DocumentFindGlobalAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindGlobalAccessAuth: %v", v)
	}
}

// DocumentFindGlobalActionAuth - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type DocumentFindGlobalActionAuth string

const (
	DocumentFindGlobalActionAuthAccount       DocumentFindGlobalActionAuth = "ACCOUNT"
	DocumentFindGlobalActionAuthPasskey       DocumentFindGlobalActionAuth = "PASSKEY"
	DocumentFindGlobalActionAuthTwoFactorAuth DocumentFindGlobalActionAuth = "TWO_FACTOR_AUTH"
	DocumentFindGlobalActionAuthPassword      DocumentFindGlobalActionAuth = "PASSWORD"
)

func (e DocumentFindGlobalActionAuth) ToPointer() *DocumentFindGlobalActionAuth {
	return &e
}
func (e *DocumentFindGlobalActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		*e = DocumentFindGlobalActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindGlobalActionAuth: %v", v)
	}
}

type DocumentFindAuthOptions struct {
	GlobalAccessAuth []DocumentFindGlobalAccessAuth `json:"globalAccessAuth"`
	GlobalActionAuth []DocumentFindGlobalActionAuth `json:"globalActionAuth"`
}

func (d *DocumentFindAuthOptions) GetGlobalAccessAuth() []DocumentFindGlobalAccessAuth {
	if d == nil {
		return []DocumentFindGlobalAccessAuth{}
	}
	return d.GlobalAccessAuth
}

func (d *DocumentFindAuthOptions) GetGlobalActionAuth() []DocumentFindGlobalActionAuth {
	if d == nil {
		return []DocumentFindGlobalActionAuth{}
	}
	return d.GlobalActionAuth
}

type DocumentFindFormValuesType string

const (
	DocumentFindFormValuesTypeStr     DocumentFindFormValuesType = "str"
	DocumentFindFormValuesTypeBoolean DocumentFindFormValuesType = "boolean"
	DocumentFindFormValuesTypeNumber  DocumentFindFormValuesType = "number"
)

type DocumentFindFormValues struct {
	Str     *string  `queryParam:"inline,name=formValues"`
	Boolean *bool    `queryParam:"inline,name=formValues"`
	Number  *float64 `queryParam:"inline,name=formValues"`

	Type DocumentFindFormValuesType
}

func CreateDocumentFindFormValuesStr(str string) DocumentFindFormValues {
	typ := DocumentFindFormValuesTypeStr

	return DocumentFindFormValues{
		Str:  &str,
		Type: typ,
	}
}

func CreateDocumentFindFormValuesBoolean(boolean bool) DocumentFindFormValues {
	typ := DocumentFindFormValuesTypeBoolean

	return DocumentFindFormValues{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateDocumentFindFormValuesNumber(number float64) DocumentFindFormValues {
	typ := DocumentFindFormValuesTypeNumber

	return DocumentFindFormValues{
		Number: &number,
		Type:   typ,
	}
}

func (u *DocumentFindFormValues) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = DocumentFindFormValuesTypeStr
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = DocumentFindFormValuesTypeBoolean
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = DocumentFindFormValuesTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DocumentFindFormValues", string(data))
}

func (u DocumentFindFormValues) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type DocumentFindFormValues: all fields are null")
}

type DocumentFindUser struct {
	ID    float64 `json:"id"`
	Name  *string `json:"name"`
	Email string  `json:"email"`
}

func (d *DocumentFindUser) GetID() float64 {
	if d == nil {
		return 0.0
	}
	return d.ID
}

func (d *DocumentFindUser) GetName() *string {
	if d == nil {
		return nil
	}
	return d.Name
}

func (d *DocumentFindUser) GetEmail() string {
	if d == nil {
		return ""
	}
	return d.Email
}

type DocumentFindRole string

const (
	DocumentFindRoleCc        DocumentFindRole = "CC"
	DocumentFindRoleSigner    DocumentFindRole = "SIGNER"
	DocumentFindRoleViewer    DocumentFindRole = "VIEWER"
	DocumentFindRoleApprover  DocumentFindRole = "APPROVER"
	DocumentFindRoleAssistant DocumentFindRole = "ASSISTANT"
)

func (e DocumentFindRole) ToPointer() *DocumentFindRole {
	return &e
}
func (e *DocumentFindRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = DocumentFindRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindRole: %v", v)
	}
}

type DocumentFindReadStatus string

const (
	DocumentFindReadStatusNotOpened DocumentFindReadStatus = "NOT_OPENED"
	DocumentFindReadStatusOpened    DocumentFindReadStatus = "OPENED"
)

func (e DocumentFindReadStatus) ToPointer() *DocumentFindReadStatus {
	return &e
}
func (e *DocumentFindReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = DocumentFindReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindReadStatus: %v", v)
	}
}

type DocumentFindSigningStatus string

const (
	DocumentFindSigningStatusNotSigned DocumentFindSigningStatus = "NOT_SIGNED"
	DocumentFindSigningStatusSigned    DocumentFindSigningStatus = "SIGNED"
	DocumentFindSigningStatusRejected  DocumentFindSigningStatus = "REJECTED"
)

func (e DocumentFindSigningStatus) ToPointer() *DocumentFindSigningStatus {
	return &e
}
func (e *DocumentFindSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = DocumentFindSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindSigningStatus: %v", v)
	}
}

type DocumentFindSendStatus string

const (
	DocumentFindSendStatusNotSent DocumentFindSendStatus = "NOT_SENT"
	DocumentFindSendStatusSent    DocumentFindSendStatus = "SENT"
)

func (e DocumentFindSendStatus) ToPointer() *DocumentFindSendStatus {
	return &e
}
func (e *DocumentFindSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = DocumentFindSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindSendStatus: %v", v)
	}
}

// DocumentFindAccessAuth - The type of authentication required for the recipient to access the document.
type DocumentFindAccessAuth string

const (
	DocumentFindAccessAuthAccount       DocumentFindAccessAuth = "ACCOUNT"
	DocumentFindAccessAuthTwoFactorAuth DocumentFindAccessAuth = "TWO_FACTOR_AUTH"
)

func (e DocumentFindAccessAuth) ToPointer() *DocumentFindAccessAuth {
	return &e
}
func (e *DocumentFindAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = DocumentFindAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindAccessAuth: %v", v)
	}
}

// DocumentFindActionAuth - The type of authentication required for the recipient to sign the document.
type DocumentFindActionAuth string

const (
	DocumentFindActionAuthAccount       DocumentFindActionAuth = "ACCOUNT"
	DocumentFindActionAuthPasskey       DocumentFindActionAuth = "PASSKEY"
	DocumentFindActionAuthTwoFactorAuth DocumentFindActionAuth = "TWO_FACTOR_AUTH"
	DocumentFindActionAuthPassword      DocumentFindActionAuth = "PASSWORD"
	DocumentFindActionAuthExplicitNone  DocumentFindActionAuth = "EXPLICIT_NONE"
)

func (e DocumentFindActionAuth) ToPointer() *DocumentFindActionAuth {
	return &e
}
func (e *DocumentFindActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		fallthrough
	case "EXPLICIT_NONE":
		*e = DocumentFindActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindActionAuth: %v", v)
	}
}

type DocumentFindRecipientAuthOptions struct {
	AccessAuth []DocumentFindAccessAuth `json:"accessAuth"`
	ActionAuth []DocumentFindActionAuth `json:"actionAuth"`
}

func (d *DocumentFindRecipientAuthOptions) GetAccessAuth() []DocumentFindAccessAuth {
	if d == nil {
		return []DocumentFindAccessAuth{}
	}
	return d.AccessAuth
}

func (d *DocumentFindRecipientAuthOptions) GetActionAuth() []DocumentFindActionAuth {
	if d == nil {
		return []DocumentFindActionAuth{}
	}
	return d.ActionAuth
}

type DocumentFindRecipient struct {
	EnvelopeID        string                            `json:"envelopeId"`
	Role              DocumentFindRole                  `json:"role"`
	ReadStatus        DocumentFindReadStatus            `json:"readStatus"`
	SigningStatus     DocumentFindSigningStatus         `json:"signingStatus"`
	SendStatus        DocumentFindSendStatus            `json:"sendStatus"`
	ID                float64                           `json:"id"`
	Email             string                            `json:"email"`
	Name              string                            `json:"name"`
	Token             string                            `json:"token"`
	DocumentDeletedAt *string                           `json:"documentDeletedAt"`
	Expired           *string                           `json:"expired"`
	SignedAt          *string                           `json:"signedAt"`
	AuthOptions       *DocumentFindRecipientAuthOptions `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
	DocumentID      *float64 `json:"documentId,omitempty"`
	TemplateID      *float64 `json:"templateId,omitempty"`
}

func (d *DocumentFindRecipient) GetEnvelopeID() string {
	if d == nil {
		return ""
	}
	return d.EnvelopeID
}

func (d *DocumentFindRecipient) GetRole() DocumentFindRole {
	if d == nil {
		return DocumentFindRole("")
	}
	return d.Role
}

func (d *DocumentFindRecipient) GetReadStatus() DocumentFindReadStatus {
	if d == nil {
		return DocumentFindReadStatus("")
	}
	return d.ReadStatus
}

func (d *DocumentFindRecipient) GetSigningStatus() DocumentFindSigningStatus {
	if d == nil {
		return DocumentFindSigningStatus("")
	}
	return d.SigningStatus
}

func (d *DocumentFindRecipient) GetSendStatus() DocumentFindSendStatus {
	if d == nil {
		return DocumentFindSendStatus("")
	}
	return d.SendStatus
}

func (d *DocumentFindRecipient) GetID() float64 {
	if d == nil {
		return 0.0
	}
	return d.ID
}

func (d *DocumentFindRecipient) GetEmail() string {
	if d == nil {
		return ""
	}
	return d.Email
}

func (d *DocumentFindRecipient) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DocumentFindRecipient) GetToken() string {
	if d == nil {
		return ""
	}
	return d.Token
}

func (d *DocumentFindRecipient) GetDocumentDeletedAt() *string {
	if d == nil {
		return nil
	}
	return d.DocumentDeletedAt
}

func (d *DocumentFindRecipient) GetExpired() *string {
	if d == nil {
		return nil
	}
	return d.Expired
}

func (d *DocumentFindRecipient) GetSignedAt() *string {
	if d == nil {
		return nil
	}
	return d.SignedAt
}

func (d *DocumentFindRecipient) GetAuthOptions() *DocumentFindRecipientAuthOptions {
	if d == nil {
		return nil
	}
	return d.AuthOptions
}

func (d *DocumentFindRecipient) GetSigningOrder() *float64 {
	if d == nil {
		return nil
	}
	return d.SigningOrder
}

func (d *DocumentFindRecipient) GetRejectionReason() *string {
	if d == nil {
		return nil
	}
	return d.RejectionReason
}

func (d *DocumentFindRecipient) GetDocumentID() *float64 {
	if d == nil {
		return nil
	}
	return d.DocumentID
}

func (d *DocumentFindRecipient) GetTemplateID() *float64 {
	if d == nil {
		return nil
	}
	return d.TemplateID
}

type DocumentFindTeam struct {
	ID  float64 `json:"id"`
	URL string  `json:"url"`
}

func (d *DocumentFindTeam) GetID() float64 {
	if d == nil {
		return 0.0
	}
	return d.ID
}

func (d *DocumentFindTeam) GetURL() string {
	if d == nil {
		return ""
	}
	return d.URL
}

type DocumentFindData struct {
	Visibility DocumentFindVisibility `json:"visibility"`
	Status     DataStatus             `json:"status"`
	Source     DataSource             `json:"source"`
	ID         float64                `json:"id"`
	// A custom external ID you can use to identify the document.
	ExternalID *string `json:"externalId"`
	// The ID of the user that created this document.
	UserID                  float64                           `json:"userId"`
	AuthOptions             *DocumentFindAuthOptions          `json:"authOptions"`
	FormValues              map[string]DocumentFindFormValues `json:"formValues"`
	Title                   string                            `json:"title"`
	CreatedAt               string                            `json:"createdAt"`
	UpdatedAt               string                            `json:"updatedAt"`
	CompletedAt             *string                           `json:"completedAt"`
	DeletedAt               *string                           `json:"deletedAt"`
	TeamID                  float64                           `json:"teamId"`
	FolderID                *string                           `json:"folderId"`
	UseLegacyFieldInsertion bool                              `json:"useLegacyFieldInsertion"`
	EnvelopeID              string                            `json:"envelopeId"`
	DocumentDataID          *string                           `default:"" json:"documentDataId"`
	// The ID of the template that the document was created from, if any.
	TemplateID *float64                `json:"templateId,omitempty"`
	User       DocumentFindUser        `json:"user"`
	Recipients []DocumentFindRecipient `json:"recipients"`
	Team       *DocumentFindTeam       `json:"team"`
}

func (d DocumentFindData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentFindData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"visibility", "status", "source", "id", "userId", "title", "createdAt", "updatedAt", "teamId", "useLegacyFieldInsertion", "envelopeId", "user", "recipients"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentFindData) GetVisibility() DocumentFindVisibility {
	if d == nil {
		return DocumentFindVisibility("")
	}
	return d.Visibility
}

func (d *DocumentFindData) GetStatus() DataStatus {
	if d == nil {
		return DataStatus("")
	}
	return d.Status
}

func (d *DocumentFindData) GetSource() DataSource {
	if d == nil {
		return DataSource("")
	}
	return d.Source
}

func (d *DocumentFindData) GetID() float64 {
	if d == nil {
		return 0.0
	}
	return d.ID
}

func (d *DocumentFindData) GetExternalID() *string {
	if d == nil {
		return nil
	}
	return d.ExternalID
}

func (d *DocumentFindData) GetUserID() float64 {
	if d == nil {
		return 0.0
	}
	return d.UserID
}

func (d *DocumentFindData) GetAuthOptions() *DocumentFindAuthOptions {
	if d == nil {
		return nil
	}
	return d.AuthOptions
}

func (d *DocumentFindData) GetFormValues() map[string]DocumentFindFormValues {
	if d == nil {
		return nil
	}
	return d.FormValues
}

func (d *DocumentFindData) GetTitle() string {
	if d == nil {
		return ""
	}
	return d.Title
}

func (d *DocumentFindData) GetCreatedAt() string {
	if d == nil {
		return ""
	}
	return d.CreatedAt
}

func (d *DocumentFindData) GetUpdatedAt() string {
	if d == nil {
		return ""
	}
	return d.UpdatedAt
}

func (d *DocumentFindData) GetCompletedAt() *string {
	if d == nil {
		return nil
	}
	return d.CompletedAt
}

func (d *DocumentFindData) GetDeletedAt() *string {
	if d == nil {
		return nil
	}
	return d.DeletedAt
}

func (d *DocumentFindData) GetTeamID() float64 {
	if d == nil {
		return 0.0
	}
	return d.TeamID
}

func (d *DocumentFindData) GetFolderID() *string {
	if d == nil {
		return nil
	}
	return d.FolderID
}

func (d *DocumentFindData) GetUseLegacyFieldInsertion() bool {
	if d == nil {
		return false
	}
	return d.UseLegacyFieldInsertion
}

func (d *DocumentFindData) GetEnvelopeID() string {
	if d == nil {
		return ""
	}
	return d.EnvelopeID
}

func (d *DocumentFindData) GetDocumentDataID() *string {
	if d == nil {
		return nil
	}
	return d.DocumentDataID
}

func (d *DocumentFindData) GetTemplateID() *float64 {
	if d == nil {
		return nil
	}
	return d.TemplateID
}

func (d *DocumentFindData) GetUser() DocumentFindUser {
	if d == nil {
		return DocumentFindUser{}
	}
	return d.User
}

func (d *DocumentFindData) GetRecipients() []DocumentFindRecipient {
	if d == nil {
		return []DocumentFindRecipient{}
	}
	return d.Recipients
}

func (d *DocumentFindData) GetTeam() *DocumentFindTeam {
	if d == nil {
		return nil
	}
	return d.Team
}

// DocumentFindResponseBody - Successful response
type DocumentFindResponseBody struct {
	Data []DocumentFindData `json:"data"`
	// The total number of items.
	Count float64 `json:"count"`
	// The current page number, starts at 1.
	CurrentPage float64 `json:"currentPage"`
	// The number of items per page.
	PerPage float64 `json:"perPage"`
	// The total number of pages.
	TotalPages float64 `json:"totalPages"`
}

func (d *DocumentFindResponseBody) GetData() []DocumentFindData {
	if d == nil {
		return []DocumentFindData{}
	}
	return d.Data
}

func (d *DocumentFindResponseBody) GetCount() float64 {
	if d == nil {
		return 0.0
	}
	return d.Count
}

func (d *DocumentFindResponseBody) GetCurrentPage() float64 {
	if d == nil {
		return 0.0
	}
	return d.CurrentPage
}

func (d *DocumentFindResponseBody) GetPerPage() float64 {
	if d == nil {
		return 0.0
	}
	return d.PerPage
}

func (d *DocumentFindResponseBody) GetTotalPages() float64 {
	if d == nil {
		return 0.0
	}
	return d.TotalPages
}

type DocumentFindResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *DocumentFindResponseBody
}

func (d *DocumentFindResponse) GetHTTPMeta() components.HTTPMetadata {
	if d == nil {
		return components.HTTPMetadata{}
	}
	return d.HTTPMeta
}

func (d *DocumentFindResponse) GetObject() *DocumentFindResponseBody {
	if d == nil {
		return nil
	}
	return d.Object
}
