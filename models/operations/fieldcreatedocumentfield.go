// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11TypeDropdown FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type = "DROPDOWN"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type: %v", v)
	}
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaTypeDropdown FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType = "dropdown"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType: %v", v)
	}
}

type FieldCreateDocumentFieldFieldDocumentsFieldsValues struct {
	Value string `json:"value"`
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta struct {
	Label        *string                                                                       `json:"label,omitempty"`
	Placeholder  *string                                                                       `json:"placeholder,omitempty"`
	Required     *bool                                                                         `json:"required,omitempty"`
	ReadOnly     *bool                                                                         `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType `json:"type"`
	Values       []FieldCreateDocumentFieldFieldDocumentsFieldsValues                          `json:"values,omitempty"`
	DefaultValue *string                                                                       `json:"defaultValue,omitempty"`
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta) GetValues() []FieldCreateDocumentFieldFieldDocumentsFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type Field11 struct {
	Type      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type       `json:"type"`
	FieldMeta *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Field11) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type("")
	}
	return o.Type
}

func (o *Field11) GetFieldMeta() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Field11) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Field11) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Field11) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Field11) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Field11) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Field11) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10TypeCheckbox FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type = "CHECKBOX"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type: %v", v)
	}
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaTypeCheckbox FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType = "checkbox"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType: %v", v)
	}
}

type FieldCreateDocumentFieldFieldValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateDocumentFieldFieldValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldFieldValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateDocumentFieldFieldValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta struct {
	Label            *string                                                                       `json:"label,omitempty"`
	Placeholder      *string                                                                       `json:"placeholder,omitempty"`
	Required         *bool                                                                         `json:"required,omitempty"`
	ReadOnly         *bool                                                                         `json:"readOnly,omitempty"`
	Type             FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType `json:"type"`
	Values           []FieldCreateDocumentFieldFieldValues                                         `json:"values,omitempty"`
	ValidationRule   *string                                                                       `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                      `json:"validationLength,omitempty"`
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta) GetValues() []FieldCreateDocumentFieldFieldValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type Field10 struct {
	Type      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type       `json:"type"`
	FieldMeta *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Field10) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type("")
	}
	return o.Type
}

func (o *Field10) GetFieldMeta() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Field10) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Field10) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Field10) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Field10) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Field10) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Field10) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9TypeRadio FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type = "RADIO"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type: %v", v)
	}
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaTypeRadio FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType = "radio"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType: %v", v)
	}
}

type FieldValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta struct {
	Label       *string                                                                      `json:"label,omitempty"`
	Placeholder *string                                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                                        `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType `json:"type"`
	Values      []FieldValues                                                                `json:"values,omitempty"`
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta) GetValues() []FieldValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type Field9 struct {
	Type      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type       `json:"type"`
	FieldMeta *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Field9) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type("")
	}
	return o.Type
}

func (o *Field9) GetFieldMeta() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Field9) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Field9) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Field9) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Field9) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Field9) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Field9) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8TypeNumber FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type = "NUMBER"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type: %v", v)
	}
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaTypeNumber FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType = "number"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType: %v", v)
	}
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta struct {
	Label        *string                                                                      `json:"label,omitempty"`
	Placeholder  *string                                                                      `json:"placeholder,omitempty"`
	Required     *bool                                                                        `json:"required,omitempty"`
	ReadOnly     *bool                                                                        `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType `json:"type"`
	NumberFormat *string                                                                      `json:"numberFormat,omitempty"`
	Value        *string                                                                      `json:"value,omitempty"`
	MinValue     *float64                                                                     `json:"minValue,omitempty"`
	MaxValue     *float64                                                                     `json:"maxValue,omitempty"`
	FontSize     *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Field8 struct {
	Type      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type       `json:"type"`
	FieldMeta *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Field8) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type("")
	}
	return o.Type
}

func (o *Field8) GetFieldMeta() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Field8) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Field8) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Field8) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Field8) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Field8) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Field8) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7TypeText FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type = "TEXT"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type: %v", v)
	}
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaTypeText FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType = "text"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType: %v", v)
	}
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta struct {
	Label          *string                                                                      `json:"label,omitempty"`
	Placeholder    *string                                                                      `json:"placeholder,omitempty"`
	Required       *bool                                                                        `json:"required,omitempty"`
	ReadOnly       *bool                                                                        `json:"readOnly,omitempty"`
	Type           FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType `json:"type"`
	Text           *string                                                                      `json:"text,omitempty"`
	CharacterLimit *float64                                                                     `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Field7 struct {
	Type      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Field7) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type("")
	}
	return o.Type
}

func (o *Field7) GetFieldMeta() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Field7) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Field7) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Field7) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Field7) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Field7) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Field7) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6TypeDate FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type = "DATE"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type: %v", v)
	}
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaTypeDate FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType = "date"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType: %v", v)
	}
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta struct {
	Label       *string                                                                      `json:"label,omitempty"`
	Placeholder *string                                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                                        `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType `json:"type"`
	FontSize    *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Field6 struct {
	Type      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type `json:"type"`
	FieldMeta *FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta       `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Field6) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type("")
	}
	return o.Type
}

func (o *Field6) GetFieldMeta() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Field6) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Field6) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Field6) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Field6) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Field6) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Field6) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5TypeEmail FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type = "EMAIL"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type: %v", v)
	}
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaTypeEmail FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType = "email"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType: %v", v)
	}
}

type FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta struct {
	Label       *string                                                                      `json:"label,omitempty"`
	Placeholder *string                                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                                        `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType `json:"type"`
	FontSize    *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Field5 struct {
	Type      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type `json:"type"`
	FieldMeta *FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta              `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Field5) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type("")
	}
	return o.Type
}

func (o *Field5) GetFieldMeta() *FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Field5) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Field5) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Field5) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Field5) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Field5) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Field5) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyTypeName FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType = "NAME"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType: %v", v)
	}
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4TypeName FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type = "name"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type: %v", v)
	}
}

type FieldCreateDocumentFieldFieldFieldMeta struct {
	Label       *string                                                             `json:"label,omitempty"`
	Placeholder *string                                                             `json:"placeholder,omitempty"`
	Required    *bool                                                               `json:"required,omitempty"`
	ReadOnly    *bool                                                               `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type `json:"type"`
	FontSize    *float64                                                            `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldFieldFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldFieldMeta) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Field4 struct {
	Type      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType `json:"type"`
	FieldMeta *FieldCreateDocumentFieldFieldFieldMeta                            `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Field4) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType("")
	}
	return o.Type
}

func (o *Field4) GetFieldMeta() *FieldCreateDocumentFieldFieldFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Field4) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Field4) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Field4) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Field4) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Field4) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Field4) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldFieldDocumentsFieldsType string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsTypeInitials FieldCreateDocumentFieldFieldDocumentsFieldsType = "INITIALS"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsType) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsType {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsType: %v", v)
	}
}

type FieldCreateDocumentFieldFieldDocumentsFieldsRequestType string

const (
	FieldCreateDocumentFieldFieldDocumentsFieldsRequestTypeInitials FieldCreateDocumentFieldFieldDocumentsFieldsRequestType = "initials"
)

func (e FieldCreateDocumentFieldFieldDocumentsFieldsRequestType) ToPointer() *FieldCreateDocumentFieldFieldDocumentsFieldsRequestType {
	return &e
}
func (e *FieldCreateDocumentFieldFieldDocumentsFieldsRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateDocumentFieldFieldDocumentsFieldsRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldDocumentsFieldsRequestType: %v", v)
	}
}

type FieldFieldMeta struct {
	Label       *string                                                 `json:"label,omitempty"`
	Placeholder *string                                                 `json:"placeholder,omitempty"`
	Required    *bool                                                   `json:"required,omitempty"`
	ReadOnly    *bool                                                   `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldFieldDocumentsFieldsRequestType `json:"type"`
	FontSize    *float64                                                `json:"fontSize,omitempty"`
}

func (o *FieldFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldFieldMeta) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsRequestType {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsRequestType("")
	}
	return o.Type
}

func (o *FieldFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Field3 struct {
	Type      FieldCreateDocumentFieldFieldDocumentsFieldsType `json:"type"`
	FieldMeta *FieldFieldMeta                                  `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Field3) GetType() FieldCreateDocumentFieldFieldDocumentsFieldsType {
	if o == nil {
		return FieldCreateDocumentFieldFieldDocumentsFieldsType("")
	}
	return o.Type
}

func (o *Field3) GetFieldMeta() *FieldFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Field3) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Field3) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Field3) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Field3) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Field3) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Field3) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldFieldType string

const (
	FieldCreateDocumentFieldFieldTypeFreeSignature FieldCreateDocumentFieldFieldType = "FREE_SIGNATURE"
)

func (e FieldCreateDocumentFieldFieldType) ToPointer() *FieldCreateDocumentFieldFieldType {
	return &e
}
func (e *FieldCreateDocumentFieldFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldCreateDocumentFieldFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldType: %v", v)
	}
}

type Field2 struct {
	Type FieldCreateDocumentFieldFieldType `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Field2) GetType() FieldCreateDocumentFieldFieldType {
	if o == nil {
		return FieldCreateDocumentFieldFieldType("")
	}
	return o.Type
}

func (o *Field2) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Field2) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Field2) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Field2) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Field2) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Field2) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldType string

const (
	FieldTypeSignature FieldType = "SIGNATURE"
)

func (e FieldType) ToPointer() *FieldType {
	return &e
}
func (e *FieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = FieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldType: %v", v)
	}
}

type Field1 struct {
	Type FieldType `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Field1) GetType() FieldType {
	if o == nil {
		return FieldType("")
	}
	return o.Type
}

func (o *Field1) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Field1) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Field1) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Field1) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Field1) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Field1) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldUnionType string

const (
	FieldUnionTypeField1  FieldUnionType = "field_1"
	FieldUnionTypeField2  FieldUnionType = "field_2"
	FieldUnionTypeField3  FieldUnionType = "field_3"
	FieldUnionTypeField4  FieldUnionType = "field_4"
	FieldUnionTypeField5  FieldUnionType = "field_5"
	FieldUnionTypeField6  FieldUnionType = "field_6"
	FieldUnionTypeField7  FieldUnionType = "field_7"
	FieldUnionTypeField8  FieldUnionType = "field_8"
	FieldUnionTypeField9  FieldUnionType = "field_9"
	FieldUnionTypeField10 FieldUnionType = "field_10"
	FieldUnionTypeField11 FieldUnionType = "field_11"
)

type Field struct {
	Field1  *Field1  `queryParam:"inline"`
	Field2  *Field2  `queryParam:"inline"`
	Field3  *Field3  `queryParam:"inline"`
	Field4  *Field4  `queryParam:"inline"`
	Field5  *Field5  `queryParam:"inline"`
	Field6  *Field6  `queryParam:"inline"`
	Field7  *Field7  `queryParam:"inline"`
	Field8  *Field8  `queryParam:"inline"`
	Field9  *Field9  `queryParam:"inline"`
	Field10 *Field10 `queryParam:"inline"`
	Field11 *Field11 `queryParam:"inline"`

	Type FieldUnionType
}

func CreateFieldField1(field1 Field1) Field {
	typ := FieldUnionTypeField1

	return Field{
		Field1: &field1,
		Type:   typ,
	}
}

func CreateFieldField2(field2 Field2) Field {
	typ := FieldUnionTypeField2

	return Field{
		Field2: &field2,
		Type:   typ,
	}
}

func CreateFieldField3(field3 Field3) Field {
	typ := FieldUnionTypeField3

	return Field{
		Field3: &field3,
		Type:   typ,
	}
}

func CreateFieldField4(field4 Field4) Field {
	typ := FieldUnionTypeField4

	return Field{
		Field4: &field4,
		Type:   typ,
	}
}

func CreateFieldField5(field5 Field5) Field {
	typ := FieldUnionTypeField5

	return Field{
		Field5: &field5,
		Type:   typ,
	}
}

func CreateFieldField6(field6 Field6) Field {
	typ := FieldUnionTypeField6

	return Field{
		Field6: &field6,
		Type:   typ,
	}
}

func CreateFieldField7(field7 Field7) Field {
	typ := FieldUnionTypeField7

	return Field{
		Field7: &field7,
		Type:   typ,
	}
}

func CreateFieldField8(field8 Field8) Field {
	typ := FieldUnionTypeField8

	return Field{
		Field8: &field8,
		Type:   typ,
	}
}

func CreateFieldField9(field9 Field9) Field {
	typ := FieldUnionTypeField9

	return Field{
		Field9: &field9,
		Type:   typ,
	}
}

func CreateFieldField10(field10 Field10) Field {
	typ := FieldUnionTypeField10

	return Field{
		Field10: &field10,
		Type:    typ,
	}
}

func CreateFieldField11(field11 Field11) Field {
	typ := FieldUnionTypeField11

	return Field{
		Field11: &field11,
		Type:    typ,
	}
}

func (u *Field) UnmarshalJSON(data []byte) error {

	var field1 Field1 = Field1{}
	if err := utils.UnmarshalJSON(data, &field1, "", true, true); err == nil {
		u.Field1 = &field1
		u.Type = FieldUnionTypeField1
		return nil
	}

	var field2 Field2 = Field2{}
	if err := utils.UnmarshalJSON(data, &field2, "", true, true); err == nil {
		u.Field2 = &field2
		u.Type = FieldUnionTypeField2
		return nil
	}

	var field3 Field3 = Field3{}
	if err := utils.UnmarshalJSON(data, &field3, "", true, true); err == nil {
		u.Field3 = &field3
		u.Type = FieldUnionTypeField3
		return nil
	}

	var field4 Field4 = Field4{}
	if err := utils.UnmarshalJSON(data, &field4, "", true, true); err == nil {
		u.Field4 = &field4
		u.Type = FieldUnionTypeField4
		return nil
	}

	var field5 Field5 = Field5{}
	if err := utils.UnmarshalJSON(data, &field5, "", true, true); err == nil {
		u.Field5 = &field5
		u.Type = FieldUnionTypeField5
		return nil
	}

	var field6 Field6 = Field6{}
	if err := utils.UnmarshalJSON(data, &field6, "", true, true); err == nil {
		u.Field6 = &field6
		u.Type = FieldUnionTypeField6
		return nil
	}

	var field7 Field7 = Field7{}
	if err := utils.UnmarshalJSON(data, &field7, "", true, true); err == nil {
		u.Field7 = &field7
		u.Type = FieldUnionTypeField7
		return nil
	}

	var field8 Field8 = Field8{}
	if err := utils.UnmarshalJSON(data, &field8, "", true, true); err == nil {
		u.Field8 = &field8
		u.Type = FieldUnionTypeField8
		return nil
	}

	var field9 Field9 = Field9{}
	if err := utils.UnmarshalJSON(data, &field9, "", true, true); err == nil {
		u.Field9 = &field9
		u.Type = FieldUnionTypeField9
		return nil
	}

	var field10 Field10 = Field10{}
	if err := utils.UnmarshalJSON(data, &field10, "", true, true); err == nil {
		u.Field10 = &field10
		u.Type = FieldUnionTypeField10
		return nil
	}

	var field11 Field11 = Field11{}
	if err := utils.UnmarshalJSON(data, &field11, "", true, true); err == nil {
		u.Field11 = &field11
		u.Type = FieldUnionTypeField11
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Field", string(data))
}

func (u Field) MarshalJSON() ([]byte, error) {
	if u.Field1 != nil {
		return utils.MarshalJSON(u.Field1, "", true)
	}

	if u.Field2 != nil {
		return utils.MarshalJSON(u.Field2, "", true)
	}

	if u.Field3 != nil {
		return utils.MarshalJSON(u.Field3, "", true)
	}

	if u.Field4 != nil {
		return utils.MarshalJSON(u.Field4, "", true)
	}

	if u.Field5 != nil {
		return utils.MarshalJSON(u.Field5, "", true)
	}

	if u.Field6 != nil {
		return utils.MarshalJSON(u.Field6, "", true)
	}

	if u.Field7 != nil {
		return utils.MarshalJSON(u.Field7, "", true)
	}

	if u.Field8 != nil {
		return utils.MarshalJSON(u.Field8, "", true)
	}

	if u.Field9 != nil {
		return utils.MarshalJSON(u.Field9, "", true)
	}

	if u.Field10 != nil {
		return utils.MarshalJSON(u.Field10, "", true)
	}

	if u.Field11 != nil {
		return utils.MarshalJSON(u.Field11, "", true)
	}

	return nil, errors.New("could not marshal union type Field: all fields are null")
}

type FieldCreateDocumentFieldRequestBody struct {
	DocumentID float64 `json:"documentId"`
	Field      Field   `json:"field"`
}

func (o *FieldCreateDocumentFieldRequestBody) GetDocumentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DocumentID
}

func (o *FieldCreateDocumentFieldRequestBody) GetField() Field {
	if o == nil {
		return Field{}
	}
	return o.Field
}

type FieldCreateDocumentFieldType string

const (
	FieldCreateDocumentFieldTypeSignature     FieldCreateDocumentFieldType = "SIGNATURE"
	FieldCreateDocumentFieldTypeFreeSignature FieldCreateDocumentFieldType = "FREE_SIGNATURE"
	FieldCreateDocumentFieldTypeInitials      FieldCreateDocumentFieldType = "INITIALS"
	FieldCreateDocumentFieldTypeName          FieldCreateDocumentFieldType = "NAME"
	FieldCreateDocumentFieldTypeEmail         FieldCreateDocumentFieldType = "EMAIL"
	FieldCreateDocumentFieldTypeDate          FieldCreateDocumentFieldType = "DATE"
	FieldCreateDocumentFieldTypeText          FieldCreateDocumentFieldType = "TEXT"
	FieldCreateDocumentFieldTypeNumber        FieldCreateDocumentFieldType = "NUMBER"
	FieldCreateDocumentFieldTypeRadio         FieldCreateDocumentFieldType = "RADIO"
	FieldCreateDocumentFieldTypeCheckbox      FieldCreateDocumentFieldType = "CHECKBOX"
	FieldCreateDocumentFieldTypeDropdown      FieldCreateDocumentFieldType = "DROPDOWN"
)

func (e FieldCreateDocumentFieldType) ToPointer() *FieldCreateDocumentFieldType {
	return &e
}
func (e *FieldCreateDocumentFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldCreateDocumentFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldType: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type string

const (
	FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9TypeDropdown FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type = "dropdown"
)

func (e FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type) ToPointer() *FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues struct {
	Value string `json:"value"`
}

func (o *FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldFieldMeta9 struct {
	Label        *string                                                                                     `json:"label,omitempty"`
	Placeholder  *string                                                                                     `json:"placeholder,omitempty"`
	Required     *bool                                                                                       `json:"required,omitempty"`
	ReadOnly     *bool                                                                                       `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type `json:"type"`
	Values       []FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues                            `json:"values,omitempty"`
	DefaultValue *string                                                                                     `json:"defaultValue,omitempty"`
}

func (o *FieldCreateDocumentFieldFieldMeta9) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMeta9) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMeta9) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMeta9) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMeta9) GetType() FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMeta9) GetValues() []FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateDocumentFieldFieldMeta9) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type string

const (
	FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8TypeCheckbox FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type = "checkbox"
)

func (e FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type) ToPointer() *FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldFieldMeta8 struct {
	Label            *string                                                                                     `json:"label,omitempty"`
	Placeholder      *string                                                                                     `json:"placeholder,omitempty"`
	Required         *bool                                                                                       `json:"required,omitempty"`
	ReadOnly         *bool                                                                                       `json:"readOnly,omitempty"`
	Type             FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type `json:"type"`
	Values           []FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues                                    `json:"values,omitempty"`
	ValidationRule   *string                                                                                     `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                                    `json:"validationLength,omitempty"`
}

func (o *FieldCreateDocumentFieldFieldMeta8) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMeta8) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMeta8) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMeta8) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMeta8) GetType() FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMeta8) GetValues() []FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateDocumentFieldFieldMeta8) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldCreateDocumentFieldFieldMeta8) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type string

const (
	FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7TypeRadio FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type = "radio"
)

func (e FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type) ToPointer() *FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMetaValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateDocumentFieldFieldMetaValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldFieldMetaValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateDocumentFieldFieldMetaValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldFieldMeta7 struct {
	Label       *string                                                                                     `json:"label,omitempty"`
	Placeholder *string                                                                                     `json:"placeholder,omitempty"`
	Required    *bool                                                                                       `json:"required,omitempty"`
	ReadOnly    *bool                                                                                       `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type `json:"type"`
	Values      []FieldCreateDocumentFieldFieldMetaValues                                                   `json:"values,omitempty"`
}

func (o *FieldCreateDocumentFieldFieldMeta7) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMeta7) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMeta7) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMeta7) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMeta7) GetType() FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMeta7) GetValues() []FieldCreateDocumentFieldFieldMetaValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType string

const (
	FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyTypeNumber FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType = "number"
)

func (e FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType) ToPointer() *FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMeta6 struct {
	Label        *string                                                                                    `json:"label,omitempty"`
	Placeholder  *string                                                                                    `json:"placeholder,omitempty"`
	Required     *bool                                                                                      `json:"required,omitempty"`
	ReadOnly     *bool                                                                                      `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType `json:"type"`
	NumberFormat *string                                                                                    `json:"numberFormat,omitempty"`
	Value        *string                                                                                    `json:"value,omitempty"`
	MinValue     *float64                                                                                   `json:"minValue,omitempty"`
	MaxValue     *float64                                                                                   `json:"maxValue,omitempty"`
	FontSize     *float64                                                                                   `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldFieldMeta6) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMeta6) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMeta6) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMeta6) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMeta6) GetType() FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMeta6) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldCreateDocumentFieldFieldMeta6) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldCreateDocumentFieldFieldMeta6) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldCreateDocumentFieldFieldMeta6) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldCreateDocumentFieldFieldMeta6) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType string

const (
	FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONTypeText FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType = "text"
)

func (e FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType) ToPointer() *FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMeta5 struct {
	Label          *string                                                                        `json:"label,omitempty"`
	Placeholder    *string                                                                        `json:"placeholder,omitempty"`
	Required       *bool                                                                          `json:"required,omitempty"`
	ReadOnly       *bool                                                                          `json:"readOnly,omitempty"`
	Type           FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType `json:"type"`
	Text           *string                                                                        `json:"text,omitempty"`
	CharacterLimit *float64                                                                       `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldFieldMeta5) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMeta5) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMeta5) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMeta5) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMeta5) GetType() FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMeta5) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldCreateDocumentFieldFieldMeta5) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldCreateDocumentFieldFieldMeta5) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type string

const (
	FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200TypeDate FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type = "date"
)

func (e FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type) ToPointer() *FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMeta4 struct {
	Label       *string                                                         `json:"label,omitempty"`
	Placeholder *string                                                         `json:"placeholder,omitempty"`
	Required    *bool                                                           `json:"required,omitempty"`
	ReadOnly    *bool                                                           `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type `json:"type"`
	FontSize    *float64                                                        `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldFieldMeta4) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMeta4) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMeta4) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMeta4) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMeta4) GetType() FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMeta4) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType string

const (
	FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseTypeEmail FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType = "email"
)

func (e FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType) ToPointer() *FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMeta3 struct {
	Label       *string                                                      `json:"label,omitempty"`
	Placeholder *string                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                        `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType `json:"type"`
	FontSize    *float64                                                     `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldFieldMeta3) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMeta3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMeta3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMeta3) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMeta3) GetType() FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMeta3) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateDocumentFieldFieldMetaDocumentsFieldsType string

const (
	FieldCreateDocumentFieldFieldMetaDocumentsFieldsTypeName FieldCreateDocumentFieldFieldMetaDocumentsFieldsType = "name"
)

func (e FieldCreateDocumentFieldFieldMetaDocumentsFieldsType) ToPointer() *FieldCreateDocumentFieldFieldMetaDocumentsFieldsType {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaDocumentsFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateDocumentFieldFieldMetaDocumentsFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaDocumentsFieldsType: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMeta2 struct {
	Label       *string                                              `json:"label,omitempty"`
	Placeholder *string                                              `json:"placeholder,omitempty"`
	Required    *bool                                                `json:"required,omitempty"`
	ReadOnly    *bool                                                `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldFieldMetaDocumentsFieldsType `json:"type"`
	FontSize    *float64                                             `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldFieldMeta2) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMeta2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMeta2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMeta2) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMeta2) GetType() FieldCreateDocumentFieldFieldMetaDocumentsFieldsType {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaDocumentsFieldsType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMeta2) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateDocumentFieldFieldMetaType string

const (
	FieldCreateDocumentFieldFieldMetaTypeInitials FieldCreateDocumentFieldFieldMetaType = "initials"
)

func (e FieldCreateDocumentFieldFieldMetaType) ToPointer() *FieldCreateDocumentFieldFieldMetaType {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateDocumentFieldFieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaType: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMeta1 struct {
	Label       *string                               `json:"label,omitempty"`
	Placeholder *string                               `json:"placeholder,omitempty"`
	Required    *bool                                 `json:"required,omitempty"`
	ReadOnly    *bool                                 `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldFieldMetaType `json:"type"`
	FontSize    *float64                              `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldFieldMeta1) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMeta1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMeta1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMeta1) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMeta1) GetType() FieldCreateDocumentFieldFieldMetaType {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMeta1) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateDocumentFieldFieldMetaUnionType string

const (
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta1 FieldCreateDocumentFieldFieldMetaUnionType = "field-createDocumentField_fieldMeta_1"
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta2 FieldCreateDocumentFieldFieldMetaUnionType = "field-createDocumentField_fieldMeta_2"
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta3 FieldCreateDocumentFieldFieldMetaUnionType = "field-createDocumentField_fieldMeta_3"
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta4 FieldCreateDocumentFieldFieldMetaUnionType = "field-createDocumentField_fieldMeta_4"
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta5 FieldCreateDocumentFieldFieldMetaUnionType = "field-createDocumentField_fieldMeta_5"
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta6 FieldCreateDocumentFieldFieldMetaUnionType = "field-createDocumentField_fieldMeta_6"
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta7 FieldCreateDocumentFieldFieldMetaUnionType = "field-createDocumentField_fieldMeta_7"
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta8 FieldCreateDocumentFieldFieldMetaUnionType = "field-createDocumentField_fieldMeta_8"
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta9 FieldCreateDocumentFieldFieldMetaUnionType = "field-createDocumentField_fieldMeta_9"
)

type FieldCreateDocumentFieldFieldMeta struct {
	FieldCreateDocumentFieldFieldMeta1 *FieldCreateDocumentFieldFieldMeta1 `queryParam:"inline"`
	FieldCreateDocumentFieldFieldMeta2 *FieldCreateDocumentFieldFieldMeta2 `queryParam:"inline"`
	FieldCreateDocumentFieldFieldMeta3 *FieldCreateDocumentFieldFieldMeta3 `queryParam:"inline"`
	FieldCreateDocumentFieldFieldMeta4 *FieldCreateDocumentFieldFieldMeta4 `queryParam:"inline"`
	FieldCreateDocumentFieldFieldMeta5 *FieldCreateDocumentFieldFieldMeta5 `queryParam:"inline"`
	FieldCreateDocumentFieldFieldMeta6 *FieldCreateDocumentFieldFieldMeta6 `queryParam:"inline"`
	FieldCreateDocumentFieldFieldMeta7 *FieldCreateDocumentFieldFieldMeta7 `queryParam:"inline"`
	FieldCreateDocumentFieldFieldMeta8 *FieldCreateDocumentFieldFieldMeta8 `queryParam:"inline"`
	FieldCreateDocumentFieldFieldMeta9 *FieldCreateDocumentFieldFieldMeta9 `queryParam:"inline"`

	Type FieldCreateDocumentFieldFieldMetaUnionType
}

func CreateFieldCreateDocumentFieldFieldMetaFieldCreateDocumentFieldFieldMeta1(fieldCreateDocumentFieldFieldMeta1 FieldCreateDocumentFieldFieldMeta1) FieldCreateDocumentFieldFieldMeta {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta1

	return FieldCreateDocumentFieldFieldMeta{
		FieldCreateDocumentFieldFieldMeta1: &fieldCreateDocumentFieldFieldMeta1,
		Type:                               typ,
	}
}

func CreateFieldCreateDocumentFieldFieldMetaFieldCreateDocumentFieldFieldMeta2(fieldCreateDocumentFieldFieldMeta2 FieldCreateDocumentFieldFieldMeta2) FieldCreateDocumentFieldFieldMeta {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta2

	return FieldCreateDocumentFieldFieldMeta{
		FieldCreateDocumentFieldFieldMeta2: &fieldCreateDocumentFieldFieldMeta2,
		Type:                               typ,
	}
}

func CreateFieldCreateDocumentFieldFieldMetaFieldCreateDocumentFieldFieldMeta3(fieldCreateDocumentFieldFieldMeta3 FieldCreateDocumentFieldFieldMeta3) FieldCreateDocumentFieldFieldMeta {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta3

	return FieldCreateDocumentFieldFieldMeta{
		FieldCreateDocumentFieldFieldMeta3: &fieldCreateDocumentFieldFieldMeta3,
		Type:                               typ,
	}
}

func CreateFieldCreateDocumentFieldFieldMetaFieldCreateDocumentFieldFieldMeta4(fieldCreateDocumentFieldFieldMeta4 FieldCreateDocumentFieldFieldMeta4) FieldCreateDocumentFieldFieldMeta {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta4

	return FieldCreateDocumentFieldFieldMeta{
		FieldCreateDocumentFieldFieldMeta4: &fieldCreateDocumentFieldFieldMeta4,
		Type:                               typ,
	}
}

func CreateFieldCreateDocumentFieldFieldMetaFieldCreateDocumentFieldFieldMeta5(fieldCreateDocumentFieldFieldMeta5 FieldCreateDocumentFieldFieldMeta5) FieldCreateDocumentFieldFieldMeta {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta5

	return FieldCreateDocumentFieldFieldMeta{
		FieldCreateDocumentFieldFieldMeta5: &fieldCreateDocumentFieldFieldMeta5,
		Type:                               typ,
	}
}

func CreateFieldCreateDocumentFieldFieldMetaFieldCreateDocumentFieldFieldMeta6(fieldCreateDocumentFieldFieldMeta6 FieldCreateDocumentFieldFieldMeta6) FieldCreateDocumentFieldFieldMeta {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta6

	return FieldCreateDocumentFieldFieldMeta{
		FieldCreateDocumentFieldFieldMeta6: &fieldCreateDocumentFieldFieldMeta6,
		Type:                               typ,
	}
}

func CreateFieldCreateDocumentFieldFieldMetaFieldCreateDocumentFieldFieldMeta7(fieldCreateDocumentFieldFieldMeta7 FieldCreateDocumentFieldFieldMeta7) FieldCreateDocumentFieldFieldMeta {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta7

	return FieldCreateDocumentFieldFieldMeta{
		FieldCreateDocumentFieldFieldMeta7: &fieldCreateDocumentFieldFieldMeta7,
		Type:                               typ,
	}
}

func CreateFieldCreateDocumentFieldFieldMetaFieldCreateDocumentFieldFieldMeta8(fieldCreateDocumentFieldFieldMeta8 FieldCreateDocumentFieldFieldMeta8) FieldCreateDocumentFieldFieldMeta {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta8

	return FieldCreateDocumentFieldFieldMeta{
		FieldCreateDocumentFieldFieldMeta8: &fieldCreateDocumentFieldFieldMeta8,
		Type:                               typ,
	}
}

func CreateFieldCreateDocumentFieldFieldMetaFieldCreateDocumentFieldFieldMeta9(fieldCreateDocumentFieldFieldMeta9 FieldCreateDocumentFieldFieldMeta9) FieldCreateDocumentFieldFieldMeta {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta9

	return FieldCreateDocumentFieldFieldMeta{
		FieldCreateDocumentFieldFieldMeta9: &fieldCreateDocumentFieldFieldMeta9,
		Type:                               typ,
	}
}

func (u *FieldCreateDocumentFieldFieldMeta) UnmarshalJSON(data []byte) error {

	var fieldCreateDocumentFieldFieldMeta1 FieldCreateDocumentFieldFieldMeta1 = FieldCreateDocumentFieldFieldMeta1{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMeta1, "", true, true); err == nil {
		u.FieldCreateDocumentFieldFieldMeta1 = &fieldCreateDocumentFieldFieldMeta1
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta1
		return nil
	}

	var fieldCreateDocumentFieldFieldMeta2 FieldCreateDocumentFieldFieldMeta2 = FieldCreateDocumentFieldFieldMeta2{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMeta2, "", true, true); err == nil {
		u.FieldCreateDocumentFieldFieldMeta2 = &fieldCreateDocumentFieldFieldMeta2
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta2
		return nil
	}

	var fieldCreateDocumentFieldFieldMeta3 FieldCreateDocumentFieldFieldMeta3 = FieldCreateDocumentFieldFieldMeta3{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMeta3, "", true, true); err == nil {
		u.FieldCreateDocumentFieldFieldMeta3 = &fieldCreateDocumentFieldFieldMeta3
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta3
		return nil
	}

	var fieldCreateDocumentFieldFieldMeta4 FieldCreateDocumentFieldFieldMeta4 = FieldCreateDocumentFieldFieldMeta4{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMeta4, "", true, true); err == nil {
		u.FieldCreateDocumentFieldFieldMeta4 = &fieldCreateDocumentFieldFieldMeta4
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta4
		return nil
	}

	var fieldCreateDocumentFieldFieldMeta7 FieldCreateDocumentFieldFieldMeta7 = FieldCreateDocumentFieldFieldMeta7{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMeta7, "", true, true); err == nil {
		u.FieldCreateDocumentFieldFieldMeta7 = &fieldCreateDocumentFieldFieldMeta7
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta7
		return nil
	}

	var fieldCreateDocumentFieldFieldMeta9 FieldCreateDocumentFieldFieldMeta9 = FieldCreateDocumentFieldFieldMeta9{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMeta9, "", true, true); err == nil {
		u.FieldCreateDocumentFieldFieldMeta9 = &fieldCreateDocumentFieldFieldMeta9
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta9
		return nil
	}

	var fieldCreateDocumentFieldFieldMeta5 FieldCreateDocumentFieldFieldMeta5 = FieldCreateDocumentFieldFieldMeta5{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMeta5, "", true, true); err == nil {
		u.FieldCreateDocumentFieldFieldMeta5 = &fieldCreateDocumentFieldFieldMeta5
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta5
		return nil
	}

	var fieldCreateDocumentFieldFieldMeta8 FieldCreateDocumentFieldFieldMeta8 = FieldCreateDocumentFieldFieldMeta8{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMeta8, "", true, true); err == nil {
		u.FieldCreateDocumentFieldFieldMeta8 = &fieldCreateDocumentFieldFieldMeta8
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta8
		return nil
	}

	var fieldCreateDocumentFieldFieldMeta6 FieldCreateDocumentFieldFieldMeta6 = FieldCreateDocumentFieldFieldMeta6{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMeta6, "", true, true); err == nil {
		u.FieldCreateDocumentFieldFieldMeta6 = &fieldCreateDocumentFieldFieldMeta6
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMeta6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldCreateDocumentFieldFieldMeta", string(data))
}

func (u FieldCreateDocumentFieldFieldMeta) MarshalJSON() ([]byte, error) {
	if u.FieldCreateDocumentFieldFieldMeta1 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMeta1, "", true)
	}

	if u.FieldCreateDocumentFieldFieldMeta2 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMeta2, "", true)
	}

	if u.FieldCreateDocumentFieldFieldMeta3 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMeta3, "", true)
	}

	if u.FieldCreateDocumentFieldFieldMeta4 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMeta4, "", true)
	}

	if u.FieldCreateDocumentFieldFieldMeta5 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMeta5, "", true)
	}

	if u.FieldCreateDocumentFieldFieldMeta6 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMeta6, "", true)
	}

	if u.FieldCreateDocumentFieldFieldMeta7 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMeta7, "", true)
	}

	if u.FieldCreateDocumentFieldFieldMeta8 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMeta8, "", true)
	}

	if u.FieldCreateDocumentFieldFieldMeta9 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMeta9, "", true)
	}

	return nil, errors.New("could not marshal union type FieldCreateDocumentFieldFieldMeta: all fields are null")
}

// FieldCreateDocumentFieldResponseBody - Successful response
type FieldCreateDocumentFieldResponseBody struct {
	Type        FieldCreateDocumentFieldType `json:"type"`
	ID          int64                        `json:"id"`
	SecondaryID string                       `json:"secondaryId"`
	DocumentID  *int64                       `json:"documentId"`
	TemplateID  *int64                       `json:"templateId"`
	RecipientID int64                        `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                            `json:"page"`
	PositionX  any                                `json:"positionX,omitempty"`
	PositionY  any                                `json:"positionY,omitempty"`
	Width      any                                `json:"width,omitempty"`
	Height     any                                `json:"height,omitempty"`
	CustomText string                             `json:"customText"`
	Inserted   bool                               `json:"inserted"`
	FieldMeta  *FieldCreateDocumentFieldFieldMeta `json:"fieldMeta"`
}

func (o *FieldCreateDocumentFieldResponseBody) GetType() FieldCreateDocumentFieldType {
	if o == nil {
		return FieldCreateDocumentFieldType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldResponseBody) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldResponseBody) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *FieldCreateDocumentFieldResponseBody) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *FieldCreateDocumentFieldResponseBody) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *FieldCreateDocumentFieldResponseBody) GetRecipientID() int64 {
	if o == nil {
		return 0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldResponseBody) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *FieldCreateDocumentFieldResponseBody) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *FieldCreateDocumentFieldResponseBody) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *FieldCreateDocumentFieldResponseBody) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldResponseBody) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *FieldCreateDocumentFieldResponseBody) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *FieldCreateDocumentFieldResponseBody) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *FieldCreateDocumentFieldResponseBody) GetFieldMeta() *FieldCreateDocumentFieldFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

type FieldCreateDocumentFieldResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldCreateDocumentFieldResponseBody
}

func (o *FieldCreateDocumentFieldResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FieldCreateDocumentFieldResponse) GetObject() *FieldCreateDocumentFieldResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
