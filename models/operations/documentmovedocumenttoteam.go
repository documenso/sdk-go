// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type DocumentMoveDocumentToTeamRequestBody struct {
	// The ID of the document to move to a team.
	DocumentID float64 `json:"documentId"`
	// The ID of the team to move the document to.
	TeamID float64 `json:"teamId"`
}

func (o *DocumentMoveDocumentToTeamRequestBody) GetDocumentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DocumentID
}

func (o *DocumentMoveDocumentToTeamRequestBody) GetTeamID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TeamID
}

type DocumentMoveDocumentToTeamVisibility string

const (
	DocumentMoveDocumentToTeamVisibilityEveryone        DocumentMoveDocumentToTeamVisibility = "EVERYONE"
	DocumentMoveDocumentToTeamVisibilityManagerAndAbove DocumentMoveDocumentToTeamVisibility = "MANAGER_AND_ABOVE"
	DocumentMoveDocumentToTeamVisibilityAdmin           DocumentMoveDocumentToTeamVisibility = "ADMIN"
)

func (e DocumentMoveDocumentToTeamVisibility) ToPointer() *DocumentMoveDocumentToTeamVisibility {
	return &e
}
func (e *DocumentMoveDocumentToTeamVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = DocumentMoveDocumentToTeamVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentMoveDocumentToTeamVisibility: %v", v)
	}
}

type DocumentMoveDocumentToTeamStatus string

const (
	DocumentMoveDocumentToTeamStatusDraft     DocumentMoveDocumentToTeamStatus = "DRAFT"
	DocumentMoveDocumentToTeamStatusPending   DocumentMoveDocumentToTeamStatus = "PENDING"
	DocumentMoveDocumentToTeamStatusCompleted DocumentMoveDocumentToTeamStatus = "COMPLETED"
)

func (e DocumentMoveDocumentToTeamStatus) ToPointer() *DocumentMoveDocumentToTeamStatus {
	return &e
}
func (e *DocumentMoveDocumentToTeamStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "PENDING":
		fallthrough
	case "COMPLETED":
		*e = DocumentMoveDocumentToTeamStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentMoveDocumentToTeamStatus: %v", v)
	}
}

type DocumentMoveDocumentToTeamSource string

const (
	DocumentMoveDocumentToTeamSourceDocument           DocumentMoveDocumentToTeamSource = "DOCUMENT"
	DocumentMoveDocumentToTeamSourceTemplate           DocumentMoveDocumentToTeamSource = "TEMPLATE"
	DocumentMoveDocumentToTeamSourceTemplateDirectLink DocumentMoveDocumentToTeamSource = "TEMPLATE_DIRECT_LINK"
)

func (e DocumentMoveDocumentToTeamSource) ToPointer() *DocumentMoveDocumentToTeamSource {
	return &e
}
func (e *DocumentMoveDocumentToTeamSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		fallthrough
	case "TEMPLATE_DIRECT_LINK":
		*e = DocumentMoveDocumentToTeamSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentMoveDocumentToTeamSource: %v", v)
	}
}

// DocumentMoveDocumentToTeamGlobalAccessAuth - The type of authentication required for the recipient to access the document.
type DocumentMoveDocumentToTeamGlobalAccessAuth string

const (
	DocumentMoveDocumentToTeamGlobalAccessAuthAccount DocumentMoveDocumentToTeamGlobalAccessAuth = "ACCOUNT"
)

func (e DocumentMoveDocumentToTeamGlobalAccessAuth) ToPointer() *DocumentMoveDocumentToTeamGlobalAccessAuth {
	return &e
}
func (e *DocumentMoveDocumentToTeamGlobalAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = DocumentMoveDocumentToTeamGlobalAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentMoveDocumentToTeamGlobalAccessAuth: %v", v)
	}
}

// DocumentMoveDocumentToTeamGlobalActionAuth - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type DocumentMoveDocumentToTeamGlobalActionAuth string

const (
	DocumentMoveDocumentToTeamGlobalActionAuthAccount       DocumentMoveDocumentToTeamGlobalActionAuth = "ACCOUNT"
	DocumentMoveDocumentToTeamGlobalActionAuthPasskey       DocumentMoveDocumentToTeamGlobalActionAuth = "PASSKEY"
	DocumentMoveDocumentToTeamGlobalActionAuthTwoFactorAuth DocumentMoveDocumentToTeamGlobalActionAuth = "TWO_FACTOR_AUTH"
)

func (e DocumentMoveDocumentToTeamGlobalActionAuth) ToPointer() *DocumentMoveDocumentToTeamGlobalActionAuth {
	return &e
}
func (e *DocumentMoveDocumentToTeamGlobalActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = DocumentMoveDocumentToTeamGlobalActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentMoveDocumentToTeamGlobalActionAuth: %v", v)
	}
}

type DocumentMoveDocumentToTeamAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	GlobalAccessAuth *DocumentMoveDocumentToTeamGlobalAccessAuth `json:"globalAccessAuth"`
	// The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
	GlobalActionAuth *DocumentMoveDocumentToTeamGlobalActionAuth `json:"globalActionAuth"`
}

func (o *DocumentMoveDocumentToTeamAuthOptions) GetGlobalAccessAuth() *DocumentMoveDocumentToTeamGlobalAccessAuth {
	if o == nil {
		return nil
	}
	return o.GlobalAccessAuth
}

func (o *DocumentMoveDocumentToTeamAuthOptions) GetGlobalActionAuth() *DocumentMoveDocumentToTeamGlobalActionAuth {
	if o == nil {
		return nil
	}
	return o.GlobalActionAuth
}

type DocumentMoveDocumentToTeamFormValuesType string

const (
	DocumentMoveDocumentToTeamFormValuesTypeStr     DocumentMoveDocumentToTeamFormValuesType = "str"
	DocumentMoveDocumentToTeamFormValuesTypeBoolean DocumentMoveDocumentToTeamFormValuesType = "boolean"
	DocumentMoveDocumentToTeamFormValuesTypeNumber  DocumentMoveDocumentToTeamFormValuesType = "number"
)

type DocumentMoveDocumentToTeamFormValues struct {
	Str     *string  `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`
	Number  *float64 `queryParam:"inline"`

	Type DocumentMoveDocumentToTeamFormValuesType
}

func CreateDocumentMoveDocumentToTeamFormValuesStr(str string) DocumentMoveDocumentToTeamFormValues {
	typ := DocumentMoveDocumentToTeamFormValuesTypeStr

	return DocumentMoveDocumentToTeamFormValues{
		Str:  &str,
		Type: typ,
	}
}

func CreateDocumentMoveDocumentToTeamFormValuesBoolean(boolean bool) DocumentMoveDocumentToTeamFormValues {
	typ := DocumentMoveDocumentToTeamFormValuesTypeBoolean

	return DocumentMoveDocumentToTeamFormValues{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateDocumentMoveDocumentToTeamFormValuesNumber(number float64) DocumentMoveDocumentToTeamFormValues {
	typ := DocumentMoveDocumentToTeamFormValuesTypeNumber

	return DocumentMoveDocumentToTeamFormValues{
		Number: &number,
		Type:   typ,
	}
}

func (u *DocumentMoveDocumentToTeamFormValues) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = DocumentMoveDocumentToTeamFormValuesTypeStr
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = DocumentMoveDocumentToTeamFormValuesTypeBoolean
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = DocumentMoveDocumentToTeamFormValuesTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DocumentMoveDocumentToTeamFormValues", string(data))
}

func (u DocumentMoveDocumentToTeamFormValues) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type DocumentMoveDocumentToTeamFormValues: all fields are null")
}

// DocumentMoveDocumentToTeamResponseBody - Successful response
type DocumentMoveDocumentToTeamResponseBody struct {
	Visibility DocumentMoveDocumentToTeamVisibility `json:"visibility"`
	Status     DocumentMoveDocumentToTeamStatus     `json:"status"`
	Source     DocumentMoveDocumentToTeamSource     `json:"source"`
	ID         int64                                `json:"id"`
	// A custom external ID you can use to identify the document.
	ExternalID *string `json:"externalId"`
	// The ID of the user that created this document.
	UserID         float64                                         `json:"userId"`
	AuthOptions    *DocumentMoveDocumentToTeamAuthOptions          `json:"authOptions"`
	FormValues     map[string]DocumentMoveDocumentToTeamFormValues `json:"formValues"`
	Title          string                                          `json:"title"`
	DocumentDataID string                                          `json:"documentDataId"`
	CreatedAt      string                                          `json:"createdAt"`
	UpdatedAt      string                                          `json:"updatedAt"`
	CompletedAt    *string                                         `json:"completedAt"`
	DeletedAt      *string                                         `json:"deletedAt"`
	TeamID         *int64                                          `json:"teamId"`
	TemplateID     *int64                                          `json:"templateId"`
}

func (o *DocumentMoveDocumentToTeamResponseBody) GetVisibility() DocumentMoveDocumentToTeamVisibility {
	if o == nil {
		return DocumentMoveDocumentToTeamVisibility("")
	}
	return o.Visibility
}

func (o *DocumentMoveDocumentToTeamResponseBody) GetStatus() DocumentMoveDocumentToTeamStatus {
	if o == nil {
		return DocumentMoveDocumentToTeamStatus("")
	}
	return o.Status
}

func (o *DocumentMoveDocumentToTeamResponseBody) GetSource() DocumentMoveDocumentToTeamSource {
	if o == nil {
		return DocumentMoveDocumentToTeamSource("")
	}
	return o.Source
}

func (o *DocumentMoveDocumentToTeamResponseBody) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *DocumentMoveDocumentToTeamResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *DocumentMoveDocumentToTeamResponseBody) GetUserID() float64 {
	if o == nil {
		return 0.0
	}
	return o.UserID
}

func (o *DocumentMoveDocumentToTeamResponseBody) GetAuthOptions() *DocumentMoveDocumentToTeamAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *DocumentMoveDocumentToTeamResponseBody) GetFormValues() map[string]DocumentMoveDocumentToTeamFormValues {
	if o == nil {
		return nil
	}
	return o.FormValues
}

func (o *DocumentMoveDocumentToTeamResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *DocumentMoveDocumentToTeamResponseBody) GetDocumentDataID() string {
	if o == nil {
		return ""
	}
	return o.DocumentDataID
}

func (o *DocumentMoveDocumentToTeamResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *DocumentMoveDocumentToTeamResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *DocumentMoveDocumentToTeamResponseBody) GetCompletedAt() *string {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *DocumentMoveDocumentToTeamResponseBody) GetDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *DocumentMoveDocumentToTeamResponseBody) GetTeamID() *int64 {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *DocumentMoveDocumentToTeamResponseBody) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

type DocumentMoveDocumentToTeamResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *DocumentMoveDocumentToTeamResponseBody
}

func (o *DocumentMoveDocumentToTeamResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *DocumentMoveDocumentToTeamResponse) GetObject() *DocumentMoveDocumentToTeamResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
