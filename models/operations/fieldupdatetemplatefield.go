// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldUpdateTemplateFieldTypeDropdownRequest1 string

const (
	FieldUpdateTemplateFieldTypeDropdownRequest1Dropdown FieldUpdateTemplateFieldTypeDropdownRequest1 = "DROPDOWN"
)

func (e FieldUpdateTemplateFieldTypeDropdownRequest1) ToPointer() *FieldUpdateTemplateFieldTypeDropdownRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeDropdownRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = FieldUpdateTemplateFieldTypeDropdownRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeDropdownRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldTypeDropdownRequest2 string

const (
	FieldUpdateTemplateFieldTypeDropdownRequest2Dropdown FieldUpdateTemplateFieldTypeDropdownRequest2 = "dropdown"
)

func (e FieldUpdateTemplateFieldTypeDropdownRequest2) ToPointer() *FieldUpdateTemplateFieldTypeDropdownRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeDropdownRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldUpdateTemplateFieldTypeDropdownRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeDropdownRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldValueDropdown struct {
	Value string `json:"value"`
}

func (f FieldUpdateTemplateFieldValueDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldValueDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldValueDropdown) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldFieldMetaDropdownRequest struct {
	Label        *string                                      `json:"label,omitempty"`
	Placeholder  *string                                      `json:"placeholder,omitempty"`
	Required     *bool                                        `json:"required,omitempty"`
	ReadOnly     *bool                                        `json:"readOnly,omitempty"`
	Type         FieldUpdateTemplateFieldTypeDropdownRequest2 `json:"type"`
	Values       []FieldUpdateTemplateFieldValueDropdown      `json:"values,omitempty"`
	DefaultValue *string                                      `json:"defaultValue,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaDropdownRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaDropdownRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaDropdownRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaDropdownRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaDropdownRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaDropdownRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaDropdownRequest) GetType() FieldUpdateTemplateFieldTypeDropdownRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeDropdownRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaDropdownRequest) GetValues() []FieldUpdateTemplateFieldValueDropdown {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateTemplateFieldFieldMetaDropdownRequest) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldUpdateTemplateFieldFieldDropdown struct {
	Type      FieldUpdateTemplateFieldTypeDropdownRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldMetaDropdownRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldDropdown) GetType() FieldUpdateTemplateFieldTypeDropdownRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeDropdownRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldDropdown) GetFieldMeta() *FieldUpdateTemplateFieldFieldMetaDropdownRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldFieldDropdown) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldFieldDropdown) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldFieldDropdown) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldFieldDropdown) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldFieldDropdown) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldFieldDropdown) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldTypeCheckboxRequest1 string

const (
	FieldUpdateTemplateFieldTypeCheckboxRequest1Checkbox FieldUpdateTemplateFieldTypeCheckboxRequest1 = "CHECKBOX"
)

func (e FieldUpdateTemplateFieldTypeCheckboxRequest1) ToPointer() *FieldUpdateTemplateFieldTypeCheckboxRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeCheckboxRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = FieldUpdateTemplateFieldTypeCheckboxRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeCheckboxRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldTypeCheckboxRequest2 string

const (
	FieldUpdateTemplateFieldTypeCheckboxRequest2Checkbox FieldUpdateTemplateFieldTypeCheckboxRequest2 = "checkbox"
)

func (e FieldUpdateTemplateFieldTypeCheckboxRequest2) ToPointer() *FieldUpdateTemplateFieldTypeCheckboxRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeCheckboxRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldUpdateTemplateFieldTypeCheckboxRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeCheckboxRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldValueCheckbox struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldUpdateTemplateFieldValueCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldValueCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldValueCheckbox) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldValueCheckbox) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateTemplateFieldValueCheckbox) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldFieldMetaCheckboxRequest struct {
	Label            *string                                      `json:"label,omitempty"`
	Placeholder      *string                                      `json:"placeholder,omitempty"`
	Required         *bool                                        `json:"required,omitempty"`
	ReadOnly         *bool                                        `json:"readOnly,omitempty"`
	Type             FieldUpdateTemplateFieldTypeCheckboxRequest2 `json:"type"`
	Values           []FieldUpdateTemplateFieldValueCheckbox      `json:"values,omitempty"`
	ValidationRule   *string                                      `json:"validationRule,omitempty"`
	ValidationLength *float64                                     `json:"validationLength,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaCheckboxRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaCheckboxRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaCheckboxRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaCheckboxRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaCheckboxRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaCheckboxRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaCheckboxRequest) GetType() FieldUpdateTemplateFieldTypeCheckboxRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeCheckboxRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaCheckboxRequest) GetValues() []FieldUpdateTemplateFieldValueCheckbox {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateTemplateFieldFieldMetaCheckboxRequest) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldUpdateTemplateFieldFieldMetaCheckboxRequest) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldUpdateTemplateFieldFieldCheckbox struct {
	Type      FieldUpdateTemplateFieldTypeCheckboxRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldMetaCheckboxRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldCheckbox) GetType() FieldUpdateTemplateFieldTypeCheckboxRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeCheckboxRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldCheckbox) GetFieldMeta() *FieldUpdateTemplateFieldFieldMetaCheckboxRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldFieldCheckbox) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldFieldCheckbox) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldFieldCheckbox) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldFieldCheckbox) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldFieldCheckbox) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldFieldCheckbox) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldTypeRadioRequest1 string

const (
	FieldUpdateTemplateFieldTypeRadioRequest1Radio FieldUpdateTemplateFieldTypeRadioRequest1 = "RADIO"
)

func (e FieldUpdateTemplateFieldTypeRadioRequest1) ToPointer() *FieldUpdateTemplateFieldTypeRadioRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeRadioRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = FieldUpdateTemplateFieldTypeRadioRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeRadioRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldTypeRadioRequest2 string

const (
	FieldUpdateTemplateFieldTypeRadioRequest2Radio FieldUpdateTemplateFieldTypeRadioRequest2 = "radio"
)

func (e FieldUpdateTemplateFieldTypeRadioRequest2) ToPointer() *FieldUpdateTemplateFieldTypeRadioRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeRadioRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldUpdateTemplateFieldTypeRadioRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeRadioRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldValueRadio struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldUpdateTemplateFieldValueRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldValueRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldValueRadio) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldValueRadio) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateTemplateFieldValueRadio) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldFieldMetaRadioRequest struct {
	Label       *string                                   `json:"label,omitempty"`
	Placeholder *string                                   `json:"placeholder,omitempty"`
	Required    *bool                                     `json:"required,omitempty"`
	ReadOnly    *bool                                     `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldTypeRadioRequest2 `json:"type"`
	Values      []FieldUpdateTemplateFieldValueRadio      `json:"values,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaRadioRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaRadioRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaRadioRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaRadioRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaRadioRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaRadioRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaRadioRequest) GetType() FieldUpdateTemplateFieldTypeRadioRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeRadioRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaRadioRequest) GetValues() []FieldUpdateTemplateFieldValueRadio {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldUpdateTemplateFieldFieldRadio struct {
	Type      FieldUpdateTemplateFieldTypeRadioRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldMetaRadioRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldRadio) GetType() FieldUpdateTemplateFieldTypeRadioRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeRadioRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldRadio) GetFieldMeta() *FieldUpdateTemplateFieldFieldMetaRadioRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldFieldRadio) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldFieldRadio) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldFieldRadio) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldFieldRadio) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldFieldRadio) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldFieldRadio) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldTypeNumberRequest1 string

const (
	FieldUpdateTemplateFieldTypeNumberRequest1Number FieldUpdateTemplateFieldTypeNumberRequest1 = "NUMBER"
)

func (e FieldUpdateTemplateFieldTypeNumberRequest1) ToPointer() *FieldUpdateTemplateFieldTypeNumberRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeNumberRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = FieldUpdateTemplateFieldTypeNumberRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeNumberRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldTypeNumberRequest2 string

const (
	FieldUpdateTemplateFieldTypeNumberRequest2Number FieldUpdateTemplateFieldTypeNumberRequest2 = "number"
)

func (e FieldUpdateTemplateFieldTypeNumberRequest2) ToPointer() *FieldUpdateTemplateFieldTypeNumberRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeNumberRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldUpdateTemplateFieldTypeNumberRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeNumberRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldTextAlignNumber string

const (
	FieldUpdateTemplateFieldTextAlignNumberLeft   FieldUpdateTemplateFieldTextAlignNumber = "left"
	FieldUpdateTemplateFieldTextAlignNumberCenter FieldUpdateTemplateFieldTextAlignNumber = "center"
	FieldUpdateTemplateFieldTextAlignNumberRight  FieldUpdateTemplateFieldTextAlignNumber = "right"
)

func (e FieldUpdateTemplateFieldTextAlignNumber) ToPointer() *FieldUpdateTemplateFieldTextAlignNumber {
	return &e
}
func (e *FieldUpdateTemplateFieldTextAlignNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldTextAlignNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTextAlignNumber: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMetaNumberRequest struct {
	Label        *string                                    `json:"label,omitempty"`
	Placeholder  *string                                    `json:"placeholder,omitempty"`
	Required     *bool                                      `json:"required,omitempty"`
	ReadOnly     *bool                                      `json:"readOnly,omitempty"`
	Type         FieldUpdateTemplateFieldTypeNumberRequest2 `json:"type"`
	NumberFormat *string                                    `json:"numberFormat,omitempty"`
	Value        *string                                    `json:"value,omitempty"`
	MinValue     *float64                                   `json:"minValue,omitempty"`
	MaxValue     *float64                                   `json:"maxValue,omitempty"`
	FontSize     *float64                                   `json:"fontSize,omitempty"`
	TextAlign    *FieldUpdateTemplateFieldTextAlignNumber   `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaNumberRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaNumberRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberRequest) GetType() FieldUpdateTemplateFieldTypeNumberRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeNumberRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberRequest) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberRequest) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberRequest) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberRequest) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberRequest) GetTextAlign() *FieldUpdateTemplateFieldTextAlignNumber {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldFieldNumber struct {
	Type      FieldUpdateTemplateFieldTypeNumberRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldMetaNumberRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldNumber) GetType() FieldUpdateTemplateFieldTypeNumberRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeNumberRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldNumber) GetFieldMeta() *FieldUpdateTemplateFieldFieldMetaNumberRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldFieldNumber) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldFieldNumber) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldFieldNumber) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldFieldNumber) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldFieldNumber) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldFieldNumber) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldTypeTextRequest1 string

const (
	FieldUpdateTemplateFieldTypeTextRequest1Text FieldUpdateTemplateFieldTypeTextRequest1 = "TEXT"
)

func (e FieldUpdateTemplateFieldTypeTextRequest1) ToPointer() *FieldUpdateTemplateFieldTypeTextRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeTextRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = FieldUpdateTemplateFieldTypeTextRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeTextRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldTypeTextRequest2 string

const (
	FieldUpdateTemplateFieldTypeTextRequest2Text FieldUpdateTemplateFieldTypeTextRequest2 = "text"
)

func (e FieldUpdateTemplateFieldTypeTextRequest2) ToPointer() *FieldUpdateTemplateFieldTypeTextRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeTextRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldUpdateTemplateFieldTypeTextRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeTextRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldTextAlignText string

const (
	FieldUpdateTemplateFieldTextAlignTextLeft   FieldUpdateTemplateFieldTextAlignText = "left"
	FieldUpdateTemplateFieldTextAlignTextCenter FieldUpdateTemplateFieldTextAlignText = "center"
	FieldUpdateTemplateFieldTextAlignTextRight  FieldUpdateTemplateFieldTextAlignText = "right"
)

func (e FieldUpdateTemplateFieldTextAlignText) ToPointer() *FieldUpdateTemplateFieldTextAlignText {
	return &e
}
func (e *FieldUpdateTemplateFieldTextAlignText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldTextAlignText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTextAlignText: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMetaTextRequest struct {
	Label          *string                                  `json:"label,omitempty"`
	Placeholder    *string                                  `json:"placeholder,omitempty"`
	Required       *bool                                    `json:"required,omitempty"`
	ReadOnly       *bool                                    `json:"readOnly,omitempty"`
	Type           FieldUpdateTemplateFieldTypeTextRequest2 `json:"type"`
	Text           *string                                  `json:"text,omitempty"`
	CharacterLimit *float64                                 `json:"characterLimit,omitempty"`
	FontSize       *float64                                 `json:"fontSize,omitempty"`
	TextAlign      *FieldUpdateTemplateFieldTextAlignText   `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaTextRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaTextRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaTextRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaTextRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaTextRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaTextRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaTextRequest) GetType() FieldUpdateTemplateFieldTypeTextRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeTextRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaTextRequest) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldUpdateTemplateFieldFieldMetaTextRequest) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldUpdateTemplateFieldFieldMetaTextRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldFieldMetaTextRequest) GetTextAlign() *FieldUpdateTemplateFieldTextAlignText {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldFieldText struct {
	Type      FieldUpdateTemplateFieldTypeTextRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldMetaTextRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldText) GetType() FieldUpdateTemplateFieldTypeTextRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeTextRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldText) GetFieldMeta() *FieldUpdateTemplateFieldFieldMetaTextRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldFieldText) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldFieldText) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldFieldText) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldFieldText) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldFieldText) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldFieldText) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldTypeDateRequest1 string

const (
	FieldUpdateTemplateFieldTypeDateRequest1Date FieldUpdateTemplateFieldTypeDateRequest1 = "DATE"
)

func (e FieldUpdateTemplateFieldTypeDateRequest1) ToPointer() *FieldUpdateTemplateFieldTypeDateRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeDateRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = FieldUpdateTemplateFieldTypeDateRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeDateRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldTypeDateRequest2 string

const (
	FieldUpdateTemplateFieldTypeDateRequest2Date FieldUpdateTemplateFieldTypeDateRequest2 = "date"
)

func (e FieldUpdateTemplateFieldTypeDateRequest2) ToPointer() *FieldUpdateTemplateFieldTypeDateRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeDateRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldUpdateTemplateFieldTypeDateRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeDateRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldTextAlignDate string

const (
	FieldUpdateTemplateFieldTextAlignDateLeft   FieldUpdateTemplateFieldTextAlignDate = "left"
	FieldUpdateTemplateFieldTextAlignDateCenter FieldUpdateTemplateFieldTextAlignDate = "center"
	FieldUpdateTemplateFieldTextAlignDateRight  FieldUpdateTemplateFieldTextAlignDate = "right"
)

func (e FieldUpdateTemplateFieldTextAlignDate) ToPointer() *FieldUpdateTemplateFieldTextAlignDate {
	return &e
}
func (e *FieldUpdateTemplateFieldTextAlignDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldTextAlignDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTextAlignDate: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMetaDateRequest struct {
	Label       *string                                  `json:"label,omitempty"`
	Placeholder *string                                  `json:"placeholder,omitempty"`
	Required    *bool                                    `json:"required,omitempty"`
	ReadOnly    *bool                                    `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldTypeDateRequest2 `json:"type"`
	FontSize    *float64                                 `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateTemplateFieldTextAlignDate   `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaDateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaDateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaDateRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaDateRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaDateRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaDateRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaDateRequest) GetType() FieldUpdateTemplateFieldTypeDateRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeDateRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaDateRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldFieldMetaDateRequest) GetTextAlign() *FieldUpdateTemplateFieldTextAlignDate {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldFieldDate struct {
	Type      FieldUpdateTemplateFieldTypeDateRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldMetaDateRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldDate) GetType() FieldUpdateTemplateFieldTypeDateRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeDateRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldDate) GetFieldMeta() *FieldUpdateTemplateFieldFieldMetaDateRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldFieldDate) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldFieldDate) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldFieldDate) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldFieldDate) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldFieldDate) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldFieldDate) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldTypeEmailRequest1 string

const (
	FieldUpdateTemplateFieldTypeEmailRequest1Email FieldUpdateTemplateFieldTypeEmailRequest1 = "EMAIL"
)

func (e FieldUpdateTemplateFieldTypeEmailRequest1) ToPointer() *FieldUpdateTemplateFieldTypeEmailRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeEmailRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = FieldUpdateTemplateFieldTypeEmailRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeEmailRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldTypeEmailRequest2 string

const (
	FieldUpdateTemplateFieldTypeEmailRequest2Email FieldUpdateTemplateFieldTypeEmailRequest2 = "email"
)

func (e FieldUpdateTemplateFieldTypeEmailRequest2) ToPointer() *FieldUpdateTemplateFieldTypeEmailRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeEmailRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldUpdateTemplateFieldTypeEmailRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeEmailRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldTextAlignEmail string

const (
	FieldUpdateTemplateFieldTextAlignEmailLeft   FieldUpdateTemplateFieldTextAlignEmail = "left"
	FieldUpdateTemplateFieldTextAlignEmailCenter FieldUpdateTemplateFieldTextAlignEmail = "center"
	FieldUpdateTemplateFieldTextAlignEmailRight  FieldUpdateTemplateFieldTextAlignEmail = "right"
)

func (e FieldUpdateTemplateFieldTextAlignEmail) ToPointer() *FieldUpdateTemplateFieldTextAlignEmail {
	return &e
}
func (e *FieldUpdateTemplateFieldTextAlignEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldTextAlignEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTextAlignEmail: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMetaEmailRequest struct {
	Label       *string                                   `json:"label,omitempty"`
	Placeholder *string                                   `json:"placeholder,omitempty"`
	Required    *bool                                     `json:"required,omitempty"`
	ReadOnly    *bool                                     `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldTypeEmailRequest2 `json:"type"`
	FontSize    *float64                                  `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateTemplateFieldTextAlignEmail   `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaEmailRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaEmailRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaEmailRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaEmailRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaEmailRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaEmailRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaEmailRequest) GetType() FieldUpdateTemplateFieldTypeEmailRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeEmailRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaEmailRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldFieldMetaEmailRequest) GetTextAlign() *FieldUpdateTemplateFieldTextAlignEmail {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldFieldEmail struct {
	Type      FieldUpdateTemplateFieldTypeEmailRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldMetaEmailRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldEmail) GetType() FieldUpdateTemplateFieldTypeEmailRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeEmailRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldEmail) GetFieldMeta() *FieldUpdateTemplateFieldFieldMetaEmailRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldFieldEmail) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldFieldEmail) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldFieldEmail) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldFieldEmail) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldFieldEmail) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldFieldEmail) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldTypeNameRequest1 string

const (
	FieldUpdateTemplateFieldTypeNameRequest1Name FieldUpdateTemplateFieldTypeNameRequest1 = "NAME"
)

func (e FieldUpdateTemplateFieldTypeNameRequest1) ToPointer() *FieldUpdateTemplateFieldTypeNameRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeNameRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = FieldUpdateTemplateFieldTypeNameRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeNameRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldTypeNameRequest2 string

const (
	FieldUpdateTemplateFieldTypeNameRequest2Name FieldUpdateTemplateFieldTypeNameRequest2 = "name"
)

func (e FieldUpdateTemplateFieldTypeNameRequest2) ToPointer() *FieldUpdateTemplateFieldTypeNameRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeNameRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldUpdateTemplateFieldTypeNameRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeNameRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldTextAlignName string

const (
	FieldUpdateTemplateFieldTextAlignNameLeft   FieldUpdateTemplateFieldTextAlignName = "left"
	FieldUpdateTemplateFieldTextAlignNameCenter FieldUpdateTemplateFieldTextAlignName = "center"
	FieldUpdateTemplateFieldTextAlignNameRight  FieldUpdateTemplateFieldTextAlignName = "right"
)

func (e FieldUpdateTemplateFieldTextAlignName) ToPointer() *FieldUpdateTemplateFieldTextAlignName {
	return &e
}
func (e *FieldUpdateTemplateFieldTextAlignName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldTextAlignName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTextAlignName: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMetaNameRequest struct {
	Label       *string                                  `json:"label,omitempty"`
	Placeholder *string                                  `json:"placeholder,omitempty"`
	Required    *bool                                    `json:"required,omitempty"`
	ReadOnly    *bool                                    `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldTypeNameRequest2 `json:"type"`
	FontSize    *float64                                 `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateTemplateFieldTextAlignName   `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaNameRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaNameRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaNameRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaNameRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaNameRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaNameRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaNameRequest) GetType() FieldUpdateTemplateFieldTypeNameRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeNameRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaNameRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldFieldMetaNameRequest) GetTextAlign() *FieldUpdateTemplateFieldTextAlignName {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldFieldName struct {
	Type      FieldUpdateTemplateFieldTypeNameRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldMetaNameRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldName) GetType() FieldUpdateTemplateFieldTypeNameRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeNameRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldName) GetFieldMeta() *FieldUpdateTemplateFieldFieldMetaNameRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldFieldName) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldFieldName) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldFieldName) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldFieldName) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldFieldName) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldFieldName) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldTypeInitialsRequest1 string

const (
	FieldUpdateTemplateFieldTypeInitialsRequest1Initials FieldUpdateTemplateFieldTypeInitialsRequest1 = "INITIALS"
)

func (e FieldUpdateTemplateFieldTypeInitialsRequest1) ToPointer() *FieldUpdateTemplateFieldTypeInitialsRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeInitialsRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = FieldUpdateTemplateFieldTypeInitialsRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeInitialsRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldTypeInitialsRequest2 string

const (
	FieldUpdateTemplateFieldTypeInitialsRequest2Initials FieldUpdateTemplateFieldTypeInitialsRequest2 = "initials"
)

func (e FieldUpdateTemplateFieldTypeInitialsRequest2) ToPointer() *FieldUpdateTemplateFieldTypeInitialsRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeInitialsRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldUpdateTemplateFieldTypeInitialsRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeInitialsRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldTextAlignInitials string

const (
	FieldUpdateTemplateFieldTextAlignInitialsLeft   FieldUpdateTemplateFieldTextAlignInitials = "left"
	FieldUpdateTemplateFieldTextAlignInitialsCenter FieldUpdateTemplateFieldTextAlignInitials = "center"
	FieldUpdateTemplateFieldTextAlignInitialsRight  FieldUpdateTemplateFieldTextAlignInitials = "right"
)

func (e FieldUpdateTemplateFieldTextAlignInitials) ToPointer() *FieldUpdateTemplateFieldTextAlignInitials {
	return &e
}
func (e *FieldUpdateTemplateFieldTextAlignInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldTextAlignInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTextAlignInitials: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMetaInitialsRequest struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldTypeInitialsRequest2 `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateTemplateFieldTextAlignInitials   `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaInitialsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaInitialsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaInitialsRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaInitialsRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaInitialsRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaInitialsRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaInitialsRequest) GetType() FieldUpdateTemplateFieldTypeInitialsRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeInitialsRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaInitialsRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldFieldMetaInitialsRequest) GetTextAlign() *FieldUpdateTemplateFieldTextAlignInitials {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldFieldInitials struct {
	Type      FieldUpdateTemplateFieldTypeInitialsRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldMetaInitialsRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldInitials) GetType() FieldUpdateTemplateFieldTypeInitialsRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldTypeInitialsRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldInitials) GetFieldMeta() *FieldUpdateTemplateFieldFieldMetaInitialsRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldFieldInitials) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldFieldInitials) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldFieldInitials) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldFieldInitials) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldFieldInitials) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldFieldInitials) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldTypeFreeSignature string

const (
	FieldUpdateTemplateFieldTypeFreeSignatureFreeSignature FieldUpdateTemplateFieldTypeFreeSignature = "FREE_SIGNATURE"
)

func (e FieldUpdateTemplateFieldTypeFreeSignature) ToPointer() *FieldUpdateTemplateFieldTypeFreeSignature {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeFreeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldUpdateTemplateFieldTypeFreeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeFreeSignature: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldFreeSignature struct {
	Type FieldUpdateTemplateFieldTypeFreeSignature `json:"type"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldFreeSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldFreeSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldFreeSignature) GetType() FieldUpdateTemplateFieldTypeFreeSignature {
	if o == nil {
		return FieldUpdateTemplateFieldTypeFreeSignature("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldFreeSignature) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldFieldFreeSignature) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldFieldFreeSignature) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldFieldFreeSignature) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldFieldFreeSignature) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldFieldFreeSignature) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldTypeSignature string

const (
	FieldUpdateTemplateFieldTypeSignatureSignature FieldUpdateTemplateFieldTypeSignature = "SIGNATURE"
)

func (e FieldUpdateTemplateFieldTypeSignature) ToPointer() *FieldUpdateTemplateFieldTypeSignature {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = FieldUpdateTemplateFieldTypeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeSignature: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldSignature struct {
	Type FieldUpdateTemplateFieldTypeSignature `json:"type"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldSignature) GetType() FieldUpdateTemplateFieldTypeSignature {
	if o == nil {
		return FieldUpdateTemplateFieldTypeSignature("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldSignature) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldFieldSignature) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldFieldSignature) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldFieldSignature) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldFieldSignature) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldFieldSignature) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldFieldUnionType string

const (
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldSignature     FieldUpdateTemplateFieldFieldUnionType = "field_updateTemplateField_field_Signature"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldFreeSignature FieldUpdateTemplateFieldFieldUnionType = "field_updateTemplateField_field_FreeSignature"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldInitials      FieldUpdateTemplateFieldFieldUnionType = "field_updateTemplateField_field_Initials"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldName          FieldUpdateTemplateFieldFieldUnionType = "field_updateTemplateField_field_Name"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldEmail         FieldUpdateTemplateFieldFieldUnionType = "field_updateTemplateField_field_Email"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldDate          FieldUpdateTemplateFieldFieldUnionType = "field_updateTemplateField_field_Date"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldText          FieldUpdateTemplateFieldFieldUnionType = "field_updateTemplateField_field_Text"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldNumber        FieldUpdateTemplateFieldFieldUnionType = "field_updateTemplateField_field_Number"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldRadio         FieldUpdateTemplateFieldFieldUnionType = "field_updateTemplateField_field_Radio"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldCheckbox      FieldUpdateTemplateFieldFieldUnionType = "field_updateTemplateField_field_Checkbox"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldDropdown      FieldUpdateTemplateFieldFieldUnionType = "field_updateTemplateField_field_Dropdown"
)

type FieldUpdateTemplateFieldFieldUnion struct {
	FieldUpdateTemplateFieldFieldSignature     *FieldUpdateTemplateFieldFieldSignature     `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldFreeSignature *FieldUpdateTemplateFieldFieldFreeSignature `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldInitials      *FieldUpdateTemplateFieldFieldInitials      `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldName          *FieldUpdateTemplateFieldFieldName          `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldEmail         *FieldUpdateTemplateFieldFieldEmail         `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldDate          *FieldUpdateTemplateFieldFieldDate          `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldText          *FieldUpdateTemplateFieldFieldText          `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldNumber        *FieldUpdateTemplateFieldFieldNumber        `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldRadio         *FieldUpdateTemplateFieldFieldRadio         `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldCheckbox      *FieldUpdateTemplateFieldFieldCheckbox      `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldDropdown      *FieldUpdateTemplateFieldFieldDropdown      `queryParam:"inline"`

	Type FieldUpdateTemplateFieldFieldUnionType
}

func CreateFieldUpdateTemplateFieldFieldUnionFieldUpdateTemplateFieldFieldSignature(fieldUpdateTemplateFieldFieldSignature FieldUpdateTemplateFieldFieldSignature) FieldUpdateTemplateFieldFieldUnion {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldSignature

	return FieldUpdateTemplateFieldFieldUnion{
		FieldUpdateTemplateFieldFieldSignature: &fieldUpdateTemplateFieldFieldSignature,
		Type:                                   typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldUnionFieldUpdateTemplateFieldFieldFreeSignature(fieldUpdateTemplateFieldFieldFreeSignature FieldUpdateTemplateFieldFieldFreeSignature) FieldUpdateTemplateFieldFieldUnion {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldFreeSignature

	return FieldUpdateTemplateFieldFieldUnion{
		FieldUpdateTemplateFieldFieldFreeSignature: &fieldUpdateTemplateFieldFieldFreeSignature,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldUnionFieldUpdateTemplateFieldFieldInitials(fieldUpdateTemplateFieldFieldInitials FieldUpdateTemplateFieldFieldInitials) FieldUpdateTemplateFieldFieldUnion {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldInitials

	return FieldUpdateTemplateFieldFieldUnion{
		FieldUpdateTemplateFieldFieldInitials: &fieldUpdateTemplateFieldFieldInitials,
		Type:                                  typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldUnionFieldUpdateTemplateFieldFieldName(fieldUpdateTemplateFieldFieldName FieldUpdateTemplateFieldFieldName) FieldUpdateTemplateFieldFieldUnion {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldName

	return FieldUpdateTemplateFieldFieldUnion{
		FieldUpdateTemplateFieldFieldName: &fieldUpdateTemplateFieldFieldName,
		Type:                              typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldUnionFieldUpdateTemplateFieldFieldEmail(fieldUpdateTemplateFieldFieldEmail FieldUpdateTemplateFieldFieldEmail) FieldUpdateTemplateFieldFieldUnion {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldEmail

	return FieldUpdateTemplateFieldFieldUnion{
		FieldUpdateTemplateFieldFieldEmail: &fieldUpdateTemplateFieldFieldEmail,
		Type:                               typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldUnionFieldUpdateTemplateFieldFieldDate(fieldUpdateTemplateFieldFieldDate FieldUpdateTemplateFieldFieldDate) FieldUpdateTemplateFieldFieldUnion {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldDate

	return FieldUpdateTemplateFieldFieldUnion{
		FieldUpdateTemplateFieldFieldDate: &fieldUpdateTemplateFieldFieldDate,
		Type:                              typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldUnionFieldUpdateTemplateFieldFieldText(fieldUpdateTemplateFieldFieldText FieldUpdateTemplateFieldFieldText) FieldUpdateTemplateFieldFieldUnion {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldText

	return FieldUpdateTemplateFieldFieldUnion{
		FieldUpdateTemplateFieldFieldText: &fieldUpdateTemplateFieldFieldText,
		Type:                              typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldUnionFieldUpdateTemplateFieldFieldNumber(fieldUpdateTemplateFieldFieldNumber FieldUpdateTemplateFieldFieldNumber) FieldUpdateTemplateFieldFieldUnion {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldNumber

	return FieldUpdateTemplateFieldFieldUnion{
		FieldUpdateTemplateFieldFieldNumber: &fieldUpdateTemplateFieldFieldNumber,
		Type:                                typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldUnionFieldUpdateTemplateFieldFieldRadio(fieldUpdateTemplateFieldFieldRadio FieldUpdateTemplateFieldFieldRadio) FieldUpdateTemplateFieldFieldUnion {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldRadio

	return FieldUpdateTemplateFieldFieldUnion{
		FieldUpdateTemplateFieldFieldRadio: &fieldUpdateTemplateFieldFieldRadio,
		Type:                               typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldUnionFieldUpdateTemplateFieldFieldCheckbox(fieldUpdateTemplateFieldFieldCheckbox FieldUpdateTemplateFieldFieldCheckbox) FieldUpdateTemplateFieldFieldUnion {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldCheckbox

	return FieldUpdateTemplateFieldFieldUnion{
		FieldUpdateTemplateFieldFieldCheckbox: &fieldUpdateTemplateFieldFieldCheckbox,
		Type:                                  typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldUnionFieldUpdateTemplateFieldFieldDropdown(fieldUpdateTemplateFieldFieldDropdown FieldUpdateTemplateFieldFieldDropdown) FieldUpdateTemplateFieldFieldUnion {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldDropdown

	return FieldUpdateTemplateFieldFieldUnion{
		FieldUpdateTemplateFieldFieldDropdown: &fieldUpdateTemplateFieldFieldDropdown,
		Type:                                  typ,
	}
}

func (u *FieldUpdateTemplateFieldFieldUnion) UnmarshalJSON(data []byte) error {

	var fieldUpdateTemplateFieldFieldSignature FieldUpdateTemplateFieldFieldSignature = FieldUpdateTemplateFieldFieldSignature{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldSignature, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldSignature = &fieldUpdateTemplateFieldFieldSignature
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldSignature
		return nil
	}

	var fieldUpdateTemplateFieldFieldFreeSignature FieldUpdateTemplateFieldFieldFreeSignature = FieldUpdateTemplateFieldFieldFreeSignature{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldFreeSignature, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldFreeSignature = &fieldUpdateTemplateFieldFieldFreeSignature
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldFreeSignature
		return nil
	}

	var fieldUpdateTemplateFieldFieldInitials FieldUpdateTemplateFieldFieldInitials = FieldUpdateTemplateFieldFieldInitials{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldInitials, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldInitials = &fieldUpdateTemplateFieldFieldInitials
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldInitials
		return nil
	}

	var fieldUpdateTemplateFieldFieldName FieldUpdateTemplateFieldFieldName = FieldUpdateTemplateFieldFieldName{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldName, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldName = &fieldUpdateTemplateFieldFieldName
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldName
		return nil
	}

	var fieldUpdateTemplateFieldFieldEmail FieldUpdateTemplateFieldFieldEmail = FieldUpdateTemplateFieldFieldEmail{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldEmail, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldEmail = &fieldUpdateTemplateFieldFieldEmail
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldEmail
		return nil
	}

	var fieldUpdateTemplateFieldFieldDate FieldUpdateTemplateFieldFieldDate = FieldUpdateTemplateFieldFieldDate{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldDate, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldDate = &fieldUpdateTemplateFieldFieldDate
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldDate
		return nil
	}

	var fieldUpdateTemplateFieldFieldText FieldUpdateTemplateFieldFieldText = FieldUpdateTemplateFieldFieldText{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldText, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldText = &fieldUpdateTemplateFieldFieldText
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldText
		return nil
	}

	var fieldUpdateTemplateFieldFieldNumber FieldUpdateTemplateFieldFieldNumber = FieldUpdateTemplateFieldFieldNumber{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldNumber, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldNumber = &fieldUpdateTemplateFieldFieldNumber
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldNumber
		return nil
	}

	var fieldUpdateTemplateFieldFieldRadio FieldUpdateTemplateFieldFieldRadio = FieldUpdateTemplateFieldFieldRadio{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldRadio, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldRadio = &fieldUpdateTemplateFieldFieldRadio
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldRadio
		return nil
	}

	var fieldUpdateTemplateFieldFieldCheckbox FieldUpdateTemplateFieldFieldCheckbox = FieldUpdateTemplateFieldFieldCheckbox{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldCheckbox, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldCheckbox = &fieldUpdateTemplateFieldFieldCheckbox
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldCheckbox
		return nil
	}

	var fieldUpdateTemplateFieldFieldDropdown FieldUpdateTemplateFieldFieldDropdown = FieldUpdateTemplateFieldFieldDropdown{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldDropdown, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldDropdown = &fieldUpdateTemplateFieldFieldDropdown
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldFieldDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldUpdateTemplateFieldFieldUnion", string(data))
}

func (u FieldUpdateTemplateFieldFieldUnion) MarshalJSON() ([]byte, error) {
	if u.FieldUpdateTemplateFieldFieldSignature != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldSignature, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldFreeSignature != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldFreeSignature, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldInitials != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldInitials, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldName != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldName, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldEmail != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldEmail, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldDate != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldDate, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldText != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldText, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldNumber != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldNumber, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldRadio != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldRadio, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldCheckbox != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldCheckbox, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldDropdown != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type FieldUpdateTemplateFieldFieldUnion: all fields are null")
}

type FieldUpdateTemplateFieldRequest struct {
	TemplateID float64                            `json:"templateId"`
	Field      FieldUpdateTemplateFieldFieldUnion `json:"field"`
}

func (o *FieldUpdateTemplateFieldRequest) GetTemplateID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TemplateID
}

func (o *FieldUpdateTemplateFieldRequest) GetField() FieldUpdateTemplateFieldFieldUnion {
	if o == nil {
		return FieldUpdateTemplateFieldFieldUnion{}
	}
	return o.Field
}

type FieldUpdateTemplateFieldTypeResponse string

const (
	FieldUpdateTemplateFieldTypeResponseSignature     FieldUpdateTemplateFieldTypeResponse = "SIGNATURE"
	FieldUpdateTemplateFieldTypeResponseFreeSignature FieldUpdateTemplateFieldTypeResponse = "FREE_SIGNATURE"
	FieldUpdateTemplateFieldTypeResponseInitials      FieldUpdateTemplateFieldTypeResponse = "INITIALS"
	FieldUpdateTemplateFieldTypeResponseName          FieldUpdateTemplateFieldTypeResponse = "NAME"
	FieldUpdateTemplateFieldTypeResponseEmail         FieldUpdateTemplateFieldTypeResponse = "EMAIL"
	FieldUpdateTemplateFieldTypeResponseDate          FieldUpdateTemplateFieldTypeResponse = "DATE"
	FieldUpdateTemplateFieldTypeResponseText          FieldUpdateTemplateFieldTypeResponse = "TEXT"
	FieldUpdateTemplateFieldTypeResponseNumber        FieldUpdateTemplateFieldTypeResponse = "NUMBER"
	FieldUpdateTemplateFieldTypeResponseRadio         FieldUpdateTemplateFieldTypeResponse = "RADIO"
	FieldUpdateTemplateFieldTypeResponseCheckbox      FieldUpdateTemplateFieldTypeResponse = "CHECKBOX"
	FieldUpdateTemplateFieldTypeResponseDropdown      FieldUpdateTemplateFieldTypeResponse = "DROPDOWN"
)

func (e FieldUpdateTemplateFieldTypeResponse) ToPointer() *FieldUpdateTemplateFieldTypeResponse {
	return &e
}
func (e *FieldUpdateTemplateFieldTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldUpdateTemplateFieldTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTypeResponse: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMetaTypeDropdown string

const (
	FieldUpdateTemplateFieldFieldMetaTypeDropdownDropdown FieldUpdateTemplateFieldFieldMetaTypeDropdown = "dropdown"
)

func (e FieldUpdateTemplateFieldFieldMetaTypeDropdown) ToPointer() *FieldUpdateTemplateFieldFieldMetaTypeDropdown {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldUpdateTemplateFieldFieldMetaTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaTypeDropdown: %v", v)
	}
}

type FieldUpdateTemplateFieldValueResponse3 struct {
	Value string `json:"value"`
}

func (f FieldUpdateTemplateFieldValueResponse3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldValueResponse3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldValueResponse3) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldFieldMetaDropdownResponse struct {
	Label        *string                                       `json:"label,omitempty"`
	Placeholder  *string                                       `json:"placeholder,omitempty"`
	Required     *bool                                         `json:"required,omitempty"`
	ReadOnly     *bool                                         `json:"readOnly,omitempty"`
	Type         FieldUpdateTemplateFieldFieldMetaTypeDropdown `json:"type"`
	Values       []FieldUpdateTemplateFieldValueResponse3      `json:"values,omitempty"`
	DefaultValue *string                                       `json:"defaultValue,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaDropdownResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaDropdownResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaDropdownResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaDropdownResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaDropdownResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaDropdownResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaDropdownResponse) GetType() FieldUpdateTemplateFieldFieldMetaTypeDropdown {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaTypeDropdown("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaDropdownResponse) GetValues() []FieldUpdateTemplateFieldValueResponse3 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateTemplateFieldFieldMetaDropdownResponse) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldUpdateTemplateFieldFieldMetaTypeCheckbox string

const (
	FieldUpdateTemplateFieldFieldMetaTypeCheckboxCheckbox FieldUpdateTemplateFieldFieldMetaTypeCheckbox = "checkbox"
)

func (e FieldUpdateTemplateFieldFieldMetaTypeCheckbox) ToPointer() *FieldUpdateTemplateFieldFieldMetaTypeCheckbox {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldUpdateTemplateFieldFieldMetaTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaTypeCheckbox: %v", v)
	}
}

type FieldUpdateTemplateFieldValueResponse2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldUpdateTemplateFieldValueResponse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldValueResponse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldValueResponse2) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldValueResponse2) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateTemplateFieldValueResponse2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldFieldMetaCheckboxResponse struct {
	Label            *string                                       `json:"label,omitempty"`
	Placeholder      *string                                       `json:"placeholder,omitempty"`
	Required         *bool                                         `json:"required,omitempty"`
	ReadOnly         *bool                                         `json:"readOnly,omitempty"`
	Type             FieldUpdateTemplateFieldFieldMetaTypeCheckbox `json:"type"`
	Values           []FieldUpdateTemplateFieldValueResponse2      `json:"values,omitempty"`
	ValidationRule   *string                                       `json:"validationRule,omitempty"`
	ValidationLength *float64                                      `json:"validationLength,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaCheckboxResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaCheckboxResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaCheckboxResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaCheckboxResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaCheckboxResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaCheckboxResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaCheckboxResponse) GetType() FieldUpdateTemplateFieldFieldMetaTypeCheckbox {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaTypeCheckbox("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaCheckboxResponse) GetValues() []FieldUpdateTemplateFieldValueResponse2 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateTemplateFieldFieldMetaCheckboxResponse) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldUpdateTemplateFieldFieldMetaCheckboxResponse) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldUpdateTemplateFieldFieldMetaTypeRadio string

const (
	FieldUpdateTemplateFieldFieldMetaTypeRadioRadio FieldUpdateTemplateFieldFieldMetaTypeRadio = "radio"
)

func (e FieldUpdateTemplateFieldFieldMetaTypeRadio) ToPointer() *FieldUpdateTemplateFieldFieldMetaTypeRadio {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldUpdateTemplateFieldFieldMetaTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaTypeRadio: %v", v)
	}
}

type FieldUpdateTemplateFieldValueResponse1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldUpdateTemplateFieldValueResponse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldValueResponse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldValueResponse1) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldValueResponse1) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateTemplateFieldValueResponse1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldFieldMetaRadioResponse struct {
	Label       *string                                    `json:"label,omitempty"`
	Placeholder *string                                    `json:"placeholder,omitempty"`
	Required    *bool                                      `json:"required,omitempty"`
	ReadOnly    *bool                                      `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldFieldMetaTypeRadio `json:"type"`
	Values      []FieldUpdateTemplateFieldValueResponse1   `json:"values,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaRadioResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaRadioResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaRadioResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaRadioResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaRadioResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaRadioResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaRadioResponse) GetType() FieldUpdateTemplateFieldFieldMetaTypeRadio {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaTypeRadio("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaRadioResponse) GetValues() []FieldUpdateTemplateFieldValueResponse1 {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldUpdateTemplateFieldFieldMetaTypeNumber string

const (
	FieldUpdateTemplateFieldFieldMetaTypeNumberNumber FieldUpdateTemplateFieldFieldMetaTypeNumber = "number"
)

func (e FieldUpdateTemplateFieldFieldMetaTypeNumber) ToPointer() *FieldUpdateTemplateFieldFieldMetaTypeNumber {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldUpdateTemplateFieldFieldMetaTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaTypeNumber: %v", v)
	}
}

type FieldUpdateTemplateFieldTextAlignResponse6 string

const (
	FieldUpdateTemplateFieldTextAlignResponse6Left   FieldUpdateTemplateFieldTextAlignResponse6 = "left"
	FieldUpdateTemplateFieldTextAlignResponse6Center FieldUpdateTemplateFieldTextAlignResponse6 = "center"
	FieldUpdateTemplateFieldTextAlignResponse6Right  FieldUpdateTemplateFieldTextAlignResponse6 = "right"
)

func (e FieldUpdateTemplateFieldTextAlignResponse6) ToPointer() *FieldUpdateTemplateFieldTextAlignResponse6 {
	return &e
}
func (e *FieldUpdateTemplateFieldTextAlignResponse6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldTextAlignResponse6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTextAlignResponse6: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMetaNumberResponse struct {
	Label        *string                                     `json:"label,omitempty"`
	Placeholder  *string                                     `json:"placeholder,omitempty"`
	Required     *bool                                       `json:"required,omitempty"`
	ReadOnly     *bool                                       `json:"readOnly,omitempty"`
	Type         FieldUpdateTemplateFieldFieldMetaTypeNumber `json:"type"`
	NumberFormat *string                                     `json:"numberFormat,omitempty"`
	Value        *string                                     `json:"value,omitempty"`
	MinValue     *float64                                    `json:"minValue,omitempty"`
	MaxValue     *float64                                    `json:"maxValue,omitempty"`
	FontSize     *float64                                    `json:"fontSize,omitempty"`
	TextAlign    *FieldUpdateTemplateFieldTextAlignResponse6 `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaNumberResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaNumberResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberResponse) GetType() FieldUpdateTemplateFieldFieldMetaTypeNumber {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaTypeNumber("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberResponse) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberResponse) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberResponse) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberResponse) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldFieldMetaNumberResponse) GetTextAlign() *FieldUpdateTemplateFieldTextAlignResponse6 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldFieldMetaTypeText string

const (
	FieldUpdateTemplateFieldFieldMetaTypeTextText FieldUpdateTemplateFieldFieldMetaTypeText = "text"
)

func (e FieldUpdateTemplateFieldFieldMetaTypeText) ToPointer() *FieldUpdateTemplateFieldFieldMetaTypeText {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldUpdateTemplateFieldFieldMetaTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaTypeText: %v", v)
	}
}

type FieldUpdateTemplateFieldTextAlignResponse5 string

const (
	FieldUpdateTemplateFieldTextAlignResponse5Left   FieldUpdateTemplateFieldTextAlignResponse5 = "left"
	FieldUpdateTemplateFieldTextAlignResponse5Center FieldUpdateTemplateFieldTextAlignResponse5 = "center"
	FieldUpdateTemplateFieldTextAlignResponse5Right  FieldUpdateTemplateFieldTextAlignResponse5 = "right"
)

func (e FieldUpdateTemplateFieldTextAlignResponse5) ToPointer() *FieldUpdateTemplateFieldTextAlignResponse5 {
	return &e
}
func (e *FieldUpdateTemplateFieldTextAlignResponse5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldTextAlignResponse5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTextAlignResponse5: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMetaTextResponse struct {
	Label          *string                                     `json:"label,omitempty"`
	Placeholder    *string                                     `json:"placeholder,omitempty"`
	Required       *bool                                       `json:"required,omitempty"`
	ReadOnly       *bool                                       `json:"readOnly,omitempty"`
	Type           FieldUpdateTemplateFieldFieldMetaTypeText   `json:"type"`
	Text           *string                                     `json:"text,omitempty"`
	CharacterLimit *float64                                    `json:"characterLimit,omitempty"`
	FontSize       *float64                                    `json:"fontSize,omitempty"`
	TextAlign      *FieldUpdateTemplateFieldTextAlignResponse5 `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaTextResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaTextResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaTextResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaTextResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaTextResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaTextResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaTextResponse) GetType() FieldUpdateTemplateFieldFieldMetaTypeText {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaTypeText("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaTextResponse) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldUpdateTemplateFieldFieldMetaTextResponse) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldUpdateTemplateFieldFieldMetaTextResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldFieldMetaTextResponse) GetTextAlign() *FieldUpdateTemplateFieldTextAlignResponse5 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldFieldMetaTypeDate string

const (
	FieldUpdateTemplateFieldFieldMetaTypeDateDate FieldUpdateTemplateFieldFieldMetaTypeDate = "date"
)

func (e FieldUpdateTemplateFieldFieldMetaTypeDate) ToPointer() *FieldUpdateTemplateFieldFieldMetaTypeDate {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldUpdateTemplateFieldFieldMetaTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaTypeDate: %v", v)
	}
}

type FieldUpdateTemplateFieldTextAlignResponse4 string

const (
	FieldUpdateTemplateFieldTextAlignResponse4Left   FieldUpdateTemplateFieldTextAlignResponse4 = "left"
	FieldUpdateTemplateFieldTextAlignResponse4Center FieldUpdateTemplateFieldTextAlignResponse4 = "center"
	FieldUpdateTemplateFieldTextAlignResponse4Right  FieldUpdateTemplateFieldTextAlignResponse4 = "right"
)

func (e FieldUpdateTemplateFieldTextAlignResponse4) ToPointer() *FieldUpdateTemplateFieldTextAlignResponse4 {
	return &e
}
func (e *FieldUpdateTemplateFieldTextAlignResponse4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldTextAlignResponse4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTextAlignResponse4: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMetaDateResponse struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldFieldMetaTypeDate   `json:"type"`
	FontSize    *float64                                    `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateTemplateFieldTextAlignResponse4 `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaDateResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaDateResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaDateResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaDateResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaDateResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaDateResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaDateResponse) GetType() FieldUpdateTemplateFieldFieldMetaTypeDate {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaTypeDate("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaDateResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldFieldMetaDateResponse) GetTextAlign() *FieldUpdateTemplateFieldTextAlignResponse4 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldFieldMetaTypeEmail string

const (
	FieldUpdateTemplateFieldFieldMetaTypeEmailEmail FieldUpdateTemplateFieldFieldMetaTypeEmail = "email"
)

func (e FieldUpdateTemplateFieldFieldMetaTypeEmail) ToPointer() *FieldUpdateTemplateFieldFieldMetaTypeEmail {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldUpdateTemplateFieldFieldMetaTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaTypeEmail: %v", v)
	}
}

type FieldUpdateTemplateFieldTextAlignResponse3 string

const (
	FieldUpdateTemplateFieldTextAlignResponse3Left   FieldUpdateTemplateFieldTextAlignResponse3 = "left"
	FieldUpdateTemplateFieldTextAlignResponse3Center FieldUpdateTemplateFieldTextAlignResponse3 = "center"
	FieldUpdateTemplateFieldTextAlignResponse3Right  FieldUpdateTemplateFieldTextAlignResponse3 = "right"
)

func (e FieldUpdateTemplateFieldTextAlignResponse3) ToPointer() *FieldUpdateTemplateFieldTextAlignResponse3 {
	return &e
}
func (e *FieldUpdateTemplateFieldTextAlignResponse3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldTextAlignResponse3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTextAlignResponse3: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMetaEmailResponse struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldFieldMetaTypeEmail  `json:"type"`
	FontSize    *float64                                    `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateTemplateFieldTextAlignResponse3 `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaEmailResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaEmailResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaEmailResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaEmailResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaEmailResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaEmailResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaEmailResponse) GetType() FieldUpdateTemplateFieldFieldMetaTypeEmail {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaTypeEmail("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaEmailResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldFieldMetaEmailResponse) GetTextAlign() *FieldUpdateTemplateFieldTextAlignResponse3 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldFieldMetaTypeName string

const (
	FieldUpdateTemplateFieldFieldMetaTypeNameName FieldUpdateTemplateFieldFieldMetaTypeName = "name"
)

func (e FieldUpdateTemplateFieldFieldMetaTypeName) ToPointer() *FieldUpdateTemplateFieldFieldMetaTypeName {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldUpdateTemplateFieldFieldMetaTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaTypeName: %v", v)
	}
}

type FieldUpdateTemplateFieldTextAlignResponse2 string

const (
	FieldUpdateTemplateFieldTextAlignResponse2Left   FieldUpdateTemplateFieldTextAlignResponse2 = "left"
	FieldUpdateTemplateFieldTextAlignResponse2Center FieldUpdateTemplateFieldTextAlignResponse2 = "center"
	FieldUpdateTemplateFieldTextAlignResponse2Right  FieldUpdateTemplateFieldTextAlignResponse2 = "right"
)

func (e FieldUpdateTemplateFieldTextAlignResponse2) ToPointer() *FieldUpdateTemplateFieldTextAlignResponse2 {
	return &e
}
func (e *FieldUpdateTemplateFieldTextAlignResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldTextAlignResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTextAlignResponse2: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMetaNameResponse struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldFieldMetaTypeName   `json:"type"`
	FontSize    *float64                                    `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateTemplateFieldTextAlignResponse2 `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaNameResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaNameResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaNameResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaNameResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaNameResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaNameResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaNameResponse) GetType() FieldUpdateTemplateFieldFieldMetaTypeName {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaTypeName("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaNameResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldFieldMetaNameResponse) GetTextAlign() *FieldUpdateTemplateFieldTextAlignResponse2 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldFieldMetaTypeInitials string

const (
	FieldUpdateTemplateFieldFieldMetaTypeInitialsInitials FieldUpdateTemplateFieldFieldMetaTypeInitials = "initials"
)

func (e FieldUpdateTemplateFieldFieldMetaTypeInitials) ToPointer() *FieldUpdateTemplateFieldFieldMetaTypeInitials {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldUpdateTemplateFieldFieldMetaTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaTypeInitials: %v", v)
	}
}

type FieldUpdateTemplateFieldTextAlignResponse1 string

const (
	FieldUpdateTemplateFieldTextAlignResponse1Left   FieldUpdateTemplateFieldTextAlignResponse1 = "left"
	FieldUpdateTemplateFieldTextAlignResponse1Center FieldUpdateTemplateFieldTextAlignResponse1 = "center"
	FieldUpdateTemplateFieldTextAlignResponse1Right  FieldUpdateTemplateFieldTextAlignResponse1 = "right"
)

func (e FieldUpdateTemplateFieldTextAlignResponse1) ToPointer() *FieldUpdateTemplateFieldTextAlignResponse1 {
	return &e
}
func (e *FieldUpdateTemplateFieldTextAlignResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldTextAlignResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldTextAlignResponse1: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMetaInitialsResponse struct {
	Label       *string                                       `json:"label,omitempty"`
	Placeholder *string                                       `json:"placeholder,omitempty"`
	Required    *bool                                         `json:"required,omitempty"`
	ReadOnly    *bool                                         `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldFieldMetaTypeInitials `json:"type"`
	FontSize    *float64                                      `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateTemplateFieldTextAlignResponse1   `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldFieldMetaInitialsResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldFieldMetaInitialsResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldFieldMetaInitialsResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMetaInitialsResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMetaInitialsResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMetaInitialsResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMetaInitialsResponse) GetType() FieldUpdateTemplateFieldFieldMetaTypeInitials {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaTypeInitials("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMetaInitialsResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldFieldMetaInitialsResponse) GetTextAlign() *FieldUpdateTemplateFieldTextAlignResponse1 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldFieldMetaUnionType string

const (
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaInitialsResponse FieldUpdateTemplateFieldFieldMetaUnionType = "field_updateTemplateField_fieldMeta_Initials_response"
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaNameResponse     FieldUpdateTemplateFieldFieldMetaUnionType = "field_updateTemplateField_fieldMeta_Name_response"
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaEmailResponse    FieldUpdateTemplateFieldFieldMetaUnionType = "field_updateTemplateField_fieldMeta_Email_response"
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaDateResponse     FieldUpdateTemplateFieldFieldMetaUnionType = "field_updateTemplateField_fieldMeta_Date_response"
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaTextResponse     FieldUpdateTemplateFieldFieldMetaUnionType = "field_updateTemplateField_fieldMeta_Text_response"
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaNumberResponse   FieldUpdateTemplateFieldFieldMetaUnionType = "field_updateTemplateField_fieldMeta_Number_response"
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaRadioResponse    FieldUpdateTemplateFieldFieldMetaUnionType = "field_updateTemplateField_fieldMeta_Radio_response"
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaCheckboxResponse FieldUpdateTemplateFieldFieldMetaUnionType = "field_updateTemplateField_fieldMeta_Checkbox_response"
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaDropdownResponse FieldUpdateTemplateFieldFieldMetaUnionType = "field_updateTemplateField_fieldMeta_Dropdown_response"
)

type FieldUpdateTemplateFieldFieldMetaUnion struct {
	FieldUpdateTemplateFieldFieldMetaInitialsResponse *FieldUpdateTemplateFieldFieldMetaInitialsResponse `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldMetaNameResponse     *FieldUpdateTemplateFieldFieldMetaNameResponse     `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldMetaEmailResponse    *FieldUpdateTemplateFieldFieldMetaEmailResponse    `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldMetaDateResponse     *FieldUpdateTemplateFieldFieldMetaDateResponse     `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldMetaTextResponse     *FieldUpdateTemplateFieldFieldMetaTextResponse     `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldMetaNumberResponse   *FieldUpdateTemplateFieldFieldMetaNumberResponse   `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldMetaRadioResponse    *FieldUpdateTemplateFieldFieldMetaRadioResponse    `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldMetaCheckboxResponse *FieldUpdateTemplateFieldFieldMetaCheckboxResponse `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldMetaDropdownResponse *FieldUpdateTemplateFieldFieldMetaDropdownResponse `queryParam:"inline"`

	Type FieldUpdateTemplateFieldFieldMetaUnionType
}

func CreateFieldUpdateTemplateFieldFieldMetaUnionFieldUpdateTemplateFieldFieldMetaInitialsResponse(fieldUpdateTemplateFieldFieldMetaInitialsResponse FieldUpdateTemplateFieldFieldMetaInitialsResponse) FieldUpdateTemplateFieldFieldMetaUnion {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaInitialsResponse

	return FieldUpdateTemplateFieldFieldMetaUnion{
		FieldUpdateTemplateFieldFieldMetaInitialsResponse: &fieldUpdateTemplateFieldFieldMetaInitialsResponse,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldMetaUnionFieldUpdateTemplateFieldFieldMetaNameResponse(fieldUpdateTemplateFieldFieldMetaNameResponse FieldUpdateTemplateFieldFieldMetaNameResponse) FieldUpdateTemplateFieldFieldMetaUnion {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaNameResponse

	return FieldUpdateTemplateFieldFieldMetaUnion{
		FieldUpdateTemplateFieldFieldMetaNameResponse: &fieldUpdateTemplateFieldFieldMetaNameResponse,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldMetaUnionFieldUpdateTemplateFieldFieldMetaEmailResponse(fieldUpdateTemplateFieldFieldMetaEmailResponse FieldUpdateTemplateFieldFieldMetaEmailResponse) FieldUpdateTemplateFieldFieldMetaUnion {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaEmailResponse

	return FieldUpdateTemplateFieldFieldMetaUnion{
		FieldUpdateTemplateFieldFieldMetaEmailResponse: &fieldUpdateTemplateFieldFieldMetaEmailResponse,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldMetaUnionFieldUpdateTemplateFieldFieldMetaDateResponse(fieldUpdateTemplateFieldFieldMetaDateResponse FieldUpdateTemplateFieldFieldMetaDateResponse) FieldUpdateTemplateFieldFieldMetaUnion {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaDateResponse

	return FieldUpdateTemplateFieldFieldMetaUnion{
		FieldUpdateTemplateFieldFieldMetaDateResponse: &fieldUpdateTemplateFieldFieldMetaDateResponse,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldMetaUnionFieldUpdateTemplateFieldFieldMetaTextResponse(fieldUpdateTemplateFieldFieldMetaTextResponse FieldUpdateTemplateFieldFieldMetaTextResponse) FieldUpdateTemplateFieldFieldMetaUnion {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaTextResponse

	return FieldUpdateTemplateFieldFieldMetaUnion{
		FieldUpdateTemplateFieldFieldMetaTextResponse: &fieldUpdateTemplateFieldFieldMetaTextResponse,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldMetaUnionFieldUpdateTemplateFieldFieldMetaNumberResponse(fieldUpdateTemplateFieldFieldMetaNumberResponse FieldUpdateTemplateFieldFieldMetaNumberResponse) FieldUpdateTemplateFieldFieldMetaUnion {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaNumberResponse

	return FieldUpdateTemplateFieldFieldMetaUnion{
		FieldUpdateTemplateFieldFieldMetaNumberResponse: &fieldUpdateTemplateFieldFieldMetaNumberResponse,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldMetaUnionFieldUpdateTemplateFieldFieldMetaRadioResponse(fieldUpdateTemplateFieldFieldMetaRadioResponse FieldUpdateTemplateFieldFieldMetaRadioResponse) FieldUpdateTemplateFieldFieldMetaUnion {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaRadioResponse

	return FieldUpdateTemplateFieldFieldMetaUnion{
		FieldUpdateTemplateFieldFieldMetaRadioResponse: &fieldUpdateTemplateFieldFieldMetaRadioResponse,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldMetaUnionFieldUpdateTemplateFieldFieldMetaCheckboxResponse(fieldUpdateTemplateFieldFieldMetaCheckboxResponse FieldUpdateTemplateFieldFieldMetaCheckboxResponse) FieldUpdateTemplateFieldFieldMetaUnion {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaCheckboxResponse

	return FieldUpdateTemplateFieldFieldMetaUnion{
		FieldUpdateTemplateFieldFieldMetaCheckboxResponse: &fieldUpdateTemplateFieldFieldMetaCheckboxResponse,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldMetaUnionFieldUpdateTemplateFieldFieldMetaDropdownResponse(fieldUpdateTemplateFieldFieldMetaDropdownResponse FieldUpdateTemplateFieldFieldMetaDropdownResponse) FieldUpdateTemplateFieldFieldMetaUnion {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaDropdownResponse

	return FieldUpdateTemplateFieldFieldMetaUnion{
		FieldUpdateTemplateFieldFieldMetaDropdownResponse: &fieldUpdateTemplateFieldFieldMetaDropdownResponse,
		Type: typ,
	}
}

func (u *FieldUpdateTemplateFieldFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var fieldUpdateTemplateFieldFieldMetaInitialsResponse FieldUpdateTemplateFieldFieldMetaInitialsResponse = FieldUpdateTemplateFieldFieldMetaInitialsResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMetaInitialsResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldMetaInitialsResponse = &fieldUpdateTemplateFieldFieldMetaInitialsResponse
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaInitialsResponse
		return nil
	}

	var fieldUpdateTemplateFieldFieldMetaNameResponse FieldUpdateTemplateFieldFieldMetaNameResponse = FieldUpdateTemplateFieldFieldMetaNameResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMetaNameResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldMetaNameResponse = &fieldUpdateTemplateFieldFieldMetaNameResponse
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaNameResponse
		return nil
	}

	var fieldUpdateTemplateFieldFieldMetaEmailResponse FieldUpdateTemplateFieldFieldMetaEmailResponse = FieldUpdateTemplateFieldFieldMetaEmailResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMetaEmailResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldMetaEmailResponse = &fieldUpdateTemplateFieldFieldMetaEmailResponse
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaEmailResponse
		return nil
	}

	var fieldUpdateTemplateFieldFieldMetaDateResponse FieldUpdateTemplateFieldFieldMetaDateResponse = FieldUpdateTemplateFieldFieldMetaDateResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMetaDateResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldMetaDateResponse = &fieldUpdateTemplateFieldFieldMetaDateResponse
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaDateResponse
		return nil
	}

	var fieldUpdateTemplateFieldFieldMetaTextResponse FieldUpdateTemplateFieldFieldMetaTextResponse = FieldUpdateTemplateFieldFieldMetaTextResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMetaTextResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldMetaTextResponse = &fieldUpdateTemplateFieldFieldMetaTextResponse
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaTextResponse
		return nil
	}

	var fieldUpdateTemplateFieldFieldMetaNumberResponse FieldUpdateTemplateFieldFieldMetaNumberResponse = FieldUpdateTemplateFieldFieldMetaNumberResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMetaNumberResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldMetaNumberResponse = &fieldUpdateTemplateFieldFieldMetaNumberResponse
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaNumberResponse
		return nil
	}

	var fieldUpdateTemplateFieldFieldMetaRadioResponse FieldUpdateTemplateFieldFieldMetaRadioResponse = FieldUpdateTemplateFieldFieldMetaRadioResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMetaRadioResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldMetaRadioResponse = &fieldUpdateTemplateFieldFieldMetaRadioResponse
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaRadioResponse
		return nil
	}

	var fieldUpdateTemplateFieldFieldMetaCheckboxResponse FieldUpdateTemplateFieldFieldMetaCheckboxResponse = FieldUpdateTemplateFieldFieldMetaCheckboxResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMetaCheckboxResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldMetaCheckboxResponse = &fieldUpdateTemplateFieldFieldMetaCheckboxResponse
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaCheckboxResponse
		return nil
	}

	var fieldUpdateTemplateFieldFieldMetaDropdownResponse FieldUpdateTemplateFieldFieldMetaDropdownResponse = FieldUpdateTemplateFieldFieldMetaDropdownResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMetaDropdownResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldFieldMetaDropdownResponse = &fieldUpdateTemplateFieldFieldMetaDropdownResponse
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMetaDropdownResponse
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldUpdateTemplateFieldFieldMetaUnion", string(data))
}

func (u FieldUpdateTemplateFieldFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.FieldUpdateTemplateFieldFieldMetaInitialsResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMetaInitialsResponse, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldMetaNameResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMetaNameResponse, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldMetaEmailResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMetaEmailResponse, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldMetaDateResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMetaDateResponse, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldMetaTextResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMetaTextResponse, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldMetaNumberResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMetaNumberResponse, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldMetaRadioResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMetaRadioResponse, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldMetaCheckboxResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMetaCheckboxResponse, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldMetaDropdownResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMetaDropdownResponse, "", true)
	}

	return nil, errors.New("could not marshal union type FieldUpdateTemplateFieldFieldMetaUnion: all fields are null")
}

// FieldUpdateTemplateFieldResponseBody - Successful response
type FieldUpdateTemplateFieldResponseBody struct {
	Type        FieldUpdateTemplateFieldTypeResponse `json:"type"`
	ID          float64                              `json:"id"`
	SecondaryID string                               `json:"secondaryId"`
	DocumentID  *float64                             `json:"documentId"`
	TemplateID  *float64                             `json:"templateId"`
	RecipientID float64                              `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                                 `json:"page"`
	PositionX  any                                     `json:"positionX,omitempty"`
	PositionY  any                                     `json:"positionY,omitempty"`
	Width      any                                     `json:"width,omitempty"`
	Height     any                                     `json:"height,omitempty"`
	CustomText string                                  `json:"customText"`
	Inserted   bool                                    `json:"inserted"`
	FieldMeta  *FieldUpdateTemplateFieldFieldMetaUnion `json:"fieldMeta"`
}

func (o *FieldUpdateTemplateFieldResponseBody) GetType() FieldUpdateTemplateFieldTypeResponse {
	if o == nil {
		return FieldUpdateTemplateFieldTypeResponse("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldResponseBody) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldResponseBody) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *FieldUpdateTemplateFieldResponseBody) GetDocumentID() *float64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *FieldUpdateTemplateFieldResponseBody) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *FieldUpdateTemplateFieldResponseBody) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldUpdateTemplateFieldResponseBody) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *FieldUpdateTemplateFieldResponseBody) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *FieldUpdateTemplateFieldResponseBody) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *FieldUpdateTemplateFieldResponseBody) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldResponseBody) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *FieldUpdateTemplateFieldResponseBody) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *FieldUpdateTemplateFieldResponseBody) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *FieldUpdateTemplateFieldResponseBody) GetFieldMeta() *FieldUpdateTemplateFieldFieldMetaUnion {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

type FieldUpdateTemplateFieldResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldUpdateTemplateFieldResponseBody
}

func (o *FieldUpdateTemplateFieldResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FieldUpdateTemplateFieldResponse) GetObject() *FieldUpdateTemplateFieldResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
