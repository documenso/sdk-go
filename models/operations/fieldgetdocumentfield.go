// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldGetDocumentFieldRequest struct {
	FieldID float64 `pathParam:"style=simple,explode=false,name=fieldId"`
}

func (o *FieldGetDocumentFieldRequest) GetFieldID() float64 {
	if o == nil {
		return 0.0
	}
	return o.FieldID
}

type FieldGetDocumentFieldType string

const (
	FieldGetDocumentFieldTypeSignature     FieldGetDocumentFieldType = "SIGNATURE"
	FieldGetDocumentFieldTypeFreeSignature FieldGetDocumentFieldType = "FREE_SIGNATURE"
	FieldGetDocumentFieldTypeInitials      FieldGetDocumentFieldType = "INITIALS"
	FieldGetDocumentFieldTypeName          FieldGetDocumentFieldType = "NAME"
	FieldGetDocumentFieldTypeEmail         FieldGetDocumentFieldType = "EMAIL"
	FieldGetDocumentFieldTypeDate          FieldGetDocumentFieldType = "DATE"
	FieldGetDocumentFieldTypeText          FieldGetDocumentFieldType = "TEXT"
	FieldGetDocumentFieldTypeNumber        FieldGetDocumentFieldType = "NUMBER"
	FieldGetDocumentFieldTypeRadio         FieldGetDocumentFieldType = "RADIO"
	FieldGetDocumentFieldTypeCheckbox      FieldGetDocumentFieldType = "CHECKBOX"
	FieldGetDocumentFieldTypeDropdown      FieldGetDocumentFieldType = "DROPDOWN"
)

func (e FieldGetDocumentFieldType) ToPointer() *FieldGetDocumentFieldType {
	return &e
}
func (e *FieldGetDocumentFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldGetDocumentFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldType: %v", v)
	}
}

type FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type string

const (
	FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9TypeDropdown FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type = "dropdown"
)

func (e FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type) ToPointer() *FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type {
	return &e
}
func (e *FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type: %v", v)
	}
}

type FieldGetDocumentFieldFieldMetaDocumentsFieldsValues struct {
	Value string `json:"value"`
}

func (o *FieldGetDocumentFieldFieldMetaDocumentsFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldMeta9 struct {
	Label        *string                                                                                  `json:"label,omitempty"`
	Placeholder  *string                                                                                  `json:"placeholder,omitempty"`
	Required     *bool                                                                                    `json:"required,omitempty"`
	ReadOnly     *bool                                                                                    `json:"readOnly,omitempty"`
	Type         FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type `json:"type"`
	Values       []FieldGetDocumentFieldFieldMetaDocumentsFieldsValues                                    `json:"values,omitempty"`
	DefaultValue *string                                                                                  `json:"defaultValue,omitempty"`
}

func (o *FieldMeta9) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldMeta9) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldMeta9) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldMeta9) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldMeta9) GetType() FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type {
	if o == nil {
		return FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type("")
	}
	return o.Type
}

func (o *FieldMeta9) GetValues() []FieldGetDocumentFieldFieldMetaDocumentsFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldMeta9) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type string

const (
	FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8TypeCheckbox FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type = "checkbox"
)

func (e FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type) ToPointer() *FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type {
	return &e
}
func (e *FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type: %v", v)
	}
}

type FieldGetDocumentFieldFieldMetaValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldGetDocumentFieldFieldMetaValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldGetDocumentFieldFieldMetaValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldGetDocumentFieldFieldMetaValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldMeta8 struct {
	Label            *string                                                                                  `json:"label,omitempty"`
	Placeholder      *string                                                                                  `json:"placeholder,omitempty"`
	Required         *bool                                                                                    `json:"required,omitempty"`
	ReadOnly         *bool                                                                                    `json:"readOnly,omitempty"`
	Type             FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type `json:"type"`
	Values           []FieldGetDocumentFieldFieldMetaValues                                                   `json:"values,omitempty"`
	ValidationRule   *string                                                                                  `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                                 `json:"validationLength,omitempty"`
}

func (o *FieldMeta8) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldMeta8) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldMeta8) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldMeta8) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldMeta8) GetType() FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type {
	if o == nil {
		return FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type("")
	}
	return o.Type
}

func (o *FieldMeta8) GetValues() []FieldGetDocumentFieldFieldMetaValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldMeta8) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldMeta8) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType string

const (
	FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyTypeRadio FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType = "radio"
)

func (e FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType) ToPointer() *FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type FieldMetaValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldMetaValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldMetaValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldMetaValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldMeta7 struct {
	Label       *string                                                                                 `json:"label,omitempty"`
	Placeholder *string                                                                                 `json:"placeholder,omitempty"`
	Required    *bool                                                                                   `json:"required,omitempty"`
	ReadOnly    *bool                                                                                   `json:"readOnly,omitempty"`
	Type        FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType `json:"type"`
	Values      []FieldMetaValues                                                                       `json:"values,omitempty"`
}

func (o *FieldMeta7) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldMeta7) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldMeta7) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldMeta7) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldMeta7) GetType() FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *FieldMeta7) GetValues() []FieldMetaValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType string

const (
	FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONTypeNumber FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType = "number"
)

func (e FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType) ToPointer() *FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType {
	return &e
}
func (e *FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType: %v", v)
	}
}

type FieldMeta6 struct {
	Label        *string                                                                     `json:"label,omitempty"`
	Placeholder  *string                                                                     `json:"placeholder,omitempty"`
	Required     *bool                                                                       `json:"required,omitempty"`
	ReadOnly     *bool                                                                       `json:"readOnly,omitempty"`
	Type         FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType `json:"type"`
	NumberFormat *string                                                                     `json:"numberFormat,omitempty"`
	Value        *string                                                                     `json:"value,omitempty"`
	MinValue     *float64                                                                    `json:"minValue,omitempty"`
	MaxValue     *float64                                                                    `json:"maxValue,omitempty"`
	FontSize     *float64                                                                    `json:"fontSize,omitempty"`
}

func (o *FieldMeta6) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldMeta6) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldMeta6) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldMeta6) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldMeta6) GetType() FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType {
	if o == nil {
		return FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *FieldMeta6) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldMeta6) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldMeta6) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldMeta6) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldMeta6) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type string

const (
	FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200TypeText FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type = "text"
)

func (e FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type) ToPointer() *FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type {
	return &e
}
func (e *FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type: %v", v)
	}
}

type FieldMeta5 struct {
	Label          *string                                                      `json:"label,omitempty"`
	Placeholder    *string                                                      `json:"placeholder,omitempty"`
	Required       *bool                                                        `json:"required,omitempty"`
	ReadOnly       *bool                                                        `json:"readOnly,omitempty"`
	Type           FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type `json:"type"`
	Text           *string                                                      `json:"text,omitempty"`
	CharacterLimit *float64                                                     `json:"characterLimit,omitempty"`
	FontSize       *float64                                                     `json:"fontSize,omitempty"`
}

func (o *FieldMeta5) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldMeta5) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldMeta5) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldMeta5) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldMeta5) GetType() FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type {
	if o == nil {
		return FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type("")
	}
	return o.Type
}

func (o *FieldMeta5) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldMeta5) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldMeta5) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType string

const (
	FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseTypeDate FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType = "date"
)

func (e FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType) ToPointer() *FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType {
	return &e
}
func (e *FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType: %v", v)
	}
}

type FieldMeta4 struct {
	Label       *string                                                   `json:"label,omitempty"`
	Placeholder *string                                                   `json:"placeholder,omitempty"`
	Required    *bool                                                     `json:"required,omitempty"`
	ReadOnly    *bool                                                     `json:"readOnly,omitempty"`
	Type        FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType `json:"type"`
	FontSize    *float64                                                  `json:"fontSize,omitempty"`
}

func (o *FieldMeta4) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldMeta4) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldMeta4) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldMeta4) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldMeta4) GetType() FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType {
	if o == nil {
		return FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType("")
	}
	return o.Type
}

func (o *FieldMeta4) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldGetDocumentFieldFieldMetaDocumentsFieldsType string

const (
	FieldGetDocumentFieldFieldMetaDocumentsFieldsTypeEmail FieldGetDocumentFieldFieldMetaDocumentsFieldsType = "email"
)

func (e FieldGetDocumentFieldFieldMetaDocumentsFieldsType) ToPointer() *FieldGetDocumentFieldFieldMetaDocumentsFieldsType {
	return &e
}
func (e *FieldGetDocumentFieldFieldMetaDocumentsFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldGetDocumentFieldFieldMetaDocumentsFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldFieldMetaDocumentsFieldsType: %v", v)
	}
}

type FieldMeta3 struct {
	Label       *string                                           `json:"label,omitempty"`
	Placeholder *string                                           `json:"placeholder,omitempty"`
	Required    *bool                                             `json:"required,omitempty"`
	ReadOnly    *bool                                             `json:"readOnly,omitempty"`
	Type        FieldGetDocumentFieldFieldMetaDocumentsFieldsType `json:"type"`
	FontSize    *float64                                          `json:"fontSize,omitempty"`
}

func (o *FieldMeta3) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldMeta3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldMeta3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldMeta3) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldMeta3) GetType() FieldGetDocumentFieldFieldMetaDocumentsFieldsType {
	if o == nil {
		return FieldGetDocumentFieldFieldMetaDocumentsFieldsType("")
	}
	return o.Type
}

func (o *FieldMeta3) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldGetDocumentFieldFieldMetaType string

const (
	FieldGetDocumentFieldFieldMetaTypeName FieldGetDocumentFieldFieldMetaType = "name"
)

func (e FieldGetDocumentFieldFieldMetaType) ToPointer() *FieldGetDocumentFieldFieldMetaType {
	return &e
}
func (e *FieldGetDocumentFieldFieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldGetDocumentFieldFieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldFieldMetaType: %v", v)
	}
}

type FieldMeta2 struct {
	Label       *string                            `json:"label,omitempty"`
	Placeholder *string                            `json:"placeholder,omitempty"`
	Required    *bool                              `json:"required,omitempty"`
	ReadOnly    *bool                              `json:"readOnly,omitempty"`
	Type        FieldGetDocumentFieldFieldMetaType `json:"type"`
	FontSize    *float64                           `json:"fontSize,omitempty"`
}

func (o *FieldMeta2) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldMeta2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldMeta2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldMeta2) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldMeta2) GetType() FieldGetDocumentFieldFieldMetaType {
	if o == nil {
		return FieldGetDocumentFieldFieldMetaType("")
	}
	return o.Type
}

func (o *FieldMeta2) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldMetaType string

const (
	FieldMetaTypeInitials FieldMetaType = "initials"
)

func (e FieldMetaType) ToPointer() *FieldMetaType {
	return &e
}
func (e *FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldMetaType: %v", v)
	}
}

type FieldMeta1 struct {
	Label       *string       `json:"label,omitempty"`
	Placeholder *string       `json:"placeholder,omitempty"`
	Required    *bool         `json:"required,omitempty"`
	ReadOnly    *bool         `json:"readOnly,omitempty"`
	Type        FieldMetaType `json:"type"`
	FontSize    *float64      `json:"fontSize,omitempty"`
}

func (o *FieldMeta1) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldMeta1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldMeta1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldMeta1) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldMeta1) GetType() FieldMetaType {
	if o == nil {
		return FieldMetaType("")
	}
	return o.Type
}

func (o *FieldMeta1) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldGetDocumentFieldFieldMetaUnionType string

const (
	FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta1 FieldGetDocumentFieldFieldMetaUnionType = "fieldMeta_1"
	FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta2 FieldGetDocumentFieldFieldMetaUnionType = "fieldMeta_2"
	FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta3 FieldGetDocumentFieldFieldMetaUnionType = "fieldMeta_3"
	FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta4 FieldGetDocumentFieldFieldMetaUnionType = "fieldMeta_4"
	FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta5 FieldGetDocumentFieldFieldMetaUnionType = "fieldMeta_5"
	FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta6 FieldGetDocumentFieldFieldMetaUnionType = "fieldMeta_6"
	FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta7 FieldGetDocumentFieldFieldMetaUnionType = "fieldMeta_7"
	FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta8 FieldGetDocumentFieldFieldMetaUnionType = "fieldMeta_8"
	FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta9 FieldGetDocumentFieldFieldMetaUnionType = "fieldMeta_9"
)

type FieldGetDocumentFieldFieldMeta struct {
	FieldMeta1 *FieldMeta1 `queryParam:"inline"`
	FieldMeta2 *FieldMeta2 `queryParam:"inline"`
	FieldMeta3 *FieldMeta3 `queryParam:"inline"`
	FieldMeta4 *FieldMeta4 `queryParam:"inline"`
	FieldMeta5 *FieldMeta5 `queryParam:"inline"`
	FieldMeta6 *FieldMeta6 `queryParam:"inline"`
	FieldMeta7 *FieldMeta7 `queryParam:"inline"`
	FieldMeta8 *FieldMeta8 `queryParam:"inline"`
	FieldMeta9 *FieldMeta9 `queryParam:"inline"`

	Type FieldGetDocumentFieldFieldMetaUnionType
}

func CreateFieldGetDocumentFieldFieldMetaFieldMeta1(fieldMeta1 FieldMeta1) FieldGetDocumentFieldFieldMeta {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta1

	return FieldGetDocumentFieldFieldMeta{
		FieldMeta1: &fieldMeta1,
		Type:       typ,
	}
}

func CreateFieldGetDocumentFieldFieldMetaFieldMeta2(fieldMeta2 FieldMeta2) FieldGetDocumentFieldFieldMeta {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta2

	return FieldGetDocumentFieldFieldMeta{
		FieldMeta2: &fieldMeta2,
		Type:       typ,
	}
}

func CreateFieldGetDocumentFieldFieldMetaFieldMeta3(fieldMeta3 FieldMeta3) FieldGetDocumentFieldFieldMeta {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta3

	return FieldGetDocumentFieldFieldMeta{
		FieldMeta3: &fieldMeta3,
		Type:       typ,
	}
}

func CreateFieldGetDocumentFieldFieldMetaFieldMeta4(fieldMeta4 FieldMeta4) FieldGetDocumentFieldFieldMeta {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta4

	return FieldGetDocumentFieldFieldMeta{
		FieldMeta4: &fieldMeta4,
		Type:       typ,
	}
}

func CreateFieldGetDocumentFieldFieldMetaFieldMeta5(fieldMeta5 FieldMeta5) FieldGetDocumentFieldFieldMeta {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta5

	return FieldGetDocumentFieldFieldMeta{
		FieldMeta5: &fieldMeta5,
		Type:       typ,
	}
}

func CreateFieldGetDocumentFieldFieldMetaFieldMeta6(fieldMeta6 FieldMeta6) FieldGetDocumentFieldFieldMeta {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta6

	return FieldGetDocumentFieldFieldMeta{
		FieldMeta6: &fieldMeta6,
		Type:       typ,
	}
}

func CreateFieldGetDocumentFieldFieldMetaFieldMeta7(fieldMeta7 FieldMeta7) FieldGetDocumentFieldFieldMeta {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta7

	return FieldGetDocumentFieldFieldMeta{
		FieldMeta7: &fieldMeta7,
		Type:       typ,
	}
}

func CreateFieldGetDocumentFieldFieldMetaFieldMeta8(fieldMeta8 FieldMeta8) FieldGetDocumentFieldFieldMeta {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta8

	return FieldGetDocumentFieldFieldMeta{
		FieldMeta8: &fieldMeta8,
		Type:       typ,
	}
}

func CreateFieldGetDocumentFieldFieldMetaFieldMeta9(fieldMeta9 FieldMeta9) FieldGetDocumentFieldFieldMeta {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta9

	return FieldGetDocumentFieldFieldMeta{
		FieldMeta9: &fieldMeta9,
		Type:       typ,
	}
}

func (u *FieldGetDocumentFieldFieldMeta) UnmarshalJSON(data []byte) error {

	var fieldMeta1 FieldMeta1 = FieldMeta1{}
	if err := utils.UnmarshalJSON(data, &fieldMeta1, "", true, true); err == nil {
		u.FieldMeta1 = &fieldMeta1
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta1
		return nil
	}

	var fieldMeta2 FieldMeta2 = FieldMeta2{}
	if err := utils.UnmarshalJSON(data, &fieldMeta2, "", true, true); err == nil {
		u.FieldMeta2 = &fieldMeta2
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta2
		return nil
	}

	var fieldMeta3 FieldMeta3 = FieldMeta3{}
	if err := utils.UnmarshalJSON(data, &fieldMeta3, "", true, true); err == nil {
		u.FieldMeta3 = &fieldMeta3
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta3
		return nil
	}

	var fieldMeta4 FieldMeta4 = FieldMeta4{}
	if err := utils.UnmarshalJSON(data, &fieldMeta4, "", true, true); err == nil {
		u.FieldMeta4 = &fieldMeta4
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta4
		return nil
	}

	var fieldMeta7 FieldMeta7 = FieldMeta7{}
	if err := utils.UnmarshalJSON(data, &fieldMeta7, "", true, true); err == nil {
		u.FieldMeta7 = &fieldMeta7
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta7
		return nil
	}

	var fieldMeta9 FieldMeta9 = FieldMeta9{}
	if err := utils.UnmarshalJSON(data, &fieldMeta9, "", true, true); err == nil {
		u.FieldMeta9 = &fieldMeta9
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta9
		return nil
	}

	var fieldMeta5 FieldMeta5 = FieldMeta5{}
	if err := utils.UnmarshalJSON(data, &fieldMeta5, "", true, true); err == nil {
		u.FieldMeta5 = &fieldMeta5
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta5
		return nil
	}

	var fieldMeta8 FieldMeta8 = FieldMeta8{}
	if err := utils.UnmarshalJSON(data, &fieldMeta8, "", true, true); err == nil {
		u.FieldMeta8 = &fieldMeta8
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta8
		return nil
	}

	var fieldMeta6 FieldMeta6 = FieldMeta6{}
	if err := utils.UnmarshalJSON(data, &fieldMeta6, "", true, true); err == nil {
		u.FieldMeta6 = &fieldMeta6
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldMeta6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldGetDocumentFieldFieldMeta", string(data))
}

func (u FieldGetDocumentFieldFieldMeta) MarshalJSON() ([]byte, error) {
	if u.FieldMeta1 != nil {
		return utils.MarshalJSON(u.FieldMeta1, "", true)
	}

	if u.FieldMeta2 != nil {
		return utils.MarshalJSON(u.FieldMeta2, "", true)
	}

	if u.FieldMeta3 != nil {
		return utils.MarshalJSON(u.FieldMeta3, "", true)
	}

	if u.FieldMeta4 != nil {
		return utils.MarshalJSON(u.FieldMeta4, "", true)
	}

	if u.FieldMeta5 != nil {
		return utils.MarshalJSON(u.FieldMeta5, "", true)
	}

	if u.FieldMeta6 != nil {
		return utils.MarshalJSON(u.FieldMeta6, "", true)
	}

	if u.FieldMeta7 != nil {
		return utils.MarshalJSON(u.FieldMeta7, "", true)
	}

	if u.FieldMeta8 != nil {
		return utils.MarshalJSON(u.FieldMeta8, "", true)
	}

	if u.FieldMeta9 != nil {
		return utils.MarshalJSON(u.FieldMeta9, "", true)
	}

	return nil, errors.New("could not marshal union type FieldGetDocumentFieldFieldMeta: all fields are null")
}

// FieldGetDocumentFieldResponseBody - Successful response
type FieldGetDocumentFieldResponseBody struct {
	Type        FieldGetDocumentFieldType `json:"type"`
	ID          int64                     `json:"id"`
	SecondaryID string                    `json:"secondaryId"`
	DocumentID  *int64                    `json:"documentId"`
	TemplateID  *int64                    `json:"templateId"`
	RecipientID int64                     `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                         `json:"page"`
	PositionX  any                             `json:"positionX,omitempty"`
	PositionY  any                             `json:"positionY,omitempty"`
	Width      any                             `json:"width,omitempty"`
	Height     any                             `json:"height,omitempty"`
	CustomText string                          `json:"customText"`
	Inserted   bool                            `json:"inserted"`
	FieldMeta  *FieldGetDocumentFieldFieldMeta `json:"fieldMeta"`
}

func (o *FieldGetDocumentFieldResponseBody) GetType() FieldGetDocumentFieldType {
	if o == nil {
		return FieldGetDocumentFieldType("")
	}
	return o.Type
}

func (o *FieldGetDocumentFieldResponseBody) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *FieldGetDocumentFieldResponseBody) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *FieldGetDocumentFieldResponseBody) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *FieldGetDocumentFieldResponseBody) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *FieldGetDocumentFieldResponseBody) GetRecipientID() int64 {
	if o == nil {
		return 0
	}
	return o.RecipientID
}

func (o *FieldGetDocumentFieldResponseBody) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *FieldGetDocumentFieldResponseBody) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *FieldGetDocumentFieldResponseBody) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *FieldGetDocumentFieldResponseBody) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldGetDocumentFieldResponseBody) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *FieldGetDocumentFieldResponseBody) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *FieldGetDocumentFieldResponseBody) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *FieldGetDocumentFieldResponseBody) GetFieldMeta() *FieldGetDocumentFieldFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

type FieldGetDocumentFieldResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldGetDocumentFieldResponseBody
}

func (o *FieldGetDocumentFieldResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FieldGetDocumentFieldResponse) GetObject() *FieldGetDocumentFieldResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
