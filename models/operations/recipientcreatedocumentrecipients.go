// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/documenso/sdk-go/models/components"
)

type RecipientCreateDocumentRecipientsRole string

const (
	RecipientCreateDocumentRecipientsRoleCc       RecipientCreateDocumentRecipientsRole = "CC"
	RecipientCreateDocumentRecipientsRoleSigner   RecipientCreateDocumentRecipientsRole = "SIGNER"
	RecipientCreateDocumentRecipientsRoleViewer   RecipientCreateDocumentRecipientsRole = "VIEWER"
	RecipientCreateDocumentRecipientsRoleApprover RecipientCreateDocumentRecipientsRole = "APPROVER"
)

func (e RecipientCreateDocumentRecipientsRole) ToPointer() *RecipientCreateDocumentRecipientsRole {
	return &e
}
func (e *RecipientCreateDocumentRecipientsRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		*e = RecipientCreateDocumentRecipientsRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsRole: %v", v)
	}
}

// RecipientCreateDocumentRecipientsAccessAuth - The type of authentication required for the recipient to access the document.
type RecipientCreateDocumentRecipientsAccessAuth string

const (
	RecipientCreateDocumentRecipientsAccessAuthAccount RecipientCreateDocumentRecipientsAccessAuth = "ACCOUNT"
)

func (e RecipientCreateDocumentRecipientsAccessAuth) ToPointer() *RecipientCreateDocumentRecipientsAccessAuth {
	return &e
}
func (e *RecipientCreateDocumentRecipientsAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = RecipientCreateDocumentRecipientsAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsAccessAuth: %v", v)
	}
}

// RecipientCreateDocumentRecipientsActionAuth - The type of authentication required for the recipient to sign the document.
type RecipientCreateDocumentRecipientsActionAuth string

const (
	RecipientCreateDocumentRecipientsActionAuthAccount       RecipientCreateDocumentRecipientsActionAuth = "ACCOUNT"
	RecipientCreateDocumentRecipientsActionAuthPasskey       RecipientCreateDocumentRecipientsActionAuth = "PASSKEY"
	RecipientCreateDocumentRecipientsActionAuthTwoFactorAuth RecipientCreateDocumentRecipientsActionAuth = "TWO_FACTOR_AUTH"
	RecipientCreateDocumentRecipientsActionAuthExplicitNone  RecipientCreateDocumentRecipientsActionAuth = "EXPLICIT_NONE"
)

func (e RecipientCreateDocumentRecipientsActionAuth) ToPointer() *RecipientCreateDocumentRecipientsActionAuth {
	return &e
}
func (e *RecipientCreateDocumentRecipientsActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "EXPLICIT_NONE":
		*e = RecipientCreateDocumentRecipientsActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsActionAuth: %v", v)
	}
}

type RecipientCreateDocumentRecipientsRecipients struct {
	Email        string                                `json:"email"`
	Name         string                                `json:"name"`
	Role         RecipientCreateDocumentRecipientsRole `json:"role"`
	SigningOrder *float64                              `json:"signingOrder,omitempty"`
	// The type of authentication required for the recipient to access the document.
	AccessAuth *RecipientCreateDocumentRecipientsAccessAuth `json:"accessAuth,omitempty"`
	// The type of authentication required for the recipient to sign the document.
	ActionAuth *RecipientCreateDocumentRecipientsActionAuth `json:"actionAuth,omitempty"`
}

func (o *RecipientCreateDocumentRecipientsRecipients) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *RecipientCreateDocumentRecipientsRecipients) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RecipientCreateDocumentRecipientsRecipients) GetRole() RecipientCreateDocumentRecipientsRole {
	if o == nil {
		return RecipientCreateDocumentRecipientsRole("")
	}
	return o.Role
}

func (o *RecipientCreateDocumentRecipientsRecipients) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *RecipientCreateDocumentRecipientsRecipients) GetAccessAuth() *RecipientCreateDocumentRecipientsAccessAuth {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *RecipientCreateDocumentRecipientsRecipients) GetActionAuth() *RecipientCreateDocumentRecipientsActionAuth {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

type RecipientCreateDocumentRecipientsRequestBody struct {
	DocumentID float64                                       `json:"documentId"`
	Recipients []RecipientCreateDocumentRecipientsRecipients `json:"recipients"`
}

func (o *RecipientCreateDocumentRecipientsRequestBody) GetDocumentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DocumentID
}

func (o *RecipientCreateDocumentRecipientsRequestBody) GetRecipients() []RecipientCreateDocumentRecipientsRecipients {
	if o == nil {
		return []RecipientCreateDocumentRecipientsRecipients{}
	}
	return o.Recipients
}

type RecipientCreateDocumentRecipientsDocumentsRecipientsRole string

const (
	RecipientCreateDocumentRecipientsDocumentsRecipientsRoleCc       RecipientCreateDocumentRecipientsDocumentsRecipientsRole = "CC"
	RecipientCreateDocumentRecipientsDocumentsRecipientsRoleSigner   RecipientCreateDocumentRecipientsDocumentsRecipientsRole = "SIGNER"
	RecipientCreateDocumentRecipientsDocumentsRecipientsRoleViewer   RecipientCreateDocumentRecipientsDocumentsRecipientsRole = "VIEWER"
	RecipientCreateDocumentRecipientsDocumentsRecipientsRoleApprover RecipientCreateDocumentRecipientsDocumentsRecipientsRole = "APPROVER"
)

func (e RecipientCreateDocumentRecipientsDocumentsRecipientsRole) ToPointer() *RecipientCreateDocumentRecipientsDocumentsRecipientsRole {
	return &e
}
func (e *RecipientCreateDocumentRecipientsDocumentsRecipientsRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		*e = RecipientCreateDocumentRecipientsDocumentsRecipientsRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsDocumentsRecipientsRole: %v", v)
	}
}

type RecipientCreateDocumentRecipientsReadStatus string

const (
	RecipientCreateDocumentRecipientsReadStatusNotOpened RecipientCreateDocumentRecipientsReadStatus = "NOT_OPENED"
	RecipientCreateDocumentRecipientsReadStatusOpened    RecipientCreateDocumentRecipientsReadStatus = "OPENED"
)

func (e RecipientCreateDocumentRecipientsReadStatus) ToPointer() *RecipientCreateDocumentRecipientsReadStatus {
	return &e
}
func (e *RecipientCreateDocumentRecipientsReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = RecipientCreateDocumentRecipientsReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsReadStatus: %v", v)
	}
}

type RecipientCreateDocumentRecipientsSigningStatus string

const (
	RecipientCreateDocumentRecipientsSigningStatusNotSigned RecipientCreateDocumentRecipientsSigningStatus = "NOT_SIGNED"
	RecipientCreateDocumentRecipientsSigningStatusSigned    RecipientCreateDocumentRecipientsSigningStatus = "SIGNED"
	RecipientCreateDocumentRecipientsSigningStatusRejected  RecipientCreateDocumentRecipientsSigningStatus = "REJECTED"
)

func (e RecipientCreateDocumentRecipientsSigningStatus) ToPointer() *RecipientCreateDocumentRecipientsSigningStatus {
	return &e
}
func (e *RecipientCreateDocumentRecipientsSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = RecipientCreateDocumentRecipientsSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsSigningStatus: %v", v)
	}
}

type RecipientCreateDocumentRecipientsSendStatus string

const (
	RecipientCreateDocumentRecipientsSendStatusNotSent RecipientCreateDocumentRecipientsSendStatus = "NOT_SENT"
	RecipientCreateDocumentRecipientsSendStatusSent    RecipientCreateDocumentRecipientsSendStatus = "SENT"
)

func (e RecipientCreateDocumentRecipientsSendStatus) ToPointer() *RecipientCreateDocumentRecipientsSendStatus {
	return &e
}
func (e *RecipientCreateDocumentRecipientsSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = RecipientCreateDocumentRecipientsSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsSendStatus: %v", v)
	}
}

// RecipientCreateDocumentRecipientsDocumentsRecipientsAccessAuth - The type of authentication required for the recipient to access the document.
type RecipientCreateDocumentRecipientsDocumentsRecipientsAccessAuth string

const (
	RecipientCreateDocumentRecipientsDocumentsRecipientsAccessAuthAccount RecipientCreateDocumentRecipientsDocumentsRecipientsAccessAuth = "ACCOUNT"
)

func (e RecipientCreateDocumentRecipientsDocumentsRecipientsAccessAuth) ToPointer() *RecipientCreateDocumentRecipientsDocumentsRecipientsAccessAuth {
	return &e
}
func (e *RecipientCreateDocumentRecipientsDocumentsRecipientsAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = RecipientCreateDocumentRecipientsDocumentsRecipientsAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsDocumentsRecipientsAccessAuth: %v", v)
	}
}

// RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuth - The type of authentication required for the recipient to sign the document.
type RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuth string

const (
	RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuthAccount       RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuth = "ACCOUNT"
	RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuthPasskey       RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuth = "PASSKEY"
	RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuthTwoFactorAuth RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuth = "TWO_FACTOR_AUTH"
	RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuthExplicitNone  RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuth = "EXPLICIT_NONE"
)

func (e RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuth) ToPointer() *RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuth {
	return &e
}
func (e *RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "EXPLICIT_NONE":
		*e = RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuth: %v", v)
	}
}

type RecipientCreateDocumentRecipientsAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	AccessAuth *RecipientCreateDocumentRecipientsDocumentsRecipientsAccessAuth `json:"accessAuth"`
	// The type of authentication required for the recipient to sign the document.
	ActionAuth *RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuth `json:"actionAuth"`
}

func (o *RecipientCreateDocumentRecipientsAuthOptions) GetAccessAuth() *RecipientCreateDocumentRecipientsDocumentsRecipientsAccessAuth {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *RecipientCreateDocumentRecipientsAuthOptions) GetActionAuth() *RecipientCreateDocumentRecipientsDocumentsRecipientsActionAuth {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

type RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients struct {
	Role              RecipientCreateDocumentRecipientsDocumentsRecipientsRole `json:"role"`
	ReadStatus        RecipientCreateDocumentRecipientsReadStatus              `json:"readStatus"`
	SigningStatus     RecipientCreateDocumentRecipientsSigningStatus           `json:"signingStatus"`
	SendStatus        RecipientCreateDocumentRecipientsSendStatus              `json:"sendStatus"`
	ID                int64                                                    `json:"id"`
	DocumentID        *int64                                                   `json:"documentId"`
	TemplateID        *int64                                                   `json:"templateId"`
	Email             string                                                   `json:"email"`
	Name              string                                                   `json:"name"`
	Token             string                                                   `json:"token"`
	DocumentDeletedAt *string                                                  `json:"documentDeletedAt"`
	Expired           *string                                                  `json:"expired"`
	SignedAt          *string                                                  `json:"signedAt"`
	AuthOptions       *RecipientCreateDocumentRecipientsAuthOptions            `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
}

func (o *RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients) GetRole() RecipientCreateDocumentRecipientsDocumentsRecipientsRole {
	if o == nil {
		return RecipientCreateDocumentRecipientsDocumentsRecipientsRole("")
	}
	return o.Role
}

func (o *RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients) GetReadStatus() RecipientCreateDocumentRecipientsReadStatus {
	if o == nil {
		return RecipientCreateDocumentRecipientsReadStatus("")
	}
	return o.ReadStatus
}

func (o *RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients) GetSigningStatus() RecipientCreateDocumentRecipientsSigningStatus {
	if o == nil {
		return RecipientCreateDocumentRecipientsSigningStatus("")
	}
	return o.SigningStatus
}

func (o *RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients) GetSendStatus() RecipientCreateDocumentRecipientsSendStatus {
	if o == nil {
		return RecipientCreateDocumentRecipientsSendStatus("")
	}
	return o.SendStatus
}

func (o *RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients) GetDocumentDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DocumentDeletedAt
}

func (o *RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients) GetExpired() *string {
	if o == nil {
		return nil
	}
	return o.Expired
}

func (o *RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients) GetSignedAt() *string {
	if o == nil {
		return nil
	}
	return o.SignedAt
}

func (o *RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients) GetAuthOptions() *RecipientCreateDocumentRecipientsAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients) GetRejectionReason() *string {
	if o == nil {
		return nil
	}
	return o.RejectionReason
}

// RecipientCreateDocumentRecipientsResponseBody - Successful response
type RecipientCreateDocumentRecipientsResponseBody struct {
	Recipients []RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients `json:"recipients"`
}

func (o *RecipientCreateDocumentRecipientsResponseBody) GetRecipients() []RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients {
	if o == nil {
		return []RecipientCreateDocumentRecipientsDocumentsRecipientsRecipients{}
	}
	return o.Recipients
}

type RecipientCreateDocumentRecipientsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *RecipientCreateDocumentRecipientsResponseBody
}

func (o *RecipientCreateDocumentRecipientsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *RecipientCreateDocumentRecipientsResponse) GetObject() *RecipientCreateDocumentRecipientsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
