// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldCreateDocumentFieldsTypeDropdownRequestBody1 string

const (
	FieldCreateDocumentFieldsTypeDropdownRequestBody1Dropdown FieldCreateDocumentFieldsTypeDropdownRequestBody1 = "DROPDOWN"
)

func (e FieldCreateDocumentFieldsTypeDropdownRequestBody1) ToPointer() *FieldCreateDocumentFieldsTypeDropdownRequestBody1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeDropdownRequestBody1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = FieldCreateDocumentFieldsTypeDropdownRequestBody1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeDropdownRequestBody1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeDropdownRequestBody2 string

const (
	FieldCreateDocumentFieldsTypeDropdownRequestBody2Dropdown FieldCreateDocumentFieldsTypeDropdownRequestBody2 = "dropdown"
)

func (e FieldCreateDocumentFieldsTypeDropdownRequestBody2) ToPointer() *FieldCreateDocumentFieldsTypeDropdownRequestBody2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeDropdownRequestBody2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateDocumentFieldsTypeDropdownRequestBody2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeDropdownRequestBody2: %v", v)
	}
}

type FieldCreateDocumentFieldsValueDropdown struct {
	Value string `json:"value"`
}

func (o *FieldCreateDocumentFieldsValueDropdown) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldsFieldMetaDropdownRequestBody struct {
	Label        *string                                           `json:"label,omitempty"`
	Placeholder  *string                                           `json:"placeholder,omitempty"`
	Required     *bool                                             `json:"required,omitempty"`
	ReadOnly     *bool                                             `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldsTypeDropdownRequestBody2 `json:"type"`
	Values       []FieldCreateDocumentFieldsValueDropdown          `json:"values,omitempty"`
	DefaultValue *string                                           `json:"defaultValue,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaDropdownRequestBody) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaDropdownRequestBody) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaDropdownRequestBody) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaDropdownRequestBody) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaDropdownRequestBody) GetType() FieldCreateDocumentFieldsTypeDropdownRequestBody2 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeDropdownRequestBody2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaDropdownRequestBody) GetValues() []FieldCreateDocumentFieldsValueDropdown {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateDocumentFieldsFieldMetaDropdownRequestBody) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldCreateDocumentFieldsFieldDropdown struct {
	Type      FieldCreateDocumentFieldsTypeDropdownRequestBody1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaDropdownRequestBody `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateDocumentFieldsFieldDropdown) GetType() FieldCreateDocumentFieldsTypeDropdownRequestBody1 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeDropdownRequestBody1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldDropdown) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaDropdownRequestBody {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldsFieldDropdown) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldsFieldDropdown) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldsFieldDropdown) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldsFieldDropdown) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldsFieldDropdown) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldsFieldDropdown) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsTypeCheckboxRequestBody1 string

const (
	FieldCreateDocumentFieldsTypeCheckboxRequestBody1Checkbox FieldCreateDocumentFieldsTypeCheckboxRequestBody1 = "CHECKBOX"
)

func (e FieldCreateDocumentFieldsTypeCheckboxRequestBody1) ToPointer() *FieldCreateDocumentFieldsTypeCheckboxRequestBody1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeCheckboxRequestBody1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = FieldCreateDocumentFieldsTypeCheckboxRequestBody1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeCheckboxRequestBody1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeCheckboxRequestBody2 string

const (
	FieldCreateDocumentFieldsTypeCheckboxRequestBody2Checkbox FieldCreateDocumentFieldsTypeCheckboxRequestBody2 = "checkbox"
)

func (e FieldCreateDocumentFieldsTypeCheckboxRequestBody2) ToPointer() *FieldCreateDocumentFieldsTypeCheckboxRequestBody2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeCheckboxRequestBody2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateDocumentFieldsTypeCheckboxRequestBody2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeCheckboxRequestBody2: %v", v)
	}
}

type FieldCreateDocumentFieldsValueCheckbox struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateDocumentFieldsValueCheckbox) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldsValueCheckbox) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateDocumentFieldsValueCheckbox) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldsFieldMetaCheckboxRequestBody struct {
	Label            *string                                           `json:"label,omitempty"`
	Placeholder      *string                                           `json:"placeholder,omitempty"`
	Required         *bool                                             `json:"required,omitempty"`
	ReadOnly         *bool                                             `json:"readOnly,omitempty"`
	Type             FieldCreateDocumentFieldsTypeCheckboxRequestBody2 `json:"type"`
	Values           []FieldCreateDocumentFieldsValueCheckbox          `json:"values,omitempty"`
	ValidationRule   *string                                           `json:"validationRule,omitempty"`
	ValidationLength *float64                                          `json:"validationLength,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaCheckboxRequestBody) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaCheckboxRequestBody) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaCheckboxRequestBody) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaCheckboxRequestBody) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaCheckboxRequestBody) GetType() FieldCreateDocumentFieldsTypeCheckboxRequestBody2 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeCheckboxRequestBody2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaCheckboxRequestBody) GetValues() []FieldCreateDocumentFieldsValueCheckbox {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateDocumentFieldsFieldMetaCheckboxRequestBody) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldCreateDocumentFieldsFieldMetaCheckboxRequestBody) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldCreateDocumentFieldsFieldCheckbox struct {
	Type      FieldCreateDocumentFieldsTypeCheckboxRequestBody1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaCheckboxRequestBody `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateDocumentFieldsFieldCheckbox) GetType() FieldCreateDocumentFieldsTypeCheckboxRequestBody1 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeCheckboxRequestBody1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldCheckbox) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaCheckboxRequestBody {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldsFieldCheckbox) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldsFieldCheckbox) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldsFieldCheckbox) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldsFieldCheckbox) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldsFieldCheckbox) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldsFieldCheckbox) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsTypeRadioRequestBody1 string

const (
	FieldCreateDocumentFieldsTypeRadioRequestBody1Radio FieldCreateDocumentFieldsTypeRadioRequestBody1 = "RADIO"
)

func (e FieldCreateDocumentFieldsTypeRadioRequestBody1) ToPointer() *FieldCreateDocumentFieldsTypeRadioRequestBody1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeRadioRequestBody1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = FieldCreateDocumentFieldsTypeRadioRequestBody1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeRadioRequestBody1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeRadioRequestBody2 string

const (
	FieldCreateDocumentFieldsTypeRadioRequestBody2Radio FieldCreateDocumentFieldsTypeRadioRequestBody2 = "radio"
)

func (e FieldCreateDocumentFieldsTypeRadioRequestBody2) ToPointer() *FieldCreateDocumentFieldsTypeRadioRequestBody2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeRadioRequestBody2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateDocumentFieldsTypeRadioRequestBody2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeRadioRequestBody2: %v", v)
	}
}

type FieldCreateDocumentFieldsValueRadio struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateDocumentFieldsValueRadio) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldsValueRadio) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateDocumentFieldsValueRadio) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldsFieldMetaRadioRequestBody struct {
	Label       *string                                        `json:"label,omitempty"`
	Placeholder *string                                        `json:"placeholder,omitempty"`
	Required    *bool                                          `json:"required,omitempty"`
	ReadOnly    *bool                                          `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsTypeRadioRequestBody2 `json:"type"`
	Values      []FieldCreateDocumentFieldsValueRadio          `json:"values,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaRadioRequestBody) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaRadioRequestBody) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaRadioRequestBody) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaRadioRequestBody) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaRadioRequestBody) GetType() FieldCreateDocumentFieldsTypeRadioRequestBody2 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeRadioRequestBody2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaRadioRequestBody) GetValues() []FieldCreateDocumentFieldsValueRadio {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldCreateDocumentFieldsFieldRadio struct {
	Type      FieldCreateDocumentFieldsTypeRadioRequestBody1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaRadioRequestBody `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateDocumentFieldsFieldRadio) GetType() FieldCreateDocumentFieldsTypeRadioRequestBody1 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeRadioRequestBody1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldRadio) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaRadioRequestBody {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldsFieldRadio) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldsFieldRadio) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldsFieldRadio) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldsFieldRadio) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldsFieldRadio) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldsFieldRadio) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsTypeNumberRequestBody1 string

const (
	FieldCreateDocumentFieldsTypeNumberRequestBody1Number FieldCreateDocumentFieldsTypeNumberRequestBody1 = "NUMBER"
)

func (e FieldCreateDocumentFieldsTypeNumberRequestBody1) ToPointer() *FieldCreateDocumentFieldsTypeNumberRequestBody1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeNumberRequestBody1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = FieldCreateDocumentFieldsTypeNumberRequestBody1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeNumberRequestBody1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeNumberRequestBody2 string

const (
	FieldCreateDocumentFieldsTypeNumberRequestBody2Number FieldCreateDocumentFieldsTypeNumberRequestBody2 = "number"
)

func (e FieldCreateDocumentFieldsTypeNumberRequestBody2) ToPointer() *FieldCreateDocumentFieldsTypeNumberRequestBody2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeNumberRequestBody2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateDocumentFieldsTypeNumberRequestBody2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeNumberRequestBody2: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignNumber string

const (
	FieldCreateDocumentFieldsTextAlignNumberLeft   FieldCreateDocumentFieldsTextAlignNumber = "left"
	FieldCreateDocumentFieldsTextAlignNumberCenter FieldCreateDocumentFieldsTextAlignNumber = "center"
	FieldCreateDocumentFieldsTextAlignNumberRight  FieldCreateDocumentFieldsTextAlignNumber = "right"
)

func (e FieldCreateDocumentFieldsTextAlignNumber) ToPointer() *FieldCreateDocumentFieldsTextAlignNumber {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignNumber: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaNumberRequestBody struct {
	Label        *string                                         `json:"label,omitempty"`
	Placeholder  *string                                         `json:"placeholder,omitempty"`
	Required     *bool                                           `json:"required,omitempty"`
	ReadOnly     *bool                                           `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldsTypeNumberRequestBody2 `json:"type"`
	NumberFormat *string                                         `json:"numberFormat,omitempty"`
	Value        *string                                         `json:"value,omitempty"`
	MinValue     *float64                                        `json:"minValue,omitempty"`
	MaxValue     *float64                                        `json:"maxValue,omitempty"`
	FontSize     *float64                                        `json:"fontSize,omitempty"`
	TextAlign    *FieldCreateDocumentFieldsTextAlignNumber       `json:"textAlign,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberRequestBody) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberRequestBody) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberRequestBody) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberRequestBody) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberRequestBody) GetType() FieldCreateDocumentFieldsTypeNumberRequestBody2 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeNumberRequestBody2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberRequestBody) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberRequestBody) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberRequestBody) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberRequestBody) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberRequestBody) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberRequestBody) GetTextAlign() *FieldCreateDocumentFieldsTextAlignNumber {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldsFieldNumber struct {
	Type      FieldCreateDocumentFieldsTypeNumberRequestBody1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaNumberRequestBody `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateDocumentFieldsFieldNumber) GetType() FieldCreateDocumentFieldsTypeNumberRequestBody1 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeNumberRequestBody1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldNumber) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaNumberRequestBody {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldsFieldNumber) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldsFieldNumber) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldsFieldNumber) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldsFieldNumber) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldsFieldNumber) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldsFieldNumber) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsTypeTextRequestBody1 string

const (
	FieldCreateDocumentFieldsTypeTextRequestBody1Text FieldCreateDocumentFieldsTypeTextRequestBody1 = "TEXT"
)

func (e FieldCreateDocumentFieldsTypeTextRequestBody1) ToPointer() *FieldCreateDocumentFieldsTypeTextRequestBody1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeTextRequestBody1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = FieldCreateDocumentFieldsTypeTextRequestBody1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeTextRequestBody1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeTextRequestBody2 string

const (
	FieldCreateDocumentFieldsTypeTextRequestBody2Text FieldCreateDocumentFieldsTypeTextRequestBody2 = "text"
)

func (e FieldCreateDocumentFieldsTypeTextRequestBody2) ToPointer() *FieldCreateDocumentFieldsTypeTextRequestBody2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeTextRequestBody2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateDocumentFieldsTypeTextRequestBody2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeTextRequestBody2: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignText string

const (
	FieldCreateDocumentFieldsTextAlignTextLeft   FieldCreateDocumentFieldsTextAlignText = "left"
	FieldCreateDocumentFieldsTextAlignTextCenter FieldCreateDocumentFieldsTextAlignText = "center"
	FieldCreateDocumentFieldsTextAlignTextRight  FieldCreateDocumentFieldsTextAlignText = "right"
)

func (e FieldCreateDocumentFieldsTextAlignText) ToPointer() *FieldCreateDocumentFieldsTextAlignText {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignText: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaTextRequestBody struct {
	Label          *string                                       `json:"label,omitempty"`
	Placeholder    *string                                       `json:"placeholder,omitempty"`
	Required       *bool                                         `json:"required,omitempty"`
	ReadOnly       *bool                                         `json:"readOnly,omitempty"`
	Type           FieldCreateDocumentFieldsTypeTextRequestBody2 `json:"type"`
	Text           *string                                       `json:"text,omitempty"`
	CharacterLimit *float64                                      `json:"characterLimit,omitempty"`
	FontSize       *float64                                      `json:"fontSize,omitempty"`
	TextAlign      *FieldCreateDocumentFieldsTextAlignText       `json:"textAlign,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaTextRequestBody) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaTextRequestBody) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaTextRequestBody) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaTextRequestBody) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaTextRequestBody) GetType() FieldCreateDocumentFieldsTypeTextRequestBody2 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeTextRequestBody2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaTextRequestBody) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldCreateDocumentFieldsFieldMetaTextRequestBody) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldCreateDocumentFieldsFieldMetaTextRequestBody) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldsFieldMetaTextRequestBody) GetTextAlign() *FieldCreateDocumentFieldsTextAlignText {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldsFieldText struct {
	Type      FieldCreateDocumentFieldsTypeTextRequestBody1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaTextRequestBody `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateDocumentFieldsFieldText) GetType() FieldCreateDocumentFieldsTypeTextRequestBody1 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeTextRequestBody1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldText) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaTextRequestBody {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldsFieldText) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldsFieldText) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldsFieldText) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldsFieldText) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldsFieldText) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldsFieldText) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsTypeDateRequestBody1 string

const (
	FieldCreateDocumentFieldsTypeDateRequestBody1Date FieldCreateDocumentFieldsTypeDateRequestBody1 = "DATE"
)

func (e FieldCreateDocumentFieldsTypeDateRequestBody1) ToPointer() *FieldCreateDocumentFieldsTypeDateRequestBody1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeDateRequestBody1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = FieldCreateDocumentFieldsTypeDateRequestBody1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeDateRequestBody1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeDateRequestBody2 string

const (
	FieldCreateDocumentFieldsTypeDateRequestBody2Date FieldCreateDocumentFieldsTypeDateRequestBody2 = "date"
)

func (e FieldCreateDocumentFieldsTypeDateRequestBody2) ToPointer() *FieldCreateDocumentFieldsTypeDateRequestBody2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeDateRequestBody2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateDocumentFieldsTypeDateRequestBody2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeDateRequestBody2: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignDate string

const (
	FieldCreateDocumentFieldsTextAlignDateLeft   FieldCreateDocumentFieldsTextAlignDate = "left"
	FieldCreateDocumentFieldsTextAlignDateCenter FieldCreateDocumentFieldsTextAlignDate = "center"
	FieldCreateDocumentFieldsTextAlignDateRight  FieldCreateDocumentFieldsTextAlignDate = "right"
)

func (e FieldCreateDocumentFieldsTextAlignDate) ToPointer() *FieldCreateDocumentFieldsTextAlignDate {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignDate: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaDateRequestBody struct {
	Label       *string                                       `json:"label,omitempty"`
	Placeholder *string                                       `json:"placeholder,omitempty"`
	Required    *bool                                         `json:"required,omitempty"`
	ReadOnly    *bool                                         `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsTypeDateRequestBody2 `json:"type"`
	FontSize    *float64                                      `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldsTextAlignDate       `json:"textAlign,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaDateRequestBody) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaDateRequestBody) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaDateRequestBody) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaDateRequestBody) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaDateRequestBody) GetType() FieldCreateDocumentFieldsTypeDateRequestBody2 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeDateRequestBody2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaDateRequestBody) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldsFieldMetaDateRequestBody) GetTextAlign() *FieldCreateDocumentFieldsTextAlignDate {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldsFieldDate struct {
	Type      FieldCreateDocumentFieldsTypeDateRequestBody1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaDateRequestBody `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateDocumentFieldsFieldDate) GetType() FieldCreateDocumentFieldsTypeDateRequestBody1 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeDateRequestBody1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldDate) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaDateRequestBody {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldsFieldDate) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldsFieldDate) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldsFieldDate) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldsFieldDate) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldsFieldDate) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldsFieldDate) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsTypeEmailRequestBody1 string

const (
	FieldCreateDocumentFieldsTypeEmailRequestBody1Email FieldCreateDocumentFieldsTypeEmailRequestBody1 = "EMAIL"
)

func (e FieldCreateDocumentFieldsTypeEmailRequestBody1) ToPointer() *FieldCreateDocumentFieldsTypeEmailRequestBody1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeEmailRequestBody1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = FieldCreateDocumentFieldsTypeEmailRequestBody1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeEmailRequestBody1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeEmailRequestBody2 string

const (
	FieldCreateDocumentFieldsTypeEmailRequestBody2Email FieldCreateDocumentFieldsTypeEmailRequestBody2 = "email"
)

func (e FieldCreateDocumentFieldsTypeEmailRequestBody2) ToPointer() *FieldCreateDocumentFieldsTypeEmailRequestBody2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeEmailRequestBody2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateDocumentFieldsTypeEmailRequestBody2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeEmailRequestBody2: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignEmail string

const (
	FieldCreateDocumentFieldsTextAlignEmailLeft   FieldCreateDocumentFieldsTextAlignEmail = "left"
	FieldCreateDocumentFieldsTextAlignEmailCenter FieldCreateDocumentFieldsTextAlignEmail = "center"
	FieldCreateDocumentFieldsTextAlignEmailRight  FieldCreateDocumentFieldsTextAlignEmail = "right"
)

func (e FieldCreateDocumentFieldsTextAlignEmail) ToPointer() *FieldCreateDocumentFieldsTextAlignEmail {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignEmail: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaEmailRequestBody struct {
	Label       *string                                        `json:"label,omitempty"`
	Placeholder *string                                        `json:"placeholder,omitempty"`
	Required    *bool                                          `json:"required,omitempty"`
	ReadOnly    *bool                                          `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsTypeEmailRequestBody2 `json:"type"`
	FontSize    *float64                                       `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldsTextAlignEmail       `json:"textAlign,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaEmailRequestBody) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaEmailRequestBody) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaEmailRequestBody) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaEmailRequestBody) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaEmailRequestBody) GetType() FieldCreateDocumentFieldsTypeEmailRequestBody2 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeEmailRequestBody2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaEmailRequestBody) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldsFieldMetaEmailRequestBody) GetTextAlign() *FieldCreateDocumentFieldsTextAlignEmail {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldsFieldEmail struct {
	Type      FieldCreateDocumentFieldsTypeEmailRequestBody1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaEmailRequestBody `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateDocumentFieldsFieldEmail) GetType() FieldCreateDocumentFieldsTypeEmailRequestBody1 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeEmailRequestBody1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldEmail) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaEmailRequestBody {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldsFieldEmail) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldsFieldEmail) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldsFieldEmail) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldsFieldEmail) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldsFieldEmail) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldsFieldEmail) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsTypeNameRequestBody1 string

const (
	FieldCreateDocumentFieldsTypeNameRequestBody1Name FieldCreateDocumentFieldsTypeNameRequestBody1 = "NAME"
)

func (e FieldCreateDocumentFieldsTypeNameRequestBody1) ToPointer() *FieldCreateDocumentFieldsTypeNameRequestBody1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeNameRequestBody1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = FieldCreateDocumentFieldsTypeNameRequestBody1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeNameRequestBody1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeNameRequestBody2 string

const (
	FieldCreateDocumentFieldsTypeNameRequestBody2Name FieldCreateDocumentFieldsTypeNameRequestBody2 = "name"
)

func (e FieldCreateDocumentFieldsTypeNameRequestBody2) ToPointer() *FieldCreateDocumentFieldsTypeNameRequestBody2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeNameRequestBody2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateDocumentFieldsTypeNameRequestBody2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeNameRequestBody2: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignName string

const (
	FieldCreateDocumentFieldsTextAlignNameLeft   FieldCreateDocumentFieldsTextAlignName = "left"
	FieldCreateDocumentFieldsTextAlignNameCenter FieldCreateDocumentFieldsTextAlignName = "center"
	FieldCreateDocumentFieldsTextAlignNameRight  FieldCreateDocumentFieldsTextAlignName = "right"
)

func (e FieldCreateDocumentFieldsTextAlignName) ToPointer() *FieldCreateDocumentFieldsTextAlignName {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignName: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaNameRequestBody struct {
	Label       *string                                       `json:"label,omitempty"`
	Placeholder *string                                       `json:"placeholder,omitempty"`
	Required    *bool                                         `json:"required,omitempty"`
	ReadOnly    *bool                                         `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsTypeNameRequestBody2 `json:"type"`
	FontSize    *float64                                      `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldsTextAlignName       `json:"textAlign,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaNameRequestBody) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaNameRequestBody) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaNameRequestBody) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaNameRequestBody) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaNameRequestBody) GetType() FieldCreateDocumentFieldsTypeNameRequestBody2 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeNameRequestBody2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaNameRequestBody) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldsFieldMetaNameRequestBody) GetTextAlign() *FieldCreateDocumentFieldsTextAlignName {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldsFieldName struct {
	Type      FieldCreateDocumentFieldsTypeNameRequestBody1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaNameRequestBody `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateDocumentFieldsFieldName) GetType() FieldCreateDocumentFieldsTypeNameRequestBody1 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeNameRequestBody1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldName) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaNameRequestBody {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldsFieldName) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldsFieldName) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldsFieldName) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldsFieldName) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldsFieldName) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldsFieldName) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsTypeInitialsRequestBody1 string

const (
	FieldCreateDocumentFieldsTypeInitialsRequestBody1Initials FieldCreateDocumentFieldsTypeInitialsRequestBody1 = "INITIALS"
)

func (e FieldCreateDocumentFieldsTypeInitialsRequestBody1) ToPointer() *FieldCreateDocumentFieldsTypeInitialsRequestBody1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeInitialsRequestBody1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = FieldCreateDocumentFieldsTypeInitialsRequestBody1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeInitialsRequestBody1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeInitialsRequestBody2 string

const (
	FieldCreateDocumentFieldsTypeInitialsRequestBody2Initials FieldCreateDocumentFieldsTypeInitialsRequestBody2 = "initials"
)

func (e FieldCreateDocumentFieldsTypeInitialsRequestBody2) ToPointer() *FieldCreateDocumentFieldsTypeInitialsRequestBody2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeInitialsRequestBody2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateDocumentFieldsTypeInitialsRequestBody2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeInitialsRequestBody2: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignInitials string

const (
	FieldCreateDocumentFieldsTextAlignInitialsLeft   FieldCreateDocumentFieldsTextAlignInitials = "left"
	FieldCreateDocumentFieldsTextAlignInitialsCenter FieldCreateDocumentFieldsTextAlignInitials = "center"
	FieldCreateDocumentFieldsTextAlignInitialsRight  FieldCreateDocumentFieldsTextAlignInitials = "right"
)

func (e FieldCreateDocumentFieldsTextAlignInitials) ToPointer() *FieldCreateDocumentFieldsTextAlignInitials {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignInitials: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaInitialsRequestBody struct {
	Label       *string                                           `json:"label,omitempty"`
	Placeholder *string                                           `json:"placeholder,omitempty"`
	Required    *bool                                             `json:"required,omitempty"`
	ReadOnly    *bool                                             `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsTypeInitialsRequestBody2 `json:"type"`
	FontSize    *float64                                          `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldsTextAlignInitials       `json:"textAlign,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaInitialsRequestBody) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaInitialsRequestBody) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaInitialsRequestBody) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaInitialsRequestBody) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaInitialsRequestBody) GetType() FieldCreateDocumentFieldsTypeInitialsRequestBody2 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeInitialsRequestBody2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaInitialsRequestBody) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldsFieldMetaInitialsRequestBody) GetTextAlign() *FieldCreateDocumentFieldsTextAlignInitials {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldsFieldInitials struct {
	Type      FieldCreateDocumentFieldsTypeInitialsRequestBody1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaInitialsRequestBody `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateDocumentFieldsFieldInitials) GetType() FieldCreateDocumentFieldsTypeInitialsRequestBody1 {
	if o == nil {
		return FieldCreateDocumentFieldsTypeInitialsRequestBody1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldInitials) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaInitialsRequestBody {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldsFieldInitials) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldsFieldInitials) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldsFieldInitials) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldsFieldInitials) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldsFieldInitials) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldsFieldInitials) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsTypeFreeSignature string

const (
	FieldCreateDocumentFieldsTypeFreeSignatureFreeSignature FieldCreateDocumentFieldsTypeFreeSignature = "FREE_SIGNATURE"
)

func (e FieldCreateDocumentFieldsTypeFreeSignature) ToPointer() *FieldCreateDocumentFieldsTypeFreeSignature {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeFreeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldCreateDocumentFieldsTypeFreeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeFreeSignature: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldFreeSignature struct {
	Type FieldCreateDocumentFieldsTypeFreeSignature `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateDocumentFieldsFieldFreeSignature) GetType() FieldCreateDocumentFieldsTypeFreeSignature {
	if o == nil {
		return FieldCreateDocumentFieldsTypeFreeSignature("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldFreeSignature) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldsFieldFreeSignature) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldsFieldFreeSignature) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldsFieldFreeSignature) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldsFieldFreeSignature) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldsFieldFreeSignature) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsTypeSignature string

const (
	FieldCreateDocumentFieldsTypeSignatureSignature FieldCreateDocumentFieldsTypeSignature = "SIGNATURE"
)

func (e FieldCreateDocumentFieldsTypeSignature) ToPointer() *FieldCreateDocumentFieldsTypeSignature {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = FieldCreateDocumentFieldsTypeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeSignature: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldSignature struct {
	Type FieldCreateDocumentFieldsTypeSignature `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateDocumentFieldsFieldSignature) GetType() FieldCreateDocumentFieldsTypeSignature {
	if o == nil {
		return FieldCreateDocumentFieldsTypeSignature("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldSignature) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldsFieldSignature) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldsFieldSignature) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldsFieldSignature) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldsFieldSignature) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldsFieldSignature) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsFieldUnionType string

const (
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldSignature     FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Signature"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldFreeSignature FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_FreeSignature"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldInitials      FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Initials"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldName          FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Name"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldEmail         FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Email"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldDate          FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Date"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldText          FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Text"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldNumber        FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Number"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldRadio         FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Radio"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldCheckbox      FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Checkbox"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldDropdown      FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Dropdown"
)

type FieldCreateDocumentFieldsFieldUnion struct {
	FieldCreateDocumentFieldsFieldSignature     *FieldCreateDocumentFieldsFieldSignature     `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldFreeSignature *FieldCreateDocumentFieldsFieldFreeSignature `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldInitials      *FieldCreateDocumentFieldsFieldInitials      `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldName          *FieldCreateDocumentFieldsFieldName          `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldEmail         *FieldCreateDocumentFieldsFieldEmail         `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldDate          *FieldCreateDocumentFieldsFieldDate          `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldText          *FieldCreateDocumentFieldsFieldText          `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldNumber        *FieldCreateDocumentFieldsFieldNumber        `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldRadio         *FieldCreateDocumentFieldsFieldRadio         `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldCheckbox      *FieldCreateDocumentFieldsFieldCheckbox      `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldDropdown      *FieldCreateDocumentFieldsFieldDropdown      `queryParam:"inline"`

	Type FieldCreateDocumentFieldsFieldUnionType
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldSignature(fieldCreateDocumentFieldsFieldSignature FieldCreateDocumentFieldsFieldSignature) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldSignature

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldSignature: &fieldCreateDocumentFieldsFieldSignature,
		Type:                                    typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldFreeSignature(fieldCreateDocumentFieldsFieldFreeSignature FieldCreateDocumentFieldsFieldFreeSignature) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldFreeSignature

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldFreeSignature: &fieldCreateDocumentFieldsFieldFreeSignature,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldInitials(fieldCreateDocumentFieldsFieldInitials FieldCreateDocumentFieldsFieldInitials) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldInitials

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldInitials: &fieldCreateDocumentFieldsFieldInitials,
		Type:                                   typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldName(fieldCreateDocumentFieldsFieldName FieldCreateDocumentFieldsFieldName) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldName

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldName: &fieldCreateDocumentFieldsFieldName,
		Type:                               typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldEmail(fieldCreateDocumentFieldsFieldEmail FieldCreateDocumentFieldsFieldEmail) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldEmail

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldEmail: &fieldCreateDocumentFieldsFieldEmail,
		Type:                                typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldDate(fieldCreateDocumentFieldsFieldDate FieldCreateDocumentFieldsFieldDate) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldDate

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldDate: &fieldCreateDocumentFieldsFieldDate,
		Type:                               typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldText(fieldCreateDocumentFieldsFieldText FieldCreateDocumentFieldsFieldText) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldText

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldText: &fieldCreateDocumentFieldsFieldText,
		Type:                               typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldNumber(fieldCreateDocumentFieldsFieldNumber FieldCreateDocumentFieldsFieldNumber) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldNumber

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldNumber: &fieldCreateDocumentFieldsFieldNumber,
		Type:                                 typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldRadio(fieldCreateDocumentFieldsFieldRadio FieldCreateDocumentFieldsFieldRadio) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldRadio

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldRadio: &fieldCreateDocumentFieldsFieldRadio,
		Type:                                typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldCheckbox(fieldCreateDocumentFieldsFieldCheckbox FieldCreateDocumentFieldsFieldCheckbox) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldCheckbox

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldCheckbox: &fieldCreateDocumentFieldsFieldCheckbox,
		Type:                                   typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldDropdown(fieldCreateDocumentFieldsFieldDropdown FieldCreateDocumentFieldsFieldDropdown) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldDropdown

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldDropdown: &fieldCreateDocumentFieldsFieldDropdown,
		Type:                                   typ,
	}
}

func (u *FieldCreateDocumentFieldsFieldUnion) UnmarshalJSON(data []byte) error {

	var fieldCreateDocumentFieldsFieldSignature FieldCreateDocumentFieldsFieldSignature = FieldCreateDocumentFieldsFieldSignature{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldSignature, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldSignature = &fieldCreateDocumentFieldsFieldSignature
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldSignature
		return nil
	}

	var fieldCreateDocumentFieldsFieldFreeSignature FieldCreateDocumentFieldsFieldFreeSignature = FieldCreateDocumentFieldsFieldFreeSignature{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldFreeSignature, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldFreeSignature = &fieldCreateDocumentFieldsFieldFreeSignature
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldFreeSignature
		return nil
	}

	var fieldCreateDocumentFieldsFieldInitials FieldCreateDocumentFieldsFieldInitials = FieldCreateDocumentFieldsFieldInitials{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldInitials, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldInitials = &fieldCreateDocumentFieldsFieldInitials
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldInitials
		return nil
	}

	var fieldCreateDocumentFieldsFieldName FieldCreateDocumentFieldsFieldName = FieldCreateDocumentFieldsFieldName{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldName, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldName = &fieldCreateDocumentFieldsFieldName
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldName
		return nil
	}

	var fieldCreateDocumentFieldsFieldEmail FieldCreateDocumentFieldsFieldEmail = FieldCreateDocumentFieldsFieldEmail{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldEmail, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldEmail = &fieldCreateDocumentFieldsFieldEmail
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldEmail
		return nil
	}

	var fieldCreateDocumentFieldsFieldDate FieldCreateDocumentFieldsFieldDate = FieldCreateDocumentFieldsFieldDate{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldDate, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldDate = &fieldCreateDocumentFieldsFieldDate
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldDate
		return nil
	}

	var fieldCreateDocumentFieldsFieldText FieldCreateDocumentFieldsFieldText = FieldCreateDocumentFieldsFieldText{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldText, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldText = &fieldCreateDocumentFieldsFieldText
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldText
		return nil
	}

	var fieldCreateDocumentFieldsFieldNumber FieldCreateDocumentFieldsFieldNumber = FieldCreateDocumentFieldsFieldNumber{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldNumber, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldNumber = &fieldCreateDocumentFieldsFieldNumber
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldNumber
		return nil
	}

	var fieldCreateDocumentFieldsFieldRadio FieldCreateDocumentFieldsFieldRadio = FieldCreateDocumentFieldsFieldRadio{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldRadio, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldRadio = &fieldCreateDocumentFieldsFieldRadio
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldRadio
		return nil
	}

	var fieldCreateDocumentFieldsFieldCheckbox FieldCreateDocumentFieldsFieldCheckbox = FieldCreateDocumentFieldsFieldCheckbox{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldCheckbox, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldCheckbox = &fieldCreateDocumentFieldsFieldCheckbox
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldCheckbox
		return nil
	}

	var fieldCreateDocumentFieldsFieldDropdown FieldCreateDocumentFieldsFieldDropdown = FieldCreateDocumentFieldsFieldDropdown{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldDropdown, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldDropdown = &fieldCreateDocumentFieldsFieldDropdown
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldCreateDocumentFieldsFieldUnion", string(data))
}

func (u FieldCreateDocumentFieldsFieldUnion) MarshalJSON() ([]byte, error) {
	if u.FieldCreateDocumentFieldsFieldSignature != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldSignature, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldFreeSignature != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldFreeSignature, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldInitials != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldInitials, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldName != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldName, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldEmail != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldEmail, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldDate != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldDate, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldText != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldText, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldNumber != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldNumber, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldRadio != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldRadio, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldCheckbox != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldCheckbox, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldDropdown != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type FieldCreateDocumentFieldsFieldUnion: all fields are null")
}

type FieldCreateDocumentFieldsRequest struct {
	DocumentID float64                               `json:"documentId"`
	Fields     []FieldCreateDocumentFieldsFieldUnion `json:"fields"`
}

func (o *FieldCreateDocumentFieldsRequest) GetDocumentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DocumentID
}

func (o *FieldCreateDocumentFieldsRequest) GetFields() []FieldCreateDocumentFieldsFieldUnion {
	if o == nil {
		return []FieldCreateDocumentFieldsFieldUnion{}
	}
	return o.Fields
}

type FieldCreateDocumentFieldsTypeResponse string

const (
	FieldCreateDocumentFieldsTypeResponseSignature     FieldCreateDocumentFieldsTypeResponse = "SIGNATURE"
	FieldCreateDocumentFieldsTypeResponseFreeSignature FieldCreateDocumentFieldsTypeResponse = "FREE_SIGNATURE"
	FieldCreateDocumentFieldsTypeResponseInitials      FieldCreateDocumentFieldsTypeResponse = "INITIALS"
	FieldCreateDocumentFieldsTypeResponseName          FieldCreateDocumentFieldsTypeResponse = "NAME"
	FieldCreateDocumentFieldsTypeResponseEmail         FieldCreateDocumentFieldsTypeResponse = "EMAIL"
	FieldCreateDocumentFieldsTypeResponseDate          FieldCreateDocumentFieldsTypeResponse = "DATE"
	FieldCreateDocumentFieldsTypeResponseText          FieldCreateDocumentFieldsTypeResponse = "TEXT"
	FieldCreateDocumentFieldsTypeResponseNumber        FieldCreateDocumentFieldsTypeResponse = "NUMBER"
	FieldCreateDocumentFieldsTypeResponseRadio         FieldCreateDocumentFieldsTypeResponse = "RADIO"
	FieldCreateDocumentFieldsTypeResponseCheckbox      FieldCreateDocumentFieldsTypeResponse = "CHECKBOX"
	FieldCreateDocumentFieldsTypeResponseDropdown      FieldCreateDocumentFieldsTypeResponse = "DROPDOWN"
)

func (e FieldCreateDocumentFieldsTypeResponse) ToPointer() *FieldCreateDocumentFieldsTypeResponse {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldCreateDocumentFieldsTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeResponse: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaTypeDropdown string

const (
	FieldCreateDocumentFieldsFieldMetaTypeDropdownDropdown FieldCreateDocumentFieldsFieldMetaTypeDropdown = "dropdown"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeDropdown) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeDropdown {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateDocumentFieldsFieldMetaTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeDropdown: %v", v)
	}
}

type FieldCreateDocumentFieldsValueResponse3 struct {
	Value string `json:"value"`
}

func (o *FieldCreateDocumentFieldsValueResponse3) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldsFieldMetaDropdownResponse struct {
	Label        *string                                        `json:"label,omitempty"`
	Placeholder  *string                                        `json:"placeholder,omitempty"`
	Required     *bool                                          `json:"required,omitempty"`
	ReadOnly     *bool                                          `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldsFieldMetaTypeDropdown `json:"type"`
	Values       []FieldCreateDocumentFieldsValueResponse3      `json:"values,omitempty"`
	DefaultValue *string                                        `json:"defaultValue,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaDropdownResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaDropdownResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaDropdownResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaDropdownResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaDropdownResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeDropdown {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeDropdown("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaDropdownResponse) GetValues() []FieldCreateDocumentFieldsValueResponse3 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateDocumentFieldsFieldMetaDropdownResponse) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldCreateDocumentFieldsFieldMetaTypeCheckbox string

const (
	FieldCreateDocumentFieldsFieldMetaTypeCheckboxCheckbox FieldCreateDocumentFieldsFieldMetaTypeCheckbox = "checkbox"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeCheckbox) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeCheckbox {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateDocumentFieldsFieldMetaTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeCheckbox: %v", v)
	}
}

type FieldCreateDocumentFieldsValueResponse2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateDocumentFieldsValueResponse2) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldsValueResponse2) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateDocumentFieldsValueResponse2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldsFieldMetaCheckboxResponse struct {
	Label            *string                                        `json:"label,omitempty"`
	Placeholder      *string                                        `json:"placeholder,omitempty"`
	Required         *bool                                          `json:"required,omitempty"`
	ReadOnly         *bool                                          `json:"readOnly,omitempty"`
	Type             FieldCreateDocumentFieldsFieldMetaTypeCheckbox `json:"type"`
	Values           []FieldCreateDocumentFieldsValueResponse2      `json:"values,omitempty"`
	ValidationRule   *string                                        `json:"validationRule,omitempty"`
	ValidationLength *float64                                       `json:"validationLength,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeCheckbox {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeCheckbox("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) GetValues() []FieldCreateDocumentFieldsValueResponse2 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldCreateDocumentFieldsFieldMetaTypeRadio string

const (
	FieldCreateDocumentFieldsFieldMetaTypeRadioRadio FieldCreateDocumentFieldsFieldMetaTypeRadio = "radio"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeRadio) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeRadio {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateDocumentFieldsFieldMetaTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeRadio: %v", v)
	}
}

type FieldCreateDocumentFieldsValueResponse1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateDocumentFieldsValueResponse1) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldsValueResponse1) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateDocumentFieldsValueResponse1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldsFieldMetaRadioResponse struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldMetaTypeRadio `json:"type"`
	Values      []FieldCreateDocumentFieldsValueResponse1   `json:"values,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaRadioResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaRadioResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaRadioResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaRadioResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaRadioResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeRadio {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeRadio("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaRadioResponse) GetValues() []FieldCreateDocumentFieldsValueResponse1 {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldCreateDocumentFieldsFieldMetaTypeNumber string

const (
	FieldCreateDocumentFieldsFieldMetaTypeNumberNumber FieldCreateDocumentFieldsFieldMetaTypeNumber = "number"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeNumber) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeNumber {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateDocumentFieldsFieldMetaTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeNumber: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignResponse6 string

const (
	FieldCreateDocumentFieldsTextAlignResponse6Left   FieldCreateDocumentFieldsTextAlignResponse6 = "left"
	FieldCreateDocumentFieldsTextAlignResponse6Center FieldCreateDocumentFieldsTextAlignResponse6 = "center"
	FieldCreateDocumentFieldsTextAlignResponse6Right  FieldCreateDocumentFieldsTextAlignResponse6 = "right"
)

func (e FieldCreateDocumentFieldsTextAlignResponse6) ToPointer() *FieldCreateDocumentFieldsTextAlignResponse6 {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignResponse6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignResponse6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignResponse6: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaNumberResponse struct {
	Label        *string                                      `json:"label,omitempty"`
	Placeholder  *string                                      `json:"placeholder,omitempty"`
	Required     *bool                                        `json:"required,omitempty"`
	ReadOnly     *bool                                        `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldsFieldMetaTypeNumber `json:"type"`
	NumberFormat *string                                      `json:"numberFormat,omitempty"`
	Value        *string                                      `json:"value,omitempty"`
	MinValue     *float64                                     `json:"minValue,omitempty"`
	MaxValue     *float64                                     `json:"maxValue,omitempty"`
	FontSize     *float64                                     `json:"fontSize,omitempty"`
	TextAlign    *FieldCreateDocumentFieldsTextAlignResponse6 `json:"textAlign,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeNumber {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeNumber("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetTextAlign() *FieldCreateDocumentFieldsTextAlignResponse6 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldsFieldMetaTypeText string

const (
	FieldCreateDocumentFieldsFieldMetaTypeTextText FieldCreateDocumentFieldsFieldMetaTypeText = "text"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeText) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeText {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateDocumentFieldsFieldMetaTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeText: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignResponse5 string

const (
	FieldCreateDocumentFieldsTextAlignResponse5Left   FieldCreateDocumentFieldsTextAlignResponse5 = "left"
	FieldCreateDocumentFieldsTextAlignResponse5Center FieldCreateDocumentFieldsTextAlignResponse5 = "center"
	FieldCreateDocumentFieldsTextAlignResponse5Right  FieldCreateDocumentFieldsTextAlignResponse5 = "right"
)

func (e FieldCreateDocumentFieldsTextAlignResponse5) ToPointer() *FieldCreateDocumentFieldsTextAlignResponse5 {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignResponse5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignResponse5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignResponse5: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaTextResponse struct {
	Label          *string                                      `json:"label,omitempty"`
	Placeholder    *string                                      `json:"placeholder,omitempty"`
	Required       *bool                                        `json:"required,omitempty"`
	ReadOnly       *bool                                        `json:"readOnly,omitempty"`
	Type           FieldCreateDocumentFieldsFieldMetaTypeText   `json:"type"`
	Text           *string                                      `json:"text,omitempty"`
	CharacterLimit *float64                                     `json:"characterLimit,omitempty"`
	FontSize       *float64                                     `json:"fontSize,omitempty"`
	TextAlign      *FieldCreateDocumentFieldsTextAlignResponse5 `json:"textAlign,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaTextResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaTextResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaTextResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaTextResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaTextResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeText {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeText("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaTextResponse) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldCreateDocumentFieldsFieldMetaTextResponse) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldCreateDocumentFieldsFieldMetaTextResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldsFieldMetaTextResponse) GetTextAlign() *FieldCreateDocumentFieldsTextAlignResponse5 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldsFieldMetaTypeDate string

const (
	FieldCreateDocumentFieldsFieldMetaTypeDateDate FieldCreateDocumentFieldsFieldMetaTypeDate = "date"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeDate) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeDate {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateDocumentFieldsFieldMetaTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeDate: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignResponse4 string

const (
	FieldCreateDocumentFieldsTextAlignResponse4Left   FieldCreateDocumentFieldsTextAlignResponse4 = "left"
	FieldCreateDocumentFieldsTextAlignResponse4Center FieldCreateDocumentFieldsTextAlignResponse4 = "center"
	FieldCreateDocumentFieldsTextAlignResponse4Right  FieldCreateDocumentFieldsTextAlignResponse4 = "right"
)

func (e FieldCreateDocumentFieldsTextAlignResponse4) ToPointer() *FieldCreateDocumentFieldsTextAlignResponse4 {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignResponse4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignResponse4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignResponse4: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaDateResponse struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldMetaTypeDate   `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldsTextAlignResponse4 `json:"textAlign,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaDateResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaDateResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaDateResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaDateResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaDateResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeDate {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeDate("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaDateResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldsFieldMetaDateResponse) GetTextAlign() *FieldCreateDocumentFieldsTextAlignResponse4 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldsFieldMetaTypeEmail string

const (
	FieldCreateDocumentFieldsFieldMetaTypeEmailEmail FieldCreateDocumentFieldsFieldMetaTypeEmail = "email"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeEmail) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeEmail {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateDocumentFieldsFieldMetaTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeEmail: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignResponse3 string

const (
	FieldCreateDocumentFieldsTextAlignResponse3Left   FieldCreateDocumentFieldsTextAlignResponse3 = "left"
	FieldCreateDocumentFieldsTextAlignResponse3Center FieldCreateDocumentFieldsTextAlignResponse3 = "center"
	FieldCreateDocumentFieldsTextAlignResponse3Right  FieldCreateDocumentFieldsTextAlignResponse3 = "right"
)

func (e FieldCreateDocumentFieldsTextAlignResponse3) ToPointer() *FieldCreateDocumentFieldsTextAlignResponse3 {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignResponse3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignResponse3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignResponse3: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaEmailResponse struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldMetaTypeEmail  `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldsTextAlignResponse3 `json:"textAlign,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaEmailResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaEmailResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaEmailResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaEmailResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaEmailResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeEmail {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeEmail("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaEmailResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldsFieldMetaEmailResponse) GetTextAlign() *FieldCreateDocumentFieldsTextAlignResponse3 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldsFieldMetaTypeName string

const (
	FieldCreateDocumentFieldsFieldMetaTypeNameName FieldCreateDocumentFieldsFieldMetaTypeName = "name"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeName) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeName {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateDocumentFieldsFieldMetaTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeName: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignResponse2 string

const (
	FieldCreateDocumentFieldsTextAlignResponse2Left   FieldCreateDocumentFieldsTextAlignResponse2 = "left"
	FieldCreateDocumentFieldsTextAlignResponse2Center FieldCreateDocumentFieldsTextAlignResponse2 = "center"
	FieldCreateDocumentFieldsTextAlignResponse2Right  FieldCreateDocumentFieldsTextAlignResponse2 = "right"
)

func (e FieldCreateDocumentFieldsTextAlignResponse2) ToPointer() *FieldCreateDocumentFieldsTextAlignResponse2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignResponse2: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaNameResponse struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldMetaTypeName   `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldsTextAlignResponse2 `json:"textAlign,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaNameResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaNameResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaNameResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaNameResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaNameResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeName {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeName("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaNameResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldsFieldMetaNameResponse) GetTextAlign() *FieldCreateDocumentFieldsTextAlignResponse2 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldsFieldMetaTypeInitials string

const (
	FieldCreateDocumentFieldsFieldMetaTypeInitialsInitials FieldCreateDocumentFieldsFieldMetaTypeInitials = "initials"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeInitials) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeInitials {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateDocumentFieldsFieldMetaTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeInitials: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignResponse1 string

const (
	FieldCreateDocumentFieldsTextAlignResponse1Left   FieldCreateDocumentFieldsTextAlignResponse1 = "left"
	FieldCreateDocumentFieldsTextAlignResponse1Center FieldCreateDocumentFieldsTextAlignResponse1 = "center"
	FieldCreateDocumentFieldsTextAlignResponse1Right  FieldCreateDocumentFieldsTextAlignResponse1 = "right"
)

func (e FieldCreateDocumentFieldsTextAlignResponse1) ToPointer() *FieldCreateDocumentFieldsTextAlignResponse1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignResponse1: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaInitialsResponse struct {
	Label       *string                                        `json:"label,omitempty"`
	Placeholder *string                                        `json:"placeholder,omitempty"`
	Required    *bool                                          `json:"required,omitempty"`
	ReadOnly    *bool                                          `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldMetaTypeInitials `json:"type"`
	FontSize    *float64                                       `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldsTextAlignResponse1   `json:"textAlign,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMetaInitialsResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMetaInitialsResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMetaInitialsResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMetaInitialsResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMetaInitialsResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeInitials {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeInitials("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMetaInitialsResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldsFieldMetaInitialsResponse) GetTextAlign() *FieldCreateDocumentFieldsTextAlignResponse1 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldsFieldMetaUnionType string

const (
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaInitialsResponse FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Initials_response"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaNameResponse     FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Name_response"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaEmailResponse    FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Email_response"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaDateResponse     FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Date_response"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaTextResponse     FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Text_response"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaNumberResponse   FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Number_response"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaRadioResponse    FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Radio_response"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaCheckboxResponse FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Checkbox_response"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaDropdownResponse FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Dropdown_response"
)

type FieldCreateDocumentFieldsFieldMetaUnion struct {
	FieldCreateDocumentFieldsFieldMetaInitialsResponse *FieldCreateDocumentFieldsFieldMetaInitialsResponse `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldMetaNameResponse     *FieldCreateDocumentFieldsFieldMetaNameResponse     `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldMetaEmailResponse    *FieldCreateDocumentFieldsFieldMetaEmailResponse    `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldMetaDateResponse     *FieldCreateDocumentFieldsFieldMetaDateResponse     `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldMetaTextResponse     *FieldCreateDocumentFieldsFieldMetaTextResponse     `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldMetaNumberResponse   *FieldCreateDocumentFieldsFieldMetaNumberResponse   `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldMetaRadioResponse    *FieldCreateDocumentFieldsFieldMetaRadioResponse    `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldMetaCheckboxResponse *FieldCreateDocumentFieldsFieldMetaCheckboxResponse `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldMetaDropdownResponse *FieldCreateDocumentFieldsFieldMetaDropdownResponse `queryParam:"inline"`

	Type FieldCreateDocumentFieldsFieldMetaUnionType
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaInitialsResponse(fieldCreateDocumentFieldsFieldMetaInitialsResponse FieldCreateDocumentFieldsFieldMetaInitialsResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaInitialsResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaInitialsResponse: &fieldCreateDocumentFieldsFieldMetaInitialsResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaNameResponse(fieldCreateDocumentFieldsFieldMetaNameResponse FieldCreateDocumentFieldsFieldMetaNameResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaNameResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaNameResponse: &fieldCreateDocumentFieldsFieldMetaNameResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaEmailResponse(fieldCreateDocumentFieldsFieldMetaEmailResponse FieldCreateDocumentFieldsFieldMetaEmailResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaEmailResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaEmailResponse: &fieldCreateDocumentFieldsFieldMetaEmailResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaDateResponse(fieldCreateDocumentFieldsFieldMetaDateResponse FieldCreateDocumentFieldsFieldMetaDateResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaDateResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaDateResponse: &fieldCreateDocumentFieldsFieldMetaDateResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaTextResponse(fieldCreateDocumentFieldsFieldMetaTextResponse FieldCreateDocumentFieldsFieldMetaTextResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaTextResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaTextResponse: &fieldCreateDocumentFieldsFieldMetaTextResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaNumberResponse(fieldCreateDocumentFieldsFieldMetaNumberResponse FieldCreateDocumentFieldsFieldMetaNumberResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaNumberResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaNumberResponse: &fieldCreateDocumentFieldsFieldMetaNumberResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaRadioResponse(fieldCreateDocumentFieldsFieldMetaRadioResponse FieldCreateDocumentFieldsFieldMetaRadioResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaRadioResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaRadioResponse: &fieldCreateDocumentFieldsFieldMetaRadioResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaCheckboxResponse(fieldCreateDocumentFieldsFieldMetaCheckboxResponse FieldCreateDocumentFieldsFieldMetaCheckboxResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaCheckboxResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaCheckboxResponse: &fieldCreateDocumentFieldsFieldMetaCheckboxResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaDropdownResponse(fieldCreateDocumentFieldsFieldMetaDropdownResponse FieldCreateDocumentFieldsFieldMetaDropdownResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaDropdownResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaDropdownResponse: &fieldCreateDocumentFieldsFieldMetaDropdownResponse,
		Type: typ,
	}
}

func (u *FieldCreateDocumentFieldsFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var fieldCreateDocumentFieldsFieldMetaRadioResponse FieldCreateDocumentFieldsFieldMetaRadioResponse = FieldCreateDocumentFieldsFieldMetaRadioResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaRadioResponse, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaRadioResponse = &fieldCreateDocumentFieldsFieldMetaRadioResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaRadioResponse
		return nil
	}

	var fieldCreateDocumentFieldsFieldMetaInitialsResponse FieldCreateDocumentFieldsFieldMetaInitialsResponse = FieldCreateDocumentFieldsFieldMetaInitialsResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaInitialsResponse, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaInitialsResponse = &fieldCreateDocumentFieldsFieldMetaInitialsResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaInitialsResponse
		return nil
	}

	var fieldCreateDocumentFieldsFieldMetaNameResponse FieldCreateDocumentFieldsFieldMetaNameResponse = FieldCreateDocumentFieldsFieldMetaNameResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaNameResponse, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaNameResponse = &fieldCreateDocumentFieldsFieldMetaNameResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaNameResponse
		return nil
	}

	var fieldCreateDocumentFieldsFieldMetaEmailResponse FieldCreateDocumentFieldsFieldMetaEmailResponse = FieldCreateDocumentFieldsFieldMetaEmailResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaEmailResponse, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaEmailResponse = &fieldCreateDocumentFieldsFieldMetaEmailResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaEmailResponse
		return nil
	}

	var fieldCreateDocumentFieldsFieldMetaDateResponse FieldCreateDocumentFieldsFieldMetaDateResponse = FieldCreateDocumentFieldsFieldMetaDateResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaDateResponse, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaDateResponse = &fieldCreateDocumentFieldsFieldMetaDateResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaDateResponse
		return nil
	}

	var fieldCreateDocumentFieldsFieldMetaDropdownResponse FieldCreateDocumentFieldsFieldMetaDropdownResponse = FieldCreateDocumentFieldsFieldMetaDropdownResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaDropdownResponse, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaDropdownResponse = &fieldCreateDocumentFieldsFieldMetaDropdownResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaDropdownResponse
		return nil
	}

	var fieldCreateDocumentFieldsFieldMetaCheckboxResponse FieldCreateDocumentFieldsFieldMetaCheckboxResponse = FieldCreateDocumentFieldsFieldMetaCheckboxResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaCheckboxResponse, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaCheckboxResponse = &fieldCreateDocumentFieldsFieldMetaCheckboxResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaCheckboxResponse
		return nil
	}

	var fieldCreateDocumentFieldsFieldMetaTextResponse FieldCreateDocumentFieldsFieldMetaTextResponse = FieldCreateDocumentFieldsFieldMetaTextResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaTextResponse, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaTextResponse = &fieldCreateDocumentFieldsFieldMetaTextResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaTextResponse
		return nil
	}

	var fieldCreateDocumentFieldsFieldMetaNumberResponse FieldCreateDocumentFieldsFieldMetaNumberResponse = FieldCreateDocumentFieldsFieldMetaNumberResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaNumberResponse, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaNumberResponse = &fieldCreateDocumentFieldsFieldMetaNumberResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaNumberResponse
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldCreateDocumentFieldsFieldMetaUnion", string(data))
}

func (u FieldCreateDocumentFieldsFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.FieldCreateDocumentFieldsFieldMetaInitialsResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaInitialsResponse, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMetaNameResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaNameResponse, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMetaEmailResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaEmailResponse, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMetaDateResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaDateResponse, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMetaTextResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaTextResponse, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMetaNumberResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaNumberResponse, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMetaRadioResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaRadioResponse, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMetaCheckboxResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaCheckboxResponse, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMetaDropdownResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaDropdownResponse, "", true)
	}

	return nil, errors.New("could not marshal union type FieldCreateDocumentFieldsFieldMetaUnion: all fields are null")
}

type FieldCreateDocumentFieldsFieldResponse struct {
	Type        FieldCreateDocumentFieldsTypeResponse `json:"type"`
	ID          float64                               `json:"id"`
	SecondaryID string                                `json:"secondaryId"`
	DocumentID  *float64                              `json:"documentId"`
	TemplateID  *float64                              `json:"templateId"`
	RecipientID float64                               `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                                  `json:"page"`
	PositionX  any                                      `json:"positionX,omitempty"`
	PositionY  any                                      `json:"positionY,omitempty"`
	Width      any                                      `json:"width,omitempty"`
	Height     any                                      `json:"height,omitempty"`
	CustomText string                                   `json:"customText"`
	Inserted   bool                                     `json:"inserted"`
	FieldMeta  *FieldCreateDocumentFieldsFieldMetaUnion `json:"fieldMeta"`
}

func (o *FieldCreateDocumentFieldsFieldResponse) GetType() FieldCreateDocumentFieldsTypeResponse {
	if o == nil {
		return FieldCreateDocumentFieldsTypeResponse("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldResponse) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldsFieldResponse) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *FieldCreateDocumentFieldsFieldResponse) GetDocumentID() *float64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *FieldCreateDocumentFieldsFieldResponse) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *FieldCreateDocumentFieldsFieldResponse) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldsFieldResponse) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *FieldCreateDocumentFieldsFieldResponse) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *FieldCreateDocumentFieldsFieldResponse) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *FieldCreateDocumentFieldsFieldResponse) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldsFieldResponse) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *FieldCreateDocumentFieldsFieldResponse) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *FieldCreateDocumentFieldsFieldResponse) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *FieldCreateDocumentFieldsFieldResponse) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaUnion {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

// FieldCreateDocumentFieldsResponseBody - Successful response
type FieldCreateDocumentFieldsResponseBody struct {
	Fields []FieldCreateDocumentFieldsFieldResponse `json:"fields"`
}

func (o *FieldCreateDocumentFieldsResponseBody) GetFields() []FieldCreateDocumentFieldsFieldResponse {
	if o == nil {
		return []FieldCreateDocumentFieldsFieldResponse{}
	}
	return o.Fields
}

type FieldCreateDocumentFieldsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldCreateDocumentFieldsResponseBody
}

func (o *FieldCreateDocumentFieldsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FieldCreateDocumentFieldsResponse) GetObject() *FieldCreateDocumentFieldsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
