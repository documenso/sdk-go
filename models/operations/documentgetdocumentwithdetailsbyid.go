// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type DocumentGetDocumentWithDetailsByIDRequest struct {
	DocumentID float64 `pathParam:"style=simple,explode=false,name=documentId"`
	// Filter documents by folder ID
	FolderID *string `queryParam:"style=form,explode=true,name=folderId"`
}

func (o *DocumentGetDocumentWithDetailsByIDRequest) GetDocumentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DocumentID
}

func (o *DocumentGetDocumentWithDetailsByIDRequest) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

type DocumentGetDocumentWithDetailsByIDVisibility string

const (
	DocumentGetDocumentWithDetailsByIDVisibilityEveryone        DocumentGetDocumentWithDetailsByIDVisibility = "EVERYONE"
	DocumentGetDocumentWithDetailsByIDVisibilityManagerAndAbove DocumentGetDocumentWithDetailsByIDVisibility = "MANAGER_AND_ABOVE"
	DocumentGetDocumentWithDetailsByIDVisibilityAdmin           DocumentGetDocumentWithDetailsByIDVisibility = "ADMIN"
)

func (e DocumentGetDocumentWithDetailsByIDVisibility) ToPointer() *DocumentGetDocumentWithDetailsByIDVisibility {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = DocumentGetDocumentWithDetailsByIDVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDVisibility: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDStatus string

const (
	DocumentGetDocumentWithDetailsByIDStatusDraft     DocumentGetDocumentWithDetailsByIDStatus = "DRAFT"
	DocumentGetDocumentWithDetailsByIDStatusPending   DocumentGetDocumentWithDetailsByIDStatus = "PENDING"
	DocumentGetDocumentWithDetailsByIDStatusCompleted DocumentGetDocumentWithDetailsByIDStatus = "COMPLETED"
	DocumentGetDocumentWithDetailsByIDStatusRejected  DocumentGetDocumentWithDetailsByIDStatus = "REJECTED"
)

func (e DocumentGetDocumentWithDetailsByIDStatus) ToPointer() *DocumentGetDocumentWithDetailsByIDStatus {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "PENDING":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "REJECTED":
		*e = DocumentGetDocumentWithDetailsByIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDStatus: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDSource string

const (
	DocumentGetDocumentWithDetailsByIDSourceDocument           DocumentGetDocumentWithDetailsByIDSource = "DOCUMENT"
	DocumentGetDocumentWithDetailsByIDSourceTemplate           DocumentGetDocumentWithDetailsByIDSource = "TEMPLATE"
	DocumentGetDocumentWithDetailsByIDSourceTemplateDirectLink DocumentGetDocumentWithDetailsByIDSource = "TEMPLATE_DIRECT_LINK"
)

func (e DocumentGetDocumentWithDetailsByIDSource) ToPointer() *DocumentGetDocumentWithDetailsByIDSource {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		fallthrough
	case "TEMPLATE_DIRECT_LINK":
		*e = DocumentGetDocumentWithDetailsByIDSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDSource: %v", v)
	}
}

// DocumentGetDocumentWithDetailsByIDGlobalAccessAuth - The type of authentication required for the recipient to access the document.
type DocumentGetDocumentWithDetailsByIDGlobalAccessAuth string

const (
	DocumentGetDocumentWithDetailsByIDGlobalAccessAuthAccount DocumentGetDocumentWithDetailsByIDGlobalAccessAuth = "ACCOUNT"
)

func (e DocumentGetDocumentWithDetailsByIDGlobalAccessAuth) ToPointer() *DocumentGetDocumentWithDetailsByIDGlobalAccessAuth {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDGlobalAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = DocumentGetDocumentWithDetailsByIDGlobalAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDGlobalAccessAuth: %v", v)
	}
}

// DocumentGetDocumentWithDetailsByIDGlobalActionAuth - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type DocumentGetDocumentWithDetailsByIDGlobalActionAuth string

const (
	DocumentGetDocumentWithDetailsByIDGlobalActionAuthAccount       DocumentGetDocumentWithDetailsByIDGlobalActionAuth = "ACCOUNT"
	DocumentGetDocumentWithDetailsByIDGlobalActionAuthPasskey       DocumentGetDocumentWithDetailsByIDGlobalActionAuth = "PASSKEY"
	DocumentGetDocumentWithDetailsByIDGlobalActionAuthTwoFactorAuth DocumentGetDocumentWithDetailsByIDGlobalActionAuth = "TWO_FACTOR_AUTH"
	DocumentGetDocumentWithDetailsByIDGlobalActionAuthPassword      DocumentGetDocumentWithDetailsByIDGlobalActionAuth = "PASSWORD"
)

func (e DocumentGetDocumentWithDetailsByIDGlobalActionAuth) ToPointer() *DocumentGetDocumentWithDetailsByIDGlobalActionAuth {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDGlobalActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		*e = DocumentGetDocumentWithDetailsByIDGlobalActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDGlobalActionAuth: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDAuthOptions struct {
	GlobalAccessAuth []DocumentGetDocumentWithDetailsByIDGlobalAccessAuth `json:"globalAccessAuth"`
	GlobalActionAuth []DocumentGetDocumentWithDetailsByIDGlobalActionAuth `json:"globalActionAuth"`
}

func (o *DocumentGetDocumentWithDetailsByIDAuthOptions) GetGlobalAccessAuth() []DocumentGetDocumentWithDetailsByIDGlobalAccessAuth {
	if o == nil {
		return []DocumentGetDocumentWithDetailsByIDGlobalAccessAuth{}
	}
	return o.GlobalAccessAuth
}

func (o *DocumentGetDocumentWithDetailsByIDAuthOptions) GetGlobalActionAuth() []DocumentGetDocumentWithDetailsByIDGlobalActionAuth {
	if o == nil {
		return []DocumentGetDocumentWithDetailsByIDGlobalActionAuth{}
	}
	return o.GlobalActionAuth
}

type DocumentGetDocumentWithDetailsByIDFormValuesType string

const (
	DocumentGetDocumentWithDetailsByIDFormValuesTypeStr     DocumentGetDocumentWithDetailsByIDFormValuesType = "str"
	DocumentGetDocumentWithDetailsByIDFormValuesTypeBoolean DocumentGetDocumentWithDetailsByIDFormValuesType = "boolean"
	DocumentGetDocumentWithDetailsByIDFormValuesTypeNumber  DocumentGetDocumentWithDetailsByIDFormValuesType = "number"
)

type DocumentGetDocumentWithDetailsByIDFormValues struct {
	Str     *string  `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`
	Number  *float64 `queryParam:"inline"`

	Type DocumentGetDocumentWithDetailsByIDFormValuesType
}

func CreateDocumentGetDocumentWithDetailsByIDFormValuesStr(str string) DocumentGetDocumentWithDetailsByIDFormValues {
	typ := DocumentGetDocumentWithDetailsByIDFormValuesTypeStr

	return DocumentGetDocumentWithDetailsByIDFormValues{
		Str:  &str,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFormValuesBoolean(boolean bool) DocumentGetDocumentWithDetailsByIDFormValues {
	typ := DocumentGetDocumentWithDetailsByIDFormValuesTypeBoolean

	return DocumentGetDocumentWithDetailsByIDFormValues{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFormValuesNumber(number float64) DocumentGetDocumentWithDetailsByIDFormValues {
	typ := DocumentGetDocumentWithDetailsByIDFormValuesTypeNumber

	return DocumentGetDocumentWithDetailsByIDFormValues{
		Number: &number,
		Type:   typ,
	}
}

func (u *DocumentGetDocumentWithDetailsByIDFormValues) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = DocumentGetDocumentWithDetailsByIDFormValuesTypeStr
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = DocumentGetDocumentWithDetailsByIDFormValuesTypeBoolean
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = DocumentGetDocumentWithDetailsByIDFormValuesTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DocumentGetDocumentWithDetailsByIDFormValues", string(data))
}

func (u DocumentGetDocumentWithDetailsByIDFormValues) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type DocumentGetDocumentWithDetailsByIDFormValues: all fields are null")
}

type DocumentGetDocumentWithDetailsByIDDocumentDataType string

const (
	DocumentGetDocumentWithDetailsByIDDocumentDataTypeS3Path  DocumentGetDocumentWithDetailsByIDDocumentDataType = "S3_PATH"
	DocumentGetDocumentWithDetailsByIDDocumentDataTypeBytes   DocumentGetDocumentWithDetailsByIDDocumentDataType = "BYTES"
	DocumentGetDocumentWithDetailsByIDDocumentDataTypeBytes64 DocumentGetDocumentWithDetailsByIDDocumentDataType = "BYTES_64"
)

func (e DocumentGetDocumentWithDetailsByIDDocumentDataType) ToPointer() *DocumentGetDocumentWithDetailsByIDDocumentDataType {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDDocumentDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3_PATH":
		fallthrough
	case "BYTES":
		fallthrough
	case "BYTES_64":
		*e = DocumentGetDocumentWithDetailsByIDDocumentDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDDocumentDataType: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDDocumentData struct {
	Type        DocumentGetDocumentWithDetailsByIDDocumentDataType `json:"type"`
	ID          string                                             `json:"id"`
	Data        string                                             `json:"data"`
	InitialData string                                             `json:"initialData"`
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentData) GetType() DocumentGetDocumentWithDetailsByIDDocumentDataType {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDDocumentDataType("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentData) GetData() string {
	if o == nil {
		return ""
	}
	return o.Data
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentData) GetInitialData() string {
	if o == nil {
		return ""
	}
	return o.InitialData
}

type DocumentGetDocumentWithDetailsByIDSigningOrder string

const (
	DocumentGetDocumentWithDetailsByIDSigningOrderParallel   DocumentGetDocumentWithDetailsByIDSigningOrder = "PARALLEL"
	DocumentGetDocumentWithDetailsByIDSigningOrderSequential DocumentGetDocumentWithDetailsByIDSigningOrder = "SEQUENTIAL"
)

func (e DocumentGetDocumentWithDetailsByIDSigningOrder) ToPointer() *DocumentGetDocumentWithDetailsByIDSigningOrder {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDSigningOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARALLEL":
		fallthrough
	case "SEQUENTIAL":
		*e = DocumentGetDocumentWithDetailsByIDSigningOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDSigningOrder: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDDistributionMethod string

const (
	DocumentGetDocumentWithDetailsByIDDistributionMethodEmail DocumentGetDocumentWithDetailsByIDDistributionMethod = "EMAIL"
	DocumentGetDocumentWithDetailsByIDDistributionMethodNone  DocumentGetDocumentWithDetailsByIDDistributionMethod = "NONE"
)

func (e DocumentGetDocumentWithDetailsByIDDistributionMethod) ToPointer() *DocumentGetDocumentWithDetailsByIDDistributionMethod {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDDistributionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = DocumentGetDocumentWithDetailsByIDDistributionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDDistributionMethod: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDEmailSettings struct {
	// Whether to send an email to all recipients that the document is ready for them to sign.
	RecipientSigningRequest *bool `default:"true" json:"recipientSigningRequest"`
	// Whether to send an email to the recipient who was removed from a pending document.
	RecipientRemoved *bool `default:"true" json:"recipientRemoved"`
	// Whether to send an email to the document owner when a recipient has signed the document.
	RecipientSigned *bool `default:"true" json:"recipientSigned"`
	// Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
	DocumentPending *bool `default:"true" json:"documentPending"`
	// Whether to send an email to all recipients when the document is complete.
	DocumentCompleted *bool `default:"true" json:"documentCompleted"`
	// Whether to send an email to all recipients if a pending document has been deleted.
	DocumentDeleted *bool `default:"true" json:"documentDeleted"`
	// Whether to send an email to the document owner when the document is complete.
	OwnerDocumentCompleted *bool `default:"true" json:"ownerDocumentCompleted"`
}

func (d DocumentGetDocumentWithDetailsByIDEmailSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetDocumentWithDetailsByIDEmailSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *DocumentGetDocumentWithDetailsByIDEmailSettings) GetRecipientSigningRequest() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigningRequest
}

func (o *DocumentGetDocumentWithDetailsByIDEmailSettings) GetRecipientRemoved() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientRemoved
}

func (o *DocumentGetDocumentWithDetailsByIDEmailSettings) GetRecipientSigned() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigned
}

func (o *DocumentGetDocumentWithDetailsByIDEmailSettings) GetDocumentPending() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentPending
}

func (o *DocumentGetDocumentWithDetailsByIDEmailSettings) GetDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentCompleted
}

func (o *DocumentGetDocumentWithDetailsByIDEmailSettings) GetDocumentDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentDeleted
}

func (o *DocumentGetDocumentWithDetailsByIDEmailSettings) GetOwnerDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.OwnerDocumentCompleted
}

type DocumentGetDocumentWithDetailsByIDDocumentMeta struct {
	SigningOrder           DocumentGetDocumentWithDetailsByIDSigningOrder       `json:"signingOrder"`
	DistributionMethod     DocumentGetDocumentWithDetailsByIDDistributionMethod `json:"distributionMethod"`
	ID                     string                                               `json:"id"`
	Subject                *string                                              `json:"subject"`
	Message                *string                                              `json:"message"`
	Timezone               *string                                              `json:"timezone"`
	Password               *string                                              `json:"password"`
	DateFormat             *string                                              `json:"dateFormat"`
	DocumentID             float64                                              `json:"documentId"`
	RedirectURL            *string                                              `json:"redirectUrl"`
	TypedSignatureEnabled  bool                                                 `json:"typedSignatureEnabled"`
	UploadSignatureEnabled bool                                                 `json:"uploadSignatureEnabled"`
	DrawSignatureEnabled   bool                                                 `json:"drawSignatureEnabled"`
	AllowDictateNextSigner bool                                                 `json:"allowDictateNextSigner"`
	Language               string                                               `json:"language"`
	EmailSettings          *DocumentGetDocumentWithDetailsByIDEmailSettings     `json:"emailSettings"`
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentMeta) GetSigningOrder() DocumentGetDocumentWithDetailsByIDSigningOrder {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDSigningOrder("")
	}
	return o.SigningOrder
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentMeta) GetDistributionMethod() DocumentGetDocumentWithDetailsByIDDistributionMethod {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDDistributionMethod("")
	}
	return o.DistributionMethod
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentMeta) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentMeta) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentMeta) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentMeta) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentMeta) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentMeta) GetDateFormat() *string {
	if o == nil {
		return nil
	}
	return o.DateFormat
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentMeta) GetDocumentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DocumentID
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentMeta) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentMeta) GetTypedSignatureEnabled() bool {
	if o == nil {
		return false
	}
	return o.TypedSignatureEnabled
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentMeta) GetUploadSignatureEnabled() bool {
	if o == nil {
		return false
	}
	return o.UploadSignatureEnabled
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentMeta) GetDrawSignatureEnabled() bool {
	if o == nil {
		return false
	}
	return o.DrawSignatureEnabled
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentMeta) GetAllowDictateNextSigner() bool {
	if o == nil {
		return false
	}
	return o.AllowDictateNextSigner
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentMeta) GetLanguage() string {
	if o == nil {
		return ""
	}
	return o.Language
}

func (o *DocumentGetDocumentWithDetailsByIDDocumentMeta) GetEmailSettings() *DocumentGetDocumentWithDetailsByIDEmailSettings {
	if o == nil {
		return nil
	}
	return o.EmailSettings
}

type DocumentGetDocumentWithDetailsByIDFolderType string

const (
	DocumentGetDocumentWithDetailsByIDFolderTypeDocument DocumentGetDocumentWithDetailsByIDFolderType = "DOCUMENT"
	DocumentGetDocumentWithDetailsByIDFolderTypeTemplate DocumentGetDocumentWithDetailsByIDFolderType = "TEMPLATE"
)

func (e DocumentGetDocumentWithDetailsByIDFolderType) ToPointer() *DocumentGetDocumentWithDetailsByIDFolderType {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDFolderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		*e = DocumentGetDocumentWithDetailsByIDFolderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDFolderType: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFolderVisibility string

const (
	DocumentGetDocumentWithDetailsByIDFolderVisibilityEveryone        DocumentGetDocumentWithDetailsByIDFolderVisibility = "EVERYONE"
	DocumentGetDocumentWithDetailsByIDFolderVisibilityManagerAndAbove DocumentGetDocumentWithDetailsByIDFolderVisibility = "MANAGER_AND_ABOVE"
	DocumentGetDocumentWithDetailsByIDFolderVisibilityAdmin           DocumentGetDocumentWithDetailsByIDFolderVisibility = "ADMIN"
)

func (e DocumentGetDocumentWithDetailsByIDFolderVisibility) ToPointer() *DocumentGetDocumentWithDetailsByIDFolderVisibility {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDFolderVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = DocumentGetDocumentWithDetailsByIDFolderVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDFolderVisibility: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFolder struct {
	ID         string                                             `json:"id"`
	Name       string                                             `json:"name"`
	Type       DocumentGetDocumentWithDetailsByIDFolderType       `json:"type"`
	Visibility DocumentGetDocumentWithDetailsByIDFolderVisibility `json:"visibility"`
	UserID     float64                                            `json:"userId"`
	TeamID     float64                                            `json:"teamId"`
	Pinned     bool                                               `json:"pinned"`
	ParentID   *string                                            `json:"parentId"`
	CreatedAt  string                                             `json:"createdAt"`
	UpdatedAt  string                                             `json:"updatedAt"`
}

func (o *DocumentGetDocumentWithDetailsByIDFolder) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DocumentGetDocumentWithDetailsByIDFolder) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DocumentGetDocumentWithDetailsByIDFolder) GetType() DocumentGetDocumentWithDetailsByIDFolderType {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDFolderType("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFolder) GetVisibility() DocumentGetDocumentWithDetailsByIDFolderVisibility {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDFolderVisibility("")
	}
	return o.Visibility
}

func (o *DocumentGetDocumentWithDetailsByIDFolder) GetUserID() float64 {
	if o == nil {
		return 0.0
	}
	return o.UserID
}

func (o *DocumentGetDocumentWithDetailsByIDFolder) GetTeamID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TeamID
}

func (o *DocumentGetDocumentWithDetailsByIDFolder) GetPinned() bool {
	if o == nil {
		return false
	}
	return o.Pinned
}

func (o *DocumentGetDocumentWithDetailsByIDFolder) GetParentID() *string {
	if o == nil {
		return nil
	}
	return o.ParentID
}

func (o *DocumentGetDocumentWithDetailsByIDFolder) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *DocumentGetDocumentWithDetailsByIDFolder) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

type DocumentGetDocumentWithDetailsByIDRole string

const (
	DocumentGetDocumentWithDetailsByIDRoleCc        DocumentGetDocumentWithDetailsByIDRole = "CC"
	DocumentGetDocumentWithDetailsByIDRoleSigner    DocumentGetDocumentWithDetailsByIDRole = "SIGNER"
	DocumentGetDocumentWithDetailsByIDRoleViewer    DocumentGetDocumentWithDetailsByIDRole = "VIEWER"
	DocumentGetDocumentWithDetailsByIDRoleApprover  DocumentGetDocumentWithDetailsByIDRole = "APPROVER"
	DocumentGetDocumentWithDetailsByIDRoleAssistant DocumentGetDocumentWithDetailsByIDRole = "ASSISTANT"
)

func (e DocumentGetDocumentWithDetailsByIDRole) ToPointer() *DocumentGetDocumentWithDetailsByIDRole {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = DocumentGetDocumentWithDetailsByIDRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDRole: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDReadStatus string

const (
	DocumentGetDocumentWithDetailsByIDReadStatusNotOpened DocumentGetDocumentWithDetailsByIDReadStatus = "NOT_OPENED"
	DocumentGetDocumentWithDetailsByIDReadStatusOpened    DocumentGetDocumentWithDetailsByIDReadStatus = "OPENED"
)

func (e DocumentGetDocumentWithDetailsByIDReadStatus) ToPointer() *DocumentGetDocumentWithDetailsByIDReadStatus {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = DocumentGetDocumentWithDetailsByIDReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDReadStatus: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDSigningStatus string

const (
	DocumentGetDocumentWithDetailsByIDSigningStatusNotSigned DocumentGetDocumentWithDetailsByIDSigningStatus = "NOT_SIGNED"
	DocumentGetDocumentWithDetailsByIDSigningStatusSigned    DocumentGetDocumentWithDetailsByIDSigningStatus = "SIGNED"
	DocumentGetDocumentWithDetailsByIDSigningStatusRejected  DocumentGetDocumentWithDetailsByIDSigningStatus = "REJECTED"
)

func (e DocumentGetDocumentWithDetailsByIDSigningStatus) ToPointer() *DocumentGetDocumentWithDetailsByIDSigningStatus {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = DocumentGetDocumentWithDetailsByIDSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDSigningStatus: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDSendStatus string

const (
	DocumentGetDocumentWithDetailsByIDSendStatusNotSent DocumentGetDocumentWithDetailsByIDSendStatus = "NOT_SENT"
	DocumentGetDocumentWithDetailsByIDSendStatusSent    DocumentGetDocumentWithDetailsByIDSendStatus = "SENT"
)

func (e DocumentGetDocumentWithDetailsByIDSendStatus) ToPointer() *DocumentGetDocumentWithDetailsByIDSendStatus {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = DocumentGetDocumentWithDetailsByIDSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDSendStatus: %v", v)
	}
}

// DocumentGetDocumentWithDetailsByIDAccessAuth - The type of authentication required for the recipient to access the document.
type DocumentGetDocumentWithDetailsByIDAccessAuth string

const (
	DocumentGetDocumentWithDetailsByIDAccessAuthAccount DocumentGetDocumentWithDetailsByIDAccessAuth = "ACCOUNT"
)

func (e DocumentGetDocumentWithDetailsByIDAccessAuth) ToPointer() *DocumentGetDocumentWithDetailsByIDAccessAuth {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = DocumentGetDocumentWithDetailsByIDAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDAccessAuth: %v", v)
	}
}

// DocumentGetDocumentWithDetailsByIDActionAuth - The type of authentication required for the recipient to sign the document.
type DocumentGetDocumentWithDetailsByIDActionAuth string

const (
	DocumentGetDocumentWithDetailsByIDActionAuthAccount       DocumentGetDocumentWithDetailsByIDActionAuth = "ACCOUNT"
	DocumentGetDocumentWithDetailsByIDActionAuthPasskey       DocumentGetDocumentWithDetailsByIDActionAuth = "PASSKEY"
	DocumentGetDocumentWithDetailsByIDActionAuthTwoFactorAuth DocumentGetDocumentWithDetailsByIDActionAuth = "TWO_FACTOR_AUTH"
	DocumentGetDocumentWithDetailsByIDActionAuthPassword      DocumentGetDocumentWithDetailsByIDActionAuth = "PASSWORD"
	DocumentGetDocumentWithDetailsByIDActionAuthExplicitNone  DocumentGetDocumentWithDetailsByIDActionAuth = "EXPLICIT_NONE"
)

func (e DocumentGetDocumentWithDetailsByIDActionAuth) ToPointer() *DocumentGetDocumentWithDetailsByIDActionAuth {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		fallthrough
	case "EXPLICIT_NONE":
		*e = DocumentGetDocumentWithDetailsByIDActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDActionAuth: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDRecipientAuthOptions struct {
	AccessAuth []DocumentGetDocumentWithDetailsByIDAccessAuth `json:"accessAuth"`
	ActionAuth []DocumentGetDocumentWithDetailsByIDActionAuth `json:"actionAuth"`
}

func (o *DocumentGetDocumentWithDetailsByIDRecipientAuthOptions) GetAccessAuth() []DocumentGetDocumentWithDetailsByIDAccessAuth {
	if o == nil {
		return []DocumentGetDocumentWithDetailsByIDAccessAuth{}
	}
	return o.AccessAuth
}

func (o *DocumentGetDocumentWithDetailsByIDRecipientAuthOptions) GetActionAuth() []DocumentGetDocumentWithDetailsByIDActionAuth {
	if o == nil {
		return []DocumentGetDocumentWithDetailsByIDActionAuth{}
	}
	return o.ActionAuth
}

type DocumentGetDocumentWithDetailsByIDRecipient struct {
	Role              DocumentGetDocumentWithDetailsByIDRole                  `json:"role"`
	ReadStatus        DocumentGetDocumentWithDetailsByIDReadStatus            `json:"readStatus"`
	SigningStatus     DocumentGetDocumentWithDetailsByIDSigningStatus         `json:"signingStatus"`
	SendStatus        DocumentGetDocumentWithDetailsByIDSendStatus            `json:"sendStatus"`
	ID                float64                                                 `json:"id"`
	DocumentID        *float64                                                `json:"documentId"`
	TemplateID        *float64                                                `json:"templateId"`
	Email             string                                                  `json:"email"`
	Name              string                                                  `json:"name"`
	Token             string                                                  `json:"token"`
	DocumentDeletedAt *string                                                 `json:"documentDeletedAt"`
	Expired           *string                                                 `json:"expired"`
	SignedAt          *string                                                 `json:"signedAt"`
	AuthOptions       *DocumentGetDocumentWithDetailsByIDRecipientAuthOptions `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
}

func (o *DocumentGetDocumentWithDetailsByIDRecipient) GetRole() DocumentGetDocumentWithDetailsByIDRole {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDRole("")
	}
	return o.Role
}

func (o *DocumentGetDocumentWithDetailsByIDRecipient) GetReadStatus() DocumentGetDocumentWithDetailsByIDReadStatus {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDReadStatus("")
	}
	return o.ReadStatus
}

func (o *DocumentGetDocumentWithDetailsByIDRecipient) GetSigningStatus() DocumentGetDocumentWithDetailsByIDSigningStatus {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDSigningStatus("")
	}
	return o.SigningStatus
}

func (o *DocumentGetDocumentWithDetailsByIDRecipient) GetSendStatus() DocumentGetDocumentWithDetailsByIDSendStatus {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDSendStatus("")
	}
	return o.SendStatus
}

func (o *DocumentGetDocumentWithDetailsByIDRecipient) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *DocumentGetDocumentWithDetailsByIDRecipient) GetDocumentID() *float64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *DocumentGetDocumentWithDetailsByIDRecipient) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *DocumentGetDocumentWithDetailsByIDRecipient) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *DocumentGetDocumentWithDetailsByIDRecipient) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DocumentGetDocumentWithDetailsByIDRecipient) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *DocumentGetDocumentWithDetailsByIDRecipient) GetDocumentDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DocumentDeletedAt
}

func (o *DocumentGetDocumentWithDetailsByIDRecipient) GetExpired() *string {
	if o == nil {
		return nil
	}
	return o.Expired
}

func (o *DocumentGetDocumentWithDetailsByIDRecipient) GetSignedAt() *string {
	if o == nil {
		return nil
	}
	return o.SignedAt
}

func (o *DocumentGetDocumentWithDetailsByIDRecipient) GetAuthOptions() *DocumentGetDocumentWithDetailsByIDRecipientAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *DocumentGetDocumentWithDetailsByIDRecipient) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *DocumentGetDocumentWithDetailsByIDRecipient) GetRejectionReason() *string {
	if o == nil {
		return nil
	}
	return o.RejectionReason
}

type DocumentGetDocumentWithDetailsByIDFieldType string

const (
	DocumentGetDocumentWithDetailsByIDFieldTypeSignature     DocumentGetDocumentWithDetailsByIDFieldType = "SIGNATURE"
	DocumentGetDocumentWithDetailsByIDFieldTypeFreeSignature DocumentGetDocumentWithDetailsByIDFieldType = "FREE_SIGNATURE"
	DocumentGetDocumentWithDetailsByIDFieldTypeInitials      DocumentGetDocumentWithDetailsByIDFieldType = "INITIALS"
	DocumentGetDocumentWithDetailsByIDFieldTypeName          DocumentGetDocumentWithDetailsByIDFieldType = "NAME"
	DocumentGetDocumentWithDetailsByIDFieldTypeEmail         DocumentGetDocumentWithDetailsByIDFieldType = "EMAIL"
	DocumentGetDocumentWithDetailsByIDFieldTypeDate          DocumentGetDocumentWithDetailsByIDFieldType = "DATE"
	DocumentGetDocumentWithDetailsByIDFieldTypeText          DocumentGetDocumentWithDetailsByIDFieldType = "TEXT"
	DocumentGetDocumentWithDetailsByIDFieldTypeNumber        DocumentGetDocumentWithDetailsByIDFieldType = "NUMBER"
	DocumentGetDocumentWithDetailsByIDFieldTypeRadio         DocumentGetDocumentWithDetailsByIDFieldType = "RADIO"
	DocumentGetDocumentWithDetailsByIDFieldTypeCheckbox      DocumentGetDocumentWithDetailsByIDFieldType = "CHECKBOX"
	DocumentGetDocumentWithDetailsByIDFieldTypeDropdown      DocumentGetDocumentWithDetailsByIDFieldType = "DROPDOWN"
)

func (e DocumentGetDocumentWithDetailsByIDFieldType) ToPointer() *DocumentGetDocumentWithDetailsByIDFieldType {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = DocumentGetDocumentWithDetailsByIDFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDFieldType: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDTypeDropdown string

const (
	DocumentGetDocumentWithDetailsByIDTypeDropdownDropdown DocumentGetDocumentWithDetailsByIDTypeDropdown = "dropdown"
)

func (e DocumentGetDocumentWithDetailsByIDTypeDropdown) ToPointer() *DocumentGetDocumentWithDetailsByIDTypeDropdown {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = DocumentGetDocumentWithDetailsByIDTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDTypeDropdown: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDValue3 struct {
	Value string `json:"value"`
}

func (d DocumentGetDocumentWithDetailsByIDValue3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetDocumentWithDetailsByIDValue3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (o *DocumentGetDocumentWithDetailsByIDValue3) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type DocumentGetDocumentWithDetailsByIDFieldMetaDropdown struct {
	Label        *string                                        `json:"label,omitempty"`
	Placeholder  *string                                        `json:"placeholder,omitempty"`
	Required     *bool                                          `json:"required,omitempty"`
	ReadOnly     *bool                                          `json:"readOnly,omitempty"`
	Type         DocumentGetDocumentWithDetailsByIDTypeDropdown `json:"type"`
	Values       []DocumentGetDocumentWithDetailsByIDValue3     `json:"values,omitempty"`
	DefaultValue *string                                        `json:"defaultValue,omitempty"`
}

func (d DocumentGetDocumentWithDetailsByIDFieldMetaDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetDocumentWithDetailsByIDFieldMetaDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDropdown) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDropdown) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDropdown) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDropdown) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDropdown) GetType() DocumentGetDocumentWithDetailsByIDTypeDropdown {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDTypeDropdown("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDropdown) GetValues() []DocumentGetDocumentWithDetailsByIDValue3 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDropdown) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type DocumentGetDocumentWithDetailsByIDTypeCheckbox string

const (
	DocumentGetDocumentWithDetailsByIDTypeCheckboxCheckbox DocumentGetDocumentWithDetailsByIDTypeCheckbox = "checkbox"
)

func (e DocumentGetDocumentWithDetailsByIDTypeCheckbox) ToPointer() *DocumentGetDocumentWithDetailsByIDTypeCheckbox {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = DocumentGetDocumentWithDetailsByIDTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDTypeCheckbox: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDValue2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (d DocumentGetDocumentWithDetailsByIDValue2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetDocumentWithDetailsByIDValue2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *DocumentGetDocumentWithDetailsByIDValue2) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *DocumentGetDocumentWithDetailsByIDValue2) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *DocumentGetDocumentWithDetailsByIDValue2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox struct {
	Label            *string                                        `json:"label,omitempty"`
	Placeholder      *string                                        `json:"placeholder,omitempty"`
	Required         *bool                                          `json:"required,omitempty"`
	ReadOnly         *bool                                          `json:"readOnly,omitempty"`
	Type             DocumentGetDocumentWithDetailsByIDTypeCheckbox `json:"type"`
	Values           []DocumentGetDocumentWithDetailsByIDValue2     `json:"values,omitempty"`
	ValidationRule   *string                                        `json:"validationRule,omitempty"`
	ValidationLength *float64                                       `json:"validationLength,omitempty"`
}

func (d DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox) GetType() DocumentGetDocumentWithDetailsByIDTypeCheckbox {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDTypeCheckbox("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox) GetValues() []DocumentGetDocumentWithDetailsByIDValue2 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type DocumentGetDocumentWithDetailsByIDTypeRadio string

const (
	DocumentGetDocumentWithDetailsByIDTypeRadioRadio DocumentGetDocumentWithDetailsByIDTypeRadio = "radio"
)

func (e DocumentGetDocumentWithDetailsByIDTypeRadio) ToPointer() *DocumentGetDocumentWithDetailsByIDTypeRadio {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = DocumentGetDocumentWithDetailsByIDTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDTypeRadio: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDValue1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (d DocumentGetDocumentWithDetailsByIDValue1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetDocumentWithDetailsByIDValue1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *DocumentGetDocumentWithDetailsByIDValue1) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *DocumentGetDocumentWithDetailsByIDValue1) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *DocumentGetDocumentWithDetailsByIDValue1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type DocumentGetDocumentWithDetailsByIDFieldMetaRadio struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        DocumentGetDocumentWithDetailsByIDTypeRadio `json:"type"`
	Values      []DocumentGetDocumentWithDetailsByIDValue1  `json:"values,omitempty"`
}

func (d DocumentGetDocumentWithDetailsByIDFieldMetaRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetDocumentWithDetailsByIDFieldMetaRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaRadio) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaRadio) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaRadio) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaRadio) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaRadio) GetType() DocumentGetDocumentWithDetailsByIDTypeRadio {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDTypeRadio("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaRadio) GetValues() []DocumentGetDocumentWithDetailsByIDValue1 {
	if o == nil {
		return nil
	}
	return o.Values
}

type DocumentGetDocumentWithDetailsByIDTypeNumber string

const (
	DocumentGetDocumentWithDetailsByIDTypeNumberNumber DocumentGetDocumentWithDetailsByIDTypeNumber = "number"
)

func (e DocumentGetDocumentWithDetailsByIDTypeNumber) ToPointer() *DocumentGetDocumentWithDetailsByIDTypeNumber {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = DocumentGetDocumentWithDetailsByIDTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDTypeNumber: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDTextAlign6 string

const (
	DocumentGetDocumentWithDetailsByIDTextAlign6Left   DocumentGetDocumentWithDetailsByIDTextAlign6 = "left"
	DocumentGetDocumentWithDetailsByIDTextAlign6Center DocumentGetDocumentWithDetailsByIDTextAlign6 = "center"
	DocumentGetDocumentWithDetailsByIDTextAlign6Right  DocumentGetDocumentWithDetailsByIDTextAlign6 = "right"
)

func (e DocumentGetDocumentWithDetailsByIDTextAlign6) ToPointer() *DocumentGetDocumentWithDetailsByIDTextAlign6 {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDTextAlign6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentGetDocumentWithDetailsByIDTextAlign6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDTextAlign6: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFieldMetaNumber struct {
	Label        *string                                       `json:"label,omitempty"`
	Placeholder  *string                                       `json:"placeholder,omitempty"`
	Required     *bool                                         `json:"required,omitempty"`
	ReadOnly     *bool                                         `json:"readOnly,omitempty"`
	Type         DocumentGetDocumentWithDetailsByIDTypeNumber  `json:"type"`
	NumberFormat *string                                       `json:"numberFormat,omitempty"`
	Value        *string                                       `json:"value,omitempty"`
	MinValue     *float64                                      `json:"minValue,omitempty"`
	MaxValue     *float64                                      `json:"maxValue,omitempty"`
	FontSize     *float64                                      `json:"fontSize,omitempty"`
	TextAlign    *DocumentGetDocumentWithDetailsByIDTextAlign6 `json:"textAlign,omitempty"`
}

func (d DocumentGetDocumentWithDetailsByIDFieldMetaNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetDocumentWithDetailsByIDFieldMetaNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaNumber) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaNumber) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaNumber) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaNumber) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaNumber) GetType() DocumentGetDocumentWithDetailsByIDTypeNumber {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDTypeNumber("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaNumber) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaNumber) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaNumber) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaNumber) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaNumber) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaNumber) GetTextAlign() *DocumentGetDocumentWithDetailsByIDTextAlign6 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type DocumentGetDocumentWithDetailsByIDTypeText string

const (
	DocumentGetDocumentWithDetailsByIDTypeTextText DocumentGetDocumentWithDetailsByIDTypeText = "text"
)

func (e DocumentGetDocumentWithDetailsByIDTypeText) ToPointer() *DocumentGetDocumentWithDetailsByIDTypeText {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = DocumentGetDocumentWithDetailsByIDTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDTypeText: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDTextAlign5 string

const (
	DocumentGetDocumentWithDetailsByIDTextAlign5Left   DocumentGetDocumentWithDetailsByIDTextAlign5 = "left"
	DocumentGetDocumentWithDetailsByIDTextAlign5Center DocumentGetDocumentWithDetailsByIDTextAlign5 = "center"
	DocumentGetDocumentWithDetailsByIDTextAlign5Right  DocumentGetDocumentWithDetailsByIDTextAlign5 = "right"
)

func (e DocumentGetDocumentWithDetailsByIDTextAlign5) ToPointer() *DocumentGetDocumentWithDetailsByIDTextAlign5 {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDTextAlign5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentGetDocumentWithDetailsByIDTextAlign5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDTextAlign5: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFieldMetaText struct {
	Label          *string                                       `json:"label,omitempty"`
	Placeholder    *string                                       `json:"placeholder,omitempty"`
	Required       *bool                                         `json:"required,omitempty"`
	ReadOnly       *bool                                         `json:"readOnly,omitempty"`
	Type           DocumentGetDocumentWithDetailsByIDTypeText    `json:"type"`
	Text           *string                                       `json:"text,omitempty"`
	CharacterLimit *float64                                      `json:"characterLimit,omitempty"`
	FontSize       *float64                                      `json:"fontSize,omitempty"`
	TextAlign      *DocumentGetDocumentWithDetailsByIDTextAlign5 `json:"textAlign,omitempty"`
}

func (d DocumentGetDocumentWithDetailsByIDFieldMetaText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetDocumentWithDetailsByIDFieldMetaText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaText) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaText) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaText) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaText) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaText) GetType() DocumentGetDocumentWithDetailsByIDTypeText {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDTypeText("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaText) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaText) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaText) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaText) GetTextAlign() *DocumentGetDocumentWithDetailsByIDTextAlign5 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type DocumentGetDocumentWithDetailsByIDTypeDate string

const (
	DocumentGetDocumentWithDetailsByIDTypeDateDate DocumentGetDocumentWithDetailsByIDTypeDate = "date"
)

func (e DocumentGetDocumentWithDetailsByIDTypeDate) ToPointer() *DocumentGetDocumentWithDetailsByIDTypeDate {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = DocumentGetDocumentWithDetailsByIDTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDTypeDate: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDTextAlign4 string

const (
	DocumentGetDocumentWithDetailsByIDTextAlign4Left   DocumentGetDocumentWithDetailsByIDTextAlign4 = "left"
	DocumentGetDocumentWithDetailsByIDTextAlign4Center DocumentGetDocumentWithDetailsByIDTextAlign4 = "center"
	DocumentGetDocumentWithDetailsByIDTextAlign4Right  DocumentGetDocumentWithDetailsByIDTextAlign4 = "right"
)

func (e DocumentGetDocumentWithDetailsByIDTextAlign4) ToPointer() *DocumentGetDocumentWithDetailsByIDTextAlign4 {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDTextAlign4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentGetDocumentWithDetailsByIDTextAlign4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDTextAlign4: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFieldMetaDate struct {
	Label       *string                                       `json:"label,omitempty"`
	Placeholder *string                                       `json:"placeholder,omitempty"`
	Required    *bool                                         `json:"required,omitempty"`
	ReadOnly    *bool                                         `json:"readOnly,omitempty"`
	Type        DocumentGetDocumentWithDetailsByIDTypeDate    `json:"type"`
	FontSize    *float64                                      `json:"fontSize,omitempty"`
	TextAlign   *DocumentGetDocumentWithDetailsByIDTextAlign4 `json:"textAlign,omitempty"`
}

func (d DocumentGetDocumentWithDetailsByIDFieldMetaDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetDocumentWithDetailsByIDFieldMetaDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDate) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDate) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDate) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDate) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDate) GetType() DocumentGetDocumentWithDetailsByIDTypeDate {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDTypeDate("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDate) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDate) GetTextAlign() *DocumentGetDocumentWithDetailsByIDTextAlign4 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type DocumentGetDocumentWithDetailsByIDTypeEmail string

const (
	DocumentGetDocumentWithDetailsByIDTypeEmailEmail DocumentGetDocumentWithDetailsByIDTypeEmail = "email"
)

func (e DocumentGetDocumentWithDetailsByIDTypeEmail) ToPointer() *DocumentGetDocumentWithDetailsByIDTypeEmail {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = DocumentGetDocumentWithDetailsByIDTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDTypeEmail: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDTextAlign3 string

const (
	DocumentGetDocumentWithDetailsByIDTextAlign3Left   DocumentGetDocumentWithDetailsByIDTextAlign3 = "left"
	DocumentGetDocumentWithDetailsByIDTextAlign3Center DocumentGetDocumentWithDetailsByIDTextAlign3 = "center"
	DocumentGetDocumentWithDetailsByIDTextAlign3Right  DocumentGetDocumentWithDetailsByIDTextAlign3 = "right"
)

func (e DocumentGetDocumentWithDetailsByIDTextAlign3) ToPointer() *DocumentGetDocumentWithDetailsByIDTextAlign3 {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDTextAlign3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentGetDocumentWithDetailsByIDTextAlign3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDTextAlign3: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFieldMetaEmail struct {
	Label       *string                                       `json:"label,omitempty"`
	Placeholder *string                                       `json:"placeholder,omitempty"`
	Required    *bool                                         `json:"required,omitempty"`
	ReadOnly    *bool                                         `json:"readOnly,omitempty"`
	Type        DocumentGetDocumentWithDetailsByIDTypeEmail   `json:"type"`
	FontSize    *float64                                      `json:"fontSize,omitempty"`
	TextAlign   *DocumentGetDocumentWithDetailsByIDTextAlign3 `json:"textAlign,omitempty"`
}

func (d DocumentGetDocumentWithDetailsByIDFieldMetaEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetDocumentWithDetailsByIDFieldMetaEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaEmail) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaEmail) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaEmail) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaEmail) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaEmail) GetType() DocumentGetDocumentWithDetailsByIDTypeEmail {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDTypeEmail("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaEmail) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaEmail) GetTextAlign() *DocumentGetDocumentWithDetailsByIDTextAlign3 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type DocumentGetDocumentWithDetailsByIDTypeName string

const (
	DocumentGetDocumentWithDetailsByIDTypeNameName DocumentGetDocumentWithDetailsByIDTypeName = "name"
)

func (e DocumentGetDocumentWithDetailsByIDTypeName) ToPointer() *DocumentGetDocumentWithDetailsByIDTypeName {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = DocumentGetDocumentWithDetailsByIDTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDTypeName: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDTextAlign2 string

const (
	DocumentGetDocumentWithDetailsByIDTextAlign2Left   DocumentGetDocumentWithDetailsByIDTextAlign2 = "left"
	DocumentGetDocumentWithDetailsByIDTextAlign2Center DocumentGetDocumentWithDetailsByIDTextAlign2 = "center"
	DocumentGetDocumentWithDetailsByIDTextAlign2Right  DocumentGetDocumentWithDetailsByIDTextAlign2 = "right"
)

func (e DocumentGetDocumentWithDetailsByIDTextAlign2) ToPointer() *DocumentGetDocumentWithDetailsByIDTextAlign2 {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDTextAlign2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentGetDocumentWithDetailsByIDTextAlign2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDTextAlign2: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFieldMetaName struct {
	Label       *string                                       `json:"label,omitempty"`
	Placeholder *string                                       `json:"placeholder,omitempty"`
	Required    *bool                                         `json:"required,omitempty"`
	ReadOnly    *bool                                         `json:"readOnly,omitempty"`
	Type        DocumentGetDocumentWithDetailsByIDTypeName    `json:"type"`
	FontSize    *float64                                      `json:"fontSize,omitempty"`
	TextAlign   *DocumentGetDocumentWithDetailsByIDTextAlign2 `json:"textAlign,omitempty"`
}

func (d DocumentGetDocumentWithDetailsByIDFieldMetaName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetDocumentWithDetailsByIDFieldMetaName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaName) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaName) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaName) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaName) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaName) GetType() DocumentGetDocumentWithDetailsByIDTypeName {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDTypeName("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaName) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaName) GetTextAlign() *DocumentGetDocumentWithDetailsByIDTextAlign2 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type DocumentGetDocumentWithDetailsByIDTypeInitials string

const (
	DocumentGetDocumentWithDetailsByIDTypeInitialsInitials DocumentGetDocumentWithDetailsByIDTypeInitials = "initials"
)

func (e DocumentGetDocumentWithDetailsByIDTypeInitials) ToPointer() *DocumentGetDocumentWithDetailsByIDTypeInitials {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = DocumentGetDocumentWithDetailsByIDTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDTypeInitials: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDTextAlign1 string

const (
	DocumentGetDocumentWithDetailsByIDTextAlign1Left   DocumentGetDocumentWithDetailsByIDTextAlign1 = "left"
	DocumentGetDocumentWithDetailsByIDTextAlign1Center DocumentGetDocumentWithDetailsByIDTextAlign1 = "center"
	DocumentGetDocumentWithDetailsByIDTextAlign1Right  DocumentGetDocumentWithDetailsByIDTextAlign1 = "right"
)

func (e DocumentGetDocumentWithDetailsByIDTextAlign1) ToPointer() *DocumentGetDocumentWithDetailsByIDTextAlign1 {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDTextAlign1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentGetDocumentWithDetailsByIDTextAlign1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDTextAlign1: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFieldMetaInitials struct {
	Label       *string                                        `json:"label,omitempty"`
	Placeholder *string                                        `json:"placeholder,omitempty"`
	Required    *bool                                          `json:"required,omitempty"`
	ReadOnly    *bool                                          `json:"readOnly,omitempty"`
	Type        DocumentGetDocumentWithDetailsByIDTypeInitials `json:"type"`
	FontSize    *float64                                       `json:"fontSize,omitempty"`
	TextAlign   *DocumentGetDocumentWithDetailsByIDTextAlign1  `json:"textAlign,omitempty"`
}

func (d DocumentGetDocumentWithDetailsByIDFieldMetaInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetDocumentWithDetailsByIDFieldMetaInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaInitials) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaInitials) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaInitials) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaInitials) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaInitials) GetType() DocumentGetDocumentWithDetailsByIDTypeInitials {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDTypeInitials("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaInitials) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaInitials) GetTextAlign() *DocumentGetDocumentWithDetailsByIDTextAlign1 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type DocumentGetDocumentWithDetailsByIDFieldMetaUnionType string

const (
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaInitials DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document_getDocumentWithDetailsById_fieldMeta_Initials"
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaName     DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document_getDocumentWithDetailsById_fieldMeta_Name"
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaEmail    DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document_getDocumentWithDetailsById_fieldMeta_Email"
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaDate     DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document_getDocumentWithDetailsById_fieldMeta_Date"
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaText     DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document_getDocumentWithDetailsById_fieldMeta_Text"
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaNumber   DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document_getDocumentWithDetailsById_fieldMeta_Number"
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaRadio    DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document_getDocumentWithDetailsById_fieldMeta_Radio"
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaCheckbox DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document_getDocumentWithDetailsById_fieldMeta_Checkbox"
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaDropdown DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document_getDocumentWithDetailsById_fieldMeta_Dropdown"
)

type DocumentGetDocumentWithDetailsByIDFieldMetaUnion struct {
	DocumentGetDocumentWithDetailsByIDFieldMetaInitials *DocumentGetDocumentWithDetailsByIDFieldMetaInitials `queryParam:"inline"`
	DocumentGetDocumentWithDetailsByIDFieldMetaName     *DocumentGetDocumentWithDetailsByIDFieldMetaName     `queryParam:"inline"`
	DocumentGetDocumentWithDetailsByIDFieldMetaEmail    *DocumentGetDocumentWithDetailsByIDFieldMetaEmail    `queryParam:"inline"`
	DocumentGetDocumentWithDetailsByIDFieldMetaDate     *DocumentGetDocumentWithDetailsByIDFieldMetaDate     `queryParam:"inline"`
	DocumentGetDocumentWithDetailsByIDFieldMetaText     *DocumentGetDocumentWithDetailsByIDFieldMetaText     `queryParam:"inline"`
	DocumentGetDocumentWithDetailsByIDFieldMetaNumber   *DocumentGetDocumentWithDetailsByIDFieldMetaNumber   `queryParam:"inline"`
	DocumentGetDocumentWithDetailsByIDFieldMetaRadio    *DocumentGetDocumentWithDetailsByIDFieldMetaRadio    `queryParam:"inline"`
	DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox *DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox `queryParam:"inline"`
	DocumentGetDocumentWithDetailsByIDFieldMetaDropdown *DocumentGetDocumentWithDetailsByIDFieldMetaDropdown `queryParam:"inline"`

	Type DocumentGetDocumentWithDetailsByIDFieldMetaUnionType
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaUnionDocumentGetDocumentWithDetailsByIDFieldMetaInitials(documentGetDocumentWithDetailsByIDFieldMetaInitials DocumentGetDocumentWithDetailsByIDFieldMetaInitials) DocumentGetDocumentWithDetailsByIDFieldMetaUnion {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaInitials

	return DocumentGetDocumentWithDetailsByIDFieldMetaUnion{
		DocumentGetDocumentWithDetailsByIDFieldMetaInitials: &documentGetDocumentWithDetailsByIDFieldMetaInitials,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaUnionDocumentGetDocumentWithDetailsByIDFieldMetaName(documentGetDocumentWithDetailsByIDFieldMetaName DocumentGetDocumentWithDetailsByIDFieldMetaName) DocumentGetDocumentWithDetailsByIDFieldMetaUnion {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaName

	return DocumentGetDocumentWithDetailsByIDFieldMetaUnion{
		DocumentGetDocumentWithDetailsByIDFieldMetaName: &documentGetDocumentWithDetailsByIDFieldMetaName,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaUnionDocumentGetDocumentWithDetailsByIDFieldMetaEmail(documentGetDocumentWithDetailsByIDFieldMetaEmail DocumentGetDocumentWithDetailsByIDFieldMetaEmail) DocumentGetDocumentWithDetailsByIDFieldMetaUnion {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaEmail

	return DocumentGetDocumentWithDetailsByIDFieldMetaUnion{
		DocumentGetDocumentWithDetailsByIDFieldMetaEmail: &documentGetDocumentWithDetailsByIDFieldMetaEmail,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaUnionDocumentGetDocumentWithDetailsByIDFieldMetaDate(documentGetDocumentWithDetailsByIDFieldMetaDate DocumentGetDocumentWithDetailsByIDFieldMetaDate) DocumentGetDocumentWithDetailsByIDFieldMetaUnion {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaDate

	return DocumentGetDocumentWithDetailsByIDFieldMetaUnion{
		DocumentGetDocumentWithDetailsByIDFieldMetaDate: &documentGetDocumentWithDetailsByIDFieldMetaDate,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaUnionDocumentGetDocumentWithDetailsByIDFieldMetaText(documentGetDocumentWithDetailsByIDFieldMetaText DocumentGetDocumentWithDetailsByIDFieldMetaText) DocumentGetDocumentWithDetailsByIDFieldMetaUnion {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaText

	return DocumentGetDocumentWithDetailsByIDFieldMetaUnion{
		DocumentGetDocumentWithDetailsByIDFieldMetaText: &documentGetDocumentWithDetailsByIDFieldMetaText,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaUnionDocumentGetDocumentWithDetailsByIDFieldMetaNumber(documentGetDocumentWithDetailsByIDFieldMetaNumber DocumentGetDocumentWithDetailsByIDFieldMetaNumber) DocumentGetDocumentWithDetailsByIDFieldMetaUnion {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaNumber

	return DocumentGetDocumentWithDetailsByIDFieldMetaUnion{
		DocumentGetDocumentWithDetailsByIDFieldMetaNumber: &documentGetDocumentWithDetailsByIDFieldMetaNumber,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaUnionDocumentGetDocumentWithDetailsByIDFieldMetaRadio(documentGetDocumentWithDetailsByIDFieldMetaRadio DocumentGetDocumentWithDetailsByIDFieldMetaRadio) DocumentGetDocumentWithDetailsByIDFieldMetaUnion {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaRadio

	return DocumentGetDocumentWithDetailsByIDFieldMetaUnion{
		DocumentGetDocumentWithDetailsByIDFieldMetaRadio: &documentGetDocumentWithDetailsByIDFieldMetaRadio,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaUnionDocumentGetDocumentWithDetailsByIDFieldMetaCheckbox(documentGetDocumentWithDetailsByIDFieldMetaCheckbox DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox) DocumentGetDocumentWithDetailsByIDFieldMetaUnion {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaCheckbox

	return DocumentGetDocumentWithDetailsByIDFieldMetaUnion{
		DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox: &documentGetDocumentWithDetailsByIDFieldMetaCheckbox,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaUnionDocumentGetDocumentWithDetailsByIDFieldMetaDropdown(documentGetDocumentWithDetailsByIDFieldMetaDropdown DocumentGetDocumentWithDetailsByIDFieldMetaDropdown) DocumentGetDocumentWithDetailsByIDFieldMetaUnion {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaDropdown

	return DocumentGetDocumentWithDetailsByIDFieldMetaUnion{
		DocumentGetDocumentWithDetailsByIDFieldMetaDropdown: &documentGetDocumentWithDetailsByIDFieldMetaDropdown,
		Type: typ,
	}
}

func (u *DocumentGetDocumentWithDetailsByIDFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var documentGetDocumentWithDetailsByIDFieldMetaInitials DocumentGetDocumentWithDetailsByIDFieldMetaInitials = DocumentGetDocumentWithDetailsByIDFieldMetaInitials{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMetaInitials, "", true, nil); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMetaInitials = &documentGetDocumentWithDetailsByIDFieldMetaInitials
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaInitials
		return nil
	}

	var documentGetDocumentWithDetailsByIDFieldMetaName DocumentGetDocumentWithDetailsByIDFieldMetaName = DocumentGetDocumentWithDetailsByIDFieldMetaName{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMetaName, "", true, nil); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMetaName = &documentGetDocumentWithDetailsByIDFieldMetaName
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaName
		return nil
	}

	var documentGetDocumentWithDetailsByIDFieldMetaEmail DocumentGetDocumentWithDetailsByIDFieldMetaEmail = DocumentGetDocumentWithDetailsByIDFieldMetaEmail{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMetaEmail, "", true, nil); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMetaEmail = &documentGetDocumentWithDetailsByIDFieldMetaEmail
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaEmail
		return nil
	}

	var documentGetDocumentWithDetailsByIDFieldMetaDate DocumentGetDocumentWithDetailsByIDFieldMetaDate = DocumentGetDocumentWithDetailsByIDFieldMetaDate{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMetaDate, "", true, nil); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMetaDate = &documentGetDocumentWithDetailsByIDFieldMetaDate
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaDate
		return nil
	}

	var documentGetDocumentWithDetailsByIDFieldMetaText DocumentGetDocumentWithDetailsByIDFieldMetaText = DocumentGetDocumentWithDetailsByIDFieldMetaText{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMetaText, "", true, nil); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMetaText = &documentGetDocumentWithDetailsByIDFieldMetaText
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaText
		return nil
	}

	var documentGetDocumentWithDetailsByIDFieldMetaNumber DocumentGetDocumentWithDetailsByIDFieldMetaNumber = DocumentGetDocumentWithDetailsByIDFieldMetaNumber{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMetaNumber, "", true, nil); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMetaNumber = &documentGetDocumentWithDetailsByIDFieldMetaNumber
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaNumber
		return nil
	}

	var documentGetDocumentWithDetailsByIDFieldMetaRadio DocumentGetDocumentWithDetailsByIDFieldMetaRadio = DocumentGetDocumentWithDetailsByIDFieldMetaRadio{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMetaRadio, "", true, nil); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMetaRadio = &documentGetDocumentWithDetailsByIDFieldMetaRadio
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaRadio
		return nil
	}

	var documentGetDocumentWithDetailsByIDFieldMetaCheckbox DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox = DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMetaCheckbox, "", true, nil); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox = &documentGetDocumentWithDetailsByIDFieldMetaCheckbox
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaCheckbox
		return nil
	}

	var documentGetDocumentWithDetailsByIDFieldMetaDropdown DocumentGetDocumentWithDetailsByIDFieldMetaDropdown = DocumentGetDocumentWithDetailsByIDFieldMetaDropdown{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMetaDropdown, "", true, nil); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMetaDropdown = &documentGetDocumentWithDetailsByIDFieldMetaDropdown
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMetaDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DocumentGetDocumentWithDetailsByIDFieldMetaUnion", string(data))
}

func (u DocumentGetDocumentWithDetailsByIDFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.DocumentGetDocumentWithDetailsByIDFieldMetaInitials != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMetaInitials, "", true)
	}

	if u.DocumentGetDocumentWithDetailsByIDFieldMetaName != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMetaName, "", true)
	}

	if u.DocumentGetDocumentWithDetailsByIDFieldMetaEmail != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMetaEmail, "", true)
	}

	if u.DocumentGetDocumentWithDetailsByIDFieldMetaDate != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMetaDate, "", true)
	}

	if u.DocumentGetDocumentWithDetailsByIDFieldMetaText != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMetaText, "", true)
	}

	if u.DocumentGetDocumentWithDetailsByIDFieldMetaNumber != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMetaNumber, "", true)
	}

	if u.DocumentGetDocumentWithDetailsByIDFieldMetaRadio != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMetaRadio, "", true)
	}

	if u.DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMetaCheckbox, "", true)
	}

	if u.DocumentGetDocumentWithDetailsByIDFieldMetaDropdown != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMetaDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type DocumentGetDocumentWithDetailsByIDFieldMetaUnion: all fields are null")
}

type DocumentGetDocumentWithDetailsByIDField struct {
	Type        DocumentGetDocumentWithDetailsByIDFieldType `json:"type"`
	ID          float64                                     `json:"id"`
	SecondaryID string                                      `json:"secondaryId"`
	DocumentID  *float64                                    `json:"documentId"`
	TemplateID  *float64                                    `json:"templateId"`
	RecipientID float64                                     `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                                           `json:"page"`
	PositionX  any                                               `json:"positionX,omitempty"`
	PositionY  any                                               `json:"positionY,omitempty"`
	Width      any                                               `json:"width,omitempty"`
	Height     any                                               `json:"height,omitempty"`
	CustomText string                                            `json:"customText"`
	Inserted   bool                                              `json:"inserted"`
	FieldMeta  *DocumentGetDocumentWithDetailsByIDFieldMetaUnion `json:"fieldMeta"`
}

func (o *DocumentGetDocumentWithDetailsByIDField) GetType() DocumentGetDocumentWithDetailsByIDFieldType {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDFieldType("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDField) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *DocumentGetDocumentWithDetailsByIDField) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *DocumentGetDocumentWithDetailsByIDField) GetDocumentID() *float64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *DocumentGetDocumentWithDetailsByIDField) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *DocumentGetDocumentWithDetailsByIDField) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *DocumentGetDocumentWithDetailsByIDField) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *DocumentGetDocumentWithDetailsByIDField) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *DocumentGetDocumentWithDetailsByIDField) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *DocumentGetDocumentWithDetailsByIDField) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *DocumentGetDocumentWithDetailsByIDField) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *DocumentGetDocumentWithDetailsByIDField) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *DocumentGetDocumentWithDetailsByIDField) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *DocumentGetDocumentWithDetailsByIDField) GetFieldMeta() *DocumentGetDocumentWithDetailsByIDFieldMetaUnion {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

// DocumentGetDocumentWithDetailsByIDResponseBody - Successful response
type DocumentGetDocumentWithDetailsByIDResponseBody struct {
	Visibility DocumentGetDocumentWithDetailsByIDVisibility `json:"visibility"`
	Status     DocumentGetDocumentWithDetailsByIDStatus     `json:"status"`
	Source     DocumentGetDocumentWithDetailsByIDSource     `json:"source"`
	ID         float64                                      `json:"id"`
	// A custom external ID you can use to identify the document.
	ExternalID *string `json:"externalId"`
	// The ID of the user that created this document.
	UserID         float64                                                 `json:"userId"`
	AuthOptions    *DocumentGetDocumentWithDetailsByIDAuthOptions          `json:"authOptions"`
	FormValues     map[string]DocumentGetDocumentWithDetailsByIDFormValues `json:"formValues"`
	Title          string                                                  `json:"title"`
	DocumentDataID string                                                  `json:"documentDataId"`
	CreatedAt      string                                                  `json:"createdAt"`
	UpdatedAt      string                                                  `json:"updatedAt"`
	CompletedAt    *string                                                 `json:"completedAt"`
	DeletedAt      *string                                                 `json:"deletedAt"`
	TeamID         float64                                                 `json:"teamId"`
	TemplateID     *float64                                                `json:"templateId"`
	FolderID       *string                                                 `json:"folderId"`
	DocumentData   DocumentGetDocumentWithDetailsByIDDocumentData          `json:"documentData"`
	DocumentMeta   *DocumentGetDocumentWithDetailsByIDDocumentMeta         `json:"documentMeta"`
	Folder         *DocumentGetDocumentWithDetailsByIDFolder               `json:"folder"`
	Recipients     []DocumentGetDocumentWithDetailsByIDRecipient           `json:"recipients"`
	Fields         []DocumentGetDocumentWithDetailsByIDField               `json:"fields"`
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetVisibility() DocumentGetDocumentWithDetailsByIDVisibility {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDVisibility("")
	}
	return o.Visibility
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetStatus() DocumentGetDocumentWithDetailsByIDStatus {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDStatus("")
	}
	return o.Status
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetSource() DocumentGetDocumentWithDetailsByIDSource {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDSource("")
	}
	return o.Source
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetUserID() float64 {
	if o == nil {
		return 0.0
	}
	return o.UserID
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetAuthOptions() *DocumentGetDocumentWithDetailsByIDAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetFormValues() map[string]DocumentGetDocumentWithDetailsByIDFormValues {
	if o == nil {
		return nil
	}
	return o.FormValues
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetDocumentDataID() string {
	if o == nil {
		return ""
	}
	return o.DocumentDataID
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetCompletedAt() *string {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetTeamID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TeamID
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetDocumentData() DocumentGetDocumentWithDetailsByIDDocumentData {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDDocumentData{}
	}
	return o.DocumentData
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetDocumentMeta() *DocumentGetDocumentWithDetailsByIDDocumentMeta {
	if o == nil {
		return nil
	}
	return o.DocumentMeta
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetFolder() *DocumentGetDocumentWithDetailsByIDFolder {
	if o == nil {
		return nil
	}
	return o.Folder
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetRecipients() []DocumentGetDocumentWithDetailsByIDRecipient {
	if o == nil {
		return []DocumentGetDocumentWithDetailsByIDRecipient{}
	}
	return o.Recipients
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetFields() []DocumentGetDocumentWithDetailsByIDField {
	if o == nil {
		return []DocumentGetDocumentWithDetailsByIDField{}
	}
	return o.Fields
}

type DocumentGetDocumentWithDetailsByIDResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *DocumentGetDocumentWithDetailsByIDResponseBody
}

func (o *DocumentGetDocumentWithDetailsByIDResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *DocumentGetDocumentWithDetailsByIDResponse) GetObject() *DocumentGetDocumentWithDetailsByIDResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
