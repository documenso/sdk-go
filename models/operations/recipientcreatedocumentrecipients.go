// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/documenso/sdk-go/models/components"
)

type RecipientCreateDocumentRecipientsRoleRequest string

const (
	RecipientCreateDocumentRecipientsRoleRequestCc        RecipientCreateDocumentRecipientsRoleRequest = "CC"
	RecipientCreateDocumentRecipientsRoleRequestSigner    RecipientCreateDocumentRecipientsRoleRequest = "SIGNER"
	RecipientCreateDocumentRecipientsRoleRequestViewer    RecipientCreateDocumentRecipientsRoleRequest = "VIEWER"
	RecipientCreateDocumentRecipientsRoleRequestApprover  RecipientCreateDocumentRecipientsRoleRequest = "APPROVER"
	RecipientCreateDocumentRecipientsRoleRequestAssistant RecipientCreateDocumentRecipientsRoleRequest = "ASSISTANT"
)

func (e RecipientCreateDocumentRecipientsRoleRequest) ToPointer() *RecipientCreateDocumentRecipientsRoleRequest {
	return &e
}
func (e *RecipientCreateDocumentRecipientsRoleRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = RecipientCreateDocumentRecipientsRoleRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsRoleRequest: %v", v)
	}
}

// RecipientCreateDocumentRecipientsAccessAuthRequest - The type of authentication required for the recipient to access the document.
type RecipientCreateDocumentRecipientsAccessAuthRequest string

const (
	RecipientCreateDocumentRecipientsAccessAuthRequestAccount RecipientCreateDocumentRecipientsAccessAuthRequest = "ACCOUNT"
)

func (e RecipientCreateDocumentRecipientsAccessAuthRequest) ToPointer() *RecipientCreateDocumentRecipientsAccessAuthRequest {
	return &e
}
func (e *RecipientCreateDocumentRecipientsAccessAuthRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = RecipientCreateDocumentRecipientsAccessAuthRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsAccessAuthRequest: %v", v)
	}
}

// RecipientCreateDocumentRecipientsActionAuthRequest - The type of authentication required for the recipient to sign the document.
type RecipientCreateDocumentRecipientsActionAuthRequest string

const (
	RecipientCreateDocumentRecipientsActionAuthRequestAccount       RecipientCreateDocumentRecipientsActionAuthRequest = "ACCOUNT"
	RecipientCreateDocumentRecipientsActionAuthRequestPasskey       RecipientCreateDocumentRecipientsActionAuthRequest = "PASSKEY"
	RecipientCreateDocumentRecipientsActionAuthRequestTwoFactorAuth RecipientCreateDocumentRecipientsActionAuthRequest = "TWO_FACTOR_AUTH"
	RecipientCreateDocumentRecipientsActionAuthRequestPassword      RecipientCreateDocumentRecipientsActionAuthRequest = "PASSWORD"
	RecipientCreateDocumentRecipientsActionAuthRequestExplicitNone  RecipientCreateDocumentRecipientsActionAuthRequest = "EXPLICIT_NONE"
)

func (e RecipientCreateDocumentRecipientsActionAuthRequest) ToPointer() *RecipientCreateDocumentRecipientsActionAuthRequest {
	return &e
}
func (e *RecipientCreateDocumentRecipientsActionAuthRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		fallthrough
	case "EXPLICIT_NONE":
		*e = RecipientCreateDocumentRecipientsActionAuthRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsActionAuthRequest: %v", v)
	}
}

type RecipientCreateDocumentRecipientsRecipientRequest struct {
	Email        string                                               `json:"email"`
	Name         string                                               `json:"name"`
	Role         RecipientCreateDocumentRecipientsRoleRequest         `json:"role"`
	SigningOrder *float64                                             `json:"signingOrder,omitempty"`
	AccessAuth   []RecipientCreateDocumentRecipientsAccessAuthRequest `json:"accessAuth,omitempty"`
	ActionAuth   []RecipientCreateDocumentRecipientsActionAuthRequest `json:"actionAuth,omitempty"`
}

func (o *RecipientCreateDocumentRecipientsRecipientRequest) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *RecipientCreateDocumentRecipientsRecipientRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RecipientCreateDocumentRecipientsRecipientRequest) GetRole() RecipientCreateDocumentRecipientsRoleRequest {
	if o == nil {
		return RecipientCreateDocumentRecipientsRoleRequest("")
	}
	return o.Role
}

func (o *RecipientCreateDocumentRecipientsRecipientRequest) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *RecipientCreateDocumentRecipientsRecipientRequest) GetAccessAuth() []RecipientCreateDocumentRecipientsAccessAuthRequest {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *RecipientCreateDocumentRecipientsRecipientRequest) GetActionAuth() []RecipientCreateDocumentRecipientsActionAuthRequest {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

type RecipientCreateDocumentRecipientsRequest struct {
	DocumentID float64                                             `json:"documentId"`
	Recipients []RecipientCreateDocumentRecipientsRecipientRequest `json:"recipients"`
}

func (o *RecipientCreateDocumentRecipientsRequest) GetDocumentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DocumentID
}

func (o *RecipientCreateDocumentRecipientsRequest) GetRecipients() []RecipientCreateDocumentRecipientsRecipientRequest {
	if o == nil {
		return []RecipientCreateDocumentRecipientsRecipientRequest{}
	}
	return o.Recipients
}

type RecipientCreateDocumentRecipientsRoleResponse string

const (
	RecipientCreateDocumentRecipientsRoleResponseCc        RecipientCreateDocumentRecipientsRoleResponse = "CC"
	RecipientCreateDocumentRecipientsRoleResponseSigner    RecipientCreateDocumentRecipientsRoleResponse = "SIGNER"
	RecipientCreateDocumentRecipientsRoleResponseViewer    RecipientCreateDocumentRecipientsRoleResponse = "VIEWER"
	RecipientCreateDocumentRecipientsRoleResponseApprover  RecipientCreateDocumentRecipientsRoleResponse = "APPROVER"
	RecipientCreateDocumentRecipientsRoleResponseAssistant RecipientCreateDocumentRecipientsRoleResponse = "ASSISTANT"
)

func (e RecipientCreateDocumentRecipientsRoleResponse) ToPointer() *RecipientCreateDocumentRecipientsRoleResponse {
	return &e
}
func (e *RecipientCreateDocumentRecipientsRoleResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = RecipientCreateDocumentRecipientsRoleResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsRoleResponse: %v", v)
	}
}

type RecipientCreateDocumentRecipientsReadStatus string

const (
	RecipientCreateDocumentRecipientsReadStatusNotOpened RecipientCreateDocumentRecipientsReadStatus = "NOT_OPENED"
	RecipientCreateDocumentRecipientsReadStatusOpened    RecipientCreateDocumentRecipientsReadStatus = "OPENED"
)

func (e RecipientCreateDocumentRecipientsReadStatus) ToPointer() *RecipientCreateDocumentRecipientsReadStatus {
	return &e
}
func (e *RecipientCreateDocumentRecipientsReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = RecipientCreateDocumentRecipientsReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsReadStatus: %v", v)
	}
}

type RecipientCreateDocumentRecipientsSigningStatus string

const (
	RecipientCreateDocumentRecipientsSigningStatusNotSigned RecipientCreateDocumentRecipientsSigningStatus = "NOT_SIGNED"
	RecipientCreateDocumentRecipientsSigningStatusSigned    RecipientCreateDocumentRecipientsSigningStatus = "SIGNED"
	RecipientCreateDocumentRecipientsSigningStatusRejected  RecipientCreateDocumentRecipientsSigningStatus = "REJECTED"
)

func (e RecipientCreateDocumentRecipientsSigningStatus) ToPointer() *RecipientCreateDocumentRecipientsSigningStatus {
	return &e
}
func (e *RecipientCreateDocumentRecipientsSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = RecipientCreateDocumentRecipientsSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsSigningStatus: %v", v)
	}
}

type RecipientCreateDocumentRecipientsSendStatus string

const (
	RecipientCreateDocumentRecipientsSendStatusNotSent RecipientCreateDocumentRecipientsSendStatus = "NOT_SENT"
	RecipientCreateDocumentRecipientsSendStatusSent    RecipientCreateDocumentRecipientsSendStatus = "SENT"
)

func (e RecipientCreateDocumentRecipientsSendStatus) ToPointer() *RecipientCreateDocumentRecipientsSendStatus {
	return &e
}
func (e *RecipientCreateDocumentRecipientsSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = RecipientCreateDocumentRecipientsSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsSendStatus: %v", v)
	}
}

// RecipientCreateDocumentRecipientsAccessAuthResponse - The type of authentication required for the recipient to access the document.
type RecipientCreateDocumentRecipientsAccessAuthResponse string

const (
	RecipientCreateDocumentRecipientsAccessAuthResponseAccount RecipientCreateDocumentRecipientsAccessAuthResponse = "ACCOUNT"
)

func (e RecipientCreateDocumentRecipientsAccessAuthResponse) ToPointer() *RecipientCreateDocumentRecipientsAccessAuthResponse {
	return &e
}
func (e *RecipientCreateDocumentRecipientsAccessAuthResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = RecipientCreateDocumentRecipientsAccessAuthResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsAccessAuthResponse: %v", v)
	}
}

// RecipientCreateDocumentRecipientsActionAuthResponse - The type of authentication required for the recipient to sign the document.
type RecipientCreateDocumentRecipientsActionAuthResponse string

const (
	RecipientCreateDocumentRecipientsActionAuthResponseAccount       RecipientCreateDocumentRecipientsActionAuthResponse = "ACCOUNT"
	RecipientCreateDocumentRecipientsActionAuthResponsePasskey       RecipientCreateDocumentRecipientsActionAuthResponse = "PASSKEY"
	RecipientCreateDocumentRecipientsActionAuthResponseTwoFactorAuth RecipientCreateDocumentRecipientsActionAuthResponse = "TWO_FACTOR_AUTH"
	RecipientCreateDocumentRecipientsActionAuthResponsePassword      RecipientCreateDocumentRecipientsActionAuthResponse = "PASSWORD"
	RecipientCreateDocumentRecipientsActionAuthResponseExplicitNone  RecipientCreateDocumentRecipientsActionAuthResponse = "EXPLICIT_NONE"
)

func (e RecipientCreateDocumentRecipientsActionAuthResponse) ToPointer() *RecipientCreateDocumentRecipientsActionAuthResponse {
	return &e
}
func (e *RecipientCreateDocumentRecipientsActionAuthResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		fallthrough
	case "EXPLICIT_NONE":
		*e = RecipientCreateDocumentRecipientsActionAuthResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientsActionAuthResponse: %v", v)
	}
}

type RecipientCreateDocumentRecipientsAuthOptions struct {
	AccessAuth []RecipientCreateDocumentRecipientsAccessAuthResponse `json:"accessAuth"`
	ActionAuth []RecipientCreateDocumentRecipientsActionAuthResponse `json:"actionAuth"`
}

func (o *RecipientCreateDocumentRecipientsAuthOptions) GetAccessAuth() []RecipientCreateDocumentRecipientsAccessAuthResponse {
	if o == nil {
		return []RecipientCreateDocumentRecipientsAccessAuthResponse{}
	}
	return o.AccessAuth
}

func (o *RecipientCreateDocumentRecipientsAuthOptions) GetActionAuth() []RecipientCreateDocumentRecipientsActionAuthResponse {
	if o == nil {
		return []RecipientCreateDocumentRecipientsActionAuthResponse{}
	}
	return o.ActionAuth
}

type RecipientCreateDocumentRecipientsRecipientResponse struct {
	Role              RecipientCreateDocumentRecipientsRoleResponse  `json:"role"`
	ReadStatus        RecipientCreateDocumentRecipientsReadStatus    `json:"readStatus"`
	SigningStatus     RecipientCreateDocumentRecipientsSigningStatus `json:"signingStatus"`
	SendStatus        RecipientCreateDocumentRecipientsSendStatus    `json:"sendStatus"`
	ID                float64                                        `json:"id"`
	DocumentID        *float64                                       `json:"documentId"`
	TemplateID        *float64                                       `json:"templateId"`
	Email             string                                         `json:"email"`
	Name              string                                         `json:"name"`
	Token             string                                         `json:"token"`
	DocumentDeletedAt *string                                        `json:"documentDeletedAt"`
	Expired           *string                                        `json:"expired"`
	SignedAt          *string                                        `json:"signedAt"`
	AuthOptions       *RecipientCreateDocumentRecipientsAuthOptions  `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
}

func (o *RecipientCreateDocumentRecipientsRecipientResponse) GetRole() RecipientCreateDocumentRecipientsRoleResponse {
	if o == nil {
		return RecipientCreateDocumentRecipientsRoleResponse("")
	}
	return o.Role
}

func (o *RecipientCreateDocumentRecipientsRecipientResponse) GetReadStatus() RecipientCreateDocumentRecipientsReadStatus {
	if o == nil {
		return RecipientCreateDocumentRecipientsReadStatus("")
	}
	return o.ReadStatus
}

func (o *RecipientCreateDocumentRecipientsRecipientResponse) GetSigningStatus() RecipientCreateDocumentRecipientsSigningStatus {
	if o == nil {
		return RecipientCreateDocumentRecipientsSigningStatus("")
	}
	return o.SigningStatus
}

func (o *RecipientCreateDocumentRecipientsRecipientResponse) GetSendStatus() RecipientCreateDocumentRecipientsSendStatus {
	if o == nil {
		return RecipientCreateDocumentRecipientsSendStatus("")
	}
	return o.SendStatus
}

func (o *RecipientCreateDocumentRecipientsRecipientResponse) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *RecipientCreateDocumentRecipientsRecipientResponse) GetDocumentID() *float64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *RecipientCreateDocumentRecipientsRecipientResponse) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *RecipientCreateDocumentRecipientsRecipientResponse) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *RecipientCreateDocumentRecipientsRecipientResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RecipientCreateDocumentRecipientsRecipientResponse) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *RecipientCreateDocumentRecipientsRecipientResponse) GetDocumentDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DocumentDeletedAt
}

func (o *RecipientCreateDocumentRecipientsRecipientResponse) GetExpired() *string {
	if o == nil {
		return nil
	}
	return o.Expired
}

func (o *RecipientCreateDocumentRecipientsRecipientResponse) GetSignedAt() *string {
	if o == nil {
		return nil
	}
	return o.SignedAt
}

func (o *RecipientCreateDocumentRecipientsRecipientResponse) GetAuthOptions() *RecipientCreateDocumentRecipientsAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *RecipientCreateDocumentRecipientsRecipientResponse) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *RecipientCreateDocumentRecipientsRecipientResponse) GetRejectionReason() *string {
	if o == nil {
		return nil
	}
	return o.RejectionReason
}

// RecipientCreateDocumentRecipientsResponseBody - Successful response
type RecipientCreateDocumentRecipientsResponseBody struct {
	Recipients []RecipientCreateDocumentRecipientsRecipientResponse `json:"recipients"`
}

func (o *RecipientCreateDocumentRecipientsResponseBody) GetRecipients() []RecipientCreateDocumentRecipientsRecipientResponse {
	if o == nil {
		return []RecipientCreateDocumentRecipientsRecipientResponse{}
	}
	return o.Recipients
}

type RecipientCreateDocumentRecipientsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *RecipientCreateDocumentRecipientsResponseBody
}

func (o *RecipientCreateDocumentRecipientsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *RecipientCreateDocumentRecipientsResponse) GetObject() *RecipientCreateDocumentRecipientsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
