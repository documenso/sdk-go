// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldGetTemplateFieldRequest struct {
	FieldID float64 `pathParam:"style=simple,explode=false,name=fieldId"`
}

func (f *FieldGetTemplateFieldRequest) GetFieldID() float64 {
	if f == nil {
		return 0.0
	}
	return f.FieldID
}

type FieldGetTemplateFieldType string

const (
	FieldGetTemplateFieldTypeSignature     FieldGetTemplateFieldType = "SIGNATURE"
	FieldGetTemplateFieldTypeFreeSignature FieldGetTemplateFieldType = "FREE_SIGNATURE"
	FieldGetTemplateFieldTypeInitials      FieldGetTemplateFieldType = "INITIALS"
	FieldGetTemplateFieldTypeName          FieldGetTemplateFieldType = "NAME"
	FieldGetTemplateFieldTypeEmail         FieldGetTemplateFieldType = "EMAIL"
	FieldGetTemplateFieldTypeDate          FieldGetTemplateFieldType = "DATE"
	FieldGetTemplateFieldTypeText          FieldGetTemplateFieldType = "TEXT"
	FieldGetTemplateFieldTypeNumber        FieldGetTemplateFieldType = "NUMBER"
	FieldGetTemplateFieldTypeRadio         FieldGetTemplateFieldType = "RADIO"
	FieldGetTemplateFieldTypeCheckbox      FieldGetTemplateFieldType = "CHECKBOX"
	FieldGetTemplateFieldTypeDropdown      FieldGetTemplateFieldType = "DROPDOWN"
)

func (e FieldGetTemplateFieldType) ToPointer() *FieldGetTemplateFieldType {
	return &e
}
func (e *FieldGetTemplateFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldGetTemplateFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldType: %v", v)
	}
}

type FieldGetTemplateFieldFieldMetaTypeDropdown string

const (
	FieldGetTemplateFieldFieldMetaTypeDropdownDropdown FieldGetTemplateFieldFieldMetaTypeDropdown = "dropdown"
)

func (e FieldGetTemplateFieldFieldMetaTypeDropdown) ToPointer() *FieldGetTemplateFieldFieldMetaTypeDropdown {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldGetTemplateFieldFieldMetaTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaTypeDropdown: %v", v)
	}
}

type FieldGetTemplateFieldValue3 struct {
	Value string `json:"value"`
}

func (f FieldGetTemplateFieldValue3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetTemplateFieldValue3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetTemplateFieldValue3) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldGetTemplateFieldFieldMetaDropdown struct {
	Label        *string                                    `json:"label,omitempty"`
	Placeholder  *string                                    `json:"placeholder,omitempty"`
	Required     *bool                                      `json:"required,omitempty"`
	ReadOnly     *bool                                      `json:"readOnly,omitempty"`
	Type         FieldGetTemplateFieldFieldMetaTypeDropdown `json:"type"`
	Values       []FieldGetTemplateFieldValue3              `json:"values,omitempty"`
	DefaultValue *string                                    `json:"defaultValue,omitempty"`
}

func (f FieldGetTemplateFieldFieldMetaDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetTemplateFieldFieldMetaDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetTemplateFieldFieldMetaDropdown) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetTemplateFieldFieldMetaDropdown) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetTemplateFieldFieldMetaDropdown) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetTemplateFieldFieldMetaDropdown) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetTemplateFieldFieldMetaDropdown) GetType() FieldGetTemplateFieldFieldMetaTypeDropdown {
	if f == nil {
		return FieldGetTemplateFieldFieldMetaTypeDropdown("")
	}
	return f.Type
}

func (f *FieldGetTemplateFieldFieldMetaDropdown) GetValues() []FieldGetTemplateFieldValue3 {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldGetTemplateFieldFieldMetaDropdown) GetDefaultValue() *string {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

type FieldGetTemplateFieldFieldMetaTypeCheckbox string

const (
	FieldGetTemplateFieldFieldMetaTypeCheckboxCheckbox FieldGetTemplateFieldFieldMetaTypeCheckbox = "checkbox"
)

func (e FieldGetTemplateFieldFieldMetaTypeCheckbox) ToPointer() *FieldGetTemplateFieldFieldMetaTypeCheckbox {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldGetTemplateFieldFieldMetaTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaTypeCheckbox: %v", v)
	}
}

type FieldGetTemplateFieldValue2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldGetTemplateFieldValue2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetTemplateFieldValue2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetTemplateFieldValue2) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldGetTemplateFieldValue2) GetChecked() bool {
	if f == nil {
		return false
	}
	return f.Checked
}

func (f *FieldGetTemplateFieldValue2) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldGetTemplateFieldDirection string

const (
	FieldGetTemplateFieldDirectionVertical   FieldGetTemplateFieldDirection = "vertical"
	FieldGetTemplateFieldDirectionHorizontal FieldGetTemplateFieldDirection = "horizontal"
)

func (e FieldGetTemplateFieldDirection) ToPointer() *FieldGetTemplateFieldDirection {
	return &e
}
func (e *FieldGetTemplateFieldDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vertical":
		fallthrough
	case "horizontal":
		*e = FieldGetTemplateFieldDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldDirection: %v", v)
	}
}

type FieldGetTemplateFieldFieldMetaCheckbox struct {
	Label            *string                                    `json:"label,omitempty"`
	Placeholder      *string                                    `json:"placeholder,omitempty"`
	Required         *bool                                      `json:"required,omitempty"`
	ReadOnly         *bool                                      `json:"readOnly,omitempty"`
	Type             FieldGetTemplateFieldFieldMetaTypeCheckbox `json:"type"`
	Values           []FieldGetTemplateFieldValue2              `json:"values,omitempty"`
	ValidationRule   *string                                    `json:"validationRule,omitempty"`
	ValidationLength *float64                                   `json:"validationLength,omitempty"`
	Direction        *FieldGetTemplateFieldDirection            `default:"vertical" json:"direction"`
}

func (f FieldGetTemplateFieldFieldMetaCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetTemplateFieldFieldMetaCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetTemplateFieldFieldMetaCheckbox) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetTemplateFieldFieldMetaCheckbox) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetTemplateFieldFieldMetaCheckbox) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetTemplateFieldFieldMetaCheckbox) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetTemplateFieldFieldMetaCheckbox) GetType() FieldGetTemplateFieldFieldMetaTypeCheckbox {
	if f == nil {
		return FieldGetTemplateFieldFieldMetaTypeCheckbox("")
	}
	return f.Type
}

func (f *FieldGetTemplateFieldFieldMetaCheckbox) GetValues() []FieldGetTemplateFieldValue2 {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldGetTemplateFieldFieldMetaCheckbox) GetValidationRule() *string {
	if f == nil {
		return nil
	}
	return f.ValidationRule
}

func (f *FieldGetTemplateFieldFieldMetaCheckbox) GetValidationLength() *float64 {
	if f == nil {
		return nil
	}
	return f.ValidationLength
}

func (f *FieldGetTemplateFieldFieldMetaCheckbox) GetDirection() *FieldGetTemplateFieldDirection {
	if f == nil {
		return nil
	}
	return f.Direction
}

type FieldGetTemplateFieldFieldMetaTypeRadio string

const (
	FieldGetTemplateFieldFieldMetaTypeRadioRadio FieldGetTemplateFieldFieldMetaTypeRadio = "radio"
)

func (e FieldGetTemplateFieldFieldMetaTypeRadio) ToPointer() *FieldGetTemplateFieldFieldMetaTypeRadio {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldGetTemplateFieldFieldMetaTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaTypeRadio: %v", v)
	}
}

type FieldGetTemplateFieldValue1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldGetTemplateFieldValue1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetTemplateFieldValue1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetTemplateFieldValue1) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldGetTemplateFieldValue1) GetChecked() bool {
	if f == nil {
		return false
	}
	return f.Checked
}

func (f *FieldGetTemplateFieldValue1) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldGetTemplateFieldFieldMetaRadio struct {
	Label       *string                                 `json:"label,omitempty"`
	Placeholder *string                                 `json:"placeholder,omitempty"`
	Required    *bool                                   `json:"required,omitempty"`
	ReadOnly    *bool                                   `json:"readOnly,omitempty"`
	Type        FieldGetTemplateFieldFieldMetaTypeRadio `json:"type"`
	Values      []FieldGetTemplateFieldValue1           `json:"values,omitempty"`
}

func (f FieldGetTemplateFieldFieldMetaRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetTemplateFieldFieldMetaRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetTemplateFieldFieldMetaRadio) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetTemplateFieldFieldMetaRadio) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetTemplateFieldFieldMetaRadio) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetTemplateFieldFieldMetaRadio) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetTemplateFieldFieldMetaRadio) GetType() FieldGetTemplateFieldFieldMetaTypeRadio {
	if f == nil {
		return FieldGetTemplateFieldFieldMetaTypeRadio("")
	}
	return f.Type
}

func (f *FieldGetTemplateFieldFieldMetaRadio) GetValues() []FieldGetTemplateFieldValue1 {
	if f == nil {
		return nil
	}
	return f.Values
}

type FieldGetTemplateFieldFieldMetaTypeNumber string

const (
	FieldGetTemplateFieldFieldMetaTypeNumberNumber FieldGetTemplateFieldFieldMetaTypeNumber = "number"
)

func (e FieldGetTemplateFieldFieldMetaTypeNumber) ToPointer() *FieldGetTemplateFieldFieldMetaTypeNumber {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldGetTemplateFieldFieldMetaTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaTypeNumber: %v", v)
	}
}

type FieldGetTemplateFieldTextAlign6 string

const (
	FieldGetTemplateFieldTextAlign6Left   FieldGetTemplateFieldTextAlign6 = "left"
	FieldGetTemplateFieldTextAlign6Center FieldGetTemplateFieldTextAlign6 = "center"
	FieldGetTemplateFieldTextAlign6Right  FieldGetTemplateFieldTextAlign6 = "right"
)

func (e FieldGetTemplateFieldTextAlign6) ToPointer() *FieldGetTemplateFieldTextAlign6 {
	return &e
}
func (e *FieldGetTemplateFieldTextAlign6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldGetTemplateFieldTextAlign6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldTextAlign6: %v", v)
	}
}

type FieldGetTemplateFieldFieldMetaNumber struct {
	Label        *string                                  `json:"label,omitempty"`
	Placeholder  *string                                  `json:"placeholder,omitempty"`
	Required     *bool                                    `json:"required,omitempty"`
	ReadOnly     *bool                                    `json:"readOnly,omitempty"`
	Type         FieldGetTemplateFieldFieldMetaTypeNumber `json:"type"`
	NumberFormat *string                                  `json:"numberFormat,omitempty"`
	Value        *string                                  `json:"value,omitempty"`
	MinValue     *float64                                 `json:"minValue,omitempty"`
	MaxValue     *float64                                 `json:"maxValue,omitempty"`
	FontSize     *float64                                 `json:"fontSize,omitempty"`
	TextAlign    *FieldGetTemplateFieldTextAlign6         `json:"textAlign,omitempty"`
}

func (f FieldGetTemplateFieldFieldMetaNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetTemplateFieldFieldMetaNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetTemplateFieldFieldMetaNumber) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetTemplateFieldFieldMetaNumber) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetTemplateFieldFieldMetaNumber) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetTemplateFieldFieldMetaNumber) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetTemplateFieldFieldMetaNumber) GetType() FieldGetTemplateFieldFieldMetaTypeNumber {
	if f == nil {
		return FieldGetTemplateFieldFieldMetaTypeNumber("")
	}
	return f.Type
}

func (f *FieldGetTemplateFieldFieldMetaNumber) GetNumberFormat() *string {
	if f == nil {
		return nil
	}
	return f.NumberFormat
}

func (f *FieldGetTemplateFieldFieldMetaNumber) GetValue() *string {
	if f == nil {
		return nil
	}
	return f.Value
}

func (f *FieldGetTemplateFieldFieldMetaNumber) GetMinValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MinValue
}

func (f *FieldGetTemplateFieldFieldMetaNumber) GetMaxValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MaxValue
}

func (f *FieldGetTemplateFieldFieldMetaNumber) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldGetTemplateFieldFieldMetaNumber) GetTextAlign() *FieldGetTemplateFieldTextAlign6 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldGetTemplateFieldFieldMetaTypeText string

const (
	FieldGetTemplateFieldFieldMetaTypeTextText FieldGetTemplateFieldFieldMetaTypeText = "text"
)

func (e FieldGetTemplateFieldFieldMetaTypeText) ToPointer() *FieldGetTemplateFieldFieldMetaTypeText {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldGetTemplateFieldFieldMetaTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaTypeText: %v", v)
	}
}

type FieldGetTemplateFieldTextAlign5 string

const (
	FieldGetTemplateFieldTextAlign5Left   FieldGetTemplateFieldTextAlign5 = "left"
	FieldGetTemplateFieldTextAlign5Center FieldGetTemplateFieldTextAlign5 = "center"
	FieldGetTemplateFieldTextAlign5Right  FieldGetTemplateFieldTextAlign5 = "right"
)

func (e FieldGetTemplateFieldTextAlign5) ToPointer() *FieldGetTemplateFieldTextAlign5 {
	return &e
}
func (e *FieldGetTemplateFieldTextAlign5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldGetTemplateFieldTextAlign5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldTextAlign5: %v", v)
	}
}

type FieldGetTemplateFieldFieldMetaText struct {
	Label          *string                                `json:"label,omitempty"`
	Placeholder    *string                                `json:"placeholder,omitempty"`
	Required       *bool                                  `json:"required,omitempty"`
	ReadOnly       *bool                                  `json:"readOnly,omitempty"`
	Type           FieldGetTemplateFieldFieldMetaTypeText `json:"type"`
	Text           *string                                `json:"text,omitempty"`
	CharacterLimit *float64                               `json:"characterLimit,omitempty"`
	FontSize       *float64                               `json:"fontSize,omitempty"`
	TextAlign      *FieldGetTemplateFieldTextAlign5       `json:"textAlign,omitempty"`
}

func (f FieldGetTemplateFieldFieldMetaText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetTemplateFieldFieldMetaText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetTemplateFieldFieldMetaText) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetTemplateFieldFieldMetaText) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetTemplateFieldFieldMetaText) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetTemplateFieldFieldMetaText) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetTemplateFieldFieldMetaText) GetType() FieldGetTemplateFieldFieldMetaTypeText {
	if f == nil {
		return FieldGetTemplateFieldFieldMetaTypeText("")
	}
	return f.Type
}

func (f *FieldGetTemplateFieldFieldMetaText) GetText() *string {
	if f == nil {
		return nil
	}
	return f.Text
}

func (f *FieldGetTemplateFieldFieldMetaText) GetCharacterLimit() *float64 {
	if f == nil {
		return nil
	}
	return f.CharacterLimit
}

func (f *FieldGetTemplateFieldFieldMetaText) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldGetTemplateFieldFieldMetaText) GetTextAlign() *FieldGetTemplateFieldTextAlign5 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldGetTemplateFieldFieldMetaTypeDate string

const (
	FieldGetTemplateFieldFieldMetaTypeDateDate FieldGetTemplateFieldFieldMetaTypeDate = "date"
)

func (e FieldGetTemplateFieldFieldMetaTypeDate) ToPointer() *FieldGetTemplateFieldFieldMetaTypeDate {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldGetTemplateFieldFieldMetaTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaTypeDate: %v", v)
	}
}

type FieldGetTemplateFieldTextAlign4 string

const (
	FieldGetTemplateFieldTextAlign4Left   FieldGetTemplateFieldTextAlign4 = "left"
	FieldGetTemplateFieldTextAlign4Center FieldGetTemplateFieldTextAlign4 = "center"
	FieldGetTemplateFieldTextAlign4Right  FieldGetTemplateFieldTextAlign4 = "right"
)

func (e FieldGetTemplateFieldTextAlign4) ToPointer() *FieldGetTemplateFieldTextAlign4 {
	return &e
}
func (e *FieldGetTemplateFieldTextAlign4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldGetTemplateFieldTextAlign4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldTextAlign4: %v", v)
	}
}

type FieldGetTemplateFieldFieldMetaDate struct {
	Label       *string                                `json:"label,omitempty"`
	Placeholder *string                                `json:"placeholder,omitempty"`
	Required    *bool                                  `json:"required,omitempty"`
	ReadOnly    *bool                                  `json:"readOnly,omitempty"`
	Type        FieldGetTemplateFieldFieldMetaTypeDate `json:"type"`
	FontSize    *float64                               `json:"fontSize,omitempty"`
	TextAlign   *FieldGetTemplateFieldTextAlign4       `json:"textAlign,omitempty"`
}

func (f FieldGetTemplateFieldFieldMetaDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetTemplateFieldFieldMetaDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetTemplateFieldFieldMetaDate) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetTemplateFieldFieldMetaDate) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetTemplateFieldFieldMetaDate) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetTemplateFieldFieldMetaDate) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetTemplateFieldFieldMetaDate) GetType() FieldGetTemplateFieldFieldMetaTypeDate {
	if f == nil {
		return FieldGetTemplateFieldFieldMetaTypeDate("")
	}
	return f.Type
}

func (f *FieldGetTemplateFieldFieldMetaDate) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldGetTemplateFieldFieldMetaDate) GetTextAlign() *FieldGetTemplateFieldTextAlign4 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldGetTemplateFieldFieldMetaTypeEmail string

const (
	FieldGetTemplateFieldFieldMetaTypeEmailEmail FieldGetTemplateFieldFieldMetaTypeEmail = "email"
)

func (e FieldGetTemplateFieldFieldMetaTypeEmail) ToPointer() *FieldGetTemplateFieldFieldMetaTypeEmail {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldGetTemplateFieldFieldMetaTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaTypeEmail: %v", v)
	}
}

type FieldGetTemplateFieldTextAlign3 string

const (
	FieldGetTemplateFieldTextAlign3Left   FieldGetTemplateFieldTextAlign3 = "left"
	FieldGetTemplateFieldTextAlign3Center FieldGetTemplateFieldTextAlign3 = "center"
	FieldGetTemplateFieldTextAlign3Right  FieldGetTemplateFieldTextAlign3 = "right"
)

func (e FieldGetTemplateFieldTextAlign3) ToPointer() *FieldGetTemplateFieldTextAlign3 {
	return &e
}
func (e *FieldGetTemplateFieldTextAlign3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldGetTemplateFieldTextAlign3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldTextAlign3: %v", v)
	}
}

type FieldGetTemplateFieldFieldMetaEmail struct {
	Label       *string                                 `json:"label,omitempty"`
	Placeholder *string                                 `json:"placeholder,omitempty"`
	Required    *bool                                   `json:"required,omitempty"`
	ReadOnly    *bool                                   `json:"readOnly,omitempty"`
	Type        FieldGetTemplateFieldFieldMetaTypeEmail `json:"type"`
	FontSize    *float64                                `json:"fontSize,omitempty"`
	TextAlign   *FieldGetTemplateFieldTextAlign3        `json:"textAlign,omitempty"`
}

func (f FieldGetTemplateFieldFieldMetaEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetTemplateFieldFieldMetaEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetTemplateFieldFieldMetaEmail) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetTemplateFieldFieldMetaEmail) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetTemplateFieldFieldMetaEmail) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetTemplateFieldFieldMetaEmail) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetTemplateFieldFieldMetaEmail) GetType() FieldGetTemplateFieldFieldMetaTypeEmail {
	if f == nil {
		return FieldGetTemplateFieldFieldMetaTypeEmail("")
	}
	return f.Type
}

func (f *FieldGetTemplateFieldFieldMetaEmail) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldGetTemplateFieldFieldMetaEmail) GetTextAlign() *FieldGetTemplateFieldTextAlign3 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldGetTemplateFieldFieldMetaTypeName string

const (
	FieldGetTemplateFieldFieldMetaTypeNameName FieldGetTemplateFieldFieldMetaTypeName = "name"
)

func (e FieldGetTemplateFieldFieldMetaTypeName) ToPointer() *FieldGetTemplateFieldFieldMetaTypeName {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldGetTemplateFieldFieldMetaTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaTypeName: %v", v)
	}
}

type FieldGetTemplateFieldTextAlign2 string

const (
	FieldGetTemplateFieldTextAlign2Left   FieldGetTemplateFieldTextAlign2 = "left"
	FieldGetTemplateFieldTextAlign2Center FieldGetTemplateFieldTextAlign2 = "center"
	FieldGetTemplateFieldTextAlign2Right  FieldGetTemplateFieldTextAlign2 = "right"
)

func (e FieldGetTemplateFieldTextAlign2) ToPointer() *FieldGetTemplateFieldTextAlign2 {
	return &e
}
func (e *FieldGetTemplateFieldTextAlign2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldGetTemplateFieldTextAlign2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldTextAlign2: %v", v)
	}
}

type FieldGetTemplateFieldFieldMetaName struct {
	Label       *string                                `json:"label,omitempty"`
	Placeholder *string                                `json:"placeholder,omitempty"`
	Required    *bool                                  `json:"required,omitempty"`
	ReadOnly    *bool                                  `json:"readOnly,omitempty"`
	Type        FieldGetTemplateFieldFieldMetaTypeName `json:"type"`
	FontSize    *float64                               `json:"fontSize,omitempty"`
	TextAlign   *FieldGetTemplateFieldTextAlign2       `json:"textAlign,omitempty"`
}

func (f FieldGetTemplateFieldFieldMetaName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetTemplateFieldFieldMetaName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetTemplateFieldFieldMetaName) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetTemplateFieldFieldMetaName) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetTemplateFieldFieldMetaName) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetTemplateFieldFieldMetaName) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetTemplateFieldFieldMetaName) GetType() FieldGetTemplateFieldFieldMetaTypeName {
	if f == nil {
		return FieldGetTemplateFieldFieldMetaTypeName("")
	}
	return f.Type
}

func (f *FieldGetTemplateFieldFieldMetaName) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldGetTemplateFieldFieldMetaName) GetTextAlign() *FieldGetTemplateFieldTextAlign2 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldGetTemplateFieldFieldMetaTypeInitials string

const (
	FieldGetTemplateFieldFieldMetaTypeInitialsInitials FieldGetTemplateFieldFieldMetaTypeInitials = "initials"
)

func (e FieldGetTemplateFieldFieldMetaTypeInitials) ToPointer() *FieldGetTemplateFieldFieldMetaTypeInitials {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldGetTemplateFieldFieldMetaTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaTypeInitials: %v", v)
	}
}

type FieldGetTemplateFieldTextAlign1 string

const (
	FieldGetTemplateFieldTextAlign1Left   FieldGetTemplateFieldTextAlign1 = "left"
	FieldGetTemplateFieldTextAlign1Center FieldGetTemplateFieldTextAlign1 = "center"
	FieldGetTemplateFieldTextAlign1Right  FieldGetTemplateFieldTextAlign1 = "right"
)

func (e FieldGetTemplateFieldTextAlign1) ToPointer() *FieldGetTemplateFieldTextAlign1 {
	return &e
}
func (e *FieldGetTemplateFieldTextAlign1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldGetTemplateFieldTextAlign1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldTextAlign1: %v", v)
	}
}

type FieldGetTemplateFieldFieldMetaInitials struct {
	Label       *string                                    `json:"label,omitempty"`
	Placeholder *string                                    `json:"placeholder,omitempty"`
	Required    *bool                                      `json:"required,omitempty"`
	ReadOnly    *bool                                      `json:"readOnly,omitempty"`
	Type        FieldGetTemplateFieldFieldMetaTypeInitials `json:"type"`
	FontSize    *float64                                   `json:"fontSize,omitempty"`
	TextAlign   *FieldGetTemplateFieldTextAlign1           `json:"textAlign,omitempty"`
}

func (f FieldGetTemplateFieldFieldMetaInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetTemplateFieldFieldMetaInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetTemplateFieldFieldMetaInitials) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetTemplateFieldFieldMetaInitials) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetTemplateFieldFieldMetaInitials) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetTemplateFieldFieldMetaInitials) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetTemplateFieldFieldMetaInitials) GetType() FieldGetTemplateFieldFieldMetaTypeInitials {
	if f == nil {
		return FieldGetTemplateFieldFieldMetaTypeInitials("")
	}
	return f.Type
}

func (f *FieldGetTemplateFieldFieldMetaInitials) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldGetTemplateFieldFieldMetaInitials) GetTextAlign() *FieldGetTemplateFieldTextAlign1 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldGetTemplateFieldFieldMetaUnionType string

const (
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaInitials FieldGetTemplateFieldFieldMetaUnionType = "field_getTemplateField_fieldMeta_Initials"
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaName     FieldGetTemplateFieldFieldMetaUnionType = "field_getTemplateField_fieldMeta_Name"
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaEmail    FieldGetTemplateFieldFieldMetaUnionType = "field_getTemplateField_fieldMeta_Email"
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaDate     FieldGetTemplateFieldFieldMetaUnionType = "field_getTemplateField_fieldMeta_Date"
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaText     FieldGetTemplateFieldFieldMetaUnionType = "field_getTemplateField_fieldMeta_Text"
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaNumber   FieldGetTemplateFieldFieldMetaUnionType = "field_getTemplateField_fieldMeta_Number"
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaRadio    FieldGetTemplateFieldFieldMetaUnionType = "field_getTemplateField_fieldMeta_Radio"
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaCheckbox FieldGetTemplateFieldFieldMetaUnionType = "field_getTemplateField_fieldMeta_Checkbox"
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaDropdown FieldGetTemplateFieldFieldMetaUnionType = "field_getTemplateField_fieldMeta_Dropdown"
)

type FieldGetTemplateFieldFieldMetaUnion struct {
	FieldGetTemplateFieldFieldMetaInitials *FieldGetTemplateFieldFieldMetaInitials `queryParam:"inline,name=fieldMeta"`
	FieldGetTemplateFieldFieldMetaName     *FieldGetTemplateFieldFieldMetaName     `queryParam:"inline,name=fieldMeta"`
	FieldGetTemplateFieldFieldMetaEmail    *FieldGetTemplateFieldFieldMetaEmail    `queryParam:"inline,name=fieldMeta"`
	FieldGetTemplateFieldFieldMetaDate     *FieldGetTemplateFieldFieldMetaDate     `queryParam:"inline,name=fieldMeta"`
	FieldGetTemplateFieldFieldMetaText     *FieldGetTemplateFieldFieldMetaText     `queryParam:"inline,name=fieldMeta"`
	FieldGetTemplateFieldFieldMetaNumber   *FieldGetTemplateFieldFieldMetaNumber   `queryParam:"inline,name=fieldMeta"`
	FieldGetTemplateFieldFieldMetaRadio    *FieldGetTemplateFieldFieldMetaRadio    `queryParam:"inline,name=fieldMeta"`
	FieldGetTemplateFieldFieldMetaCheckbox *FieldGetTemplateFieldFieldMetaCheckbox `queryParam:"inline,name=fieldMeta"`
	FieldGetTemplateFieldFieldMetaDropdown *FieldGetTemplateFieldFieldMetaDropdown `queryParam:"inline,name=fieldMeta"`

	Type FieldGetTemplateFieldFieldMetaUnionType
}

func CreateFieldGetTemplateFieldFieldMetaUnionFieldGetTemplateFieldFieldMetaInitials(fieldGetTemplateFieldFieldMetaInitials FieldGetTemplateFieldFieldMetaInitials) FieldGetTemplateFieldFieldMetaUnion {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaInitials

	return FieldGetTemplateFieldFieldMetaUnion{
		FieldGetTemplateFieldFieldMetaInitials: &fieldGetTemplateFieldFieldMetaInitials,
		Type:                                   typ,
	}
}

func CreateFieldGetTemplateFieldFieldMetaUnionFieldGetTemplateFieldFieldMetaName(fieldGetTemplateFieldFieldMetaName FieldGetTemplateFieldFieldMetaName) FieldGetTemplateFieldFieldMetaUnion {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaName

	return FieldGetTemplateFieldFieldMetaUnion{
		FieldGetTemplateFieldFieldMetaName: &fieldGetTemplateFieldFieldMetaName,
		Type:                               typ,
	}
}

func CreateFieldGetTemplateFieldFieldMetaUnionFieldGetTemplateFieldFieldMetaEmail(fieldGetTemplateFieldFieldMetaEmail FieldGetTemplateFieldFieldMetaEmail) FieldGetTemplateFieldFieldMetaUnion {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaEmail

	return FieldGetTemplateFieldFieldMetaUnion{
		FieldGetTemplateFieldFieldMetaEmail: &fieldGetTemplateFieldFieldMetaEmail,
		Type:                                typ,
	}
}

func CreateFieldGetTemplateFieldFieldMetaUnionFieldGetTemplateFieldFieldMetaDate(fieldGetTemplateFieldFieldMetaDate FieldGetTemplateFieldFieldMetaDate) FieldGetTemplateFieldFieldMetaUnion {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaDate

	return FieldGetTemplateFieldFieldMetaUnion{
		FieldGetTemplateFieldFieldMetaDate: &fieldGetTemplateFieldFieldMetaDate,
		Type:                               typ,
	}
}

func CreateFieldGetTemplateFieldFieldMetaUnionFieldGetTemplateFieldFieldMetaText(fieldGetTemplateFieldFieldMetaText FieldGetTemplateFieldFieldMetaText) FieldGetTemplateFieldFieldMetaUnion {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaText

	return FieldGetTemplateFieldFieldMetaUnion{
		FieldGetTemplateFieldFieldMetaText: &fieldGetTemplateFieldFieldMetaText,
		Type:                               typ,
	}
}

func CreateFieldGetTemplateFieldFieldMetaUnionFieldGetTemplateFieldFieldMetaNumber(fieldGetTemplateFieldFieldMetaNumber FieldGetTemplateFieldFieldMetaNumber) FieldGetTemplateFieldFieldMetaUnion {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaNumber

	return FieldGetTemplateFieldFieldMetaUnion{
		FieldGetTemplateFieldFieldMetaNumber: &fieldGetTemplateFieldFieldMetaNumber,
		Type:                                 typ,
	}
}

func CreateFieldGetTemplateFieldFieldMetaUnionFieldGetTemplateFieldFieldMetaRadio(fieldGetTemplateFieldFieldMetaRadio FieldGetTemplateFieldFieldMetaRadio) FieldGetTemplateFieldFieldMetaUnion {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaRadio

	return FieldGetTemplateFieldFieldMetaUnion{
		FieldGetTemplateFieldFieldMetaRadio: &fieldGetTemplateFieldFieldMetaRadio,
		Type:                                typ,
	}
}

func CreateFieldGetTemplateFieldFieldMetaUnionFieldGetTemplateFieldFieldMetaCheckbox(fieldGetTemplateFieldFieldMetaCheckbox FieldGetTemplateFieldFieldMetaCheckbox) FieldGetTemplateFieldFieldMetaUnion {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaCheckbox

	return FieldGetTemplateFieldFieldMetaUnion{
		FieldGetTemplateFieldFieldMetaCheckbox: &fieldGetTemplateFieldFieldMetaCheckbox,
		Type:                                   typ,
	}
}

func CreateFieldGetTemplateFieldFieldMetaUnionFieldGetTemplateFieldFieldMetaDropdown(fieldGetTemplateFieldFieldMetaDropdown FieldGetTemplateFieldFieldMetaDropdown) FieldGetTemplateFieldFieldMetaUnion {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaDropdown

	return FieldGetTemplateFieldFieldMetaUnion{
		FieldGetTemplateFieldFieldMetaDropdown: &fieldGetTemplateFieldFieldMetaDropdown,
		Type:                                   typ,
	}
}

func (u *FieldGetTemplateFieldFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var fieldGetTemplateFieldFieldMetaInitials FieldGetTemplateFieldFieldMetaInitials = FieldGetTemplateFieldFieldMetaInitials{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMetaInitials, "", true, nil); err == nil {
		u.FieldGetTemplateFieldFieldMetaInitials = &fieldGetTemplateFieldFieldMetaInitials
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaInitials
		return nil
	}

	var fieldGetTemplateFieldFieldMetaName FieldGetTemplateFieldFieldMetaName = FieldGetTemplateFieldFieldMetaName{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMetaName, "", true, nil); err == nil {
		u.FieldGetTemplateFieldFieldMetaName = &fieldGetTemplateFieldFieldMetaName
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaName
		return nil
	}

	var fieldGetTemplateFieldFieldMetaEmail FieldGetTemplateFieldFieldMetaEmail = FieldGetTemplateFieldFieldMetaEmail{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMetaEmail, "", true, nil); err == nil {
		u.FieldGetTemplateFieldFieldMetaEmail = &fieldGetTemplateFieldFieldMetaEmail
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaEmail
		return nil
	}

	var fieldGetTemplateFieldFieldMetaDate FieldGetTemplateFieldFieldMetaDate = FieldGetTemplateFieldFieldMetaDate{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMetaDate, "", true, nil); err == nil {
		u.FieldGetTemplateFieldFieldMetaDate = &fieldGetTemplateFieldFieldMetaDate
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaDate
		return nil
	}

	var fieldGetTemplateFieldFieldMetaText FieldGetTemplateFieldFieldMetaText = FieldGetTemplateFieldFieldMetaText{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMetaText, "", true, nil); err == nil {
		u.FieldGetTemplateFieldFieldMetaText = &fieldGetTemplateFieldFieldMetaText
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaText
		return nil
	}

	var fieldGetTemplateFieldFieldMetaNumber FieldGetTemplateFieldFieldMetaNumber = FieldGetTemplateFieldFieldMetaNumber{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMetaNumber, "", true, nil); err == nil {
		u.FieldGetTemplateFieldFieldMetaNumber = &fieldGetTemplateFieldFieldMetaNumber
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaNumber
		return nil
	}

	var fieldGetTemplateFieldFieldMetaRadio FieldGetTemplateFieldFieldMetaRadio = FieldGetTemplateFieldFieldMetaRadio{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMetaRadio, "", true, nil); err == nil {
		u.FieldGetTemplateFieldFieldMetaRadio = &fieldGetTemplateFieldFieldMetaRadio
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaRadio
		return nil
	}

	var fieldGetTemplateFieldFieldMetaCheckbox FieldGetTemplateFieldFieldMetaCheckbox = FieldGetTemplateFieldFieldMetaCheckbox{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMetaCheckbox, "", true, nil); err == nil {
		u.FieldGetTemplateFieldFieldMetaCheckbox = &fieldGetTemplateFieldFieldMetaCheckbox
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaCheckbox
		return nil
	}

	var fieldGetTemplateFieldFieldMetaDropdown FieldGetTemplateFieldFieldMetaDropdown = FieldGetTemplateFieldFieldMetaDropdown{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMetaDropdown, "", true, nil); err == nil {
		u.FieldGetTemplateFieldFieldMetaDropdown = &fieldGetTemplateFieldFieldMetaDropdown
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMetaDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldGetTemplateFieldFieldMetaUnion", string(data))
}

func (u FieldGetTemplateFieldFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.FieldGetTemplateFieldFieldMetaInitials != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMetaInitials, "", true)
	}

	if u.FieldGetTemplateFieldFieldMetaName != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMetaName, "", true)
	}

	if u.FieldGetTemplateFieldFieldMetaEmail != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMetaEmail, "", true)
	}

	if u.FieldGetTemplateFieldFieldMetaDate != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMetaDate, "", true)
	}

	if u.FieldGetTemplateFieldFieldMetaText != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMetaText, "", true)
	}

	if u.FieldGetTemplateFieldFieldMetaNumber != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMetaNumber, "", true)
	}

	if u.FieldGetTemplateFieldFieldMetaRadio != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMetaRadio, "", true)
	}

	if u.FieldGetTemplateFieldFieldMetaCheckbox != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMetaCheckbox, "", true)
	}

	if u.FieldGetTemplateFieldFieldMetaDropdown != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMetaDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type FieldGetTemplateFieldFieldMetaUnion: all fields are null")
}

// FieldGetTemplateFieldResponseBody - Successful response
type FieldGetTemplateFieldResponseBody struct {
	EnvelopeID     string                    `json:"envelopeId"`
	EnvelopeItemID string                    `json:"envelopeItemId"`
	Type           FieldGetTemplateFieldType `json:"type"`
	ID             float64                   `json:"id"`
	SecondaryID    string                    `json:"secondaryId"`
	RecipientID    float64                   `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                              `json:"page"`
	PositionX  any                                  `json:"positionX,omitempty"`
	PositionY  any                                  `json:"positionY,omitempty"`
	Width      any                                  `json:"width,omitempty"`
	Height     any                                  `json:"height,omitempty"`
	CustomText string                               `json:"customText"`
	Inserted   bool                                 `json:"inserted"`
	FieldMeta  *FieldGetTemplateFieldFieldMetaUnion `json:"fieldMeta"`
	DocumentID *float64                             `json:"documentId,omitempty"`
	TemplateID *float64                             `json:"templateId,omitempty"`
}

func (f *FieldGetTemplateFieldResponseBody) GetEnvelopeID() string {
	if f == nil {
		return ""
	}
	return f.EnvelopeID
}

func (f *FieldGetTemplateFieldResponseBody) GetEnvelopeItemID() string {
	if f == nil {
		return ""
	}
	return f.EnvelopeItemID
}

func (f *FieldGetTemplateFieldResponseBody) GetType() FieldGetTemplateFieldType {
	if f == nil {
		return FieldGetTemplateFieldType("")
	}
	return f.Type
}

func (f *FieldGetTemplateFieldResponseBody) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldGetTemplateFieldResponseBody) GetSecondaryID() string {
	if f == nil {
		return ""
	}
	return f.SecondaryID
}

func (f *FieldGetTemplateFieldResponseBody) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldGetTemplateFieldResponseBody) GetPage() float64 {
	if f == nil {
		return 0.0
	}
	return f.Page
}

func (f *FieldGetTemplateFieldResponseBody) GetPositionX() any {
	if f == nil {
		return nil
	}
	return f.PositionX
}

func (f *FieldGetTemplateFieldResponseBody) GetPositionY() any {
	if f == nil {
		return nil
	}
	return f.PositionY
}

func (f *FieldGetTemplateFieldResponseBody) GetWidth() any {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FieldGetTemplateFieldResponseBody) GetHeight() any {
	if f == nil {
		return nil
	}
	return f.Height
}

func (f *FieldGetTemplateFieldResponseBody) GetCustomText() string {
	if f == nil {
		return ""
	}
	return f.CustomText
}

func (f *FieldGetTemplateFieldResponseBody) GetInserted() bool {
	if f == nil {
		return false
	}
	return f.Inserted
}

func (f *FieldGetTemplateFieldResponseBody) GetFieldMeta() *FieldGetTemplateFieldFieldMetaUnion {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldGetTemplateFieldResponseBody) GetDocumentID() *float64 {
	if f == nil {
		return nil
	}
	return f.DocumentID
}

func (f *FieldGetTemplateFieldResponseBody) GetTemplateID() *float64 {
	if f == nil {
		return nil
	}
	return f.TemplateID
}

type FieldGetTemplateFieldResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldGetTemplateFieldResponseBody
}

func (f *FieldGetTemplateFieldResponse) GetHTTPMeta() components.HTTPMetadata {
	if f == nil {
		return components.HTTPMetadata{}
	}
	return f.HTTPMeta
}

func (f *FieldGetTemplateFieldResponse) GetObject() *FieldGetTemplateFieldResponseBody {
	if f == nil {
		return nil
	}
	return f.Object
}
