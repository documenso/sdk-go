// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

// QueryParamSource - Filter documents by how it was created.
type QueryParamSource string

const (
	QueryParamSourceDocument           QueryParamSource = "DOCUMENT"
	QueryParamSourceTemplate           QueryParamSource = "TEMPLATE"
	QueryParamSourceTemplateDirectLink QueryParamSource = "TEMPLATE_DIRECT_LINK"
)

func (e QueryParamSource) ToPointer() *QueryParamSource {
	return &e
}
func (e *QueryParamSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		fallthrough
	case "TEMPLATE_DIRECT_LINK":
		*e = QueryParamSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamSource: %v", v)
	}
}

// QueryParamStatus - Filter documents by the current status
type QueryParamStatus string

const (
	QueryParamStatusDraft     QueryParamStatus = "DRAFT"
	QueryParamStatusPending   QueryParamStatus = "PENDING"
	QueryParamStatusCompleted QueryParamStatus = "COMPLETED"
	QueryParamStatusRejected  QueryParamStatus = "REJECTED"
)

func (e QueryParamStatus) ToPointer() *QueryParamStatus {
	return &e
}
func (e *QueryParamStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "PENDING":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "REJECTED":
		*e = QueryParamStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamStatus: %v", v)
	}
}

type OrderByColumn string

const (
	OrderByColumnCreatedAt OrderByColumn = "createdAt"
)

func (e OrderByColumn) ToPointer() *OrderByColumn {
	return &e
}
func (e *OrderByColumn) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "createdAt":
		*e = OrderByColumn(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderByColumn: %v", v)
	}
}

type OrderByDirection string

const (
	OrderByDirectionAsc  OrderByDirection = "asc"
	OrderByDirectionDesc OrderByDirection = "desc"
)

func (e OrderByDirection) ToPointer() *OrderByDirection {
	return &e
}
func (e *OrderByDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = OrderByDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderByDirection: %v", v)
	}
}

type DocumentFindDocumentsRequest struct {
	// The search query.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// The pagination page number, starts at 1.
	Page *float64 `queryParam:"style=form,explode=true,name=page"`
	// The number of items per page.
	PerPage *float64 `queryParam:"style=form,explode=true,name=perPage"`
	// Filter documents by the template ID used to create it.
	TemplateID *float64 `queryParam:"style=form,explode=true,name=templateId"`
	// Filter documents by how it was created.
	Source *QueryParamSource `queryParam:"style=form,explode=true,name=source"`
	// Filter documents by the current status
	Status           *QueryParamStatus `queryParam:"style=form,explode=true,name=status"`
	OrderByColumn    *OrderByColumn    `queryParam:"style=form,explode=true,name=orderByColumn"`
	OrderByDirection *OrderByDirection `default:"desc" queryParam:"style=form,explode=true,name=orderByDirection"`
}

func (d DocumentFindDocumentsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentFindDocumentsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DocumentFindDocumentsRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *DocumentFindDocumentsRequest) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *DocumentFindDocumentsRequest) GetPerPage() *float64 {
	if o == nil {
		return nil
	}
	return o.PerPage
}

func (o *DocumentFindDocumentsRequest) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *DocumentFindDocumentsRequest) GetSource() *QueryParamSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *DocumentFindDocumentsRequest) GetStatus() *QueryParamStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *DocumentFindDocumentsRequest) GetOrderByColumn() *OrderByColumn {
	if o == nil {
		return nil
	}
	return o.OrderByColumn
}

func (o *DocumentFindDocumentsRequest) GetOrderByDirection() *OrderByDirection {
	if o == nil {
		return nil
	}
	return o.OrderByDirection
}

type DocumentFindDocumentsVisibility string

const (
	DocumentFindDocumentsVisibilityEveryone        DocumentFindDocumentsVisibility = "EVERYONE"
	DocumentFindDocumentsVisibilityManagerAndAbove DocumentFindDocumentsVisibility = "MANAGER_AND_ABOVE"
	DocumentFindDocumentsVisibilityAdmin           DocumentFindDocumentsVisibility = "ADMIN"
)

func (e DocumentFindDocumentsVisibility) ToPointer() *DocumentFindDocumentsVisibility {
	return &e
}
func (e *DocumentFindDocumentsVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = DocumentFindDocumentsVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindDocumentsVisibility: %v", v)
	}
}

type DataStatus string

const (
	DataStatusDraft     DataStatus = "DRAFT"
	DataStatusPending   DataStatus = "PENDING"
	DataStatusCompleted DataStatus = "COMPLETED"
	DataStatusRejected  DataStatus = "REJECTED"
)

func (e DataStatus) ToPointer() *DataStatus {
	return &e
}
func (e *DataStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "PENDING":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "REJECTED":
		*e = DataStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataStatus: %v", v)
	}
}

type DataSource string

const (
	DataSourceDocument           DataSource = "DOCUMENT"
	DataSourceTemplate           DataSource = "TEMPLATE"
	DataSourceTemplateDirectLink DataSource = "TEMPLATE_DIRECT_LINK"
)

func (e DataSource) ToPointer() *DataSource {
	return &e
}
func (e *DataSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		fallthrough
	case "TEMPLATE_DIRECT_LINK":
		*e = DataSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataSource: %v", v)
	}
}

// DocumentFindDocumentsGlobalAccessAuth - The type of authentication required for the recipient to access the document.
type DocumentFindDocumentsGlobalAccessAuth string

const (
	DocumentFindDocumentsGlobalAccessAuthAccount DocumentFindDocumentsGlobalAccessAuth = "ACCOUNT"
)

func (e DocumentFindDocumentsGlobalAccessAuth) ToPointer() *DocumentFindDocumentsGlobalAccessAuth {
	return &e
}
func (e *DocumentFindDocumentsGlobalAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = DocumentFindDocumentsGlobalAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindDocumentsGlobalAccessAuth: %v", v)
	}
}

// DocumentFindDocumentsGlobalActionAuth - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type DocumentFindDocumentsGlobalActionAuth string

const (
	DocumentFindDocumentsGlobalActionAuthAccount       DocumentFindDocumentsGlobalActionAuth = "ACCOUNT"
	DocumentFindDocumentsGlobalActionAuthPasskey       DocumentFindDocumentsGlobalActionAuth = "PASSKEY"
	DocumentFindDocumentsGlobalActionAuthTwoFactorAuth DocumentFindDocumentsGlobalActionAuth = "TWO_FACTOR_AUTH"
)

func (e DocumentFindDocumentsGlobalActionAuth) ToPointer() *DocumentFindDocumentsGlobalActionAuth {
	return &e
}
func (e *DocumentFindDocumentsGlobalActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = DocumentFindDocumentsGlobalActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindDocumentsGlobalActionAuth: %v", v)
	}
}

type DocumentFindDocumentsAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	GlobalAccessAuth *DocumentFindDocumentsGlobalAccessAuth `json:"globalAccessAuth"`
	// The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
	GlobalActionAuth *DocumentFindDocumentsGlobalActionAuth `json:"globalActionAuth"`
}

func (o *DocumentFindDocumentsAuthOptions) GetGlobalAccessAuth() *DocumentFindDocumentsGlobalAccessAuth {
	if o == nil {
		return nil
	}
	return o.GlobalAccessAuth
}

func (o *DocumentFindDocumentsAuthOptions) GetGlobalActionAuth() *DocumentFindDocumentsGlobalActionAuth {
	if o == nil {
		return nil
	}
	return o.GlobalActionAuth
}

type DocumentFindDocumentsFormValuesType string

const (
	DocumentFindDocumentsFormValuesTypeStr     DocumentFindDocumentsFormValuesType = "str"
	DocumentFindDocumentsFormValuesTypeBoolean DocumentFindDocumentsFormValuesType = "boolean"
	DocumentFindDocumentsFormValuesTypeNumber  DocumentFindDocumentsFormValuesType = "number"
)

type DocumentFindDocumentsFormValues struct {
	Str     *string  `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`
	Number  *float64 `queryParam:"inline"`

	Type DocumentFindDocumentsFormValuesType
}

func CreateDocumentFindDocumentsFormValuesStr(str string) DocumentFindDocumentsFormValues {
	typ := DocumentFindDocumentsFormValuesTypeStr

	return DocumentFindDocumentsFormValues{
		Str:  &str,
		Type: typ,
	}
}

func CreateDocumentFindDocumentsFormValuesBoolean(boolean bool) DocumentFindDocumentsFormValues {
	typ := DocumentFindDocumentsFormValuesTypeBoolean

	return DocumentFindDocumentsFormValues{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateDocumentFindDocumentsFormValuesNumber(number float64) DocumentFindDocumentsFormValues {
	typ := DocumentFindDocumentsFormValuesTypeNumber

	return DocumentFindDocumentsFormValues{
		Number: &number,
		Type:   typ,
	}
}

func (u *DocumentFindDocumentsFormValues) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = DocumentFindDocumentsFormValuesTypeStr
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = DocumentFindDocumentsFormValuesTypeBoolean
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = DocumentFindDocumentsFormValuesTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DocumentFindDocumentsFormValues", string(data))
}

func (u DocumentFindDocumentsFormValues) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type DocumentFindDocumentsFormValues: all fields are null")
}

type DocumentFindDocumentsUser struct {
	ID    float64 `json:"id"`
	Name  *string `json:"name"`
	Email string  `json:"email"`
}

func (o *DocumentFindDocumentsUser) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *DocumentFindDocumentsUser) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *DocumentFindDocumentsUser) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

type DocumentFindDocumentsRole string

const (
	DocumentFindDocumentsRoleCc        DocumentFindDocumentsRole = "CC"
	DocumentFindDocumentsRoleSigner    DocumentFindDocumentsRole = "SIGNER"
	DocumentFindDocumentsRoleViewer    DocumentFindDocumentsRole = "VIEWER"
	DocumentFindDocumentsRoleApprover  DocumentFindDocumentsRole = "APPROVER"
	DocumentFindDocumentsRoleAssistant DocumentFindDocumentsRole = "ASSISTANT"
)

func (e DocumentFindDocumentsRole) ToPointer() *DocumentFindDocumentsRole {
	return &e
}
func (e *DocumentFindDocumentsRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = DocumentFindDocumentsRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindDocumentsRole: %v", v)
	}
}

type DocumentFindDocumentsReadStatus string

const (
	DocumentFindDocumentsReadStatusNotOpened DocumentFindDocumentsReadStatus = "NOT_OPENED"
	DocumentFindDocumentsReadStatusOpened    DocumentFindDocumentsReadStatus = "OPENED"
)

func (e DocumentFindDocumentsReadStatus) ToPointer() *DocumentFindDocumentsReadStatus {
	return &e
}
func (e *DocumentFindDocumentsReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = DocumentFindDocumentsReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindDocumentsReadStatus: %v", v)
	}
}

type DocumentFindDocumentsSigningStatus string

const (
	DocumentFindDocumentsSigningStatusNotSigned DocumentFindDocumentsSigningStatus = "NOT_SIGNED"
	DocumentFindDocumentsSigningStatusSigned    DocumentFindDocumentsSigningStatus = "SIGNED"
	DocumentFindDocumentsSigningStatusRejected  DocumentFindDocumentsSigningStatus = "REJECTED"
)

func (e DocumentFindDocumentsSigningStatus) ToPointer() *DocumentFindDocumentsSigningStatus {
	return &e
}
func (e *DocumentFindDocumentsSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = DocumentFindDocumentsSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindDocumentsSigningStatus: %v", v)
	}
}

type DocumentFindDocumentsSendStatus string

const (
	DocumentFindDocumentsSendStatusNotSent DocumentFindDocumentsSendStatus = "NOT_SENT"
	DocumentFindDocumentsSendStatusSent    DocumentFindDocumentsSendStatus = "SENT"
)

func (e DocumentFindDocumentsSendStatus) ToPointer() *DocumentFindDocumentsSendStatus {
	return &e
}
func (e *DocumentFindDocumentsSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = DocumentFindDocumentsSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindDocumentsSendStatus: %v", v)
	}
}

// DocumentFindDocumentsAccessAuth - The type of authentication required for the recipient to access the document.
type DocumentFindDocumentsAccessAuth string

const (
	DocumentFindDocumentsAccessAuthAccount DocumentFindDocumentsAccessAuth = "ACCOUNT"
)

func (e DocumentFindDocumentsAccessAuth) ToPointer() *DocumentFindDocumentsAccessAuth {
	return &e
}
func (e *DocumentFindDocumentsAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = DocumentFindDocumentsAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindDocumentsAccessAuth: %v", v)
	}
}

// DocumentFindDocumentsActionAuth - The type of authentication required for the recipient to sign the document.
type DocumentFindDocumentsActionAuth string

const (
	DocumentFindDocumentsActionAuthAccount       DocumentFindDocumentsActionAuth = "ACCOUNT"
	DocumentFindDocumentsActionAuthPasskey       DocumentFindDocumentsActionAuth = "PASSKEY"
	DocumentFindDocumentsActionAuthTwoFactorAuth DocumentFindDocumentsActionAuth = "TWO_FACTOR_AUTH"
	DocumentFindDocumentsActionAuthExplicitNone  DocumentFindDocumentsActionAuth = "EXPLICIT_NONE"
)

func (e DocumentFindDocumentsActionAuth) ToPointer() *DocumentFindDocumentsActionAuth {
	return &e
}
func (e *DocumentFindDocumentsActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "EXPLICIT_NONE":
		*e = DocumentFindDocumentsActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFindDocumentsActionAuth: %v", v)
	}
}

type DocumentFindDocumentsRecipientAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	AccessAuth *DocumentFindDocumentsAccessAuth `json:"accessAuth"`
	// The type of authentication required for the recipient to sign the document.
	ActionAuth *DocumentFindDocumentsActionAuth `json:"actionAuth"`
}

func (o *DocumentFindDocumentsRecipientAuthOptions) GetAccessAuth() *DocumentFindDocumentsAccessAuth {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *DocumentFindDocumentsRecipientAuthOptions) GetActionAuth() *DocumentFindDocumentsActionAuth {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

type DocumentFindDocumentsRecipient struct {
	Role              DocumentFindDocumentsRole                  `json:"role"`
	ReadStatus        DocumentFindDocumentsReadStatus            `json:"readStatus"`
	SigningStatus     DocumentFindDocumentsSigningStatus         `json:"signingStatus"`
	SendStatus        DocumentFindDocumentsSendStatus            `json:"sendStatus"`
	ID                float64                                    `json:"id"`
	DocumentID        *float64                                   `json:"documentId"`
	TemplateID        *float64                                   `json:"templateId"`
	Email             string                                     `json:"email"`
	Name              string                                     `json:"name"`
	Token             string                                     `json:"token"`
	DocumentDeletedAt *string                                    `json:"documentDeletedAt"`
	Expired           *string                                    `json:"expired"`
	SignedAt          *string                                    `json:"signedAt"`
	AuthOptions       *DocumentFindDocumentsRecipientAuthOptions `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
}

func (o *DocumentFindDocumentsRecipient) GetRole() DocumentFindDocumentsRole {
	if o == nil {
		return DocumentFindDocumentsRole("")
	}
	return o.Role
}

func (o *DocumentFindDocumentsRecipient) GetReadStatus() DocumentFindDocumentsReadStatus {
	if o == nil {
		return DocumentFindDocumentsReadStatus("")
	}
	return o.ReadStatus
}

func (o *DocumentFindDocumentsRecipient) GetSigningStatus() DocumentFindDocumentsSigningStatus {
	if o == nil {
		return DocumentFindDocumentsSigningStatus("")
	}
	return o.SigningStatus
}

func (o *DocumentFindDocumentsRecipient) GetSendStatus() DocumentFindDocumentsSendStatus {
	if o == nil {
		return DocumentFindDocumentsSendStatus("")
	}
	return o.SendStatus
}

func (o *DocumentFindDocumentsRecipient) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *DocumentFindDocumentsRecipient) GetDocumentID() *float64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *DocumentFindDocumentsRecipient) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *DocumentFindDocumentsRecipient) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *DocumentFindDocumentsRecipient) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DocumentFindDocumentsRecipient) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *DocumentFindDocumentsRecipient) GetDocumentDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DocumentDeletedAt
}

func (o *DocumentFindDocumentsRecipient) GetExpired() *string {
	if o == nil {
		return nil
	}
	return o.Expired
}

func (o *DocumentFindDocumentsRecipient) GetSignedAt() *string {
	if o == nil {
		return nil
	}
	return o.SignedAt
}

func (o *DocumentFindDocumentsRecipient) GetAuthOptions() *DocumentFindDocumentsRecipientAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *DocumentFindDocumentsRecipient) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *DocumentFindDocumentsRecipient) GetRejectionReason() *string {
	if o == nil {
		return nil
	}
	return o.RejectionReason
}

type DocumentFindDocumentsTeam struct {
	ID  float64 `json:"id"`
	URL string  `json:"url"`
}

func (o *DocumentFindDocumentsTeam) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *DocumentFindDocumentsTeam) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type DocumentFindDocumentsData struct {
	Visibility DocumentFindDocumentsVisibility `json:"visibility"`
	Status     DataStatus                      `json:"status"`
	Source     DataSource                      `json:"source"`
	ID         float64                         `json:"id"`
	// A custom external ID you can use to identify the document.
	ExternalID *string `json:"externalId"`
	// The ID of the user that created this document.
	UserID         float64                                    `json:"userId"`
	AuthOptions    *DocumentFindDocumentsAuthOptions          `json:"authOptions"`
	FormValues     map[string]DocumentFindDocumentsFormValues `json:"formValues"`
	Title          string                                     `json:"title"`
	DocumentDataID string                                     `json:"documentDataId"`
	CreatedAt      string                                     `json:"createdAt"`
	UpdatedAt      string                                     `json:"updatedAt"`
	CompletedAt    *string                                    `json:"completedAt"`
	DeletedAt      *string                                    `json:"deletedAt"`
	TeamID         *float64                                   `json:"teamId"`
	TemplateID     *float64                                   `json:"templateId"`
	User           DocumentFindDocumentsUser                  `json:"user"`
	Recipients     []DocumentFindDocumentsRecipient           `json:"recipients"`
	Team           *DocumentFindDocumentsTeam                 `json:"team"`
}

func (o *DocumentFindDocumentsData) GetVisibility() DocumentFindDocumentsVisibility {
	if o == nil {
		return DocumentFindDocumentsVisibility("")
	}
	return o.Visibility
}

func (o *DocumentFindDocumentsData) GetStatus() DataStatus {
	if o == nil {
		return DataStatus("")
	}
	return o.Status
}

func (o *DocumentFindDocumentsData) GetSource() DataSource {
	if o == nil {
		return DataSource("")
	}
	return o.Source
}

func (o *DocumentFindDocumentsData) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *DocumentFindDocumentsData) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *DocumentFindDocumentsData) GetUserID() float64 {
	if o == nil {
		return 0.0
	}
	return o.UserID
}

func (o *DocumentFindDocumentsData) GetAuthOptions() *DocumentFindDocumentsAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *DocumentFindDocumentsData) GetFormValues() map[string]DocumentFindDocumentsFormValues {
	if o == nil {
		return nil
	}
	return o.FormValues
}

func (o *DocumentFindDocumentsData) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *DocumentFindDocumentsData) GetDocumentDataID() string {
	if o == nil {
		return ""
	}
	return o.DocumentDataID
}

func (o *DocumentFindDocumentsData) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *DocumentFindDocumentsData) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *DocumentFindDocumentsData) GetCompletedAt() *string {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *DocumentFindDocumentsData) GetDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *DocumentFindDocumentsData) GetTeamID() *float64 {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *DocumentFindDocumentsData) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *DocumentFindDocumentsData) GetUser() DocumentFindDocumentsUser {
	if o == nil {
		return DocumentFindDocumentsUser{}
	}
	return o.User
}

func (o *DocumentFindDocumentsData) GetRecipients() []DocumentFindDocumentsRecipient {
	if o == nil {
		return []DocumentFindDocumentsRecipient{}
	}
	return o.Recipients
}

func (o *DocumentFindDocumentsData) GetTeam() *DocumentFindDocumentsTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

// DocumentFindDocumentsResponseBody - Successful response
type DocumentFindDocumentsResponseBody struct {
	Data []DocumentFindDocumentsData `json:"data"`
	// The total number of items.
	Count float64 `json:"count"`
	// The current page number, starts at 1.
	CurrentPage float64 `json:"currentPage"`
	// The number of items per page.
	PerPage float64 `json:"perPage"`
	// The total number of pages.
	TotalPages float64 `json:"totalPages"`
}

func (o *DocumentFindDocumentsResponseBody) GetData() []DocumentFindDocumentsData {
	if o == nil {
		return []DocumentFindDocumentsData{}
	}
	return o.Data
}

func (o *DocumentFindDocumentsResponseBody) GetCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Count
}

func (o *DocumentFindDocumentsResponseBody) GetCurrentPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentPage
}

func (o *DocumentFindDocumentsResponseBody) GetPerPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.PerPage
}

func (o *DocumentFindDocumentsResponseBody) GetTotalPages() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalPages
}

type DocumentFindDocumentsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *DocumentFindDocumentsResponseBody
}

func (o *DocumentFindDocumentsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *DocumentFindDocumentsResponse) GetObject() *DocumentFindDocumentsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
