// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/documenso/sdk-go/models/components"
)

type RecipientCreateTemplateRecipientsRoleRequest string

const (
	RecipientCreateTemplateRecipientsRoleRequestCc        RecipientCreateTemplateRecipientsRoleRequest = "CC"
	RecipientCreateTemplateRecipientsRoleRequestSigner    RecipientCreateTemplateRecipientsRoleRequest = "SIGNER"
	RecipientCreateTemplateRecipientsRoleRequestViewer    RecipientCreateTemplateRecipientsRoleRequest = "VIEWER"
	RecipientCreateTemplateRecipientsRoleRequestApprover  RecipientCreateTemplateRecipientsRoleRequest = "APPROVER"
	RecipientCreateTemplateRecipientsRoleRequestAssistant RecipientCreateTemplateRecipientsRoleRequest = "ASSISTANT"
)

func (e RecipientCreateTemplateRecipientsRoleRequest) ToPointer() *RecipientCreateTemplateRecipientsRoleRequest {
	return &e
}
func (e *RecipientCreateTemplateRecipientsRoleRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = RecipientCreateTemplateRecipientsRoleRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientsRoleRequest: %v", v)
	}
}

// RecipientCreateTemplateRecipientsAccessAuthRequest - The type of authentication required for the recipient to access the document.
type RecipientCreateTemplateRecipientsAccessAuthRequest string

const (
	RecipientCreateTemplateRecipientsAccessAuthRequestAccount       RecipientCreateTemplateRecipientsAccessAuthRequest = "ACCOUNT"
	RecipientCreateTemplateRecipientsAccessAuthRequestTwoFactorAuth RecipientCreateTemplateRecipientsAccessAuthRequest = "TWO_FACTOR_AUTH"
)

func (e RecipientCreateTemplateRecipientsAccessAuthRequest) ToPointer() *RecipientCreateTemplateRecipientsAccessAuthRequest {
	return &e
}
func (e *RecipientCreateTemplateRecipientsAccessAuthRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = RecipientCreateTemplateRecipientsAccessAuthRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientsAccessAuthRequest: %v", v)
	}
}

// RecipientCreateTemplateRecipientsActionAuthRequest - The type of authentication required for the recipient to sign the document.
type RecipientCreateTemplateRecipientsActionAuthRequest string

const (
	RecipientCreateTemplateRecipientsActionAuthRequestAccount       RecipientCreateTemplateRecipientsActionAuthRequest = "ACCOUNT"
	RecipientCreateTemplateRecipientsActionAuthRequestPasskey       RecipientCreateTemplateRecipientsActionAuthRequest = "PASSKEY"
	RecipientCreateTemplateRecipientsActionAuthRequestTwoFactorAuth RecipientCreateTemplateRecipientsActionAuthRequest = "TWO_FACTOR_AUTH"
	RecipientCreateTemplateRecipientsActionAuthRequestPassword      RecipientCreateTemplateRecipientsActionAuthRequest = "PASSWORD"
	RecipientCreateTemplateRecipientsActionAuthRequestExplicitNone  RecipientCreateTemplateRecipientsActionAuthRequest = "EXPLICIT_NONE"
)

func (e RecipientCreateTemplateRecipientsActionAuthRequest) ToPointer() *RecipientCreateTemplateRecipientsActionAuthRequest {
	return &e
}
func (e *RecipientCreateTemplateRecipientsActionAuthRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		fallthrough
	case "EXPLICIT_NONE":
		*e = RecipientCreateTemplateRecipientsActionAuthRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientsActionAuthRequest: %v", v)
	}
}

type RecipientCreateTemplateRecipientsRecipientRequest struct {
	Email        string                                               `json:"email"`
	Name         string                                               `json:"name"`
	Role         RecipientCreateTemplateRecipientsRoleRequest         `json:"role"`
	SigningOrder *float64                                             `json:"signingOrder,omitempty"`
	AccessAuth   []RecipientCreateTemplateRecipientsAccessAuthRequest `json:"accessAuth,omitempty"`
	ActionAuth   []RecipientCreateTemplateRecipientsActionAuthRequest `json:"actionAuth,omitempty"`
}

func (r *RecipientCreateTemplateRecipientsRecipientRequest) GetEmail() string {
	if r == nil {
		return ""
	}
	return r.Email
}

func (r *RecipientCreateTemplateRecipientsRecipientRequest) GetName() string {
	if r == nil {
		return ""
	}
	return r.Name
}

func (r *RecipientCreateTemplateRecipientsRecipientRequest) GetRole() RecipientCreateTemplateRecipientsRoleRequest {
	if r == nil {
		return RecipientCreateTemplateRecipientsRoleRequest("")
	}
	return r.Role
}

func (r *RecipientCreateTemplateRecipientsRecipientRequest) GetSigningOrder() *float64 {
	if r == nil {
		return nil
	}
	return r.SigningOrder
}

func (r *RecipientCreateTemplateRecipientsRecipientRequest) GetAccessAuth() []RecipientCreateTemplateRecipientsAccessAuthRequest {
	if r == nil {
		return nil
	}
	return r.AccessAuth
}

func (r *RecipientCreateTemplateRecipientsRecipientRequest) GetActionAuth() []RecipientCreateTemplateRecipientsActionAuthRequest {
	if r == nil {
		return nil
	}
	return r.ActionAuth
}

type RecipientCreateTemplateRecipientsRequest struct {
	TemplateID float64                                             `json:"templateId"`
	Recipients []RecipientCreateTemplateRecipientsRecipientRequest `json:"recipients"`
}

func (r *RecipientCreateTemplateRecipientsRequest) GetTemplateID() float64 {
	if r == nil {
		return 0.0
	}
	return r.TemplateID
}

func (r *RecipientCreateTemplateRecipientsRequest) GetRecipients() []RecipientCreateTemplateRecipientsRecipientRequest {
	if r == nil {
		return []RecipientCreateTemplateRecipientsRecipientRequest{}
	}
	return r.Recipients
}

type RecipientCreateTemplateRecipientsRoleResponse string

const (
	RecipientCreateTemplateRecipientsRoleResponseCc        RecipientCreateTemplateRecipientsRoleResponse = "CC"
	RecipientCreateTemplateRecipientsRoleResponseSigner    RecipientCreateTemplateRecipientsRoleResponse = "SIGNER"
	RecipientCreateTemplateRecipientsRoleResponseViewer    RecipientCreateTemplateRecipientsRoleResponse = "VIEWER"
	RecipientCreateTemplateRecipientsRoleResponseApprover  RecipientCreateTemplateRecipientsRoleResponse = "APPROVER"
	RecipientCreateTemplateRecipientsRoleResponseAssistant RecipientCreateTemplateRecipientsRoleResponse = "ASSISTANT"
)

func (e RecipientCreateTemplateRecipientsRoleResponse) ToPointer() *RecipientCreateTemplateRecipientsRoleResponse {
	return &e
}
func (e *RecipientCreateTemplateRecipientsRoleResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = RecipientCreateTemplateRecipientsRoleResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientsRoleResponse: %v", v)
	}
}

type RecipientCreateTemplateRecipientsReadStatus string

const (
	RecipientCreateTemplateRecipientsReadStatusNotOpened RecipientCreateTemplateRecipientsReadStatus = "NOT_OPENED"
	RecipientCreateTemplateRecipientsReadStatusOpened    RecipientCreateTemplateRecipientsReadStatus = "OPENED"
)

func (e RecipientCreateTemplateRecipientsReadStatus) ToPointer() *RecipientCreateTemplateRecipientsReadStatus {
	return &e
}
func (e *RecipientCreateTemplateRecipientsReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = RecipientCreateTemplateRecipientsReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientsReadStatus: %v", v)
	}
}

type RecipientCreateTemplateRecipientsSigningStatus string

const (
	RecipientCreateTemplateRecipientsSigningStatusNotSigned RecipientCreateTemplateRecipientsSigningStatus = "NOT_SIGNED"
	RecipientCreateTemplateRecipientsSigningStatusSigned    RecipientCreateTemplateRecipientsSigningStatus = "SIGNED"
	RecipientCreateTemplateRecipientsSigningStatusRejected  RecipientCreateTemplateRecipientsSigningStatus = "REJECTED"
)

func (e RecipientCreateTemplateRecipientsSigningStatus) ToPointer() *RecipientCreateTemplateRecipientsSigningStatus {
	return &e
}
func (e *RecipientCreateTemplateRecipientsSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = RecipientCreateTemplateRecipientsSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientsSigningStatus: %v", v)
	}
}

type RecipientCreateTemplateRecipientsSendStatus string

const (
	RecipientCreateTemplateRecipientsSendStatusNotSent RecipientCreateTemplateRecipientsSendStatus = "NOT_SENT"
	RecipientCreateTemplateRecipientsSendStatusSent    RecipientCreateTemplateRecipientsSendStatus = "SENT"
)

func (e RecipientCreateTemplateRecipientsSendStatus) ToPointer() *RecipientCreateTemplateRecipientsSendStatus {
	return &e
}
func (e *RecipientCreateTemplateRecipientsSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = RecipientCreateTemplateRecipientsSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientsSendStatus: %v", v)
	}
}

// RecipientCreateTemplateRecipientsAccessAuthResponse - The type of authentication required for the recipient to access the document.
type RecipientCreateTemplateRecipientsAccessAuthResponse string

const (
	RecipientCreateTemplateRecipientsAccessAuthResponseAccount       RecipientCreateTemplateRecipientsAccessAuthResponse = "ACCOUNT"
	RecipientCreateTemplateRecipientsAccessAuthResponseTwoFactorAuth RecipientCreateTemplateRecipientsAccessAuthResponse = "TWO_FACTOR_AUTH"
)

func (e RecipientCreateTemplateRecipientsAccessAuthResponse) ToPointer() *RecipientCreateTemplateRecipientsAccessAuthResponse {
	return &e
}
func (e *RecipientCreateTemplateRecipientsAccessAuthResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = RecipientCreateTemplateRecipientsAccessAuthResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientsAccessAuthResponse: %v", v)
	}
}

// RecipientCreateTemplateRecipientsActionAuthResponse - The type of authentication required for the recipient to sign the document.
type RecipientCreateTemplateRecipientsActionAuthResponse string

const (
	RecipientCreateTemplateRecipientsActionAuthResponseAccount       RecipientCreateTemplateRecipientsActionAuthResponse = "ACCOUNT"
	RecipientCreateTemplateRecipientsActionAuthResponsePasskey       RecipientCreateTemplateRecipientsActionAuthResponse = "PASSKEY"
	RecipientCreateTemplateRecipientsActionAuthResponseTwoFactorAuth RecipientCreateTemplateRecipientsActionAuthResponse = "TWO_FACTOR_AUTH"
	RecipientCreateTemplateRecipientsActionAuthResponsePassword      RecipientCreateTemplateRecipientsActionAuthResponse = "PASSWORD"
	RecipientCreateTemplateRecipientsActionAuthResponseExplicitNone  RecipientCreateTemplateRecipientsActionAuthResponse = "EXPLICIT_NONE"
)

func (e RecipientCreateTemplateRecipientsActionAuthResponse) ToPointer() *RecipientCreateTemplateRecipientsActionAuthResponse {
	return &e
}
func (e *RecipientCreateTemplateRecipientsActionAuthResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		fallthrough
	case "EXPLICIT_NONE":
		*e = RecipientCreateTemplateRecipientsActionAuthResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientsActionAuthResponse: %v", v)
	}
}

type RecipientCreateTemplateRecipientsAuthOptions struct {
	AccessAuth []RecipientCreateTemplateRecipientsAccessAuthResponse `json:"accessAuth"`
	ActionAuth []RecipientCreateTemplateRecipientsActionAuthResponse `json:"actionAuth"`
}

func (r *RecipientCreateTemplateRecipientsAuthOptions) GetAccessAuth() []RecipientCreateTemplateRecipientsAccessAuthResponse {
	if r == nil {
		return []RecipientCreateTemplateRecipientsAccessAuthResponse{}
	}
	return r.AccessAuth
}

func (r *RecipientCreateTemplateRecipientsAuthOptions) GetActionAuth() []RecipientCreateTemplateRecipientsActionAuthResponse {
	if r == nil {
		return []RecipientCreateTemplateRecipientsActionAuthResponse{}
	}
	return r.ActionAuth
}

type RecipientCreateTemplateRecipientsRecipientResponse struct {
	EnvelopeID        string                                         `json:"envelopeId"`
	Role              RecipientCreateTemplateRecipientsRoleResponse  `json:"role"`
	ReadStatus        RecipientCreateTemplateRecipientsReadStatus    `json:"readStatus"`
	SigningStatus     RecipientCreateTemplateRecipientsSigningStatus `json:"signingStatus"`
	SendStatus        RecipientCreateTemplateRecipientsSendStatus    `json:"sendStatus"`
	ID                float64                                        `json:"id"`
	Email             string                                         `json:"email"`
	Name              string                                         `json:"name"`
	Token             string                                         `json:"token"`
	DocumentDeletedAt *string                                        `json:"documentDeletedAt"`
	Expired           *string                                        `json:"expired"`
	SignedAt          *string                                        `json:"signedAt"`
	AuthOptions       *RecipientCreateTemplateRecipientsAuthOptions  `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
	DocumentID      *float64 `json:"documentId,omitempty"`
	TemplateID      *float64 `json:"templateId,omitempty"`
}

func (r *RecipientCreateTemplateRecipientsRecipientResponse) GetEnvelopeID() string {
	if r == nil {
		return ""
	}
	return r.EnvelopeID
}

func (r *RecipientCreateTemplateRecipientsRecipientResponse) GetRole() RecipientCreateTemplateRecipientsRoleResponse {
	if r == nil {
		return RecipientCreateTemplateRecipientsRoleResponse("")
	}
	return r.Role
}

func (r *RecipientCreateTemplateRecipientsRecipientResponse) GetReadStatus() RecipientCreateTemplateRecipientsReadStatus {
	if r == nil {
		return RecipientCreateTemplateRecipientsReadStatus("")
	}
	return r.ReadStatus
}

func (r *RecipientCreateTemplateRecipientsRecipientResponse) GetSigningStatus() RecipientCreateTemplateRecipientsSigningStatus {
	if r == nil {
		return RecipientCreateTemplateRecipientsSigningStatus("")
	}
	return r.SigningStatus
}

func (r *RecipientCreateTemplateRecipientsRecipientResponse) GetSendStatus() RecipientCreateTemplateRecipientsSendStatus {
	if r == nil {
		return RecipientCreateTemplateRecipientsSendStatus("")
	}
	return r.SendStatus
}

func (r *RecipientCreateTemplateRecipientsRecipientResponse) GetID() float64 {
	if r == nil {
		return 0.0
	}
	return r.ID
}

func (r *RecipientCreateTemplateRecipientsRecipientResponse) GetEmail() string {
	if r == nil {
		return ""
	}
	return r.Email
}

func (r *RecipientCreateTemplateRecipientsRecipientResponse) GetName() string {
	if r == nil {
		return ""
	}
	return r.Name
}

func (r *RecipientCreateTemplateRecipientsRecipientResponse) GetToken() string {
	if r == nil {
		return ""
	}
	return r.Token
}

func (r *RecipientCreateTemplateRecipientsRecipientResponse) GetDocumentDeletedAt() *string {
	if r == nil {
		return nil
	}
	return r.DocumentDeletedAt
}

func (r *RecipientCreateTemplateRecipientsRecipientResponse) GetExpired() *string {
	if r == nil {
		return nil
	}
	return r.Expired
}

func (r *RecipientCreateTemplateRecipientsRecipientResponse) GetSignedAt() *string {
	if r == nil {
		return nil
	}
	return r.SignedAt
}

func (r *RecipientCreateTemplateRecipientsRecipientResponse) GetAuthOptions() *RecipientCreateTemplateRecipientsAuthOptions {
	if r == nil {
		return nil
	}
	return r.AuthOptions
}

func (r *RecipientCreateTemplateRecipientsRecipientResponse) GetSigningOrder() *float64 {
	if r == nil {
		return nil
	}
	return r.SigningOrder
}

func (r *RecipientCreateTemplateRecipientsRecipientResponse) GetRejectionReason() *string {
	if r == nil {
		return nil
	}
	return r.RejectionReason
}

func (r *RecipientCreateTemplateRecipientsRecipientResponse) GetDocumentID() *float64 {
	if r == nil {
		return nil
	}
	return r.DocumentID
}

func (r *RecipientCreateTemplateRecipientsRecipientResponse) GetTemplateID() *float64 {
	if r == nil {
		return nil
	}
	return r.TemplateID
}

// RecipientCreateTemplateRecipientsResponseBody - Successful response
type RecipientCreateTemplateRecipientsResponseBody struct {
	Recipients []RecipientCreateTemplateRecipientsRecipientResponse `json:"recipients"`
}

func (r *RecipientCreateTemplateRecipientsResponseBody) GetRecipients() []RecipientCreateTemplateRecipientsRecipientResponse {
	if r == nil {
		return []RecipientCreateTemplateRecipientsRecipientResponse{}
	}
	return r.Recipients
}

type RecipientCreateTemplateRecipientsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *RecipientCreateTemplateRecipientsResponseBody
}

func (r *RecipientCreateTemplateRecipientsResponse) GetHTTPMeta() components.HTTPMetadata {
	if r == nil {
		return components.HTTPMetadata{}
	}
	return r.HTTPMeta
}

func (r *RecipientCreateTemplateRecipientsResponse) GetObject() *RecipientCreateTemplateRecipientsResponseBody {
	if r == nil {
		return nil
	}
	return r.Object
}
