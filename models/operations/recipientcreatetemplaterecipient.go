// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/documenso/sdk-go/models/components"
)

type RecipientCreateTemplateRecipientRole string

const (
	RecipientCreateTemplateRecipientRoleCc       RecipientCreateTemplateRecipientRole = "CC"
	RecipientCreateTemplateRecipientRoleSigner   RecipientCreateTemplateRecipientRole = "SIGNER"
	RecipientCreateTemplateRecipientRoleViewer   RecipientCreateTemplateRecipientRole = "VIEWER"
	RecipientCreateTemplateRecipientRoleApprover RecipientCreateTemplateRecipientRole = "APPROVER"
)

func (e RecipientCreateTemplateRecipientRole) ToPointer() *RecipientCreateTemplateRecipientRole {
	return &e
}
func (e *RecipientCreateTemplateRecipientRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		*e = RecipientCreateTemplateRecipientRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientRole: %v", v)
	}
}

// RecipientCreateTemplateRecipientAccessAuth - The type of authentication required for the recipient to access the document.
type RecipientCreateTemplateRecipientAccessAuth string

const (
	RecipientCreateTemplateRecipientAccessAuthAccount RecipientCreateTemplateRecipientAccessAuth = "ACCOUNT"
)

func (e RecipientCreateTemplateRecipientAccessAuth) ToPointer() *RecipientCreateTemplateRecipientAccessAuth {
	return &e
}
func (e *RecipientCreateTemplateRecipientAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = RecipientCreateTemplateRecipientAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientAccessAuth: %v", v)
	}
}

// RecipientCreateTemplateRecipientActionAuth - The type of authentication required for the recipient to sign the document.
type RecipientCreateTemplateRecipientActionAuth string

const (
	RecipientCreateTemplateRecipientActionAuthAccount       RecipientCreateTemplateRecipientActionAuth = "ACCOUNT"
	RecipientCreateTemplateRecipientActionAuthPasskey       RecipientCreateTemplateRecipientActionAuth = "PASSKEY"
	RecipientCreateTemplateRecipientActionAuthTwoFactorAuth RecipientCreateTemplateRecipientActionAuth = "TWO_FACTOR_AUTH"
	RecipientCreateTemplateRecipientActionAuthExplicitNone  RecipientCreateTemplateRecipientActionAuth = "EXPLICIT_NONE"
)

func (e RecipientCreateTemplateRecipientActionAuth) ToPointer() *RecipientCreateTemplateRecipientActionAuth {
	return &e
}
func (e *RecipientCreateTemplateRecipientActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "EXPLICIT_NONE":
		*e = RecipientCreateTemplateRecipientActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientActionAuth: %v", v)
	}
}

type RecipientCreateTemplateRecipientRecipient struct {
	Email        string                               `json:"email"`
	Name         string                               `json:"name"`
	Role         RecipientCreateTemplateRecipientRole `json:"role"`
	SigningOrder *float64                             `json:"signingOrder,omitempty"`
	// The type of authentication required for the recipient to access the document.
	AccessAuth *RecipientCreateTemplateRecipientAccessAuth `json:"accessAuth,omitempty"`
	// The type of authentication required for the recipient to sign the document.
	ActionAuth *RecipientCreateTemplateRecipientActionAuth `json:"actionAuth,omitempty"`
}

func (o *RecipientCreateTemplateRecipientRecipient) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *RecipientCreateTemplateRecipientRecipient) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RecipientCreateTemplateRecipientRecipient) GetRole() RecipientCreateTemplateRecipientRole {
	if o == nil {
		return RecipientCreateTemplateRecipientRole("")
	}
	return o.Role
}

func (o *RecipientCreateTemplateRecipientRecipient) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *RecipientCreateTemplateRecipientRecipient) GetAccessAuth() *RecipientCreateTemplateRecipientAccessAuth {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *RecipientCreateTemplateRecipientRecipient) GetActionAuth() *RecipientCreateTemplateRecipientActionAuth {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

type RecipientCreateTemplateRecipientRequestBody struct {
	TemplateID float64                                   `json:"templateId"`
	Recipient  RecipientCreateTemplateRecipientRecipient `json:"recipient"`
}

func (o *RecipientCreateTemplateRecipientRequestBody) GetTemplateID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TemplateID
}

func (o *RecipientCreateTemplateRecipientRequestBody) GetRecipient() RecipientCreateTemplateRecipientRecipient {
	if o == nil {
		return RecipientCreateTemplateRecipientRecipient{}
	}
	return o.Recipient
}

type RecipientCreateTemplateRecipientTemplatesRecipientsRole string

const (
	RecipientCreateTemplateRecipientTemplatesRecipientsRoleCc       RecipientCreateTemplateRecipientTemplatesRecipientsRole = "CC"
	RecipientCreateTemplateRecipientTemplatesRecipientsRoleSigner   RecipientCreateTemplateRecipientTemplatesRecipientsRole = "SIGNER"
	RecipientCreateTemplateRecipientTemplatesRecipientsRoleViewer   RecipientCreateTemplateRecipientTemplatesRecipientsRole = "VIEWER"
	RecipientCreateTemplateRecipientTemplatesRecipientsRoleApprover RecipientCreateTemplateRecipientTemplatesRecipientsRole = "APPROVER"
)

func (e RecipientCreateTemplateRecipientTemplatesRecipientsRole) ToPointer() *RecipientCreateTemplateRecipientTemplatesRecipientsRole {
	return &e
}
func (e *RecipientCreateTemplateRecipientTemplatesRecipientsRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		*e = RecipientCreateTemplateRecipientTemplatesRecipientsRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientTemplatesRecipientsRole: %v", v)
	}
}

type RecipientCreateTemplateRecipientReadStatus string

const (
	RecipientCreateTemplateRecipientReadStatusNotOpened RecipientCreateTemplateRecipientReadStatus = "NOT_OPENED"
	RecipientCreateTemplateRecipientReadStatusOpened    RecipientCreateTemplateRecipientReadStatus = "OPENED"
)

func (e RecipientCreateTemplateRecipientReadStatus) ToPointer() *RecipientCreateTemplateRecipientReadStatus {
	return &e
}
func (e *RecipientCreateTemplateRecipientReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = RecipientCreateTemplateRecipientReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientReadStatus: %v", v)
	}
}

type RecipientCreateTemplateRecipientSigningStatus string

const (
	RecipientCreateTemplateRecipientSigningStatusNotSigned RecipientCreateTemplateRecipientSigningStatus = "NOT_SIGNED"
	RecipientCreateTemplateRecipientSigningStatusSigned    RecipientCreateTemplateRecipientSigningStatus = "SIGNED"
	RecipientCreateTemplateRecipientSigningStatusRejected  RecipientCreateTemplateRecipientSigningStatus = "REJECTED"
)

func (e RecipientCreateTemplateRecipientSigningStatus) ToPointer() *RecipientCreateTemplateRecipientSigningStatus {
	return &e
}
func (e *RecipientCreateTemplateRecipientSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = RecipientCreateTemplateRecipientSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientSigningStatus: %v", v)
	}
}

type RecipientCreateTemplateRecipientSendStatus string

const (
	RecipientCreateTemplateRecipientSendStatusNotSent RecipientCreateTemplateRecipientSendStatus = "NOT_SENT"
	RecipientCreateTemplateRecipientSendStatusSent    RecipientCreateTemplateRecipientSendStatus = "SENT"
)

func (e RecipientCreateTemplateRecipientSendStatus) ToPointer() *RecipientCreateTemplateRecipientSendStatus {
	return &e
}
func (e *RecipientCreateTemplateRecipientSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = RecipientCreateTemplateRecipientSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientSendStatus: %v", v)
	}
}

// RecipientCreateTemplateRecipientTemplatesRecipientsAccessAuth - The type of authentication required for the recipient to access the document.
type RecipientCreateTemplateRecipientTemplatesRecipientsAccessAuth string

const (
	RecipientCreateTemplateRecipientTemplatesRecipientsAccessAuthAccount RecipientCreateTemplateRecipientTemplatesRecipientsAccessAuth = "ACCOUNT"
)

func (e RecipientCreateTemplateRecipientTemplatesRecipientsAccessAuth) ToPointer() *RecipientCreateTemplateRecipientTemplatesRecipientsAccessAuth {
	return &e
}
func (e *RecipientCreateTemplateRecipientTemplatesRecipientsAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = RecipientCreateTemplateRecipientTemplatesRecipientsAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientTemplatesRecipientsAccessAuth: %v", v)
	}
}

// RecipientCreateTemplateRecipientTemplatesRecipientsActionAuth - The type of authentication required for the recipient to sign the document.
type RecipientCreateTemplateRecipientTemplatesRecipientsActionAuth string

const (
	RecipientCreateTemplateRecipientTemplatesRecipientsActionAuthAccount       RecipientCreateTemplateRecipientTemplatesRecipientsActionAuth = "ACCOUNT"
	RecipientCreateTemplateRecipientTemplatesRecipientsActionAuthPasskey       RecipientCreateTemplateRecipientTemplatesRecipientsActionAuth = "PASSKEY"
	RecipientCreateTemplateRecipientTemplatesRecipientsActionAuthTwoFactorAuth RecipientCreateTemplateRecipientTemplatesRecipientsActionAuth = "TWO_FACTOR_AUTH"
	RecipientCreateTemplateRecipientTemplatesRecipientsActionAuthExplicitNone  RecipientCreateTemplateRecipientTemplatesRecipientsActionAuth = "EXPLICIT_NONE"
)

func (e RecipientCreateTemplateRecipientTemplatesRecipientsActionAuth) ToPointer() *RecipientCreateTemplateRecipientTemplatesRecipientsActionAuth {
	return &e
}
func (e *RecipientCreateTemplateRecipientTemplatesRecipientsActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "EXPLICIT_NONE":
		*e = RecipientCreateTemplateRecipientTemplatesRecipientsActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateTemplateRecipientTemplatesRecipientsActionAuth: %v", v)
	}
}

type RecipientCreateTemplateRecipientAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	AccessAuth *RecipientCreateTemplateRecipientTemplatesRecipientsAccessAuth `json:"accessAuth"`
	// The type of authentication required for the recipient to sign the document.
	ActionAuth *RecipientCreateTemplateRecipientTemplatesRecipientsActionAuth `json:"actionAuth"`
}

func (o *RecipientCreateTemplateRecipientAuthOptions) GetAccessAuth() *RecipientCreateTemplateRecipientTemplatesRecipientsAccessAuth {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *RecipientCreateTemplateRecipientAuthOptions) GetActionAuth() *RecipientCreateTemplateRecipientTemplatesRecipientsActionAuth {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

// RecipientCreateTemplateRecipientResponseBody - Successful response
type RecipientCreateTemplateRecipientResponseBody struct {
	Role              RecipientCreateTemplateRecipientTemplatesRecipientsRole `json:"role"`
	ReadStatus        RecipientCreateTemplateRecipientReadStatus              `json:"readStatus"`
	SigningStatus     RecipientCreateTemplateRecipientSigningStatus           `json:"signingStatus"`
	SendStatus        RecipientCreateTemplateRecipientSendStatus              `json:"sendStatus"`
	ID                int64                                                   `json:"id"`
	DocumentID        *int64                                                  `json:"documentId"`
	TemplateID        *int64                                                  `json:"templateId"`
	Email             string                                                  `json:"email"`
	Name              string                                                  `json:"name"`
	Token             string                                                  `json:"token"`
	DocumentDeletedAt *string                                                 `json:"documentDeletedAt"`
	Expired           *string                                                 `json:"expired"`
	SignedAt          *string                                                 `json:"signedAt"`
	AuthOptions       *RecipientCreateTemplateRecipientAuthOptions            `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
}

func (o *RecipientCreateTemplateRecipientResponseBody) GetRole() RecipientCreateTemplateRecipientTemplatesRecipientsRole {
	if o == nil {
		return RecipientCreateTemplateRecipientTemplatesRecipientsRole("")
	}
	return o.Role
}

func (o *RecipientCreateTemplateRecipientResponseBody) GetReadStatus() RecipientCreateTemplateRecipientReadStatus {
	if o == nil {
		return RecipientCreateTemplateRecipientReadStatus("")
	}
	return o.ReadStatus
}

func (o *RecipientCreateTemplateRecipientResponseBody) GetSigningStatus() RecipientCreateTemplateRecipientSigningStatus {
	if o == nil {
		return RecipientCreateTemplateRecipientSigningStatus("")
	}
	return o.SigningStatus
}

func (o *RecipientCreateTemplateRecipientResponseBody) GetSendStatus() RecipientCreateTemplateRecipientSendStatus {
	if o == nil {
		return RecipientCreateTemplateRecipientSendStatus("")
	}
	return o.SendStatus
}

func (o *RecipientCreateTemplateRecipientResponseBody) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *RecipientCreateTemplateRecipientResponseBody) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *RecipientCreateTemplateRecipientResponseBody) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *RecipientCreateTemplateRecipientResponseBody) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *RecipientCreateTemplateRecipientResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RecipientCreateTemplateRecipientResponseBody) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *RecipientCreateTemplateRecipientResponseBody) GetDocumentDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DocumentDeletedAt
}

func (o *RecipientCreateTemplateRecipientResponseBody) GetExpired() *string {
	if o == nil {
		return nil
	}
	return o.Expired
}

func (o *RecipientCreateTemplateRecipientResponseBody) GetSignedAt() *string {
	if o == nil {
		return nil
	}
	return o.SignedAt
}

func (o *RecipientCreateTemplateRecipientResponseBody) GetAuthOptions() *RecipientCreateTemplateRecipientAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *RecipientCreateTemplateRecipientResponseBody) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *RecipientCreateTemplateRecipientResponseBody) GetRejectionReason() *string {
	if o == nil {
		return nil
	}
	return o.RejectionReason
}

type RecipientCreateTemplateRecipientResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *RecipientCreateTemplateRecipientResponseBody
}

func (o *RecipientCreateTemplateRecipientResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *RecipientCreateTemplateRecipientResponse) GetObject() *RecipientCreateTemplateRecipientResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
