// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"github.com/documenso/sdk-go/models/components"
)

type DocumentDownloadInternalServerErrorIssue struct {
	Message string `json:"message"`
}

func (d *DocumentDownloadInternalServerErrorIssue) GetMessage() string {
	if d == nil {
		return ""
	}
	return d.Message
}

// DocumentDownloadInternalServerError - Internal server error
type DocumentDownloadInternalServerError struct {
	Message  string                                     `json:"message"`
	Code     string                                     `json:"code"`
	Issues   []DocumentDownloadInternalServerErrorIssue `json:"issues,omitempty"`
	HTTPMeta components.HTTPMetadata                    `json:"-"`
}

var _ error = &DocumentDownloadInternalServerError{}

func (e *DocumentDownloadInternalServerError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type DocumentDownloadNotFoundIssue struct {
	Message string `json:"message"`
}

func (d *DocumentDownloadNotFoundIssue) GetMessage() string {
	if d == nil {
		return ""
	}
	return d.Message
}

// DocumentDownloadNotFoundError - Not found
type DocumentDownloadNotFoundError struct {
	Message  string                          `json:"message"`
	Code     string                          `json:"code"`
	Issues   []DocumentDownloadNotFoundIssue `json:"issues,omitempty"`
	HTTPMeta components.HTTPMetadata         `json:"-"`
}

var _ error = &DocumentDownloadNotFoundError{}

func (e *DocumentDownloadNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type DocumentDownloadBadRequestIssue struct {
	Message string `json:"message"`
}

func (d *DocumentDownloadBadRequestIssue) GetMessage() string {
	if d == nil {
		return ""
	}
	return d.Message
}

// DocumentDownloadBadRequestError - Invalid input data
type DocumentDownloadBadRequestError struct {
	Message  string                            `json:"message"`
	Code     string                            `json:"code"`
	Issues   []DocumentDownloadBadRequestIssue `json:"issues,omitempty"`
	HTTPMeta components.HTTPMetadata           `json:"-"`
}

var _ error = &DocumentDownloadBadRequestError{}

func (e *DocumentDownloadBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
