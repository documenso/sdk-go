// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11TypeDropdown FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type = "DROPDOWN"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaTypeDropdown FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType = "dropdown"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues struct {
	Value string `json:"value"`
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta struct {
	Label        *string                                                                         `json:"label,omitempty"`
	Placeholder  *string                                                                         `json:"placeholder,omitempty"`
	Required     *bool                                                                           `json:"required,omitempty"`
	ReadOnly     *bool                                                                           `json:"readOnly,omitempty"`
	Type         FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType `json:"type"`
	Values       []FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues                   `json:"values,omitempty"`
	DefaultValue *string                                                                         `json:"defaultValue,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta) GetValues() []FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldUpdateTemplateFieldsFields11 struct {
	Type      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type       `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFields11) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFields11) GetFieldMeta() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFields11) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFields11) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFields11) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFields11) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFields11) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFields11) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10TypeCheckbox FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type = "CHECKBOX"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaTypeCheckbox FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType = "checkbox"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta struct {
	Label            *string                                                                         `json:"label,omitempty"`
	Placeholder      *string                                                                         `json:"placeholder,omitempty"`
	Required         *bool                                                                           `json:"required,omitempty"`
	ReadOnly         *bool                                                                           `json:"readOnly,omitempty"`
	Type             FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType `json:"type"`
	Values           []FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues                          `json:"values,omitempty"`
	ValidationRule   *string                                                                         `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                        `json:"validationLength,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta) GetValues() []FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldUpdateTemplateFieldsFields10 struct {
	Type      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type       `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFields10) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFields10) GetFieldMeta() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFields10) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFields10) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFields10) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFields10) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFields10) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFields10) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9TypeRadio FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type = "RADIO"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaTypeRadio FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType = "radio"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldUpdateTemplateFieldsFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateTemplateFieldsFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta struct {
	Label       *string                                                                        `json:"label,omitempty"`
	Placeholder *string                                                                        `json:"placeholder,omitempty"`
	Required    *bool                                                                          `json:"required,omitempty"`
	ReadOnly    *bool                                                                          `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType `json:"type"`
	Values      []FieldUpdateTemplateFieldsFieldsValues                                        `json:"values,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta) GetValues() []FieldUpdateTemplateFieldsFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldUpdateTemplateFieldsFields9 struct {
	Type      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type       `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFields9) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFields9) GetFieldMeta() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFields9) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFields9) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFields9) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFields9) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFields9) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFields9) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8TypeNumber FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type = "NUMBER"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaTypeNumber FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType = "number"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta struct {
	Label        *string                                                                        `json:"label,omitempty"`
	Placeholder  *string                                                                        `json:"placeholder,omitempty"`
	Required     *bool                                                                          `json:"required,omitempty"`
	ReadOnly     *bool                                                                          `json:"readOnly,omitempty"`
	Type         FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType `json:"type"`
	NumberFormat *string                                                                        `json:"numberFormat,omitempty"`
	Value        *string                                                                        `json:"value,omitempty"`
	MinValue     *float64                                                                       `json:"minValue,omitempty"`
	MaxValue     *float64                                                                       `json:"maxValue,omitempty"`
	FontSize     *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldsFields8 struct {
	Type      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type       `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFields8) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFields8) GetFieldMeta() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFields8) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFields8) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFields8) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFields8) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFields8) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFields8) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7TypeText FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type = "TEXT"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaTypeText FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType = "text"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta struct {
	Label          *string                                                                        `json:"label,omitempty"`
	Placeholder    *string                                                                        `json:"placeholder,omitempty"`
	Required       *bool                                                                          `json:"required,omitempty"`
	ReadOnly       *bool                                                                          `json:"readOnly,omitempty"`
	Type           FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType `json:"type"`
	Text           *string                                                                        `json:"text,omitempty"`
	CharacterLimit *float64                                                                       `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldsFields7 struct {
	Type      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type       `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFields7) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFields7) GetFieldMeta() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFields7) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFields7) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFields7) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFields7) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFields7) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFields7) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6TypeDate FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type = "DATE"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaTypeDate FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType = "date"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta struct {
	Label       *string                                                                        `json:"label,omitempty"`
	Placeholder *string                                                                        `json:"placeholder,omitempty"`
	Required    *bool                                                                          `json:"required,omitempty"`
	ReadOnly    *bool                                                                          `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType `json:"type"`
	FontSize    *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldsFields6 struct {
	Type      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFields6) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFields6) GetFieldMeta() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFields6) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFields6) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFields6) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFields6) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFields6) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFields6) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5TypeEmail FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type = "EMAIL"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaTypeEmail FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType = "email"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta struct {
	Label       *string                                                                        `json:"label,omitempty"`
	Placeholder *string                                                                        `json:"placeholder,omitempty"`
	Required    *bool                                                                          `json:"required,omitempty"`
	ReadOnly    *bool                                                                          `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType `json:"type"`
	FontSize    *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldsFields5 struct {
	Type      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta       `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFields5) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFields5) GetFieldMeta() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFields5) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFields5) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFields5) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFields5) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFields5) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFields5) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4TypeName FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type = "NAME"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaTypeName FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType = "name"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta struct {
	Label       *string                                                                        `json:"label,omitempty"`
	Placeholder *string                                                                        `json:"placeholder,omitempty"`
	Required    *bool                                                                          `json:"required,omitempty"`
	ReadOnly    *bool                                                                          `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType `json:"type"`
	FontSize    *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldsFields4 struct {
	Type      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta              `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFields4) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFields4) GetFieldMeta() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFields4) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFields4) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFields4) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFields4) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFields4) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFields4) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestTypeInitials FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType = "INITIALS"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyTypeInitials FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType = "initials"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldsFieldMeta struct {
	Label       *string                                                              `json:"label,omitempty"`
	Placeholder *string                                                              `json:"placeholder,omitempty"`
	Required    *bool                                                                `json:"required,omitempty"`
	ReadOnly    *bool                                                                `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType `json:"type"`
	FontSize    *float64                                                             `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldsFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldsFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldsFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldsFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldsFieldMeta) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldsFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldsFields3 struct {
	Type      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldsFieldMeta                 `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFields3) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFields3) GetFieldMeta() *FieldUpdateTemplateFieldsFieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFields3) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFields3) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFields3) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFields3) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFields3) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFields3) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsFieldsTemplatesFieldsType string

const (
	FieldUpdateTemplateFieldsFieldsTemplatesFieldsTypeFreeSignature FieldUpdateTemplateFieldsFieldsTemplatesFieldsType = "FREE_SIGNATURE"
)

func (e FieldUpdateTemplateFieldsFieldsTemplatesFieldsType) ToPointer() *FieldUpdateTemplateFieldsFieldsTemplatesFieldsType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsTemplatesFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldUpdateTemplateFieldsFieldsTemplatesFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsTemplatesFieldsType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFields2 struct {
	Type FieldUpdateTemplateFieldsFieldsTemplatesFieldsType `json:"type"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFields2) GetType() FieldUpdateTemplateFieldsFieldsTemplatesFieldsType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsTemplatesFieldsType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFields2) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFields2) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFields2) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFields2) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFields2) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFields2) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsFieldsType string

const (
	FieldUpdateTemplateFieldsFieldsTypeSignature FieldUpdateTemplateFieldsFieldsType = "SIGNATURE"
)

func (e FieldUpdateTemplateFieldsFieldsType) ToPointer() *FieldUpdateTemplateFieldsFieldsType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = FieldUpdateTemplateFieldsFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldsType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFields1 struct {
	Type FieldUpdateTemplateFieldsFieldsType `json:"type"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFields1) GetType() FieldUpdateTemplateFieldsFieldsType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldsType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFields1) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFields1) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFields1) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFields1) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFields1) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFields1) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsFieldsUnionType string

const (
	FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields1  FieldUpdateTemplateFieldsFieldsUnionType = "field-updateTemplateFields_fields_1"
	FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields2  FieldUpdateTemplateFieldsFieldsUnionType = "field-updateTemplateFields_fields_2"
	FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields3  FieldUpdateTemplateFieldsFieldsUnionType = "field-updateTemplateFields_fields_3"
	FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields4  FieldUpdateTemplateFieldsFieldsUnionType = "field-updateTemplateFields_fields_4"
	FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields5  FieldUpdateTemplateFieldsFieldsUnionType = "field-updateTemplateFields_fields_5"
	FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields6  FieldUpdateTemplateFieldsFieldsUnionType = "field-updateTemplateFields_fields_6"
	FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields7  FieldUpdateTemplateFieldsFieldsUnionType = "field-updateTemplateFields_fields_7"
	FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields8  FieldUpdateTemplateFieldsFieldsUnionType = "field-updateTemplateFields_fields_8"
	FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields9  FieldUpdateTemplateFieldsFieldsUnionType = "field-updateTemplateFields_fields_9"
	FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields10 FieldUpdateTemplateFieldsFieldsUnionType = "field-updateTemplateFields_fields_10"
	FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields11 FieldUpdateTemplateFieldsFieldsUnionType = "field-updateTemplateFields_fields_11"
)

type FieldUpdateTemplateFieldsFields struct {
	FieldUpdateTemplateFieldsFields1  *FieldUpdateTemplateFieldsFields1  `queryParam:"inline"`
	FieldUpdateTemplateFieldsFields2  *FieldUpdateTemplateFieldsFields2  `queryParam:"inline"`
	FieldUpdateTemplateFieldsFields3  *FieldUpdateTemplateFieldsFields3  `queryParam:"inline"`
	FieldUpdateTemplateFieldsFields4  *FieldUpdateTemplateFieldsFields4  `queryParam:"inline"`
	FieldUpdateTemplateFieldsFields5  *FieldUpdateTemplateFieldsFields5  `queryParam:"inline"`
	FieldUpdateTemplateFieldsFields6  *FieldUpdateTemplateFieldsFields6  `queryParam:"inline"`
	FieldUpdateTemplateFieldsFields7  *FieldUpdateTemplateFieldsFields7  `queryParam:"inline"`
	FieldUpdateTemplateFieldsFields8  *FieldUpdateTemplateFieldsFields8  `queryParam:"inline"`
	FieldUpdateTemplateFieldsFields9  *FieldUpdateTemplateFieldsFields9  `queryParam:"inline"`
	FieldUpdateTemplateFieldsFields10 *FieldUpdateTemplateFieldsFields10 `queryParam:"inline"`
	FieldUpdateTemplateFieldsFields11 *FieldUpdateTemplateFieldsFields11 `queryParam:"inline"`

	Type FieldUpdateTemplateFieldsFieldsUnionType
}

func CreateFieldUpdateTemplateFieldsFieldsFieldUpdateTemplateFieldsFields1(fieldUpdateTemplateFieldsFields1 FieldUpdateTemplateFieldsFields1) FieldUpdateTemplateFieldsFields {
	typ := FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields1

	return FieldUpdateTemplateFieldsFields{
		FieldUpdateTemplateFieldsFields1: &fieldUpdateTemplateFieldsFields1,
		Type:                             typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldsFieldUpdateTemplateFieldsFields2(fieldUpdateTemplateFieldsFields2 FieldUpdateTemplateFieldsFields2) FieldUpdateTemplateFieldsFields {
	typ := FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields2

	return FieldUpdateTemplateFieldsFields{
		FieldUpdateTemplateFieldsFields2: &fieldUpdateTemplateFieldsFields2,
		Type:                             typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldsFieldUpdateTemplateFieldsFields3(fieldUpdateTemplateFieldsFields3 FieldUpdateTemplateFieldsFields3) FieldUpdateTemplateFieldsFields {
	typ := FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields3

	return FieldUpdateTemplateFieldsFields{
		FieldUpdateTemplateFieldsFields3: &fieldUpdateTemplateFieldsFields3,
		Type:                             typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldsFieldUpdateTemplateFieldsFields4(fieldUpdateTemplateFieldsFields4 FieldUpdateTemplateFieldsFields4) FieldUpdateTemplateFieldsFields {
	typ := FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields4

	return FieldUpdateTemplateFieldsFields{
		FieldUpdateTemplateFieldsFields4: &fieldUpdateTemplateFieldsFields4,
		Type:                             typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldsFieldUpdateTemplateFieldsFields5(fieldUpdateTemplateFieldsFields5 FieldUpdateTemplateFieldsFields5) FieldUpdateTemplateFieldsFields {
	typ := FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields5

	return FieldUpdateTemplateFieldsFields{
		FieldUpdateTemplateFieldsFields5: &fieldUpdateTemplateFieldsFields5,
		Type:                             typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldsFieldUpdateTemplateFieldsFields6(fieldUpdateTemplateFieldsFields6 FieldUpdateTemplateFieldsFields6) FieldUpdateTemplateFieldsFields {
	typ := FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields6

	return FieldUpdateTemplateFieldsFields{
		FieldUpdateTemplateFieldsFields6: &fieldUpdateTemplateFieldsFields6,
		Type:                             typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldsFieldUpdateTemplateFieldsFields7(fieldUpdateTemplateFieldsFields7 FieldUpdateTemplateFieldsFields7) FieldUpdateTemplateFieldsFields {
	typ := FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields7

	return FieldUpdateTemplateFieldsFields{
		FieldUpdateTemplateFieldsFields7: &fieldUpdateTemplateFieldsFields7,
		Type:                             typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldsFieldUpdateTemplateFieldsFields8(fieldUpdateTemplateFieldsFields8 FieldUpdateTemplateFieldsFields8) FieldUpdateTemplateFieldsFields {
	typ := FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields8

	return FieldUpdateTemplateFieldsFields{
		FieldUpdateTemplateFieldsFields8: &fieldUpdateTemplateFieldsFields8,
		Type:                             typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldsFieldUpdateTemplateFieldsFields9(fieldUpdateTemplateFieldsFields9 FieldUpdateTemplateFieldsFields9) FieldUpdateTemplateFieldsFields {
	typ := FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields9

	return FieldUpdateTemplateFieldsFields{
		FieldUpdateTemplateFieldsFields9: &fieldUpdateTemplateFieldsFields9,
		Type:                             typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldsFieldUpdateTemplateFieldsFields10(fieldUpdateTemplateFieldsFields10 FieldUpdateTemplateFieldsFields10) FieldUpdateTemplateFieldsFields {
	typ := FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields10

	return FieldUpdateTemplateFieldsFields{
		FieldUpdateTemplateFieldsFields10: &fieldUpdateTemplateFieldsFields10,
		Type:                              typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldsFieldUpdateTemplateFieldsFields11(fieldUpdateTemplateFieldsFields11 FieldUpdateTemplateFieldsFields11) FieldUpdateTemplateFieldsFields {
	typ := FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields11

	return FieldUpdateTemplateFieldsFields{
		FieldUpdateTemplateFieldsFields11: &fieldUpdateTemplateFieldsFields11,
		Type:                              typ,
	}
}

func (u *FieldUpdateTemplateFieldsFields) UnmarshalJSON(data []byte) error {

	var fieldUpdateTemplateFieldsFields1 FieldUpdateTemplateFieldsFields1 = FieldUpdateTemplateFieldsFields1{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFields1, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFields1 = &fieldUpdateTemplateFieldsFields1
		u.Type = FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields1
		return nil
	}

	var fieldUpdateTemplateFieldsFields2 FieldUpdateTemplateFieldsFields2 = FieldUpdateTemplateFieldsFields2{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFields2, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFields2 = &fieldUpdateTemplateFieldsFields2
		u.Type = FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields2
		return nil
	}

	var fieldUpdateTemplateFieldsFields3 FieldUpdateTemplateFieldsFields3 = FieldUpdateTemplateFieldsFields3{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFields3, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFields3 = &fieldUpdateTemplateFieldsFields3
		u.Type = FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields3
		return nil
	}

	var fieldUpdateTemplateFieldsFields4 FieldUpdateTemplateFieldsFields4 = FieldUpdateTemplateFieldsFields4{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFields4, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFields4 = &fieldUpdateTemplateFieldsFields4
		u.Type = FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields4
		return nil
	}

	var fieldUpdateTemplateFieldsFields5 FieldUpdateTemplateFieldsFields5 = FieldUpdateTemplateFieldsFields5{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFields5, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFields5 = &fieldUpdateTemplateFieldsFields5
		u.Type = FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields5
		return nil
	}

	var fieldUpdateTemplateFieldsFields6 FieldUpdateTemplateFieldsFields6 = FieldUpdateTemplateFieldsFields6{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFields6, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFields6 = &fieldUpdateTemplateFieldsFields6
		u.Type = FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields6
		return nil
	}

	var fieldUpdateTemplateFieldsFields7 FieldUpdateTemplateFieldsFields7 = FieldUpdateTemplateFieldsFields7{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFields7, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFields7 = &fieldUpdateTemplateFieldsFields7
		u.Type = FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields7
		return nil
	}

	var fieldUpdateTemplateFieldsFields8 FieldUpdateTemplateFieldsFields8 = FieldUpdateTemplateFieldsFields8{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFields8, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFields8 = &fieldUpdateTemplateFieldsFields8
		u.Type = FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields8
		return nil
	}

	var fieldUpdateTemplateFieldsFields9 FieldUpdateTemplateFieldsFields9 = FieldUpdateTemplateFieldsFields9{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFields9, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFields9 = &fieldUpdateTemplateFieldsFields9
		u.Type = FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields9
		return nil
	}

	var fieldUpdateTemplateFieldsFields10 FieldUpdateTemplateFieldsFields10 = FieldUpdateTemplateFieldsFields10{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFields10, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFields10 = &fieldUpdateTemplateFieldsFields10
		u.Type = FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields10
		return nil
	}

	var fieldUpdateTemplateFieldsFields11 FieldUpdateTemplateFieldsFields11 = FieldUpdateTemplateFieldsFields11{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFields11, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFields11 = &fieldUpdateTemplateFieldsFields11
		u.Type = FieldUpdateTemplateFieldsFieldsUnionTypeFieldUpdateTemplateFieldsFields11
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldUpdateTemplateFieldsFields", string(data))
}

func (u FieldUpdateTemplateFieldsFields) MarshalJSON() ([]byte, error) {
	if u.FieldUpdateTemplateFieldsFields1 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFields1, "", true)
	}

	if u.FieldUpdateTemplateFieldsFields2 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFields2, "", true)
	}

	if u.FieldUpdateTemplateFieldsFields3 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFields3, "", true)
	}

	if u.FieldUpdateTemplateFieldsFields4 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFields4, "", true)
	}

	if u.FieldUpdateTemplateFieldsFields5 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFields5, "", true)
	}

	if u.FieldUpdateTemplateFieldsFields6 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFields6, "", true)
	}

	if u.FieldUpdateTemplateFieldsFields7 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFields7, "", true)
	}

	if u.FieldUpdateTemplateFieldsFields8 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFields8, "", true)
	}

	if u.FieldUpdateTemplateFieldsFields9 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFields9, "", true)
	}

	if u.FieldUpdateTemplateFieldsFields10 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFields10, "", true)
	}

	if u.FieldUpdateTemplateFieldsFields11 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFields11, "", true)
	}

	return nil, errors.New("could not marshal union type FieldUpdateTemplateFieldsFields: all fields are null")
}

type FieldUpdateTemplateFieldsRequestBody struct {
	TemplateID float64                           `json:"templateId"`
	Fields     []FieldUpdateTemplateFieldsFields `json:"fields"`
}

func (o *FieldUpdateTemplateFieldsRequestBody) GetTemplateID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TemplateID
}

func (o *FieldUpdateTemplateFieldsRequestBody) GetFields() []FieldUpdateTemplateFieldsFields {
	if o == nil {
		return []FieldUpdateTemplateFieldsFields{}
	}
	return o.Fields
}

type FieldUpdateTemplateFieldsType string

const (
	FieldUpdateTemplateFieldsTypeSignature     FieldUpdateTemplateFieldsType = "SIGNATURE"
	FieldUpdateTemplateFieldsTypeFreeSignature FieldUpdateTemplateFieldsType = "FREE_SIGNATURE"
	FieldUpdateTemplateFieldsTypeInitials      FieldUpdateTemplateFieldsType = "INITIALS"
	FieldUpdateTemplateFieldsTypeName          FieldUpdateTemplateFieldsType = "NAME"
	FieldUpdateTemplateFieldsTypeEmail         FieldUpdateTemplateFieldsType = "EMAIL"
	FieldUpdateTemplateFieldsTypeDate          FieldUpdateTemplateFieldsType = "DATE"
	FieldUpdateTemplateFieldsTypeText          FieldUpdateTemplateFieldsType = "TEXT"
	FieldUpdateTemplateFieldsTypeNumber        FieldUpdateTemplateFieldsType = "NUMBER"
	FieldUpdateTemplateFieldsTypeRadio         FieldUpdateTemplateFieldsType = "RADIO"
	FieldUpdateTemplateFieldsTypeCheckbox      FieldUpdateTemplateFieldsType = "CHECKBOX"
	FieldUpdateTemplateFieldsTypeDropdown      FieldUpdateTemplateFieldsType = "DROPDOWN"
)

func (e FieldUpdateTemplateFieldsType) ToPointer() *FieldUpdateTemplateFieldsType {
	return &e
}
func (e *FieldUpdateTemplateFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldUpdateTemplateFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type string

const (
	FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9TypeDropdown FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type = "dropdown"
)

func (e FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type) ToPointer() *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues struct {
	Value string `json:"value"`
}

func (o *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldsFieldMeta9 struct {
	Label        *string                                                                                            `json:"label,omitempty"`
	Placeholder  *string                                                                                            `json:"placeholder,omitempty"`
	Required     *bool                                                                                              `json:"required,omitempty"`
	ReadOnly     *bool                                                                                              `json:"readOnly,omitempty"`
	Type         FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type `json:"type"`
	Values       []FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues                                  `json:"values,omitempty"`
	DefaultValue *string                                                                                            `json:"defaultValue,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldMeta9) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMeta9) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMeta9) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMeta9) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMeta9) GetType() FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMeta9) GetValues() []FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateTemplateFieldsFieldMeta9) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type string

const (
	FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8TypeCheckbox FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type = "checkbox"
)

func (e FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type) ToPointer() *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldsFieldMeta8 struct {
	Label            *string                                                                                            `json:"label,omitempty"`
	Placeholder      *string                                                                                            `json:"placeholder,omitempty"`
	Required         *bool                                                                                              `json:"required,omitempty"`
	ReadOnly         *bool                                                                                              `json:"readOnly,omitempty"`
	Type             FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type `json:"type"`
	Values           []FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues                                          `json:"values,omitempty"`
	ValidationRule   *string                                                                                            `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                                           `json:"validationLength,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldMeta8) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMeta8) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMeta8) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMeta8) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMeta8) GetType() FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMeta8) GetValues() []FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateTemplateFieldsFieldMeta8) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldUpdateTemplateFieldsFieldMeta8) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType string

const (
	FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsTypeRadio FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType = "radio"
)

func (e FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType) ToPointer() *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMetaValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldUpdateTemplateFieldsFieldMetaValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFieldMetaValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateTemplateFieldsFieldMetaValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldsFieldMeta7 struct {
	Label       *string                                                                                           `json:"label,omitempty"`
	Placeholder *string                                                                                           `json:"placeholder,omitempty"`
	Required    *bool                                                                                             `json:"required,omitempty"`
	ReadOnly    *bool                                                                                             `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType `json:"type"`
	Values      []FieldUpdateTemplateFieldsFieldMetaValues                                                        `json:"values,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldMeta7) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMeta7) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMeta7) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMeta7) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMeta7) GetType() FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMeta7) GetValues() []FieldUpdateTemplateFieldsFieldMetaValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType string

const (
	FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyTypeNumber FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType = "number"
)

func (e FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType) ToPointer() *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMeta6 struct {
	Label        *string                                                                                     `json:"label,omitempty"`
	Placeholder  *string                                                                                     `json:"placeholder,omitempty"`
	Required     *bool                                                                                       `json:"required,omitempty"`
	ReadOnly     *bool                                                                                       `json:"readOnly,omitempty"`
	Type         FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType `json:"type"`
	NumberFormat *string                                                                                     `json:"numberFormat,omitempty"`
	Value        *string                                                                                     `json:"value,omitempty"`
	MinValue     *float64                                                                                    `json:"minValue,omitempty"`
	MaxValue     *float64                                                                                    `json:"maxValue,omitempty"`
	FontSize     *float64                                                                                    `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldMeta6) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMeta6) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMeta6) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMeta6) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMeta6) GetType() FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMeta6) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldUpdateTemplateFieldsFieldMeta6) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldUpdateTemplateFieldsFieldMeta6) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldUpdateTemplateFieldsFieldMeta6) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldUpdateTemplateFieldsFieldMeta6) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType string

const (
	FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONTypeText FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType = "text"
)

func (e FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType) ToPointer() *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMeta5 struct {
	Label          *string                                                                         `json:"label,omitempty"`
	Placeholder    *string                                                                         `json:"placeholder,omitempty"`
	Required       *bool                                                                           `json:"required,omitempty"`
	ReadOnly       *bool                                                                           `json:"readOnly,omitempty"`
	Type           FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType `json:"type"`
	Text           *string                                                                         `json:"text,omitempty"`
	CharacterLimit *float64                                                                        `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                        `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldMeta5) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMeta5) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMeta5) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMeta5) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMeta5) GetType() FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMeta5) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldUpdateTemplateFieldsFieldMeta5) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldUpdateTemplateFieldsFieldMeta5) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type string

const (
	FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200TypeDate FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type = "date"
)

func (e FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type) ToPointer() *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMeta4 struct {
	Label       *string                                                          `json:"label,omitempty"`
	Placeholder *string                                                          `json:"placeholder,omitempty"`
	Required    *bool                                                            `json:"required,omitempty"`
	ReadOnly    *bool                                                            `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type `json:"type"`
	FontSize    *float64                                                         `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldMeta4) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMeta4) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMeta4) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMeta4) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMeta4) GetType() FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMeta4) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType string

const (
	FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseTypeEmail FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType = "email"
)

func (e FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType) ToPointer() *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMeta3 struct {
	Label       *string                                                       `json:"label,omitempty"`
	Placeholder *string                                                       `json:"placeholder,omitempty"`
	Required    *bool                                                         `json:"required,omitempty"`
	ReadOnly    *bool                                                         `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType `json:"type"`
	FontSize    *float64                                                      `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldMeta3) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMeta3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMeta3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMeta3) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMeta3) GetType() FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMeta3) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType string

const (
	FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsTypeName FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType = "name"
)

func (e FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType) ToPointer() *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMeta2 struct {
	Label       *string                                               `json:"label,omitempty"`
	Placeholder *string                                               `json:"placeholder,omitempty"`
	Required    *bool                                                 `json:"required,omitempty"`
	ReadOnly    *bool                                                 `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType `json:"type"`
	FontSize    *float64                                              `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldMeta2) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMeta2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMeta2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMeta2) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMeta2) GetType() FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMeta2) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldsFieldMetaType string

const (
	FieldUpdateTemplateFieldsFieldMetaTypeInitials FieldUpdateTemplateFieldsFieldMetaType = "initials"
)

func (e FieldUpdateTemplateFieldsFieldMetaType) ToPointer() *FieldUpdateTemplateFieldsFieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldUpdateTemplateFieldsFieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMeta1 struct {
	Label       *string                                `json:"label,omitempty"`
	Placeholder *string                                `json:"placeholder,omitempty"`
	Required    *bool                                  `json:"required,omitempty"`
	ReadOnly    *bool                                  `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsFieldMetaType `json:"type"`
	FontSize    *float64                               `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldsFieldMeta1) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMeta1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMeta1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMeta1) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMeta1) GetType() FieldUpdateTemplateFieldsFieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMeta1) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldsFieldMetaUnionType string

const (
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta1 FieldUpdateTemplateFieldsFieldMetaUnionType = "field-updateTemplateFields_fieldMeta_1"
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta2 FieldUpdateTemplateFieldsFieldMetaUnionType = "field-updateTemplateFields_fieldMeta_2"
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta3 FieldUpdateTemplateFieldsFieldMetaUnionType = "field-updateTemplateFields_fieldMeta_3"
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta4 FieldUpdateTemplateFieldsFieldMetaUnionType = "field-updateTemplateFields_fieldMeta_4"
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta5 FieldUpdateTemplateFieldsFieldMetaUnionType = "field-updateTemplateFields_fieldMeta_5"
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta6 FieldUpdateTemplateFieldsFieldMetaUnionType = "field-updateTemplateFields_fieldMeta_6"
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta7 FieldUpdateTemplateFieldsFieldMetaUnionType = "field-updateTemplateFields_fieldMeta_7"
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta8 FieldUpdateTemplateFieldsFieldMetaUnionType = "field-updateTemplateFields_fieldMeta_8"
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta9 FieldUpdateTemplateFieldsFieldMetaUnionType = "field-updateTemplateFields_fieldMeta_9"
)

type FieldUpdateTemplateFieldsFieldMeta struct {
	FieldUpdateTemplateFieldsFieldMeta1 *FieldUpdateTemplateFieldsFieldMeta1 `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldMeta2 *FieldUpdateTemplateFieldsFieldMeta2 `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldMeta3 *FieldUpdateTemplateFieldsFieldMeta3 `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldMeta4 *FieldUpdateTemplateFieldsFieldMeta4 `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldMeta5 *FieldUpdateTemplateFieldsFieldMeta5 `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldMeta6 *FieldUpdateTemplateFieldsFieldMeta6 `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldMeta7 *FieldUpdateTemplateFieldsFieldMeta7 `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldMeta8 *FieldUpdateTemplateFieldsFieldMeta8 `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldMeta9 *FieldUpdateTemplateFieldsFieldMeta9 `queryParam:"inline"`

	Type FieldUpdateTemplateFieldsFieldMetaUnionType
}

func CreateFieldUpdateTemplateFieldsFieldMetaFieldUpdateTemplateFieldsFieldMeta1(fieldUpdateTemplateFieldsFieldMeta1 FieldUpdateTemplateFieldsFieldMeta1) FieldUpdateTemplateFieldsFieldMeta {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta1

	return FieldUpdateTemplateFieldsFieldMeta{
		FieldUpdateTemplateFieldsFieldMeta1: &fieldUpdateTemplateFieldsFieldMeta1,
		Type:                                typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldMetaFieldUpdateTemplateFieldsFieldMeta2(fieldUpdateTemplateFieldsFieldMeta2 FieldUpdateTemplateFieldsFieldMeta2) FieldUpdateTemplateFieldsFieldMeta {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta2

	return FieldUpdateTemplateFieldsFieldMeta{
		FieldUpdateTemplateFieldsFieldMeta2: &fieldUpdateTemplateFieldsFieldMeta2,
		Type:                                typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldMetaFieldUpdateTemplateFieldsFieldMeta3(fieldUpdateTemplateFieldsFieldMeta3 FieldUpdateTemplateFieldsFieldMeta3) FieldUpdateTemplateFieldsFieldMeta {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta3

	return FieldUpdateTemplateFieldsFieldMeta{
		FieldUpdateTemplateFieldsFieldMeta3: &fieldUpdateTemplateFieldsFieldMeta3,
		Type:                                typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldMetaFieldUpdateTemplateFieldsFieldMeta4(fieldUpdateTemplateFieldsFieldMeta4 FieldUpdateTemplateFieldsFieldMeta4) FieldUpdateTemplateFieldsFieldMeta {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta4

	return FieldUpdateTemplateFieldsFieldMeta{
		FieldUpdateTemplateFieldsFieldMeta4: &fieldUpdateTemplateFieldsFieldMeta4,
		Type:                                typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldMetaFieldUpdateTemplateFieldsFieldMeta5(fieldUpdateTemplateFieldsFieldMeta5 FieldUpdateTemplateFieldsFieldMeta5) FieldUpdateTemplateFieldsFieldMeta {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta5

	return FieldUpdateTemplateFieldsFieldMeta{
		FieldUpdateTemplateFieldsFieldMeta5: &fieldUpdateTemplateFieldsFieldMeta5,
		Type:                                typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldMetaFieldUpdateTemplateFieldsFieldMeta6(fieldUpdateTemplateFieldsFieldMeta6 FieldUpdateTemplateFieldsFieldMeta6) FieldUpdateTemplateFieldsFieldMeta {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta6

	return FieldUpdateTemplateFieldsFieldMeta{
		FieldUpdateTemplateFieldsFieldMeta6: &fieldUpdateTemplateFieldsFieldMeta6,
		Type:                                typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldMetaFieldUpdateTemplateFieldsFieldMeta7(fieldUpdateTemplateFieldsFieldMeta7 FieldUpdateTemplateFieldsFieldMeta7) FieldUpdateTemplateFieldsFieldMeta {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta7

	return FieldUpdateTemplateFieldsFieldMeta{
		FieldUpdateTemplateFieldsFieldMeta7: &fieldUpdateTemplateFieldsFieldMeta7,
		Type:                                typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldMetaFieldUpdateTemplateFieldsFieldMeta8(fieldUpdateTemplateFieldsFieldMeta8 FieldUpdateTemplateFieldsFieldMeta8) FieldUpdateTemplateFieldsFieldMeta {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta8

	return FieldUpdateTemplateFieldsFieldMeta{
		FieldUpdateTemplateFieldsFieldMeta8: &fieldUpdateTemplateFieldsFieldMeta8,
		Type:                                typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldMetaFieldUpdateTemplateFieldsFieldMeta9(fieldUpdateTemplateFieldsFieldMeta9 FieldUpdateTemplateFieldsFieldMeta9) FieldUpdateTemplateFieldsFieldMeta {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta9

	return FieldUpdateTemplateFieldsFieldMeta{
		FieldUpdateTemplateFieldsFieldMeta9: &fieldUpdateTemplateFieldsFieldMeta9,
		Type:                                typ,
	}
}

func (u *FieldUpdateTemplateFieldsFieldMeta) UnmarshalJSON(data []byte) error {

	var fieldUpdateTemplateFieldsFieldMeta1 FieldUpdateTemplateFieldsFieldMeta1 = FieldUpdateTemplateFieldsFieldMeta1{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMeta1, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFieldMeta1 = &fieldUpdateTemplateFieldsFieldMeta1
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta1
		return nil
	}

	var fieldUpdateTemplateFieldsFieldMeta2 FieldUpdateTemplateFieldsFieldMeta2 = FieldUpdateTemplateFieldsFieldMeta2{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMeta2, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFieldMeta2 = &fieldUpdateTemplateFieldsFieldMeta2
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta2
		return nil
	}

	var fieldUpdateTemplateFieldsFieldMeta3 FieldUpdateTemplateFieldsFieldMeta3 = FieldUpdateTemplateFieldsFieldMeta3{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMeta3, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFieldMeta3 = &fieldUpdateTemplateFieldsFieldMeta3
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta3
		return nil
	}

	var fieldUpdateTemplateFieldsFieldMeta4 FieldUpdateTemplateFieldsFieldMeta4 = FieldUpdateTemplateFieldsFieldMeta4{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMeta4, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFieldMeta4 = &fieldUpdateTemplateFieldsFieldMeta4
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta4
		return nil
	}

	var fieldUpdateTemplateFieldsFieldMeta7 FieldUpdateTemplateFieldsFieldMeta7 = FieldUpdateTemplateFieldsFieldMeta7{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMeta7, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFieldMeta7 = &fieldUpdateTemplateFieldsFieldMeta7
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta7
		return nil
	}

	var fieldUpdateTemplateFieldsFieldMeta9 FieldUpdateTemplateFieldsFieldMeta9 = FieldUpdateTemplateFieldsFieldMeta9{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMeta9, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFieldMeta9 = &fieldUpdateTemplateFieldsFieldMeta9
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta9
		return nil
	}

	var fieldUpdateTemplateFieldsFieldMeta5 FieldUpdateTemplateFieldsFieldMeta5 = FieldUpdateTemplateFieldsFieldMeta5{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMeta5, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFieldMeta5 = &fieldUpdateTemplateFieldsFieldMeta5
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta5
		return nil
	}

	var fieldUpdateTemplateFieldsFieldMeta8 FieldUpdateTemplateFieldsFieldMeta8 = FieldUpdateTemplateFieldsFieldMeta8{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMeta8, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFieldMeta8 = &fieldUpdateTemplateFieldsFieldMeta8
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta8
		return nil
	}

	var fieldUpdateTemplateFieldsFieldMeta6 FieldUpdateTemplateFieldsFieldMeta6 = FieldUpdateTemplateFieldsFieldMeta6{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMeta6, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldsFieldMeta6 = &fieldUpdateTemplateFieldsFieldMeta6
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMeta6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldUpdateTemplateFieldsFieldMeta", string(data))
}

func (u FieldUpdateTemplateFieldsFieldMeta) MarshalJSON() ([]byte, error) {
	if u.FieldUpdateTemplateFieldsFieldMeta1 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMeta1, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldMeta2 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMeta2, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldMeta3 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMeta3, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldMeta4 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMeta4, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldMeta5 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMeta5, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldMeta6 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMeta6, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldMeta7 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMeta7, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldMeta8 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMeta8, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldMeta9 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMeta9, "", true)
	}

	return nil, errors.New("could not marshal union type FieldUpdateTemplateFieldsFieldMeta: all fields are null")
}

type FieldUpdateTemplateFieldsTemplatesFieldsFields struct {
	Type        FieldUpdateTemplateFieldsType `json:"type"`
	ID          int64                         `json:"id"`
	SecondaryID string                        `json:"secondaryId"`
	DocumentID  *int64                        `json:"documentId"`
	TemplateID  *int64                        `json:"templateId"`
	RecipientID int64                         `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                             `json:"page"`
	PositionX  any                                 `json:"positionX,omitempty"`
	PositionY  any                                 `json:"positionY,omitempty"`
	Width      any                                 `json:"width,omitempty"`
	Height     any                                 `json:"height,omitempty"`
	CustomText string                              `json:"customText"`
	Inserted   bool                                `json:"inserted"`
	FieldMeta  *FieldUpdateTemplateFieldsFieldMeta `json:"fieldMeta"`
}

func (o *FieldUpdateTemplateFieldsTemplatesFieldsFields) GetType() FieldUpdateTemplateFieldsType {
	if o == nil {
		return FieldUpdateTemplateFieldsType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsTemplatesFieldsFields) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsTemplatesFieldsFields) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *FieldUpdateTemplateFieldsTemplatesFieldsFields) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *FieldUpdateTemplateFieldsTemplatesFieldsFields) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *FieldUpdateTemplateFieldsTemplatesFieldsFields) GetRecipientID() int64 {
	if o == nil {
		return 0
	}
	return o.RecipientID
}

func (o *FieldUpdateTemplateFieldsTemplatesFieldsFields) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *FieldUpdateTemplateFieldsTemplatesFieldsFields) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *FieldUpdateTemplateFieldsTemplatesFieldsFields) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *FieldUpdateTemplateFieldsTemplatesFieldsFields) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsTemplatesFieldsFields) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *FieldUpdateTemplateFieldsTemplatesFieldsFields) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *FieldUpdateTemplateFieldsTemplatesFieldsFields) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *FieldUpdateTemplateFieldsTemplatesFieldsFields) GetFieldMeta() *FieldUpdateTemplateFieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

// FieldUpdateTemplateFieldsResponseBody - Successful response
type FieldUpdateTemplateFieldsResponseBody struct {
	Fields []FieldUpdateTemplateFieldsTemplatesFieldsFields `json:"fields"`
}

func (o *FieldUpdateTemplateFieldsResponseBody) GetFields() []FieldUpdateTemplateFieldsTemplatesFieldsFields {
	if o == nil {
		return []FieldUpdateTemplateFieldsTemplatesFieldsFields{}
	}
	return o.Fields
}

type FieldUpdateTemplateFieldsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldUpdateTemplateFieldsResponseBody
}

func (o *FieldUpdateTemplateFieldsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FieldUpdateTemplateFieldsResponse) GetObject() *FieldUpdateTemplateFieldsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
