// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11TypeDropdown FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type = "DROPDOWN"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type: %v", v)
	}
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaTypeDropdown FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType = "dropdown"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues struct {
	Value string `json:"value"`
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta struct {
	Label        *string                                                                       `json:"label,omitempty"`
	Placeholder  *string                                                                       `json:"placeholder,omitempty"`
	Required     *bool                                                                         `json:"required,omitempty"`
	ReadOnly     *bool                                                                         `json:"readOnly,omitempty"`
	Type         FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType `json:"type"`
	Values       []FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues                   `json:"values,omitempty"`
	DefaultValue *string                                                                       `json:"defaultValue,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta) GetValues() []FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldCreateTemplateFieldField11 struct {
	Type      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type       `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldField11) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldField11) GetFieldMeta() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldField11) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldField11) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldField11) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldField11) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldField11) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldField11) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10TypeCheckbox FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type = "CHECKBOX"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type: %v", v)
	}
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaTypeCheckbox FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType = "checkbox"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldFieldTemplatesFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta struct {
	Label            *string                                                                       `json:"label,omitempty"`
	Placeholder      *string                                                                       `json:"placeholder,omitempty"`
	Required         *bool                                                                         `json:"required,omitempty"`
	ReadOnly         *bool                                                                         `json:"readOnly,omitempty"`
	Type             FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType `json:"type"`
	Values           []FieldCreateTemplateFieldFieldTemplatesFieldsValues                          `json:"values,omitempty"`
	ValidationRule   *string                                                                       `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                      `json:"validationLength,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta) GetValues() []FieldCreateTemplateFieldFieldTemplatesFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldCreateTemplateFieldField10 struct {
	Type      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type       `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldField10) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldField10) GetFieldMeta() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldField10) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldField10) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldField10) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldField10) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldField10) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldField10) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9TypeRadio FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type = "RADIO"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type: %v", v)
	}
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaTypeRadio FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType = "radio"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldFieldValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateTemplateFieldFieldValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateTemplateFieldFieldValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateTemplateFieldFieldValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta struct {
	Label       *string                                                                      `json:"label,omitempty"`
	Placeholder *string                                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                                        `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType `json:"type"`
	Values      []FieldCreateTemplateFieldFieldValues                                        `json:"values,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta) GetValues() []FieldCreateTemplateFieldFieldValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldCreateTemplateFieldField9 struct {
	Type      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type       `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldField9) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldField9) GetFieldMeta() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldField9) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldField9) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldField9) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldField9) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldField9) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldField9) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8TypeNumber FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type = "NUMBER"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type: %v", v)
	}
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaTypeNumber FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType = "number"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta struct {
	Label        *string                                                                      `json:"label,omitempty"`
	Placeholder  *string                                                                      `json:"placeholder,omitempty"`
	Required     *bool                                                                        `json:"required,omitempty"`
	ReadOnly     *bool                                                                        `json:"readOnly,omitempty"`
	Type         FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType `json:"type"`
	NumberFormat *string                                                                      `json:"numberFormat,omitempty"`
	Value        *string                                                                      `json:"value,omitempty"`
	MinValue     *float64                                                                     `json:"minValue,omitempty"`
	MaxValue     *float64                                                                     `json:"maxValue,omitempty"`
	FontSize     *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldField8 struct {
	Type      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type       `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldField8) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldField8) GetFieldMeta() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldField8) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldField8) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldField8) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldField8) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldField8) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldField8) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7TypeText FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type = "TEXT"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type: %v", v)
	}
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaTypeText FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType = "text"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta struct {
	Label          *string                                                                      `json:"label,omitempty"`
	Placeholder    *string                                                                      `json:"placeholder,omitempty"`
	Required       *bool                                                                        `json:"required,omitempty"`
	ReadOnly       *bool                                                                        `json:"readOnly,omitempty"`
	Type           FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType `json:"type"`
	Text           *string                                                                      `json:"text,omitempty"`
	CharacterLimit *float64                                                                     `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldField7 struct {
	Type      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type       `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldField7) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldField7) GetFieldMeta() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldField7) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldField7) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldField7) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldField7) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldField7) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldField7) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6TypeDate FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type = "DATE"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type: %v", v)
	}
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaTypeDate FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType = "date"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta struct {
	Label       *string                                                                      `json:"label,omitempty"`
	Placeholder *string                                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                                        `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType `json:"type"`
	FontSize    *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldField6 struct {
	Type      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldField6) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldField6) GetFieldMeta() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldField6) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldField6) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldField6) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldField6) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldField6) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldField6) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5TypeEmail FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type = "EMAIL"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type: %v", v)
	}
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaTypeEmail FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType = "email"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta struct {
	Label       *string                                                                      `json:"label,omitempty"`
	Placeholder *string                                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                                        `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType `json:"type"`
	FontSize    *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldField5 struct {
	Type      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta       `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldField5) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldField5) GetFieldMeta() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldField5) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldField5) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldField5) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldField5) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldField5) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldField5) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4TypeName FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type = "NAME"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type: %v", v)
	}
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaTypeName FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType = "name"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta struct {
	Label       *string                                                                      `json:"label,omitempty"`
	Placeholder *string                                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                                        `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType `json:"type"`
	FontSize    *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldField4 struct {
	Type      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta              `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldField4) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldField4) GetFieldMeta() *FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldField4) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldField4) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldField4) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldField4) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldField4) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldField4) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestType string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestTypeInitials FieldCreateTemplateFieldFieldTemplatesFieldsRequestType = "INITIALS"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestType) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestType {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestType: %v", v)
	}
}

type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyTypeInitials FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType = "initials"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType: %v", v)
	}
}

type FieldCreateTemplateFieldFieldFieldMeta struct {
	Label       *string                                                            `json:"label,omitempty"`
	Placeholder *string                                                            `json:"placeholder,omitempty"`
	Required    *bool                                                              `json:"required,omitempty"`
	ReadOnly    *bool                                                              `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType `json:"type"`
	FontSize    *float64                                                           `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldFieldMeta) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldField3 struct {
	Type      FieldCreateTemplateFieldFieldTemplatesFieldsRequestType `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldFieldMeta                 `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldField3) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsRequestType {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsRequestType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldField3) GetFieldMeta() *FieldCreateTemplateFieldFieldFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldField3) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldField3) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldField3) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldField3) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldField3) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldField3) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldFieldTemplatesFieldsType string

const (
	FieldCreateTemplateFieldFieldTemplatesFieldsTypeFreeSignature FieldCreateTemplateFieldFieldTemplatesFieldsType = "FREE_SIGNATURE"
)

func (e FieldCreateTemplateFieldFieldTemplatesFieldsType) ToPointer() *FieldCreateTemplateFieldFieldTemplatesFieldsType {
	return &e
}
func (e *FieldCreateTemplateFieldFieldTemplatesFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldCreateTemplateFieldFieldTemplatesFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldTemplatesFieldsType: %v", v)
	}
}

type FieldCreateTemplateFieldField2 struct {
	Type FieldCreateTemplateFieldFieldTemplatesFieldsType `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldField2) GetType() FieldCreateTemplateFieldFieldTemplatesFieldsType {
	if o == nil {
		return FieldCreateTemplateFieldFieldTemplatesFieldsType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldField2) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldField2) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldField2) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldField2) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldField2) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldField2) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldFieldType string

const (
	FieldCreateTemplateFieldFieldTypeSignature FieldCreateTemplateFieldFieldType = "SIGNATURE"
)

func (e FieldCreateTemplateFieldFieldType) ToPointer() *FieldCreateTemplateFieldFieldType {
	return &e
}
func (e *FieldCreateTemplateFieldFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = FieldCreateTemplateFieldFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldType: %v", v)
	}
}

type FieldCreateTemplateFieldField1 struct {
	Type FieldCreateTemplateFieldFieldType `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldField1) GetType() FieldCreateTemplateFieldFieldType {
	if o == nil {
		return FieldCreateTemplateFieldFieldType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldField1) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldField1) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldField1) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldField1) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldField1) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldField1) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldFieldUnionType string

const (
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField1  FieldCreateTemplateFieldFieldUnionType = "field-createTemplateField_field_1"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField2  FieldCreateTemplateFieldFieldUnionType = "field-createTemplateField_field_2"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField3  FieldCreateTemplateFieldFieldUnionType = "field-createTemplateField_field_3"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField4  FieldCreateTemplateFieldFieldUnionType = "field-createTemplateField_field_4"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField5  FieldCreateTemplateFieldFieldUnionType = "field-createTemplateField_field_5"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField6  FieldCreateTemplateFieldFieldUnionType = "field-createTemplateField_field_6"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField7  FieldCreateTemplateFieldFieldUnionType = "field-createTemplateField_field_7"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField8  FieldCreateTemplateFieldFieldUnionType = "field-createTemplateField_field_8"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField9  FieldCreateTemplateFieldFieldUnionType = "field-createTemplateField_field_9"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField10 FieldCreateTemplateFieldFieldUnionType = "field-createTemplateField_field_10"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField11 FieldCreateTemplateFieldFieldUnionType = "field-createTemplateField_field_11"
)

type FieldCreateTemplateFieldField struct {
	FieldCreateTemplateFieldField1  *FieldCreateTemplateFieldField1  `queryParam:"inline"`
	FieldCreateTemplateFieldField2  *FieldCreateTemplateFieldField2  `queryParam:"inline"`
	FieldCreateTemplateFieldField3  *FieldCreateTemplateFieldField3  `queryParam:"inline"`
	FieldCreateTemplateFieldField4  *FieldCreateTemplateFieldField4  `queryParam:"inline"`
	FieldCreateTemplateFieldField5  *FieldCreateTemplateFieldField5  `queryParam:"inline"`
	FieldCreateTemplateFieldField6  *FieldCreateTemplateFieldField6  `queryParam:"inline"`
	FieldCreateTemplateFieldField7  *FieldCreateTemplateFieldField7  `queryParam:"inline"`
	FieldCreateTemplateFieldField8  *FieldCreateTemplateFieldField8  `queryParam:"inline"`
	FieldCreateTemplateFieldField9  *FieldCreateTemplateFieldField9  `queryParam:"inline"`
	FieldCreateTemplateFieldField10 *FieldCreateTemplateFieldField10 `queryParam:"inline"`
	FieldCreateTemplateFieldField11 *FieldCreateTemplateFieldField11 `queryParam:"inline"`

	Type FieldCreateTemplateFieldFieldUnionType
}

func CreateFieldCreateTemplateFieldFieldFieldCreateTemplateFieldField1(fieldCreateTemplateFieldField1 FieldCreateTemplateFieldField1) FieldCreateTemplateFieldField {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField1

	return FieldCreateTemplateFieldField{
		FieldCreateTemplateFieldField1: &fieldCreateTemplateFieldField1,
		Type:                           typ,
	}
}

func CreateFieldCreateTemplateFieldFieldFieldCreateTemplateFieldField2(fieldCreateTemplateFieldField2 FieldCreateTemplateFieldField2) FieldCreateTemplateFieldField {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField2

	return FieldCreateTemplateFieldField{
		FieldCreateTemplateFieldField2: &fieldCreateTemplateFieldField2,
		Type:                           typ,
	}
}

func CreateFieldCreateTemplateFieldFieldFieldCreateTemplateFieldField3(fieldCreateTemplateFieldField3 FieldCreateTemplateFieldField3) FieldCreateTemplateFieldField {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField3

	return FieldCreateTemplateFieldField{
		FieldCreateTemplateFieldField3: &fieldCreateTemplateFieldField3,
		Type:                           typ,
	}
}

func CreateFieldCreateTemplateFieldFieldFieldCreateTemplateFieldField4(fieldCreateTemplateFieldField4 FieldCreateTemplateFieldField4) FieldCreateTemplateFieldField {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField4

	return FieldCreateTemplateFieldField{
		FieldCreateTemplateFieldField4: &fieldCreateTemplateFieldField4,
		Type:                           typ,
	}
}

func CreateFieldCreateTemplateFieldFieldFieldCreateTemplateFieldField5(fieldCreateTemplateFieldField5 FieldCreateTemplateFieldField5) FieldCreateTemplateFieldField {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField5

	return FieldCreateTemplateFieldField{
		FieldCreateTemplateFieldField5: &fieldCreateTemplateFieldField5,
		Type:                           typ,
	}
}

func CreateFieldCreateTemplateFieldFieldFieldCreateTemplateFieldField6(fieldCreateTemplateFieldField6 FieldCreateTemplateFieldField6) FieldCreateTemplateFieldField {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField6

	return FieldCreateTemplateFieldField{
		FieldCreateTemplateFieldField6: &fieldCreateTemplateFieldField6,
		Type:                           typ,
	}
}

func CreateFieldCreateTemplateFieldFieldFieldCreateTemplateFieldField7(fieldCreateTemplateFieldField7 FieldCreateTemplateFieldField7) FieldCreateTemplateFieldField {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField7

	return FieldCreateTemplateFieldField{
		FieldCreateTemplateFieldField7: &fieldCreateTemplateFieldField7,
		Type:                           typ,
	}
}

func CreateFieldCreateTemplateFieldFieldFieldCreateTemplateFieldField8(fieldCreateTemplateFieldField8 FieldCreateTemplateFieldField8) FieldCreateTemplateFieldField {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField8

	return FieldCreateTemplateFieldField{
		FieldCreateTemplateFieldField8: &fieldCreateTemplateFieldField8,
		Type:                           typ,
	}
}

func CreateFieldCreateTemplateFieldFieldFieldCreateTemplateFieldField9(fieldCreateTemplateFieldField9 FieldCreateTemplateFieldField9) FieldCreateTemplateFieldField {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField9

	return FieldCreateTemplateFieldField{
		FieldCreateTemplateFieldField9: &fieldCreateTemplateFieldField9,
		Type:                           typ,
	}
}

func CreateFieldCreateTemplateFieldFieldFieldCreateTemplateFieldField10(fieldCreateTemplateFieldField10 FieldCreateTemplateFieldField10) FieldCreateTemplateFieldField {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField10

	return FieldCreateTemplateFieldField{
		FieldCreateTemplateFieldField10: &fieldCreateTemplateFieldField10,
		Type:                            typ,
	}
}

func CreateFieldCreateTemplateFieldFieldFieldCreateTemplateFieldField11(fieldCreateTemplateFieldField11 FieldCreateTemplateFieldField11) FieldCreateTemplateFieldField {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField11

	return FieldCreateTemplateFieldField{
		FieldCreateTemplateFieldField11: &fieldCreateTemplateFieldField11,
		Type:                            typ,
	}
}

func (u *FieldCreateTemplateFieldField) UnmarshalJSON(data []byte) error {

	var fieldCreateTemplateFieldField1 FieldCreateTemplateFieldField1 = FieldCreateTemplateFieldField1{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldField1, "", true, true); err == nil {
		u.FieldCreateTemplateFieldField1 = &fieldCreateTemplateFieldField1
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField1
		return nil
	}

	var fieldCreateTemplateFieldField2 FieldCreateTemplateFieldField2 = FieldCreateTemplateFieldField2{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldField2, "", true, true); err == nil {
		u.FieldCreateTemplateFieldField2 = &fieldCreateTemplateFieldField2
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField2
		return nil
	}

	var fieldCreateTemplateFieldField3 FieldCreateTemplateFieldField3 = FieldCreateTemplateFieldField3{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldField3, "", true, true); err == nil {
		u.FieldCreateTemplateFieldField3 = &fieldCreateTemplateFieldField3
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField3
		return nil
	}

	var fieldCreateTemplateFieldField4 FieldCreateTemplateFieldField4 = FieldCreateTemplateFieldField4{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldField4, "", true, true); err == nil {
		u.FieldCreateTemplateFieldField4 = &fieldCreateTemplateFieldField4
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField4
		return nil
	}

	var fieldCreateTemplateFieldField5 FieldCreateTemplateFieldField5 = FieldCreateTemplateFieldField5{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldField5, "", true, true); err == nil {
		u.FieldCreateTemplateFieldField5 = &fieldCreateTemplateFieldField5
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField5
		return nil
	}

	var fieldCreateTemplateFieldField6 FieldCreateTemplateFieldField6 = FieldCreateTemplateFieldField6{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldField6, "", true, true); err == nil {
		u.FieldCreateTemplateFieldField6 = &fieldCreateTemplateFieldField6
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField6
		return nil
	}

	var fieldCreateTemplateFieldField7 FieldCreateTemplateFieldField7 = FieldCreateTemplateFieldField7{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldField7, "", true, true); err == nil {
		u.FieldCreateTemplateFieldField7 = &fieldCreateTemplateFieldField7
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField7
		return nil
	}

	var fieldCreateTemplateFieldField8 FieldCreateTemplateFieldField8 = FieldCreateTemplateFieldField8{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldField8, "", true, true); err == nil {
		u.FieldCreateTemplateFieldField8 = &fieldCreateTemplateFieldField8
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField8
		return nil
	}

	var fieldCreateTemplateFieldField9 FieldCreateTemplateFieldField9 = FieldCreateTemplateFieldField9{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldField9, "", true, true); err == nil {
		u.FieldCreateTemplateFieldField9 = &fieldCreateTemplateFieldField9
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField9
		return nil
	}

	var fieldCreateTemplateFieldField10 FieldCreateTemplateFieldField10 = FieldCreateTemplateFieldField10{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldField10, "", true, true); err == nil {
		u.FieldCreateTemplateFieldField10 = &fieldCreateTemplateFieldField10
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField10
		return nil
	}

	var fieldCreateTemplateFieldField11 FieldCreateTemplateFieldField11 = FieldCreateTemplateFieldField11{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldField11, "", true, true); err == nil {
		u.FieldCreateTemplateFieldField11 = &fieldCreateTemplateFieldField11
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldField11
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldCreateTemplateFieldField", string(data))
}

func (u FieldCreateTemplateFieldField) MarshalJSON() ([]byte, error) {
	if u.FieldCreateTemplateFieldField1 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldField1, "", true)
	}

	if u.FieldCreateTemplateFieldField2 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldField2, "", true)
	}

	if u.FieldCreateTemplateFieldField3 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldField3, "", true)
	}

	if u.FieldCreateTemplateFieldField4 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldField4, "", true)
	}

	if u.FieldCreateTemplateFieldField5 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldField5, "", true)
	}

	if u.FieldCreateTemplateFieldField6 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldField6, "", true)
	}

	if u.FieldCreateTemplateFieldField7 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldField7, "", true)
	}

	if u.FieldCreateTemplateFieldField8 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldField8, "", true)
	}

	if u.FieldCreateTemplateFieldField9 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldField9, "", true)
	}

	if u.FieldCreateTemplateFieldField10 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldField10, "", true)
	}

	if u.FieldCreateTemplateFieldField11 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldField11, "", true)
	}

	return nil, errors.New("could not marshal union type FieldCreateTemplateFieldField: all fields are null")
}

type FieldCreateTemplateFieldRequestBody struct {
	TemplateID float64                       `json:"templateId"`
	Field      FieldCreateTemplateFieldField `json:"field"`
}

func (o *FieldCreateTemplateFieldRequestBody) GetTemplateID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TemplateID
}

func (o *FieldCreateTemplateFieldRequestBody) GetField() FieldCreateTemplateFieldField {
	if o == nil {
		return FieldCreateTemplateFieldField{}
	}
	return o.Field
}

type FieldCreateTemplateFieldType string

const (
	FieldCreateTemplateFieldTypeSignature     FieldCreateTemplateFieldType = "SIGNATURE"
	FieldCreateTemplateFieldTypeFreeSignature FieldCreateTemplateFieldType = "FREE_SIGNATURE"
	FieldCreateTemplateFieldTypeInitials      FieldCreateTemplateFieldType = "INITIALS"
	FieldCreateTemplateFieldTypeName          FieldCreateTemplateFieldType = "NAME"
	FieldCreateTemplateFieldTypeEmail         FieldCreateTemplateFieldType = "EMAIL"
	FieldCreateTemplateFieldTypeDate          FieldCreateTemplateFieldType = "DATE"
	FieldCreateTemplateFieldTypeText          FieldCreateTemplateFieldType = "TEXT"
	FieldCreateTemplateFieldTypeNumber        FieldCreateTemplateFieldType = "NUMBER"
	FieldCreateTemplateFieldTypeRadio         FieldCreateTemplateFieldType = "RADIO"
	FieldCreateTemplateFieldTypeCheckbox      FieldCreateTemplateFieldType = "CHECKBOX"
	FieldCreateTemplateFieldTypeDropdown      FieldCreateTemplateFieldType = "DROPDOWN"
)

func (e FieldCreateTemplateFieldType) ToPointer() *FieldCreateTemplateFieldType {
	return &e
}
func (e *FieldCreateTemplateFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldCreateTemplateFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldType: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type string

const (
	FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9TypeDropdown FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type = "dropdown"
)

func (e FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type) ToPointer() *FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues struct {
	Value string `json:"value"`
}

func (o *FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldFieldMeta9 struct {
	Label        *string                                                                                     `json:"label,omitempty"`
	Placeholder  *string                                                                                     `json:"placeholder,omitempty"`
	Required     *bool                                                                                       `json:"required,omitempty"`
	ReadOnly     *bool                                                                                       `json:"readOnly,omitempty"`
	Type         FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type `json:"type"`
	Values       []FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues                            `json:"values,omitempty"`
	DefaultValue *string                                                                                     `json:"defaultValue,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldMeta9) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldMeta9) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldMeta9) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldMeta9) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldMeta9) GetType() FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type {
	if o == nil {
		return FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldMeta9) GetValues() []FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateTemplateFieldFieldMeta9) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type string

const (
	FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8TypeCheckbox FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type = "checkbox"
)

func (e FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type) ToPointer() *FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldFieldMeta8 struct {
	Label            *string                                                                                     `json:"label,omitempty"`
	Placeholder      *string                                                                                     `json:"placeholder,omitempty"`
	Required         *bool                                                                                       `json:"required,omitempty"`
	ReadOnly         *bool                                                                                       `json:"readOnly,omitempty"`
	Type             FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type `json:"type"`
	Values           []FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues                                    `json:"values,omitempty"`
	ValidationRule   *string                                                                                     `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                                    `json:"validationLength,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldMeta8) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldMeta8) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldMeta8) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldMeta8) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldMeta8) GetType() FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type {
	if o == nil {
		return FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldMeta8) GetValues() []FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateTemplateFieldFieldMeta8) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldCreateTemplateFieldFieldMeta8) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type string

const (
	FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7TypeRadio FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type = "radio"
)

func (e FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type) ToPointer() *FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateTemplateFieldFieldMetaValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateTemplateFieldFieldMetaValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateTemplateFieldFieldMetaValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldFieldMeta7 struct {
	Label       *string                                                                                     `json:"label,omitempty"`
	Placeholder *string                                                                                     `json:"placeholder,omitempty"`
	Required    *bool                                                                                       `json:"required,omitempty"`
	ReadOnly    *bool                                                                                       `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type `json:"type"`
	Values      []FieldCreateTemplateFieldFieldMetaValues                                                   `json:"values,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldMeta7) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldMeta7) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldMeta7) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldMeta7) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldMeta7) GetType() FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type {
	if o == nil {
		return FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldMeta7) GetValues() []FieldCreateTemplateFieldFieldMetaValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType string

const (
	FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyTypeNumber FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType = "number"
)

func (e FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType) ToPointer() *FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMeta6 struct {
	Label        *string                                                                                    `json:"label,omitempty"`
	Placeholder  *string                                                                                    `json:"placeholder,omitempty"`
	Required     *bool                                                                                      `json:"required,omitempty"`
	ReadOnly     *bool                                                                                      `json:"readOnly,omitempty"`
	Type         FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType `json:"type"`
	NumberFormat *string                                                                                    `json:"numberFormat,omitempty"`
	Value        *string                                                                                    `json:"value,omitempty"`
	MinValue     *float64                                                                                   `json:"minValue,omitempty"`
	MaxValue     *float64                                                                                   `json:"maxValue,omitempty"`
	FontSize     *float64                                                                                   `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldMeta6) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldMeta6) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldMeta6) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldMeta6) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldMeta6) GetType() FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldMeta6) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldCreateTemplateFieldFieldMeta6) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldCreateTemplateFieldFieldMeta6) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldCreateTemplateFieldFieldMeta6) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldCreateTemplateFieldFieldMeta6) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType string

const (
	FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONTypeText FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType = "text"
)

func (e FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType) ToPointer() *FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMeta5 struct {
	Label          *string                                                                        `json:"label,omitempty"`
	Placeholder    *string                                                                        `json:"placeholder,omitempty"`
	Required       *bool                                                                          `json:"required,omitempty"`
	ReadOnly       *bool                                                                          `json:"readOnly,omitempty"`
	Type           FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType `json:"type"`
	Text           *string                                                                        `json:"text,omitempty"`
	CharacterLimit *float64                                                                       `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldMeta5) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldMeta5) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldMeta5) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldMeta5) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldMeta5) GetType() FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType {
	if o == nil {
		return FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldMeta5) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldCreateTemplateFieldFieldMeta5) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldCreateTemplateFieldFieldMeta5) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type string

const (
	FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200TypeDate FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type = "date"
)

func (e FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type) ToPointer() *FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMeta4 struct {
	Label       *string                                                         `json:"label,omitempty"`
	Placeholder *string                                                         `json:"placeholder,omitempty"`
	Required    *bool                                                           `json:"required,omitempty"`
	ReadOnly    *bool                                                           `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type `json:"type"`
	FontSize    *float64                                                        `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldMeta4) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldMeta4) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldMeta4) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldMeta4) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldMeta4) GetType() FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type {
	if o == nil {
		return FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldMeta4) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType string

const (
	FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseTypeEmail FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType = "email"
)

func (e FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType) ToPointer() *FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMeta3 struct {
	Label       *string                                                      `json:"label,omitempty"`
	Placeholder *string                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                        `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType `json:"type"`
	FontSize    *float64                                                     `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldMeta3) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldMeta3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldMeta3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldMeta3) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldMeta3) GetType() FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType {
	if o == nil {
		return FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldMeta3) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldFieldMetaTemplatesFieldsType string

const (
	FieldCreateTemplateFieldFieldMetaTemplatesFieldsTypeName FieldCreateTemplateFieldFieldMetaTemplatesFieldsType = "name"
)

func (e FieldCreateTemplateFieldFieldMetaTemplatesFieldsType) ToPointer() *FieldCreateTemplateFieldFieldMetaTemplatesFieldsType {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaTemplatesFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateTemplateFieldFieldMetaTemplatesFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaTemplatesFieldsType: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMeta2 struct {
	Label       *string                                              `json:"label,omitempty"`
	Placeholder *string                                              `json:"placeholder,omitempty"`
	Required    *bool                                                `json:"required,omitempty"`
	ReadOnly    *bool                                                `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldFieldMetaTemplatesFieldsType `json:"type"`
	FontSize    *float64                                             `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldMeta2) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldMeta2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldMeta2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldMeta2) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldMeta2) GetType() FieldCreateTemplateFieldFieldMetaTemplatesFieldsType {
	if o == nil {
		return FieldCreateTemplateFieldFieldMetaTemplatesFieldsType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldMeta2) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldFieldMetaType string

const (
	FieldCreateTemplateFieldFieldMetaTypeInitials FieldCreateTemplateFieldFieldMetaType = "initials"
)

func (e FieldCreateTemplateFieldFieldMetaType) ToPointer() *FieldCreateTemplateFieldFieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateTemplateFieldFieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMeta1 struct {
	Label       *string                               `json:"label,omitempty"`
	Placeholder *string                               `json:"placeholder,omitempty"`
	Required    *bool                                 `json:"required,omitempty"`
	ReadOnly    *bool                                 `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldFieldMetaType `json:"type"`
	FontSize    *float64                              `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldFieldMeta1) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldFieldMeta1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldFieldMeta1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldFieldMeta1) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldFieldMeta1) GetType() FieldCreateTemplateFieldFieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldFieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldFieldMeta1) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldFieldMetaUnionType string

const (
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta1 FieldCreateTemplateFieldFieldMetaUnionType = "field-createTemplateField_fieldMeta_1"
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta2 FieldCreateTemplateFieldFieldMetaUnionType = "field-createTemplateField_fieldMeta_2"
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta3 FieldCreateTemplateFieldFieldMetaUnionType = "field-createTemplateField_fieldMeta_3"
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta4 FieldCreateTemplateFieldFieldMetaUnionType = "field-createTemplateField_fieldMeta_4"
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta5 FieldCreateTemplateFieldFieldMetaUnionType = "field-createTemplateField_fieldMeta_5"
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta6 FieldCreateTemplateFieldFieldMetaUnionType = "field-createTemplateField_fieldMeta_6"
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta7 FieldCreateTemplateFieldFieldMetaUnionType = "field-createTemplateField_fieldMeta_7"
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta8 FieldCreateTemplateFieldFieldMetaUnionType = "field-createTemplateField_fieldMeta_8"
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta9 FieldCreateTemplateFieldFieldMetaUnionType = "field-createTemplateField_fieldMeta_9"
)

type FieldCreateTemplateFieldFieldMeta struct {
	FieldCreateTemplateFieldFieldMeta1 *FieldCreateTemplateFieldFieldMeta1 `queryParam:"inline"`
	FieldCreateTemplateFieldFieldMeta2 *FieldCreateTemplateFieldFieldMeta2 `queryParam:"inline"`
	FieldCreateTemplateFieldFieldMeta3 *FieldCreateTemplateFieldFieldMeta3 `queryParam:"inline"`
	FieldCreateTemplateFieldFieldMeta4 *FieldCreateTemplateFieldFieldMeta4 `queryParam:"inline"`
	FieldCreateTemplateFieldFieldMeta5 *FieldCreateTemplateFieldFieldMeta5 `queryParam:"inline"`
	FieldCreateTemplateFieldFieldMeta6 *FieldCreateTemplateFieldFieldMeta6 `queryParam:"inline"`
	FieldCreateTemplateFieldFieldMeta7 *FieldCreateTemplateFieldFieldMeta7 `queryParam:"inline"`
	FieldCreateTemplateFieldFieldMeta8 *FieldCreateTemplateFieldFieldMeta8 `queryParam:"inline"`
	FieldCreateTemplateFieldFieldMeta9 *FieldCreateTemplateFieldFieldMeta9 `queryParam:"inline"`

	Type FieldCreateTemplateFieldFieldMetaUnionType
}

func CreateFieldCreateTemplateFieldFieldMetaFieldCreateTemplateFieldFieldMeta1(fieldCreateTemplateFieldFieldMeta1 FieldCreateTemplateFieldFieldMeta1) FieldCreateTemplateFieldFieldMeta {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta1

	return FieldCreateTemplateFieldFieldMeta{
		FieldCreateTemplateFieldFieldMeta1: &fieldCreateTemplateFieldFieldMeta1,
		Type:                               typ,
	}
}

func CreateFieldCreateTemplateFieldFieldMetaFieldCreateTemplateFieldFieldMeta2(fieldCreateTemplateFieldFieldMeta2 FieldCreateTemplateFieldFieldMeta2) FieldCreateTemplateFieldFieldMeta {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta2

	return FieldCreateTemplateFieldFieldMeta{
		FieldCreateTemplateFieldFieldMeta2: &fieldCreateTemplateFieldFieldMeta2,
		Type:                               typ,
	}
}

func CreateFieldCreateTemplateFieldFieldMetaFieldCreateTemplateFieldFieldMeta3(fieldCreateTemplateFieldFieldMeta3 FieldCreateTemplateFieldFieldMeta3) FieldCreateTemplateFieldFieldMeta {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta3

	return FieldCreateTemplateFieldFieldMeta{
		FieldCreateTemplateFieldFieldMeta3: &fieldCreateTemplateFieldFieldMeta3,
		Type:                               typ,
	}
}

func CreateFieldCreateTemplateFieldFieldMetaFieldCreateTemplateFieldFieldMeta4(fieldCreateTemplateFieldFieldMeta4 FieldCreateTemplateFieldFieldMeta4) FieldCreateTemplateFieldFieldMeta {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta4

	return FieldCreateTemplateFieldFieldMeta{
		FieldCreateTemplateFieldFieldMeta4: &fieldCreateTemplateFieldFieldMeta4,
		Type:                               typ,
	}
}

func CreateFieldCreateTemplateFieldFieldMetaFieldCreateTemplateFieldFieldMeta5(fieldCreateTemplateFieldFieldMeta5 FieldCreateTemplateFieldFieldMeta5) FieldCreateTemplateFieldFieldMeta {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta5

	return FieldCreateTemplateFieldFieldMeta{
		FieldCreateTemplateFieldFieldMeta5: &fieldCreateTemplateFieldFieldMeta5,
		Type:                               typ,
	}
}

func CreateFieldCreateTemplateFieldFieldMetaFieldCreateTemplateFieldFieldMeta6(fieldCreateTemplateFieldFieldMeta6 FieldCreateTemplateFieldFieldMeta6) FieldCreateTemplateFieldFieldMeta {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta6

	return FieldCreateTemplateFieldFieldMeta{
		FieldCreateTemplateFieldFieldMeta6: &fieldCreateTemplateFieldFieldMeta6,
		Type:                               typ,
	}
}

func CreateFieldCreateTemplateFieldFieldMetaFieldCreateTemplateFieldFieldMeta7(fieldCreateTemplateFieldFieldMeta7 FieldCreateTemplateFieldFieldMeta7) FieldCreateTemplateFieldFieldMeta {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta7

	return FieldCreateTemplateFieldFieldMeta{
		FieldCreateTemplateFieldFieldMeta7: &fieldCreateTemplateFieldFieldMeta7,
		Type:                               typ,
	}
}

func CreateFieldCreateTemplateFieldFieldMetaFieldCreateTemplateFieldFieldMeta8(fieldCreateTemplateFieldFieldMeta8 FieldCreateTemplateFieldFieldMeta8) FieldCreateTemplateFieldFieldMeta {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta8

	return FieldCreateTemplateFieldFieldMeta{
		FieldCreateTemplateFieldFieldMeta8: &fieldCreateTemplateFieldFieldMeta8,
		Type:                               typ,
	}
}

func CreateFieldCreateTemplateFieldFieldMetaFieldCreateTemplateFieldFieldMeta9(fieldCreateTemplateFieldFieldMeta9 FieldCreateTemplateFieldFieldMeta9) FieldCreateTemplateFieldFieldMeta {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta9

	return FieldCreateTemplateFieldFieldMeta{
		FieldCreateTemplateFieldFieldMeta9: &fieldCreateTemplateFieldFieldMeta9,
		Type:                               typ,
	}
}

func (u *FieldCreateTemplateFieldFieldMeta) UnmarshalJSON(data []byte) error {

	var fieldCreateTemplateFieldFieldMeta1 FieldCreateTemplateFieldFieldMeta1 = FieldCreateTemplateFieldFieldMeta1{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMeta1, "", true, true); err == nil {
		u.FieldCreateTemplateFieldFieldMeta1 = &fieldCreateTemplateFieldFieldMeta1
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta1
		return nil
	}

	var fieldCreateTemplateFieldFieldMeta2 FieldCreateTemplateFieldFieldMeta2 = FieldCreateTemplateFieldFieldMeta2{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMeta2, "", true, true); err == nil {
		u.FieldCreateTemplateFieldFieldMeta2 = &fieldCreateTemplateFieldFieldMeta2
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta2
		return nil
	}

	var fieldCreateTemplateFieldFieldMeta3 FieldCreateTemplateFieldFieldMeta3 = FieldCreateTemplateFieldFieldMeta3{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMeta3, "", true, true); err == nil {
		u.FieldCreateTemplateFieldFieldMeta3 = &fieldCreateTemplateFieldFieldMeta3
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta3
		return nil
	}

	var fieldCreateTemplateFieldFieldMeta4 FieldCreateTemplateFieldFieldMeta4 = FieldCreateTemplateFieldFieldMeta4{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMeta4, "", true, true); err == nil {
		u.FieldCreateTemplateFieldFieldMeta4 = &fieldCreateTemplateFieldFieldMeta4
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta4
		return nil
	}

	var fieldCreateTemplateFieldFieldMeta7 FieldCreateTemplateFieldFieldMeta7 = FieldCreateTemplateFieldFieldMeta7{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMeta7, "", true, true); err == nil {
		u.FieldCreateTemplateFieldFieldMeta7 = &fieldCreateTemplateFieldFieldMeta7
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta7
		return nil
	}

	var fieldCreateTemplateFieldFieldMeta9 FieldCreateTemplateFieldFieldMeta9 = FieldCreateTemplateFieldFieldMeta9{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMeta9, "", true, true); err == nil {
		u.FieldCreateTemplateFieldFieldMeta9 = &fieldCreateTemplateFieldFieldMeta9
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta9
		return nil
	}

	var fieldCreateTemplateFieldFieldMeta5 FieldCreateTemplateFieldFieldMeta5 = FieldCreateTemplateFieldFieldMeta5{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMeta5, "", true, true); err == nil {
		u.FieldCreateTemplateFieldFieldMeta5 = &fieldCreateTemplateFieldFieldMeta5
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta5
		return nil
	}

	var fieldCreateTemplateFieldFieldMeta8 FieldCreateTemplateFieldFieldMeta8 = FieldCreateTemplateFieldFieldMeta8{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMeta8, "", true, true); err == nil {
		u.FieldCreateTemplateFieldFieldMeta8 = &fieldCreateTemplateFieldFieldMeta8
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta8
		return nil
	}

	var fieldCreateTemplateFieldFieldMeta6 FieldCreateTemplateFieldFieldMeta6 = FieldCreateTemplateFieldFieldMeta6{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMeta6, "", true, true); err == nil {
		u.FieldCreateTemplateFieldFieldMeta6 = &fieldCreateTemplateFieldFieldMeta6
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMeta6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldCreateTemplateFieldFieldMeta", string(data))
}

func (u FieldCreateTemplateFieldFieldMeta) MarshalJSON() ([]byte, error) {
	if u.FieldCreateTemplateFieldFieldMeta1 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMeta1, "", true)
	}

	if u.FieldCreateTemplateFieldFieldMeta2 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMeta2, "", true)
	}

	if u.FieldCreateTemplateFieldFieldMeta3 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMeta3, "", true)
	}

	if u.FieldCreateTemplateFieldFieldMeta4 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMeta4, "", true)
	}

	if u.FieldCreateTemplateFieldFieldMeta5 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMeta5, "", true)
	}

	if u.FieldCreateTemplateFieldFieldMeta6 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMeta6, "", true)
	}

	if u.FieldCreateTemplateFieldFieldMeta7 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMeta7, "", true)
	}

	if u.FieldCreateTemplateFieldFieldMeta8 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMeta8, "", true)
	}

	if u.FieldCreateTemplateFieldFieldMeta9 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMeta9, "", true)
	}

	return nil, errors.New("could not marshal union type FieldCreateTemplateFieldFieldMeta: all fields are null")
}

// FieldCreateTemplateFieldResponseBody - Successful response
type FieldCreateTemplateFieldResponseBody struct {
	Type        FieldCreateTemplateFieldType `json:"type"`
	ID          int64                        `json:"id"`
	SecondaryID string                       `json:"secondaryId"`
	DocumentID  *int64                       `json:"documentId"`
	TemplateID  *int64                       `json:"templateId"`
	RecipientID int64                        `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                            `json:"page"`
	PositionX  any                                `json:"positionX,omitempty"`
	PositionY  any                                `json:"positionY,omitempty"`
	Width      any                                `json:"width,omitempty"`
	Height     any                                `json:"height,omitempty"`
	CustomText string                             `json:"customText"`
	Inserted   bool                               `json:"inserted"`
	FieldMeta  *FieldCreateTemplateFieldFieldMeta `json:"fieldMeta"`
}

func (o *FieldCreateTemplateFieldResponseBody) GetType() FieldCreateTemplateFieldType {
	if o == nil {
		return FieldCreateTemplateFieldType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldResponseBody) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *FieldCreateTemplateFieldResponseBody) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *FieldCreateTemplateFieldResponseBody) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *FieldCreateTemplateFieldResponseBody) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *FieldCreateTemplateFieldResponseBody) GetRecipientID() int64 {
	if o == nil {
		return 0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldResponseBody) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *FieldCreateTemplateFieldResponseBody) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *FieldCreateTemplateFieldResponseBody) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *FieldCreateTemplateFieldResponseBody) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldResponseBody) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *FieldCreateTemplateFieldResponseBody) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *FieldCreateTemplateFieldResponseBody) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *FieldCreateTemplateFieldResponseBody) GetFieldMeta() *FieldCreateTemplateFieldFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

type FieldCreateTemplateFieldResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldCreateTemplateFieldResponseBody
}

func (o *FieldCreateTemplateFieldResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FieldCreateTemplateFieldResponse) GetObject() *FieldCreateTemplateFieldResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
