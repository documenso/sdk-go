// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

// DocumentUpdateDocumentVisibilityRequest - The visibility of the document.
type DocumentUpdateDocumentVisibilityRequest string

const (
	DocumentUpdateDocumentVisibilityRequestEveryone        DocumentUpdateDocumentVisibilityRequest = "EVERYONE"
	DocumentUpdateDocumentVisibilityRequestManagerAndAbove DocumentUpdateDocumentVisibilityRequest = "MANAGER_AND_ABOVE"
	DocumentUpdateDocumentVisibilityRequestAdmin           DocumentUpdateDocumentVisibilityRequest = "ADMIN"
)

func (e DocumentUpdateDocumentVisibilityRequest) ToPointer() *DocumentUpdateDocumentVisibilityRequest {
	return &e
}
func (e *DocumentUpdateDocumentVisibilityRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = DocumentUpdateDocumentVisibilityRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentUpdateDocumentVisibilityRequest: %v", v)
	}
}

// DocumentUpdateDocumentGlobalAccessAuthRequest - The type of authentication required for the recipient to access the document.
type DocumentUpdateDocumentGlobalAccessAuthRequest string

const (
	DocumentUpdateDocumentGlobalAccessAuthRequestAccount DocumentUpdateDocumentGlobalAccessAuthRequest = "ACCOUNT"
)

func (e DocumentUpdateDocumentGlobalAccessAuthRequest) ToPointer() *DocumentUpdateDocumentGlobalAccessAuthRequest {
	return &e
}
func (e *DocumentUpdateDocumentGlobalAccessAuthRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = DocumentUpdateDocumentGlobalAccessAuthRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentUpdateDocumentGlobalAccessAuthRequest: %v", v)
	}
}

// DocumentUpdateDocumentGlobalActionAuthRequest - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type DocumentUpdateDocumentGlobalActionAuthRequest string

const (
	DocumentUpdateDocumentGlobalActionAuthRequestAccount       DocumentUpdateDocumentGlobalActionAuthRequest = "ACCOUNT"
	DocumentUpdateDocumentGlobalActionAuthRequestPasskey       DocumentUpdateDocumentGlobalActionAuthRequest = "PASSKEY"
	DocumentUpdateDocumentGlobalActionAuthRequestTwoFactorAuth DocumentUpdateDocumentGlobalActionAuthRequest = "TWO_FACTOR_AUTH"
	DocumentUpdateDocumentGlobalActionAuthRequestPassword      DocumentUpdateDocumentGlobalActionAuthRequest = "PASSWORD"
)

func (e DocumentUpdateDocumentGlobalActionAuthRequest) ToPointer() *DocumentUpdateDocumentGlobalActionAuthRequest {
	return &e
}
func (e *DocumentUpdateDocumentGlobalActionAuthRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		*e = DocumentUpdateDocumentGlobalActionAuthRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentUpdateDocumentGlobalActionAuthRequest: %v", v)
	}
}

type DocumentUpdateDocumentData struct {
	// The title of the document.
	Title *string `json:"title,omitempty"`
	// The external ID of the document.
	ExternalID *string `json:"externalId,omitempty"`
	// The visibility of the document.
	Visibility              *DocumentUpdateDocumentVisibilityRequest        `json:"visibility,omitempty"`
	GlobalAccessAuth        []DocumentUpdateDocumentGlobalAccessAuthRequest `json:"globalAccessAuth,omitempty"`
	GlobalActionAuth        []DocumentUpdateDocumentGlobalActionAuthRequest `json:"globalActionAuth,omitempty"`
	UseLegacyFieldInsertion *bool                                           `json:"useLegacyFieldInsertion,omitempty"`
}

func (o *DocumentUpdateDocumentData) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *DocumentUpdateDocumentData) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *DocumentUpdateDocumentData) GetVisibility() *DocumentUpdateDocumentVisibilityRequest {
	if o == nil {
		return nil
	}
	return o.Visibility
}

func (o *DocumentUpdateDocumentData) GetGlobalAccessAuth() []DocumentUpdateDocumentGlobalAccessAuthRequest {
	if o == nil {
		return nil
	}
	return o.GlobalAccessAuth
}

func (o *DocumentUpdateDocumentData) GetGlobalActionAuth() []DocumentUpdateDocumentGlobalActionAuthRequest {
	if o == nil {
		return nil
	}
	return o.GlobalActionAuth
}

func (o *DocumentUpdateDocumentData) GetUseLegacyFieldInsertion() *bool {
	if o == nil {
		return nil
	}
	return o.UseLegacyFieldInsertion
}

// DocumentUpdateDocumentDateFormat - The date format to use for date fields and signing the document.
type DocumentUpdateDocumentDateFormat string

const (
	DocumentUpdateDocumentDateFormatYyyyMmDdHhMmA         DocumentUpdateDocumentDateFormat = "yyyy-MM-dd hh:mm a"
	DocumentUpdateDocumentDateFormatYyyyMmDd              DocumentUpdateDocumentDateFormat = "yyyy-MM-dd"
	DocumentUpdateDocumentDateFormatDdMmYyyyHhMmA         DocumentUpdateDocumentDateFormat = "dd/MM/yyyy hh:mm a"
	DocumentUpdateDocumentDateFormatMmDdYyyyHhMmA         DocumentUpdateDocumentDateFormat = "MM/dd/yyyy hh:mm a"
	DocumentUpdateDocumentDateFormatYyyyMmDdHhMm          DocumentUpdateDocumentDateFormat = "yyyy-MM-dd HH:mm"
	DocumentUpdateDocumentDateFormatYyMmDdHhMmA           DocumentUpdateDocumentDateFormat = "yy-MM-dd hh:mm a"
	DocumentUpdateDocumentDateFormatYyyyMmDdHhMmSs        DocumentUpdateDocumentDateFormat = "yyyy-MM-dd HH:mm:ss"
	DocumentUpdateDocumentDateFormatMmmmDdYyyyHhMmA       DocumentUpdateDocumentDateFormat = "MMMM dd, yyyy hh:mm a"
	DocumentUpdateDocumentDateFormatEeeeMmmmDdYyyyHhMmA   DocumentUpdateDocumentDateFormat = "EEEE, MMMM dd, yyyy hh:mm a"
	DocumentUpdateDocumentDateFormatYyyyMmDdTHhMmSsSssxxx DocumentUpdateDocumentDateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSXXX"
)

func (e DocumentUpdateDocumentDateFormat) ToPointer() *DocumentUpdateDocumentDateFormat {
	return &e
}
func (e *DocumentUpdateDocumentDateFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "yyyy-MM-dd hh:mm a":
		fallthrough
	case "yyyy-MM-dd":
		fallthrough
	case "dd/MM/yyyy hh:mm a":
		fallthrough
	case "MM/dd/yyyy hh:mm a":
		fallthrough
	case "yyyy-MM-dd HH:mm":
		fallthrough
	case "yy-MM-dd hh:mm a":
		fallthrough
	case "yyyy-MM-dd HH:mm:ss":
		fallthrough
	case "MMMM dd, yyyy hh:mm a":
		fallthrough
	case "EEEE, MMMM dd, yyyy hh:mm a":
		fallthrough
	case "yyyy-MM-dd'T'HH:mm:ss.SSSXXX":
		*e = DocumentUpdateDocumentDateFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentUpdateDocumentDateFormat: %v", v)
	}
}

// DocumentUpdateDocumentDistributionMethod - The distribution method to use when sending the document to the recipients.
type DocumentUpdateDocumentDistributionMethod string

const (
	DocumentUpdateDocumentDistributionMethodEmail DocumentUpdateDocumentDistributionMethod = "EMAIL"
	DocumentUpdateDocumentDistributionMethodNone  DocumentUpdateDocumentDistributionMethod = "NONE"
)

func (e DocumentUpdateDocumentDistributionMethod) ToPointer() *DocumentUpdateDocumentDistributionMethod {
	return &e
}
func (e *DocumentUpdateDocumentDistributionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = DocumentUpdateDocumentDistributionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentUpdateDocumentDistributionMethod: %v", v)
	}
}

type DocumentUpdateDocumentSigningOrder string

const (
	DocumentUpdateDocumentSigningOrderParallel   DocumentUpdateDocumentSigningOrder = "PARALLEL"
	DocumentUpdateDocumentSigningOrderSequential DocumentUpdateDocumentSigningOrder = "SEQUENTIAL"
)

func (e DocumentUpdateDocumentSigningOrder) ToPointer() *DocumentUpdateDocumentSigningOrder {
	return &e
}
func (e *DocumentUpdateDocumentSigningOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARALLEL":
		fallthrough
	case "SEQUENTIAL":
		*e = DocumentUpdateDocumentSigningOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentUpdateDocumentSigningOrder: %v", v)
	}
}

// DocumentUpdateDocumentLanguage - The language to use for email communications with recipients.
type DocumentUpdateDocumentLanguage string

const (
	DocumentUpdateDocumentLanguageDe DocumentUpdateDocumentLanguage = "de"
	DocumentUpdateDocumentLanguageEn DocumentUpdateDocumentLanguage = "en"
	DocumentUpdateDocumentLanguageFr DocumentUpdateDocumentLanguage = "fr"
	DocumentUpdateDocumentLanguageEs DocumentUpdateDocumentLanguage = "es"
	DocumentUpdateDocumentLanguageIt DocumentUpdateDocumentLanguage = "it"
	DocumentUpdateDocumentLanguagePl DocumentUpdateDocumentLanguage = "pl"
)

func (e DocumentUpdateDocumentLanguage) ToPointer() *DocumentUpdateDocumentLanguage {
	return &e
}
func (e *DocumentUpdateDocumentLanguage) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "de":
		fallthrough
	case "en":
		fallthrough
	case "fr":
		fallthrough
	case "es":
		fallthrough
	case "it":
		fallthrough
	case "pl":
		*e = DocumentUpdateDocumentLanguage(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentUpdateDocumentLanguage: %v", v)
	}
}

type DocumentUpdateDocumentEmailSettings struct {
	// Whether to send an email to all recipients that the document is ready for them to sign.
	RecipientSigningRequest *bool `default:"true" json:"recipientSigningRequest"`
	// Whether to send an email to the recipient who was removed from a pending document.
	RecipientRemoved *bool `default:"true" json:"recipientRemoved"`
	// Whether to send an email to the document owner when a recipient has signed the document.
	RecipientSigned *bool `default:"true" json:"recipientSigned"`
	// Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
	DocumentPending *bool `default:"true" json:"documentPending"`
	// Whether to send an email to all recipients when the document is complete.
	DocumentCompleted *bool `default:"true" json:"documentCompleted"`
	// Whether to send an email to all recipients if a pending document has been deleted.
	DocumentDeleted *bool `default:"true" json:"documentDeleted"`
	// Whether to send an email to the document owner when the document is complete.
	OwnerDocumentCompleted *bool `default:"true" json:"ownerDocumentCompleted"`
}

func (d DocumentUpdateDocumentEmailSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentUpdateDocumentEmailSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *DocumentUpdateDocumentEmailSettings) GetRecipientSigningRequest() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigningRequest
}

func (o *DocumentUpdateDocumentEmailSettings) GetRecipientRemoved() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientRemoved
}

func (o *DocumentUpdateDocumentEmailSettings) GetRecipientSigned() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigned
}

func (o *DocumentUpdateDocumentEmailSettings) GetDocumentPending() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentPending
}

func (o *DocumentUpdateDocumentEmailSettings) GetDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentCompleted
}

func (o *DocumentUpdateDocumentEmailSettings) GetDocumentDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentDeleted
}

func (o *DocumentUpdateDocumentEmailSettings) GetOwnerDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.OwnerDocumentCompleted
}

type DocumentUpdateDocumentMeta struct {
	// The subject of the email that will be sent to the recipients.
	Subject *string `json:"subject,omitempty"`
	// The message of the email that will be sent to the recipients.
	Message *string `json:"message,omitempty"`
	// The timezone to use for date fields and signing the document. Example Etc/UTC, Australia/Melbourne
	Timezone *string `json:"timezone,omitempty"`
	// The date format to use for date fields and signing the document.
	DateFormat *DocumentUpdateDocumentDateFormat `json:"dateFormat,omitempty"`
	// The distribution method to use when sending the document to the recipients.
	DistributionMethod     *DocumentUpdateDocumentDistributionMethod `json:"distributionMethod,omitempty"`
	SigningOrder           *DocumentUpdateDocumentSigningOrder       `json:"signingOrder,omitempty"`
	AllowDictateNextSigner *bool                                     `json:"allowDictateNextSigner,omitempty"`
	// The URL to which the recipient should be redirected after signing the document.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The language to use for email communications with recipients.
	Language *DocumentUpdateDocumentLanguage `json:"language,omitempty"`
	// Whether to allow recipients to sign using a typed signature.
	TypedSignatureEnabled *bool `json:"typedSignatureEnabled,omitempty"`
	// Whether to allow recipients to sign using an uploaded signature.
	UploadSignatureEnabled *bool `json:"uploadSignatureEnabled,omitempty"`
	// Whether to allow recipients to sign using a draw signature.
	DrawSignatureEnabled *bool                                `json:"drawSignatureEnabled,omitempty"`
	EmailSettings        *DocumentUpdateDocumentEmailSettings `json:"emailSettings,omitempty"`
}

func (o *DocumentUpdateDocumentMeta) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *DocumentUpdateDocumentMeta) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *DocumentUpdateDocumentMeta) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *DocumentUpdateDocumentMeta) GetDateFormat() *DocumentUpdateDocumentDateFormat {
	if o == nil {
		return nil
	}
	return o.DateFormat
}

func (o *DocumentUpdateDocumentMeta) GetDistributionMethod() *DocumentUpdateDocumentDistributionMethod {
	if o == nil {
		return nil
	}
	return o.DistributionMethod
}

func (o *DocumentUpdateDocumentMeta) GetSigningOrder() *DocumentUpdateDocumentSigningOrder {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *DocumentUpdateDocumentMeta) GetAllowDictateNextSigner() *bool {
	if o == nil {
		return nil
	}
	return o.AllowDictateNextSigner
}

func (o *DocumentUpdateDocumentMeta) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *DocumentUpdateDocumentMeta) GetLanguage() *DocumentUpdateDocumentLanguage {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *DocumentUpdateDocumentMeta) GetTypedSignatureEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.TypedSignatureEnabled
}

func (o *DocumentUpdateDocumentMeta) GetUploadSignatureEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.UploadSignatureEnabled
}

func (o *DocumentUpdateDocumentMeta) GetDrawSignatureEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.DrawSignatureEnabled
}

func (o *DocumentUpdateDocumentMeta) GetEmailSettings() *DocumentUpdateDocumentEmailSettings {
	if o == nil {
		return nil
	}
	return o.EmailSettings
}

type DocumentUpdateDocumentRequest struct {
	DocumentID float64                     `json:"documentId"`
	Data       *DocumentUpdateDocumentData `json:"data,omitempty"`
	Meta       *DocumentUpdateDocumentMeta `json:"meta,omitempty"`
}

func (o *DocumentUpdateDocumentRequest) GetDocumentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DocumentID
}

func (o *DocumentUpdateDocumentRequest) GetData() *DocumentUpdateDocumentData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *DocumentUpdateDocumentRequest) GetMeta() *DocumentUpdateDocumentMeta {
	if o == nil {
		return nil
	}
	return o.Meta
}

type DocumentUpdateDocumentVisibilityResponse string

const (
	DocumentUpdateDocumentVisibilityResponseEveryone        DocumentUpdateDocumentVisibilityResponse = "EVERYONE"
	DocumentUpdateDocumentVisibilityResponseManagerAndAbove DocumentUpdateDocumentVisibilityResponse = "MANAGER_AND_ABOVE"
	DocumentUpdateDocumentVisibilityResponseAdmin           DocumentUpdateDocumentVisibilityResponse = "ADMIN"
)

func (e DocumentUpdateDocumentVisibilityResponse) ToPointer() *DocumentUpdateDocumentVisibilityResponse {
	return &e
}
func (e *DocumentUpdateDocumentVisibilityResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = DocumentUpdateDocumentVisibilityResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentUpdateDocumentVisibilityResponse: %v", v)
	}
}

type DocumentUpdateDocumentStatus string

const (
	DocumentUpdateDocumentStatusDraft     DocumentUpdateDocumentStatus = "DRAFT"
	DocumentUpdateDocumentStatusPending   DocumentUpdateDocumentStatus = "PENDING"
	DocumentUpdateDocumentStatusCompleted DocumentUpdateDocumentStatus = "COMPLETED"
	DocumentUpdateDocumentStatusRejected  DocumentUpdateDocumentStatus = "REJECTED"
)

func (e DocumentUpdateDocumentStatus) ToPointer() *DocumentUpdateDocumentStatus {
	return &e
}
func (e *DocumentUpdateDocumentStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "PENDING":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "REJECTED":
		*e = DocumentUpdateDocumentStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentUpdateDocumentStatus: %v", v)
	}
}

type DocumentUpdateDocumentSource string

const (
	DocumentUpdateDocumentSourceDocument           DocumentUpdateDocumentSource = "DOCUMENT"
	DocumentUpdateDocumentSourceTemplate           DocumentUpdateDocumentSource = "TEMPLATE"
	DocumentUpdateDocumentSourceTemplateDirectLink DocumentUpdateDocumentSource = "TEMPLATE_DIRECT_LINK"
)

func (e DocumentUpdateDocumentSource) ToPointer() *DocumentUpdateDocumentSource {
	return &e
}
func (e *DocumentUpdateDocumentSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		fallthrough
	case "TEMPLATE_DIRECT_LINK":
		*e = DocumentUpdateDocumentSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentUpdateDocumentSource: %v", v)
	}
}

// DocumentUpdateDocumentGlobalAccessAuthResponse - The type of authentication required for the recipient to access the document.
type DocumentUpdateDocumentGlobalAccessAuthResponse string

const (
	DocumentUpdateDocumentGlobalAccessAuthResponseAccount DocumentUpdateDocumentGlobalAccessAuthResponse = "ACCOUNT"
)

func (e DocumentUpdateDocumentGlobalAccessAuthResponse) ToPointer() *DocumentUpdateDocumentGlobalAccessAuthResponse {
	return &e
}
func (e *DocumentUpdateDocumentGlobalAccessAuthResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = DocumentUpdateDocumentGlobalAccessAuthResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentUpdateDocumentGlobalAccessAuthResponse: %v", v)
	}
}

// DocumentUpdateDocumentGlobalActionAuthResponse - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type DocumentUpdateDocumentGlobalActionAuthResponse string

const (
	DocumentUpdateDocumentGlobalActionAuthResponseAccount       DocumentUpdateDocumentGlobalActionAuthResponse = "ACCOUNT"
	DocumentUpdateDocumentGlobalActionAuthResponsePasskey       DocumentUpdateDocumentGlobalActionAuthResponse = "PASSKEY"
	DocumentUpdateDocumentGlobalActionAuthResponseTwoFactorAuth DocumentUpdateDocumentGlobalActionAuthResponse = "TWO_FACTOR_AUTH"
	DocumentUpdateDocumentGlobalActionAuthResponsePassword      DocumentUpdateDocumentGlobalActionAuthResponse = "PASSWORD"
)

func (e DocumentUpdateDocumentGlobalActionAuthResponse) ToPointer() *DocumentUpdateDocumentGlobalActionAuthResponse {
	return &e
}
func (e *DocumentUpdateDocumentGlobalActionAuthResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		*e = DocumentUpdateDocumentGlobalActionAuthResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentUpdateDocumentGlobalActionAuthResponse: %v", v)
	}
}

type DocumentUpdateDocumentAuthOptions struct {
	GlobalAccessAuth []DocumentUpdateDocumentGlobalAccessAuthResponse `json:"globalAccessAuth"`
	GlobalActionAuth []DocumentUpdateDocumentGlobalActionAuthResponse `json:"globalActionAuth"`
}

func (o *DocumentUpdateDocumentAuthOptions) GetGlobalAccessAuth() []DocumentUpdateDocumentGlobalAccessAuthResponse {
	if o == nil {
		return []DocumentUpdateDocumentGlobalAccessAuthResponse{}
	}
	return o.GlobalAccessAuth
}

func (o *DocumentUpdateDocumentAuthOptions) GetGlobalActionAuth() []DocumentUpdateDocumentGlobalActionAuthResponse {
	if o == nil {
		return []DocumentUpdateDocumentGlobalActionAuthResponse{}
	}
	return o.GlobalActionAuth
}

type DocumentUpdateDocumentFormValuesType string

const (
	DocumentUpdateDocumentFormValuesTypeStr     DocumentUpdateDocumentFormValuesType = "str"
	DocumentUpdateDocumentFormValuesTypeBoolean DocumentUpdateDocumentFormValuesType = "boolean"
	DocumentUpdateDocumentFormValuesTypeNumber  DocumentUpdateDocumentFormValuesType = "number"
)

type DocumentUpdateDocumentFormValues struct {
	Str     *string  `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`
	Number  *float64 `queryParam:"inline"`

	Type DocumentUpdateDocumentFormValuesType
}

func CreateDocumentUpdateDocumentFormValuesStr(str string) DocumentUpdateDocumentFormValues {
	typ := DocumentUpdateDocumentFormValuesTypeStr

	return DocumentUpdateDocumentFormValues{
		Str:  &str,
		Type: typ,
	}
}

func CreateDocumentUpdateDocumentFormValuesBoolean(boolean bool) DocumentUpdateDocumentFormValues {
	typ := DocumentUpdateDocumentFormValuesTypeBoolean

	return DocumentUpdateDocumentFormValues{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateDocumentUpdateDocumentFormValuesNumber(number float64) DocumentUpdateDocumentFormValues {
	typ := DocumentUpdateDocumentFormValuesTypeNumber

	return DocumentUpdateDocumentFormValues{
		Number: &number,
		Type:   typ,
	}
}

func (u *DocumentUpdateDocumentFormValues) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = DocumentUpdateDocumentFormValuesTypeStr
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = DocumentUpdateDocumentFormValuesTypeBoolean
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = DocumentUpdateDocumentFormValuesTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DocumentUpdateDocumentFormValues", string(data))
}

func (u DocumentUpdateDocumentFormValues) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type DocumentUpdateDocumentFormValues: all fields are null")
}

// DocumentUpdateDocumentResponseBody - Successful response
type DocumentUpdateDocumentResponseBody struct {
	Visibility DocumentUpdateDocumentVisibilityResponse `json:"visibility"`
	Status     DocumentUpdateDocumentStatus             `json:"status"`
	Source     DocumentUpdateDocumentSource             `json:"source"`
	ID         float64                                  `json:"id"`
	// A custom external ID you can use to identify the document.
	ExternalID *string `json:"externalId"`
	// The ID of the user that created this document.
	UserID                  float64                                     `json:"userId"`
	AuthOptions             *DocumentUpdateDocumentAuthOptions          `json:"authOptions"`
	FormValues              map[string]DocumentUpdateDocumentFormValues `json:"formValues"`
	Title                   string                                      `json:"title"`
	DocumentDataID          string                                      `json:"documentDataId"`
	CreatedAt               string                                      `json:"createdAt"`
	UpdatedAt               string                                      `json:"updatedAt"`
	CompletedAt             *string                                     `json:"completedAt"`
	DeletedAt               *string                                     `json:"deletedAt"`
	TeamID                  float64                                     `json:"teamId"`
	TemplateID              *float64                                    `json:"templateId"`
	FolderID                *string                                     `json:"folderId"`
	UseLegacyFieldInsertion bool                                        `json:"useLegacyFieldInsertion"`
}

func (o *DocumentUpdateDocumentResponseBody) GetVisibility() DocumentUpdateDocumentVisibilityResponse {
	if o == nil {
		return DocumentUpdateDocumentVisibilityResponse("")
	}
	return o.Visibility
}

func (o *DocumentUpdateDocumentResponseBody) GetStatus() DocumentUpdateDocumentStatus {
	if o == nil {
		return DocumentUpdateDocumentStatus("")
	}
	return o.Status
}

func (o *DocumentUpdateDocumentResponseBody) GetSource() DocumentUpdateDocumentSource {
	if o == nil {
		return DocumentUpdateDocumentSource("")
	}
	return o.Source
}

func (o *DocumentUpdateDocumentResponseBody) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *DocumentUpdateDocumentResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *DocumentUpdateDocumentResponseBody) GetUserID() float64 {
	if o == nil {
		return 0.0
	}
	return o.UserID
}

func (o *DocumentUpdateDocumentResponseBody) GetAuthOptions() *DocumentUpdateDocumentAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *DocumentUpdateDocumentResponseBody) GetFormValues() map[string]DocumentUpdateDocumentFormValues {
	if o == nil {
		return nil
	}
	return o.FormValues
}

func (o *DocumentUpdateDocumentResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *DocumentUpdateDocumentResponseBody) GetDocumentDataID() string {
	if o == nil {
		return ""
	}
	return o.DocumentDataID
}

func (o *DocumentUpdateDocumentResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *DocumentUpdateDocumentResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *DocumentUpdateDocumentResponseBody) GetCompletedAt() *string {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *DocumentUpdateDocumentResponseBody) GetDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *DocumentUpdateDocumentResponseBody) GetTeamID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TeamID
}

func (o *DocumentUpdateDocumentResponseBody) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *DocumentUpdateDocumentResponseBody) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

func (o *DocumentUpdateDocumentResponseBody) GetUseLegacyFieldInsertion() bool {
	if o == nil {
		return false
	}
	return o.UseLegacyFieldInsertion
}

type DocumentUpdateDocumentResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *DocumentUpdateDocumentResponseBody
}

func (o *DocumentUpdateDocumentResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *DocumentUpdateDocumentResponse) GetObject() *DocumentUpdateDocumentResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
