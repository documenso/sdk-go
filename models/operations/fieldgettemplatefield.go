// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldGetTemplateFieldRequest struct {
	FieldID float64 `pathParam:"style=simple,explode=false,name=fieldId"`
}

func (o *FieldGetTemplateFieldRequest) GetFieldID() float64 {
	if o == nil {
		return 0.0
	}
	return o.FieldID
}

type FieldGetTemplateFieldType string

const (
	FieldGetTemplateFieldTypeSignature     FieldGetTemplateFieldType = "SIGNATURE"
	FieldGetTemplateFieldTypeFreeSignature FieldGetTemplateFieldType = "FREE_SIGNATURE"
	FieldGetTemplateFieldTypeInitials      FieldGetTemplateFieldType = "INITIALS"
	FieldGetTemplateFieldTypeName          FieldGetTemplateFieldType = "NAME"
	FieldGetTemplateFieldTypeEmail         FieldGetTemplateFieldType = "EMAIL"
	FieldGetTemplateFieldTypeDate          FieldGetTemplateFieldType = "DATE"
	FieldGetTemplateFieldTypeText          FieldGetTemplateFieldType = "TEXT"
	FieldGetTemplateFieldTypeNumber        FieldGetTemplateFieldType = "NUMBER"
	FieldGetTemplateFieldTypeRadio         FieldGetTemplateFieldType = "RADIO"
	FieldGetTemplateFieldTypeCheckbox      FieldGetTemplateFieldType = "CHECKBOX"
	FieldGetTemplateFieldTypeDropdown      FieldGetTemplateFieldType = "DROPDOWN"
)

func (e FieldGetTemplateFieldType) ToPointer() *FieldGetTemplateFieldType {
	return &e
}
func (e *FieldGetTemplateFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldGetTemplateFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldType: %v", v)
	}
}

type FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type string

const (
	FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9TypeDropdown FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type = "dropdown"
)

func (e FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type) ToPointer() *FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type: %v", v)
	}
}

type FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues struct {
	Value string `json:"value"`
}

func (o *FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldGetTemplateFieldFieldMeta9 struct {
	Label        *string                                                                                  `json:"label,omitempty"`
	Placeholder  *string                                                                                  `json:"placeholder,omitempty"`
	Required     *bool                                                                                    `json:"required,omitempty"`
	ReadOnly     *bool                                                                                    `json:"readOnly,omitempty"`
	Type         FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type `json:"type"`
	Values       []FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues                            `json:"values,omitempty"`
	DefaultValue *string                                                                                  `json:"defaultValue,omitempty"`
}

func (o *FieldGetTemplateFieldFieldMeta9) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldGetTemplateFieldFieldMeta9) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldGetTemplateFieldFieldMeta9) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldGetTemplateFieldFieldMeta9) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldGetTemplateFieldFieldMeta9) GetType() FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type {
	if o == nil {
		return FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type("")
	}
	return o.Type
}

func (o *FieldGetTemplateFieldFieldMeta9) GetValues() []FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldGetTemplateFieldFieldMeta9) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type string

const (
	FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8TypeCheckbox FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type = "checkbox"
)

func (e FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type) ToPointer() *FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type: %v", v)
	}
}

type FieldGetTemplateFieldFieldMetaTemplatesFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldGetTemplateFieldFieldMetaTemplatesFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldGetTemplateFieldFieldMetaTemplatesFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldGetTemplateFieldFieldMetaTemplatesFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldGetTemplateFieldFieldMeta8 struct {
	Label            *string                                                                                  `json:"label,omitempty"`
	Placeholder      *string                                                                                  `json:"placeholder,omitempty"`
	Required         *bool                                                                                    `json:"required,omitempty"`
	ReadOnly         *bool                                                                                    `json:"readOnly,omitempty"`
	Type             FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type `json:"type"`
	Values           []FieldGetTemplateFieldFieldMetaTemplatesFieldsValues                                    `json:"values,omitempty"`
	ValidationRule   *string                                                                                  `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                                 `json:"validationLength,omitempty"`
}

func (o *FieldGetTemplateFieldFieldMeta8) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldGetTemplateFieldFieldMeta8) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldGetTemplateFieldFieldMeta8) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldGetTemplateFieldFieldMeta8) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldGetTemplateFieldFieldMeta8) GetType() FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type {
	if o == nil {
		return FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type("")
	}
	return o.Type
}

func (o *FieldGetTemplateFieldFieldMeta8) GetValues() []FieldGetTemplateFieldFieldMetaTemplatesFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldGetTemplateFieldFieldMeta8) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldGetTemplateFieldFieldMeta8) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type string

const (
	FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7TypeRadio FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type = "radio"
)

func (e FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type) ToPointer() *FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type: %v", v)
	}
}

type FieldGetTemplateFieldFieldMetaValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldGetTemplateFieldFieldMetaValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldGetTemplateFieldFieldMetaValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldGetTemplateFieldFieldMetaValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldGetTemplateFieldFieldMeta7 struct {
	Label       *string                                                                                  `json:"label,omitempty"`
	Placeholder *string                                                                                  `json:"placeholder,omitempty"`
	Required    *bool                                                                                    `json:"required,omitempty"`
	ReadOnly    *bool                                                                                    `json:"readOnly,omitempty"`
	Type        FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type `json:"type"`
	Values      []FieldGetTemplateFieldFieldMetaValues                                                   `json:"values,omitempty"`
}

func (o *FieldGetTemplateFieldFieldMeta7) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldGetTemplateFieldFieldMeta7) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldGetTemplateFieldFieldMeta7) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldGetTemplateFieldFieldMeta7) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldGetTemplateFieldFieldMeta7) GetType() FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type {
	if o == nil {
		return FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type("")
	}
	return o.Type
}

func (o *FieldGetTemplateFieldFieldMeta7) GetValues() []FieldGetTemplateFieldFieldMetaValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType string

const (
	FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyTypeNumber FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType = "number"
)

func (e FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType) ToPointer() *FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type FieldGetTemplateFieldFieldMeta6 struct {
	Label        *string                                                                                 `json:"label,omitempty"`
	Placeholder  *string                                                                                 `json:"placeholder,omitempty"`
	Required     *bool                                                                                   `json:"required,omitempty"`
	ReadOnly     *bool                                                                                   `json:"readOnly,omitempty"`
	Type         FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType `json:"type"`
	NumberFormat *string                                                                                 `json:"numberFormat,omitempty"`
	Value        *string                                                                                 `json:"value,omitempty"`
	MinValue     *float64                                                                                `json:"minValue,omitempty"`
	MaxValue     *float64                                                                                `json:"maxValue,omitempty"`
	FontSize     *float64                                                                                `json:"fontSize,omitempty"`
}

func (o *FieldGetTemplateFieldFieldMeta6) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldGetTemplateFieldFieldMeta6) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldGetTemplateFieldFieldMeta6) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldGetTemplateFieldFieldMeta6) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldGetTemplateFieldFieldMeta6) GetType() FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *FieldGetTemplateFieldFieldMeta6) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldGetTemplateFieldFieldMeta6) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldGetTemplateFieldFieldMeta6) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldGetTemplateFieldFieldMeta6) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldGetTemplateFieldFieldMeta6) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType string

const (
	FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONTypeText FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType = "text"
)

func (e FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType) ToPointer() *FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType: %v", v)
	}
}

type FieldGetTemplateFieldFieldMeta5 struct {
	Label          *string                                                                     `json:"label,omitempty"`
	Placeholder    *string                                                                     `json:"placeholder,omitempty"`
	Required       *bool                                                                       `json:"required,omitempty"`
	ReadOnly       *bool                                                                       `json:"readOnly,omitempty"`
	Type           FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType `json:"type"`
	Text           *string                                                                     `json:"text,omitempty"`
	CharacterLimit *float64                                                                    `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                    `json:"fontSize,omitempty"`
}

func (o *FieldGetTemplateFieldFieldMeta5) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldGetTemplateFieldFieldMeta5) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldGetTemplateFieldFieldMeta5) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldGetTemplateFieldFieldMeta5) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldGetTemplateFieldFieldMeta5) GetType() FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType {
	if o == nil {
		return FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *FieldGetTemplateFieldFieldMeta5) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldGetTemplateFieldFieldMeta5) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldGetTemplateFieldFieldMeta5) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type string

const (
	FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200TypeDate FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type = "date"
)

func (e FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type) ToPointer() *FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type: %v", v)
	}
}

type FieldGetTemplateFieldFieldMeta4 struct {
	Label       *string                                                      `json:"label,omitempty"`
	Placeholder *string                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                        `json:"readOnly,omitempty"`
	Type        FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type `json:"type"`
	FontSize    *float64                                                     `json:"fontSize,omitempty"`
}

func (o *FieldGetTemplateFieldFieldMeta4) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldGetTemplateFieldFieldMeta4) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldGetTemplateFieldFieldMeta4) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldGetTemplateFieldFieldMeta4) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldGetTemplateFieldFieldMeta4) GetType() FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type {
	if o == nil {
		return FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type("")
	}
	return o.Type
}

func (o *FieldGetTemplateFieldFieldMeta4) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType string

const (
	FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseTypeEmail FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType = "email"
)

func (e FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType) ToPointer() *FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType: %v", v)
	}
}

type FieldGetTemplateFieldFieldMeta3 struct {
	Label       *string                                                   `json:"label,omitempty"`
	Placeholder *string                                                   `json:"placeholder,omitempty"`
	Required    *bool                                                     `json:"required,omitempty"`
	ReadOnly    *bool                                                     `json:"readOnly,omitempty"`
	Type        FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType `json:"type"`
	FontSize    *float64                                                  `json:"fontSize,omitempty"`
}

func (o *FieldGetTemplateFieldFieldMeta3) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldGetTemplateFieldFieldMeta3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldGetTemplateFieldFieldMeta3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldGetTemplateFieldFieldMeta3) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldGetTemplateFieldFieldMeta3) GetType() FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType {
	if o == nil {
		return FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType("")
	}
	return o.Type
}

func (o *FieldGetTemplateFieldFieldMeta3) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldGetTemplateFieldFieldMetaTemplatesFieldsType string

const (
	FieldGetTemplateFieldFieldMetaTemplatesFieldsTypeName FieldGetTemplateFieldFieldMetaTemplatesFieldsType = "name"
)

func (e FieldGetTemplateFieldFieldMetaTemplatesFieldsType) ToPointer() *FieldGetTemplateFieldFieldMetaTemplatesFieldsType {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaTemplatesFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldGetTemplateFieldFieldMetaTemplatesFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaTemplatesFieldsType: %v", v)
	}
}

type FieldGetTemplateFieldFieldMeta2 struct {
	Label       *string                                           `json:"label,omitempty"`
	Placeholder *string                                           `json:"placeholder,omitempty"`
	Required    *bool                                             `json:"required,omitempty"`
	ReadOnly    *bool                                             `json:"readOnly,omitempty"`
	Type        FieldGetTemplateFieldFieldMetaTemplatesFieldsType `json:"type"`
	FontSize    *float64                                          `json:"fontSize,omitempty"`
}

func (o *FieldGetTemplateFieldFieldMeta2) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldGetTemplateFieldFieldMeta2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldGetTemplateFieldFieldMeta2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldGetTemplateFieldFieldMeta2) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldGetTemplateFieldFieldMeta2) GetType() FieldGetTemplateFieldFieldMetaTemplatesFieldsType {
	if o == nil {
		return FieldGetTemplateFieldFieldMetaTemplatesFieldsType("")
	}
	return o.Type
}

func (o *FieldGetTemplateFieldFieldMeta2) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldGetTemplateFieldFieldMetaType string

const (
	FieldGetTemplateFieldFieldMetaTypeInitials FieldGetTemplateFieldFieldMetaType = "initials"
)

func (e FieldGetTemplateFieldFieldMetaType) ToPointer() *FieldGetTemplateFieldFieldMetaType {
	return &e
}
func (e *FieldGetTemplateFieldFieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldGetTemplateFieldFieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetTemplateFieldFieldMetaType: %v", v)
	}
}

type FieldGetTemplateFieldFieldMeta1 struct {
	Label       *string                            `json:"label,omitempty"`
	Placeholder *string                            `json:"placeholder,omitempty"`
	Required    *bool                              `json:"required,omitempty"`
	ReadOnly    *bool                              `json:"readOnly,omitempty"`
	Type        FieldGetTemplateFieldFieldMetaType `json:"type"`
	FontSize    *float64                           `json:"fontSize,omitempty"`
}

func (o *FieldGetTemplateFieldFieldMeta1) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldGetTemplateFieldFieldMeta1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldGetTemplateFieldFieldMeta1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldGetTemplateFieldFieldMeta1) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldGetTemplateFieldFieldMeta1) GetType() FieldGetTemplateFieldFieldMetaType {
	if o == nil {
		return FieldGetTemplateFieldFieldMetaType("")
	}
	return o.Type
}

func (o *FieldGetTemplateFieldFieldMeta1) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldGetTemplateFieldFieldMetaUnionType string

const (
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta1 FieldGetTemplateFieldFieldMetaUnionType = "field-getTemplateField_fieldMeta_1"
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta2 FieldGetTemplateFieldFieldMetaUnionType = "field-getTemplateField_fieldMeta_2"
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta3 FieldGetTemplateFieldFieldMetaUnionType = "field-getTemplateField_fieldMeta_3"
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta4 FieldGetTemplateFieldFieldMetaUnionType = "field-getTemplateField_fieldMeta_4"
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta5 FieldGetTemplateFieldFieldMetaUnionType = "field-getTemplateField_fieldMeta_5"
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta6 FieldGetTemplateFieldFieldMetaUnionType = "field-getTemplateField_fieldMeta_6"
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta7 FieldGetTemplateFieldFieldMetaUnionType = "field-getTemplateField_fieldMeta_7"
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta8 FieldGetTemplateFieldFieldMetaUnionType = "field-getTemplateField_fieldMeta_8"
	FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta9 FieldGetTemplateFieldFieldMetaUnionType = "field-getTemplateField_fieldMeta_9"
)

type FieldGetTemplateFieldFieldMeta struct {
	FieldGetTemplateFieldFieldMeta1 *FieldGetTemplateFieldFieldMeta1 `queryParam:"inline"`
	FieldGetTemplateFieldFieldMeta2 *FieldGetTemplateFieldFieldMeta2 `queryParam:"inline"`
	FieldGetTemplateFieldFieldMeta3 *FieldGetTemplateFieldFieldMeta3 `queryParam:"inline"`
	FieldGetTemplateFieldFieldMeta4 *FieldGetTemplateFieldFieldMeta4 `queryParam:"inline"`
	FieldGetTemplateFieldFieldMeta5 *FieldGetTemplateFieldFieldMeta5 `queryParam:"inline"`
	FieldGetTemplateFieldFieldMeta6 *FieldGetTemplateFieldFieldMeta6 `queryParam:"inline"`
	FieldGetTemplateFieldFieldMeta7 *FieldGetTemplateFieldFieldMeta7 `queryParam:"inline"`
	FieldGetTemplateFieldFieldMeta8 *FieldGetTemplateFieldFieldMeta8 `queryParam:"inline"`
	FieldGetTemplateFieldFieldMeta9 *FieldGetTemplateFieldFieldMeta9 `queryParam:"inline"`

	Type FieldGetTemplateFieldFieldMetaUnionType
}

func CreateFieldGetTemplateFieldFieldMetaFieldGetTemplateFieldFieldMeta1(fieldGetTemplateFieldFieldMeta1 FieldGetTemplateFieldFieldMeta1) FieldGetTemplateFieldFieldMeta {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta1

	return FieldGetTemplateFieldFieldMeta{
		FieldGetTemplateFieldFieldMeta1: &fieldGetTemplateFieldFieldMeta1,
		Type:                            typ,
	}
}

func CreateFieldGetTemplateFieldFieldMetaFieldGetTemplateFieldFieldMeta2(fieldGetTemplateFieldFieldMeta2 FieldGetTemplateFieldFieldMeta2) FieldGetTemplateFieldFieldMeta {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta2

	return FieldGetTemplateFieldFieldMeta{
		FieldGetTemplateFieldFieldMeta2: &fieldGetTemplateFieldFieldMeta2,
		Type:                            typ,
	}
}

func CreateFieldGetTemplateFieldFieldMetaFieldGetTemplateFieldFieldMeta3(fieldGetTemplateFieldFieldMeta3 FieldGetTemplateFieldFieldMeta3) FieldGetTemplateFieldFieldMeta {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta3

	return FieldGetTemplateFieldFieldMeta{
		FieldGetTemplateFieldFieldMeta3: &fieldGetTemplateFieldFieldMeta3,
		Type:                            typ,
	}
}

func CreateFieldGetTemplateFieldFieldMetaFieldGetTemplateFieldFieldMeta4(fieldGetTemplateFieldFieldMeta4 FieldGetTemplateFieldFieldMeta4) FieldGetTemplateFieldFieldMeta {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta4

	return FieldGetTemplateFieldFieldMeta{
		FieldGetTemplateFieldFieldMeta4: &fieldGetTemplateFieldFieldMeta4,
		Type:                            typ,
	}
}

func CreateFieldGetTemplateFieldFieldMetaFieldGetTemplateFieldFieldMeta5(fieldGetTemplateFieldFieldMeta5 FieldGetTemplateFieldFieldMeta5) FieldGetTemplateFieldFieldMeta {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta5

	return FieldGetTemplateFieldFieldMeta{
		FieldGetTemplateFieldFieldMeta5: &fieldGetTemplateFieldFieldMeta5,
		Type:                            typ,
	}
}

func CreateFieldGetTemplateFieldFieldMetaFieldGetTemplateFieldFieldMeta6(fieldGetTemplateFieldFieldMeta6 FieldGetTemplateFieldFieldMeta6) FieldGetTemplateFieldFieldMeta {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta6

	return FieldGetTemplateFieldFieldMeta{
		FieldGetTemplateFieldFieldMeta6: &fieldGetTemplateFieldFieldMeta6,
		Type:                            typ,
	}
}

func CreateFieldGetTemplateFieldFieldMetaFieldGetTemplateFieldFieldMeta7(fieldGetTemplateFieldFieldMeta7 FieldGetTemplateFieldFieldMeta7) FieldGetTemplateFieldFieldMeta {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta7

	return FieldGetTemplateFieldFieldMeta{
		FieldGetTemplateFieldFieldMeta7: &fieldGetTemplateFieldFieldMeta7,
		Type:                            typ,
	}
}

func CreateFieldGetTemplateFieldFieldMetaFieldGetTemplateFieldFieldMeta8(fieldGetTemplateFieldFieldMeta8 FieldGetTemplateFieldFieldMeta8) FieldGetTemplateFieldFieldMeta {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta8

	return FieldGetTemplateFieldFieldMeta{
		FieldGetTemplateFieldFieldMeta8: &fieldGetTemplateFieldFieldMeta8,
		Type:                            typ,
	}
}

func CreateFieldGetTemplateFieldFieldMetaFieldGetTemplateFieldFieldMeta9(fieldGetTemplateFieldFieldMeta9 FieldGetTemplateFieldFieldMeta9) FieldGetTemplateFieldFieldMeta {
	typ := FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta9

	return FieldGetTemplateFieldFieldMeta{
		FieldGetTemplateFieldFieldMeta9: &fieldGetTemplateFieldFieldMeta9,
		Type:                            typ,
	}
}

func (u *FieldGetTemplateFieldFieldMeta) UnmarshalJSON(data []byte) error {

	var fieldGetTemplateFieldFieldMeta1 FieldGetTemplateFieldFieldMeta1 = FieldGetTemplateFieldFieldMeta1{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMeta1, "", true, true); err == nil {
		u.FieldGetTemplateFieldFieldMeta1 = &fieldGetTemplateFieldFieldMeta1
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta1
		return nil
	}

	var fieldGetTemplateFieldFieldMeta2 FieldGetTemplateFieldFieldMeta2 = FieldGetTemplateFieldFieldMeta2{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMeta2, "", true, true); err == nil {
		u.FieldGetTemplateFieldFieldMeta2 = &fieldGetTemplateFieldFieldMeta2
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta2
		return nil
	}

	var fieldGetTemplateFieldFieldMeta3 FieldGetTemplateFieldFieldMeta3 = FieldGetTemplateFieldFieldMeta3{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMeta3, "", true, true); err == nil {
		u.FieldGetTemplateFieldFieldMeta3 = &fieldGetTemplateFieldFieldMeta3
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta3
		return nil
	}

	var fieldGetTemplateFieldFieldMeta4 FieldGetTemplateFieldFieldMeta4 = FieldGetTemplateFieldFieldMeta4{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMeta4, "", true, true); err == nil {
		u.FieldGetTemplateFieldFieldMeta4 = &fieldGetTemplateFieldFieldMeta4
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta4
		return nil
	}

	var fieldGetTemplateFieldFieldMeta7 FieldGetTemplateFieldFieldMeta7 = FieldGetTemplateFieldFieldMeta7{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMeta7, "", true, true); err == nil {
		u.FieldGetTemplateFieldFieldMeta7 = &fieldGetTemplateFieldFieldMeta7
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta7
		return nil
	}

	var fieldGetTemplateFieldFieldMeta9 FieldGetTemplateFieldFieldMeta9 = FieldGetTemplateFieldFieldMeta9{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMeta9, "", true, true); err == nil {
		u.FieldGetTemplateFieldFieldMeta9 = &fieldGetTemplateFieldFieldMeta9
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta9
		return nil
	}

	var fieldGetTemplateFieldFieldMeta5 FieldGetTemplateFieldFieldMeta5 = FieldGetTemplateFieldFieldMeta5{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMeta5, "", true, true); err == nil {
		u.FieldGetTemplateFieldFieldMeta5 = &fieldGetTemplateFieldFieldMeta5
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta5
		return nil
	}

	var fieldGetTemplateFieldFieldMeta8 FieldGetTemplateFieldFieldMeta8 = FieldGetTemplateFieldFieldMeta8{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMeta8, "", true, true); err == nil {
		u.FieldGetTemplateFieldFieldMeta8 = &fieldGetTemplateFieldFieldMeta8
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta8
		return nil
	}

	var fieldGetTemplateFieldFieldMeta6 FieldGetTemplateFieldFieldMeta6 = FieldGetTemplateFieldFieldMeta6{}
	if err := utils.UnmarshalJSON(data, &fieldGetTemplateFieldFieldMeta6, "", true, true); err == nil {
		u.FieldGetTemplateFieldFieldMeta6 = &fieldGetTemplateFieldFieldMeta6
		u.Type = FieldGetTemplateFieldFieldMetaUnionTypeFieldGetTemplateFieldFieldMeta6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldGetTemplateFieldFieldMeta", string(data))
}

func (u FieldGetTemplateFieldFieldMeta) MarshalJSON() ([]byte, error) {
	if u.FieldGetTemplateFieldFieldMeta1 != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMeta1, "", true)
	}

	if u.FieldGetTemplateFieldFieldMeta2 != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMeta2, "", true)
	}

	if u.FieldGetTemplateFieldFieldMeta3 != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMeta3, "", true)
	}

	if u.FieldGetTemplateFieldFieldMeta4 != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMeta4, "", true)
	}

	if u.FieldGetTemplateFieldFieldMeta5 != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMeta5, "", true)
	}

	if u.FieldGetTemplateFieldFieldMeta6 != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMeta6, "", true)
	}

	if u.FieldGetTemplateFieldFieldMeta7 != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMeta7, "", true)
	}

	if u.FieldGetTemplateFieldFieldMeta8 != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMeta8, "", true)
	}

	if u.FieldGetTemplateFieldFieldMeta9 != nil {
		return utils.MarshalJSON(u.FieldGetTemplateFieldFieldMeta9, "", true)
	}

	return nil, errors.New("could not marshal union type FieldGetTemplateFieldFieldMeta: all fields are null")
}

// FieldGetTemplateFieldResponseBody - Successful response
type FieldGetTemplateFieldResponseBody struct {
	Type        FieldGetTemplateFieldType `json:"type"`
	ID          int64                     `json:"id"`
	SecondaryID string                    `json:"secondaryId"`
	DocumentID  *int64                    `json:"documentId"`
	TemplateID  *int64                    `json:"templateId"`
	RecipientID int64                     `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                         `json:"page"`
	PositionX  any                             `json:"positionX,omitempty"`
	PositionY  any                             `json:"positionY,omitempty"`
	Width      any                             `json:"width,omitempty"`
	Height     any                             `json:"height,omitempty"`
	CustomText string                          `json:"customText"`
	Inserted   bool                            `json:"inserted"`
	FieldMeta  *FieldGetTemplateFieldFieldMeta `json:"fieldMeta"`
}

func (o *FieldGetTemplateFieldResponseBody) GetType() FieldGetTemplateFieldType {
	if o == nil {
		return FieldGetTemplateFieldType("")
	}
	return o.Type
}

func (o *FieldGetTemplateFieldResponseBody) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *FieldGetTemplateFieldResponseBody) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *FieldGetTemplateFieldResponseBody) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *FieldGetTemplateFieldResponseBody) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *FieldGetTemplateFieldResponseBody) GetRecipientID() int64 {
	if o == nil {
		return 0
	}
	return o.RecipientID
}

func (o *FieldGetTemplateFieldResponseBody) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *FieldGetTemplateFieldResponseBody) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *FieldGetTemplateFieldResponseBody) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *FieldGetTemplateFieldResponseBody) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldGetTemplateFieldResponseBody) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *FieldGetTemplateFieldResponseBody) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *FieldGetTemplateFieldResponseBody) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *FieldGetTemplateFieldResponseBody) GetFieldMeta() *FieldGetTemplateFieldFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

type FieldGetTemplateFieldResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldGetTemplateFieldResponseBody
}

func (o *FieldGetTemplateFieldResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FieldGetTemplateFieldResponse) GetObject() *FieldGetTemplateFieldResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
