// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/documenso/sdk-go/models/components"
)

type RecipientCreateDocumentRecipientRoleRequestBody string

const (
	RecipientCreateDocumentRecipientRoleRequestBodyCc        RecipientCreateDocumentRecipientRoleRequestBody = "CC"
	RecipientCreateDocumentRecipientRoleRequestBodySigner    RecipientCreateDocumentRecipientRoleRequestBody = "SIGNER"
	RecipientCreateDocumentRecipientRoleRequestBodyViewer    RecipientCreateDocumentRecipientRoleRequestBody = "VIEWER"
	RecipientCreateDocumentRecipientRoleRequestBodyApprover  RecipientCreateDocumentRecipientRoleRequestBody = "APPROVER"
	RecipientCreateDocumentRecipientRoleRequestBodyAssistant RecipientCreateDocumentRecipientRoleRequestBody = "ASSISTANT"
)

func (e RecipientCreateDocumentRecipientRoleRequestBody) ToPointer() *RecipientCreateDocumentRecipientRoleRequestBody {
	return &e
}
func (e *RecipientCreateDocumentRecipientRoleRequestBody) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = RecipientCreateDocumentRecipientRoleRequestBody(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientRoleRequestBody: %v", v)
	}
}

// RecipientCreateDocumentRecipientAccessAuthRequestBody - The type of authentication required for the recipient to access the document.
type RecipientCreateDocumentRecipientAccessAuthRequestBody string

const (
	RecipientCreateDocumentRecipientAccessAuthRequestBodyAccount RecipientCreateDocumentRecipientAccessAuthRequestBody = "ACCOUNT"
)

func (e RecipientCreateDocumentRecipientAccessAuthRequestBody) ToPointer() *RecipientCreateDocumentRecipientAccessAuthRequestBody {
	return &e
}
func (e *RecipientCreateDocumentRecipientAccessAuthRequestBody) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = RecipientCreateDocumentRecipientAccessAuthRequestBody(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientAccessAuthRequestBody: %v", v)
	}
}

// RecipientCreateDocumentRecipientActionAuthRequestBody - The type of authentication required for the recipient to sign the document.
type RecipientCreateDocumentRecipientActionAuthRequestBody string

const (
	RecipientCreateDocumentRecipientActionAuthRequestBodyAccount       RecipientCreateDocumentRecipientActionAuthRequestBody = "ACCOUNT"
	RecipientCreateDocumentRecipientActionAuthRequestBodyPasskey       RecipientCreateDocumentRecipientActionAuthRequestBody = "PASSKEY"
	RecipientCreateDocumentRecipientActionAuthRequestBodyTwoFactorAuth RecipientCreateDocumentRecipientActionAuthRequestBody = "TWO_FACTOR_AUTH"
	RecipientCreateDocumentRecipientActionAuthRequestBodyExplicitNone  RecipientCreateDocumentRecipientActionAuthRequestBody = "EXPLICIT_NONE"
)

func (e RecipientCreateDocumentRecipientActionAuthRequestBody) ToPointer() *RecipientCreateDocumentRecipientActionAuthRequestBody {
	return &e
}
func (e *RecipientCreateDocumentRecipientActionAuthRequestBody) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "EXPLICIT_NONE":
		*e = RecipientCreateDocumentRecipientActionAuthRequestBody(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientActionAuthRequestBody: %v", v)
	}
}

type RecipientCreateDocumentRecipientRecipient struct {
	Email        string                                          `json:"email"`
	Name         string                                          `json:"name"`
	Role         RecipientCreateDocumentRecipientRoleRequestBody `json:"role"`
	SigningOrder *float64                                        `json:"signingOrder,omitempty"`
	// The type of authentication required for the recipient to access the document.
	AccessAuth *RecipientCreateDocumentRecipientAccessAuthRequestBody `json:"accessAuth,omitempty"`
	// The type of authentication required for the recipient to sign the document.
	ActionAuth *RecipientCreateDocumentRecipientActionAuthRequestBody `json:"actionAuth,omitempty"`
}

func (o *RecipientCreateDocumentRecipientRecipient) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *RecipientCreateDocumentRecipientRecipient) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RecipientCreateDocumentRecipientRecipient) GetRole() RecipientCreateDocumentRecipientRoleRequestBody {
	if o == nil {
		return RecipientCreateDocumentRecipientRoleRequestBody("")
	}
	return o.Role
}

func (o *RecipientCreateDocumentRecipientRecipient) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *RecipientCreateDocumentRecipientRecipient) GetAccessAuth() *RecipientCreateDocumentRecipientAccessAuthRequestBody {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *RecipientCreateDocumentRecipientRecipient) GetActionAuth() *RecipientCreateDocumentRecipientActionAuthRequestBody {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

type RecipientCreateDocumentRecipientRequest struct {
	DocumentID float64                                   `json:"documentId"`
	Recipient  RecipientCreateDocumentRecipientRecipient `json:"recipient"`
}

func (o *RecipientCreateDocumentRecipientRequest) GetDocumentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DocumentID
}

func (o *RecipientCreateDocumentRecipientRequest) GetRecipient() RecipientCreateDocumentRecipientRecipient {
	if o == nil {
		return RecipientCreateDocumentRecipientRecipient{}
	}
	return o.Recipient
}

type RecipientCreateDocumentRecipientRoleResponse string

const (
	RecipientCreateDocumentRecipientRoleResponseCc        RecipientCreateDocumentRecipientRoleResponse = "CC"
	RecipientCreateDocumentRecipientRoleResponseSigner    RecipientCreateDocumentRecipientRoleResponse = "SIGNER"
	RecipientCreateDocumentRecipientRoleResponseViewer    RecipientCreateDocumentRecipientRoleResponse = "VIEWER"
	RecipientCreateDocumentRecipientRoleResponseApprover  RecipientCreateDocumentRecipientRoleResponse = "APPROVER"
	RecipientCreateDocumentRecipientRoleResponseAssistant RecipientCreateDocumentRecipientRoleResponse = "ASSISTANT"
)

func (e RecipientCreateDocumentRecipientRoleResponse) ToPointer() *RecipientCreateDocumentRecipientRoleResponse {
	return &e
}
func (e *RecipientCreateDocumentRecipientRoleResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = RecipientCreateDocumentRecipientRoleResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientRoleResponse: %v", v)
	}
}

type RecipientCreateDocumentRecipientReadStatus string

const (
	RecipientCreateDocumentRecipientReadStatusNotOpened RecipientCreateDocumentRecipientReadStatus = "NOT_OPENED"
	RecipientCreateDocumentRecipientReadStatusOpened    RecipientCreateDocumentRecipientReadStatus = "OPENED"
)

func (e RecipientCreateDocumentRecipientReadStatus) ToPointer() *RecipientCreateDocumentRecipientReadStatus {
	return &e
}
func (e *RecipientCreateDocumentRecipientReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = RecipientCreateDocumentRecipientReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientReadStatus: %v", v)
	}
}

type RecipientCreateDocumentRecipientSigningStatus string

const (
	RecipientCreateDocumentRecipientSigningStatusNotSigned RecipientCreateDocumentRecipientSigningStatus = "NOT_SIGNED"
	RecipientCreateDocumentRecipientSigningStatusSigned    RecipientCreateDocumentRecipientSigningStatus = "SIGNED"
	RecipientCreateDocumentRecipientSigningStatusRejected  RecipientCreateDocumentRecipientSigningStatus = "REJECTED"
)

func (e RecipientCreateDocumentRecipientSigningStatus) ToPointer() *RecipientCreateDocumentRecipientSigningStatus {
	return &e
}
func (e *RecipientCreateDocumentRecipientSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = RecipientCreateDocumentRecipientSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientSigningStatus: %v", v)
	}
}

type RecipientCreateDocumentRecipientSendStatus string

const (
	RecipientCreateDocumentRecipientSendStatusNotSent RecipientCreateDocumentRecipientSendStatus = "NOT_SENT"
	RecipientCreateDocumentRecipientSendStatusSent    RecipientCreateDocumentRecipientSendStatus = "SENT"
)

func (e RecipientCreateDocumentRecipientSendStatus) ToPointer() *RecipientCreateDocumentRecipientSendStatus {
	return &e
}
func (e *RecipientCreateDocumentRecipientSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = RecipientCreateDocumentRecipientSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientSendStatus: %v", v)
	}
}

// RecipientCreateDocumentRecipientAccessAuthResponse - The type of authentication required for the recipient to access the document.
type RecipientCreateDocumentRecipientAccessAuthResponse string

const (
	RecipientCreateDocumentRecipientAccessAuthResponseAccount RecipientCreateDocumentRecipientAccessAuthResponse = "ACCOUNT"
)

func (e RecipientCreateDocumentRecipientAccessAuthResponse) ToPointer() *RecipientCreateDocumentRecipientAccessAuthResponse {
	return &e
}
func (e *RecipientCreateDocumentRecipientAccessAuthResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = RecipientCreateDocumentRecipientAccessAuthResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientAccessAuthResponse: %v", v)
	}
}

// RecipientCreateDocumentRecipientActionAuthResponse - The type of authentication required for the recipient to sign the document.
type RecipientCreateDocumentRecipientActionAuthResponse string

const (
	RecipientCreateDocumentRecipientActionAuthResponseAccount       RecipientCreateDocumentRecipientActionAuthResponse = "ACCOUNT"
	RecipientCreateDocumentRecipientActionAuthResponsePasskey       RecipientCreateDocumentRecipientActionAuthResponse = "PASSKEY"
	RecipientCreateDocumentRecipientActionAuthResponseTwoFactorAuth RecipientCreateDocumentRecipientActionAuthResponse = "TWO_FACTOR_AUTH"
	RecipientCreateDocumentRecipientActionAuthResponseExplicitNone  RecipientCreateDocumentRecipientActionAuthResponse = "EXPLICIT_NONE"
)

func (e RecipientCreateDocumentRecipientActionAuthResponse) ToPointer() *RecipientCreateDocumentRecipientActionAuthResponse {
	return &e
}
func (e *RecipientCreateDocumentRecipientActionAuthResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "EXPLICIT_NONE":
		*e = RecipientCreateDocumentRecipientActionAuthResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientActionAuthResponse: %v", v)
	}
}

type RecipientCreateDocumentRecipientAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	AccessAuth *RecipientCreateDocumentRecipientAccessAuthResponse `json:"accessAuth"`
	// The type of authentication required for the recipient to sign the document.
	ActionAuth *RecipientCreateDocumentRecipientActionAuthResponse `json:"actionAuth"`
}

func (o *RecipientCreateDocumentRecipientAuthOptions) GetAccessAuth() *RecipientCreateDocumentRecipientAccessAuthResponse {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *RecipientCreateDocumentRecipientAuthOptions) GetActionAuth() *RecipientCreateDocumentRecipientActionAuthResponse {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

// RecipientCreateDocumentRecipientResponseBody - Successful response
type RecipientCreateDocumentRecipientResponseBody struct {
	Role              RecipientCreateDocumentRecipientRoleResponse  `json:"role"`
	ReadStatus        RecipientCreateDocumentRecipientReadStatus    `json:"readStatus"`
	SigningStatus     RecipientCreateDocumentRecipientSigningStatus `json:"signingStatus"`
	SendStatus        RecipientCreateDocumentRecipientSendStatus    `json:"sendStatus"`
	ID                float64                                       `json:"id"`
	DocumentID        *float64                                      `json:"documentId"`
	TemplateID        *float64                                      `json:"templateId"`
	Email             string                                        `json:"email"`
	Name              string                                        `json:"name"`
	Token             string                                        `json:"token"`
	DocumentDeletedAt *string                                       `json:"documentDeletedAt"`
	Expired           *string                                       `json:"expired"`
	SignedAt          *string                                       `json:"signedAt"`
	AuthOptions       *RecipientCreateDocumentRecipientAuthOptions  `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetRole() RecipientCreateDocumentRecipientRoleResponse {
	if o == nil {
		return RecipientCreateDocumentRecipientRoleResponse("")
	}
	return o.Role
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetReadStatus() RecipientCreateDocumentRecipientReadStatus {
	if o == nil {
		return RecipientCreateDocumentRecipientReadStatus("")
	}
	return o.ReadStatus
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetSigningStatus() RecipientCreateDocumentRecipientSigningStatus {
	if o == nil {
		return RecipientCreateDocumentRecipientSigningStatus("")
	}
	return o.SigningStatus
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetSendStatus() RecipientCreateDocumentRecipientSendStatus {
	if o == nil {
		return RecipientCreateDocumentRecipientSendStatus("")
	}
	return o.SendStatus
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetDocumentID() *float64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetDocumentDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DocumentDeletedAt
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetExpired() *string {
	if o == nil {
		return nil
	}
	return o.Expired
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetSignedAt() *string {
	if o == nil {
		return nil
	}
	return o.SignedAt
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetAuthOptions() *RecipientCreateDocumentRecipientAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetRejectionReason() *string {
	if o == nil {
		return nil
	}
	return o.RejectionReason
}

type RecipientCreateDocumentRecipientResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *RecipientCreateDocumentRecipientResponseBody
}

func (o *RecipientCreateDocumentRecipientResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *RecipientCreateDocumentRecipientResponse) GetObject() *RecipientCreateDocumentRecipientResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
