// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/documenso/sdk-go/models/components"
)

type RecipientCreateDocumentRecipientRole string

const (
	RecipientCreateDocumentRecipientRoleCc       RecipientCreateDocumentRecipientRole = "CC"
	RecipientCreateDocumentRecipientRoleSigner   RecipientCreateDocumentRecipientRole = "SIGNER"
	RecipientCreateDocumentRecipientRoleViewer   RecipientCreateDocumentRecipientRole = "VIEWER"
	RecipientCreateDocumentRecipientRoleApprover RecipientCreateDocumentRecipientRole = "APPROVER"
)

func (e RecipientCreateDocumentRecipientRole) ToPointer() *RecipientCreateDocumentRecipientRole {
	return &e
}
func (e *RecipientCreateDocumentRecipientRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		*e = RecipientCreateDocumentRecipientRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientRole: %v", v)
	}
}

// RecipientCreateDocumentRecipientAccessAuth - The type of authentication required for the recipient to access the document.
type RecipientCreateDocumentRecipientAccessAuth string

const (
	RecipientCreateDocumentRecipientAccessAuthAccount RecipientCreateDocumentRecipientAccessAuth = "ACCOUNT"
)

func (e RecipientCreateDocumentRecipientAccessAuth) ToPointer() *RecipientCreateDocumentRecipientAccessAuth {
	return &e
}
func (e *RecipientCreateDocumentRecipientAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = RecipientCreateDocumentRecipientAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientAccessAuth: %v", v)
	}
}

// RecipientCreateDocumentRecipientActionAuth - The type of authentication required for the recipient to sign the document.
type RecipientCreateDocumentRecipientActionAuth string

const (
	RecipientCreateDocumentRecipientActionAuthAccount       RecipientCreateDocumentRecipientActionAuth = "ACCOUNT"
	RecipientCreateDocumentRecipientActionAuthPasskey       RecipientCreateDocumentRecipientActionAuth = "PASSKEY"
	RecipientCreateDocumentRecipientActionAuthTwoFactorAuth RecipientCreateDocumentRecipientActionAuth = "TWO_FACTOR_AUTH"
	RecipientCreateDocumentRecipientActionAuthExplicitNone  RecipientCreateDocumentRecipientActionAuth = "EXPLICIT_NONE"
)

func (e RecipientCreateDocumentRecipientActionAuth) ToPointer() *RecipientCreateDocumentRecipientActionAuth {
	return &e
}
func (e *RecipientCreateDocumentRecipientActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "EXPLICIT_NONE":
		*e = RecipientCreateDocumentRecipientActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientActionAuth: %v", v)
	}
}

type Recipient struct {
	Email        string                               `json:"email"`
	Name         string                               `json:"name"`
	Role         RecipientCreateDocumentRecipientRole `json:"role"`
	SigningOrder *float64                             `json:"signingOrder,omitempty"`
	// The type of authentication required for the recipient to access the document.
	AccessAuth *RecipientCreateDocumentRecipientAccessAuth `json:"accessAuth,omitempty"`
	// The type of authentication required for the recipient to sign the document.
	ActionAuth *RecipientCreateDocumentRecipientActionAuth `json:"actionAuth,omitempty"`
}

func (o *Recipient) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *Recipient) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Recipient) GetRole() RecipientCreateDocumentRecipientRole {
	if o == nil {
		return RecipientCreateDocumentRecipientRole("")
	}
	return o.Role
}

func (o *Recipient) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *Recipient) GetAccessAuth() *RecipientCreateDocumentRecipientAccessAuth {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *Recipient) GetActionAuth() *RecipientCreateDocumentRecipientActionAuth {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

type RecipientCreateDocumentRecipientRequestBody struct {
	DocumentID float64   `json:"documentId"`
	Recipient  Recipient `json:"recipient"`
}

func (o *RecipientCreateDocumentRecipientRequestBody) GetDocumentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DocumentID
}

func (o *RecipientCreateDocumentRecipientRequestBody) GetRecipient() Recipient {
	if o == nil {
		return Recipient{}
	}
	return o.Recipient
}

type RecipientCreateDocumentRecipientDocumentsRecipientsRole string

const (
	RecipientCreateDocumentRecipientDocumentsRecipientsRoleCc       RecipientCreateDocumentRecipientDocumentsRecipientsRole = "CC"
	RecipientCreateDocumentRecipientDocumentsRecipientsRoleSigner   RecipientCreateDocumentRecipientDocumentsRecipientsRole = "SIGNER"
	RecipientCreateDocumentRecipientDocumentsRecipientsRoleViewer   RecipientCreateDocumentRecipientDocumentsRecipientsRole = "VIEWER"
	RecipientCreateDocumentRecipientDocumentsRecipientsRoleApprover RecipientCreateDocumentRecipientDocumentsRecipientsRole = "APPROVER"
)

func (e RecipientCreateDocumentRecipientDocumentsRecipientsRole) ToPointer() *RecipientCreateDocumentRecipientDocumentsRecipientsRole {
	return &e
}
func (e *RecipientCreateDocumentRecipientDocumentsRecipientsRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		*e = RecipientCreateDocumentRecipientDocumentsRecipientsRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientDocumentsRecipientsRole: %v", v)
	}
}

type RecipientCreateDocumentRecipientReadStatus string

const (
	RecipientCreateDocumentRecipientReadStatusNotOpened RecipientCreateDocumentRecipientReadStatus = "NOT_OPENED"
	RecipientCreateDocumentRecipientReadStatusOpened    RecipientCreateDocumentRecipientReadStatus = "OPENED"
)

func (e RecipientCreateDocumentRecipientReadStatus) ToPointer() *RecipientCreateDocumentRecipientReadStatus {
	return &e
}
func (e *RecipientCreateDocumentRecipientReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = RecipientCreateDocumentRecipientReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientReadStatus: %v", v)
	}
}

type RecipientCreateDocumentRecipientSigningStatus string

const (
	RecipientCreateDocumentRecipientSigningStatusNotSigned RecipientCreateDocumentRecipientSigningStatus = "NOT_SIGNED"
	RecipientCreateDocumentRecipientSigningStatusSigned    RecipientCreateDocumentRecipientSigningStatus = "SIGNED"
	RecipientCreateDocumentRecipientSigningStatusRejected  RecipientCreateDocumentRecipientSigningStatus = "REJECTED"
)

func (e RecipientCreateDocumentRecipientSigningStatus) ToPointer() *RecipientCreateDocumentRecipientSigningStatus {
	return &e
}
func (e *RecipientCreateDocumentRecipientSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = RecipientCreateDocumentRecipientSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientSigningStatus: %v", v)
	}
}

type RecipientCreateDocumentRecipientSendStatus string

const (
	RecipientCreateDocumentRecipientSendStatusNotSent RecipientCreateDocumentRecipientSendStatus = "NOT_SENT"
	RecipientCreateDocumentRecipientSendStatusSent    RecipientCreateDocumentRecipientSendStatus = "SENT"
)

func (e RecipientCreateDocumentRecipientSendStatus) ToPointer() *RecipientCreateDocumentRecipientSendStatus {
	return &e
}
func (e *RecipientCreateDocumentRecipientSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = RecipientCreateDocumentRecipientSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientSendStatus: %v", v)
	}
}

// RecipientCreateDocumentRecipientDocumentsRecipientsAccessAuth - The type of authentication required for the recipient to access the document.
type RecipientCreateDocumentRecipientDocumentsRecipientsAccessAuth string

const (
	RecipientCreateDocumentRecipientDocumentsRecipientsAccessAuthAccount RecipientCreateDocumentRecipientDocumentsRecipientsAccessAuth = "ACCOUNT"
)

func (e RecipientCreateDocumentRecipientDocumentsRecipientsAccessAuth) ToPointer() *RecipientCreateDocumentRecipientDocumentsRecipientsAccessAuth {
	return &e
}
func (e *RecipientCreateDocumentRecipientDocumentsRecipientsAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = RecipientCreateDocumentRecipientDocumentsRecipientsAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientDocumentsRecipientsAccessAuth: %v", v)
	}
}

// RecipientCreateDocumentRecipientDocumentsRecipientsActionAuth - The type of authentication required for the recipient to sign the document.
type RecipientCreateDocumentRecipientDocumentsRecipientsActionAuth string

const (
	RecipientCreateDocumentRecipientDocumentsRecipientsActionAuthAccount       RecipientCreateDocumentRecipientDocumentsRecipientsActionAuth = "ACCOUNT"
	RecipientCreateDocumentRecipientDocumentsRecipientsActionAuthPasskey       RecipientCreateDocumentRecipientDocumentsRecipientsActionAuth = "PASSKEY"
	RecipientCreateDocumentRecipientDocumentsRecipientsActionAuthTwoFactorAuth RecipientCreateDocumentRecipientDocumentsRecipientsActionAuth = "TWO_FACTOR_AUTH"
	RecipientCreateDocumentRecipientDocumentsRecipientsActionAuthExplicitNone  RecipientCreateDocumentRecipientDocumentsRecipientsActionAuth = "EXPLICIT_NONE"
)

func (e RecipientCreateDocumentRecipientDocumentsRecipientsActionAuth) ToPointer() *RecipientCreateDocumentRecipientDocumentsRecipientsActionAuth {
	return &e
}
func (e *RecipientCreateDocumentRecipientDocumentsRecipientsActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "EXPLICIT_NONE":
		*e = RecipientCreateDocumentRecipientDocumentsRecipientsActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientCreateDocumentRecipientDocumentsRecipientsActionAuth: %v", v)
	}
}

type RecipientCreateDocumentRecipientAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	AccessAuth *RecipientCreateDocumentRecipientDocumentsRecipientsAccessAuth `json:"accessAuth"`
	// The type of authentication required for the recipient to sign the document.
	ActionAuth *RecipientCreateDocumentRecipientDocumentsRecipientsActionAuth `json:"actionAuth"`
}

func (o *RecipientCreateDocumentRecipientAuthOptions) GetAccessAuth() *RecipientCreateDocumentRecipientDocumentsRecipientsAccessAuth {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *RecipientCreateDocumentRecipientAuthOptions) GetActionAuth() *RecipientCreateDocumentRecipientDocumentsRecipientsActionAuth {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

// RecipientCreateDocumentRecipientResponseBody - Successful response
type RecipientCreateDocumentRecipientResponseBody struct {
	Role              RecipientCreateDocumentRecipientDocumentsRecipientsRole `json:"role"`
	ReadStatus        RecipientCreateDocumentRecipientReadStatus              `json:"readStatus"`
	SigningStatus     RecipientCreateDocumentRecipientSigningStatus           `json:"signingStatus"`
	SendStatus        RecipientCreateDocumentRecipientSendStatus              `json:"sendStatus"`
	ID                int64                                                   `json:"id"`
	DocumentID        *int64                                                  `json:"documentId"`
	TemplateID        *int64                                                  `json:"templateId"`
	Email             string                                                  `json:"email"`
	Name              string                                                  `json:"name"`
	Token             string                                                  `json:"token"`
	DocumentDeletedAt *string                                                 `json:"documentDeletedAt"`
	Expired           *string                                                 `json:"expired"`
	SignedAt          *string                                                 `json:"signedAt"`
	AuthOptions       *RecipientCreateDocumentRecipientAuthOptions            `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetRole() RecipientCreateDocumentRecipientDocumentsRecipientsRole {
	if o == nil {
		return RecipientCreateDocumentRecipientDocumentsRecipientsRole("")
	}
	return o.Role
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetReadStatus() RecipientCreateDocumentRecipientReadStatus {
	if o == nil {
		return RecipientCreateDocumentRecipientReadStatus("")
	}
	return o.ReadStatus
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetSigningStatus() RecipientCreateDocumentRecipientSigningStatus {
	if o == nil {
		return RecipientCreateDocumentRecipientSigningStatus("")
	}
	return o.SigningStatus
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetSendStatus() RecipientCreateDocumentRecipientSendStatus {
	if o == nil {
		return RecipientCreateDocumentRecipientSendStatus("")
	}
	return o.SendStatus
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetDocumentDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DocumentDeletedAt
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetExpired() *string {
	if o == nil {
		return nil
	}
	return o.Expired
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetSignedAt() *string {
	if o == nil {
		return nil
	}
	return o.SignedAt
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetAuthOptions() *RecipientCreateDocumentRecipientAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *RecipientCreateDocumentRecipientResponseBody) GetRejectionReason() *string {
	if o == nil {
		return nil
	}
	return o.RejectionReason
}

type RecipientCreateDocumentRecipientResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *RecipientCreateDocumentRecipientResponseBody
}

func (o *RecipientCreateDocumentRecipientResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *RecipientCreateDocumentRecipientResponse) GetObject() *RecipientCreateDocumentRecipientResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
