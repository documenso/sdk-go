// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type TemplateCreateDocumentFromTemplateRecipientRequestBody struct {
	// The ID of the recipient in the template.
	ID    float64 `json:"id"`
	Email string  `json:"email"`
	Name  *string `json:"name,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateRecipientRequestBody) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateCreateDocumentFromTemplateRecipientRequestBody) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *TemplateCreateDocumentFromTemplateRecipientRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type PrefillFieldTypeDropdown string

const (
	PrefillFieldTypeDropdownDropdown PrefillFieldTypeDropdown = "dropdown"
)

func (e PrefillFieldTypeDropdown) ToPointer() *PrefillFieldTypeDropdown {
	return &e
}
func (e *PrefillFieldTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = PrefillFieldTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PrefillFieldTypeDropdown: %v", v)
	}
}

type PrefillFieldDropdown struct {
	Type  PrefillFieldTypeDropdown `json:"type"`
	Label *string                  `json:"label,omitempty"`
	Value *string                  `json:"value,omitempty"`
	ID    float64                  `json:"id"`
}

func (o *PrefillFieldDropdown) GetType() PrefillFieldTypeDropdown {
	if o == nil {
		return PrefillFieldTypeDropdown("")
	}
	return o.Type
}

func (o *PrefillFieldDropdown) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *PrefillFieldDropdown) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *PrefillFieldDropdown) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

type PrefillFieldTypeCheckbox string

const (
	PrefillFieldTypeCheckboxCheckbox PrefillFieldTypeCheckbox = "checkbox"
)

func (e PrefillFieldTypeCheckbox) ToPointer() *PrefillFieldTypeCheckbox {
	return &e
}
func (e *PrefillFieldTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = PrefillFieldTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PrefillFieldTypeCheckbox: %v", v)
	}
}

type PrefillFieldCheckbox struct {
	Type  PrefillFieldTypeCheckbox `json:"type"`
	Label *string                  `json:"label,omitempty"`
	Value []string                 `json:"value,omitempty"`
	ID    float64                  `json:"id"`
}

func (o *PrefillFieldCheckbox) GetType() PrefillFieldTypeCheckbox {
	if o == nil {
		return PrefillFieldTypeCheckbox("")
	}
	return o.Type
}

func (o *PrefillFieldCheckbox) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *PrefillFieldCheckbox) GetValue() []string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *PrefillFieldCheckbox) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

type PrefillFieldTypeRadio string

const (
	PrefillFieldTypeRadioRadio PrefillFieldTypeRadio = "radio"
)

func (e PrefillFieldTypeRadio) ToPointer() *PrefillFieldTypeRadio {
	return &e
}
func (e *PrefillFieldTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = PrefillFieldTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PrefillFieldTypeRadio: %v", v)
	}
}

type PrefillFieldRadio struct {
	Type  PrefillFieldTypeRadio `json:"type"`
	Label *string               `json:"label,omitempty"`
	Value *string               `json:"value,omitempty"`
	ID    float64               `json:"id"`
}

func (o *PrefillFieldRadio) GetType() PrefillFieldTypeRadio {
	if o == nil {
		return PrefillFieldTypeRadio("")
	}
	return o.Type
}

func (o *PrefillFieldRadio) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *PrefillFieldRadio) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *PrefillFieldRadio) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

type PrefillFieldTypeNumber string

const (
	PrefillFieldTypeNumberNumber PrefillFieldTypeNumber = "number"
)

func (e PrefillFieldTypeNumber) ToPointer() *PrefillFieldTypeNumber {
	return &e
}
func (e *PrefillFieldTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = PrefillFieldTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PrefillFieldTypeNumber: %v", v)
	}
}

type PrefillFieldNumber struct {
	Type        PrefillFieldTypeNumber `json:"type"`
	Label       *string                `json:"label,omitempty"`
	Placeholder *string                `json:"placeholder,omitempty"`
	Value       *string                `json:"value,omitempty"`
	ID          float64                `json:"id"`
}

func (o *PrefillFieldNumber) GetType() PrefillFieldTypeNumber {
	if o == nil {
		return PrefillFieldTypeNumber("")
	}
	return o.Type
}

func (o *PrefillFieldNumber) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *PrefillFieldNumber) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *PrefillFieldNumber) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *PrefillFieldNumber) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

type PrefillFieldTypeText string

const (
	PrefillFieldTypeTextText PrefillFieldTypeText = "text"
)

func (e PrefillFieldTypeText) ToPointer() *PrefillFieldTypeText {
	return &e
}
func (e *PrefillFieldTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = PrefillFieldTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PrefillFieldTypeText: %v", v)
	}
}

type PrefillFieldText struct {
	Type        PrefillFieldTypeText `json:"type"`
	Label       *string              `json:"label,omitempty"`
	Placeholder *string              `json:"placeholder,omitempty"`
	Value       *string              `json:"value,omitempty"`
	ID          float64              `json:"id"`
}

func (o *PrefillFieldText) GetType() PrefillFieldTypeText {
	if o == nil {
		return PrefillFieldTypeText("")
	}
	return o.Type
}

func (o *PrefillFieldText) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *PrefillFieldText) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *PrefillFieldText) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *PrefillFieldText) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

type PrefillFieldType string

const (
	PrefillFieldTypePrefillFieldText     PrefillFieldType = "prefillField_Text"
	PrefillFieldTypePrefillFieldNumber   PrefillFieldType = "prefillField_Number"
	PrefillFieldTypePrefillFieldRadio    PrefillFieldType = "prefillField_Radio"
	PrefillFieldTypePrefillFieldCheckbox PrefillFieldType = "prefillField_Checkbox"
	PrefillFieldTypePrefillFieldDropdown PrefillFieldType = "prefillField_Dropdown"
)

type PrefillField struct {
	PrefillFieldText     *PrefillFieldText     `queryParam:"inline"`
	PrefillFieldNumber   *PrefillFieldNumber   `queryParam:"inline"`
	PrefillFieldRadio    *PrefillFieldRadio    `queryParam:"inline"`
	PrefillFieldCheckbox *PrefillFieldCheckbox `queryParam:"inline"`
	PrefillFieldDropdown *PrefillFieldDropdown `queryParam:"inline"`

	Type PrefillFieldType
}

func CreatePrefillFieldPrefillFieldText(prefillFieldText PrefillFieldText) PrefillField {
	typ := PrefillFieldTypePrefillFieldText

	return PrefillField{
		PrefillFieldText: &prefillFieldText,
		Type:             typ,
	}
}

func CreatePrefillFieldPrefillFieldNumber(prefillFieldNumber PrefillFieldNumber) PrefillField {
	typ := PrefillFieldTypePrefillFieldNumber

	return PrefillField{
		PrefillFieldNumber: &prefillFieldNumber,
		Type:               typ,
	}
}

func CreatePrefillFieldPrefillFieldRadio(prefillFieldRadio PrefillFieldRadio) PrefillField {
	typ := PrefillFieldTypePrefillFieldRadio

	return PrefillField{
		PrefillFieldRadio: &prefillFieldRadio,
		Type:              typ,
	}
}

func CreatePrefillFieldPrefillFieldCheckbox(prefillFieldCheckbox PrefillFieldCheckbox) PrefillField {
	typ := PrefillFieldTypePrefillFieldCheckbox

	return PrefillField{
		PrefillFieldCheckbox: &prefillFieldCheckbox,
		Type:                 typ,
	}
}

func CreatePrefillFieldPrefillFieldDropdown(prefillFieldDropdown PrefillFieldDropdown) PrefillField {
	typ := PrefillFieldTypePrefillFieldDropdown

	return PrefillField{
		PrefillFieldDropdown: &prefillFieldDropdown,
		Type:                 typ,
	}
}

func (u *PrefillField) UnmarshalJSON(data []byte) error {

	var prefillFieldRadio PrefillFieldRadio = PrefillFieldRadio{}
	if err := utils.UnmarshalJSON(data, &prefillFieldRadio, "", true, true); err == nil {
		u.PrefillFieldRadio = &prefillFieldRadio
		u.Type = PrefillFieldTypePrefillFieldRadio
		return nil
	}

	var prefillFieldCheckbox PrefillFieldCheckbox = PrefillFieldCheckbox{}
	if err := utils.UnmarshalJSON(data, &prefillFieldCheckbox, "", true, true); err == nil {
		u.PrefillFieldCheckbox = &prefillFieldCheckbox
		u.Type = PrefillFieldTypePrefillFieldCheckbox
		return nil
	}

	var prefillFieldDropdown PrefillFieldDropdown = PrefillFieldDropdown{}
	if err := utils.UnmarshalJSON(data, &prefillFieldDropdown, "", true, true); err == nil {
		u.PrefillFieldDropdown = &prefillFieldDropdown
		u.Type = PrefillFieldTypePrefillFieldDropdown
		return nil
	}

	var prefillFieldText PrefillFieldText = PrefillFieldText{}
	if err := utils.UnmarshalJSON(data, &prefillFieldText, "", true, true); err == nil {
		u.PrefillFieldText = &prefillFieldText
		u.Type = PrefillFieldTypePrefillFieldText
		return nil
	}

	var prefillFieldNumber PrefillFieldNumber = PrefillFieldNumber{}
	if err := utils.UnmarshalJSON(data, &prefillFieldNumber, "", true, true); err == nil {
		u.PrefillFieldNumber = &prefillFieldNumber
		u.Type = PrefillFieldTypePrefillFieldNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PrefillField", string(data))
}

func (u PrefillField) MarshalJSON() ([]byte, error) {
	if u.PrefillFieldText != nil {
		return utils.MarshalJSON(u.PrefillFieldText, "", true)
	}

	if u.PrefillFieldNumber != nil {
		return utils.MarshalJSON(u.PrefillFieldNumber, "", true)
	}

	if u.PrefillFieldRadio != nil {
		return utils.MarshalJSON(u.PrefillFieldRadio, "", true)
	}

	if u.PrefillFieldCheckbox != nil {
		return utils.MarshalJSON(u.PrefillFieldCheckbox, "", true)
	}

	if u.PrefillFieldDropdown != nil {
		return utils.MarshalJSON(u.PrefillFieldDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type PrefillField: all fields are null")
}

type TemplateCreateDocumentFromTemplateRequest struct {
	TemplateID float64 `json:"templateId"`
	// The information of the recipients to create the document with.
	Recipients []TemplateCreateDocumentFromTemplateRecipientRequestBody `json:"recipients"`
	// Whether to create the document as pending and distribute it to recipients.
	DistributeDocument *bool `json:"distributeDocument,omitempty"`
	// The data ID of an alternative PDF to use when creating the document. If not provided, the PDF attached to the template will be used.
	CustomDocumentDataID *string `json:"customDocumentDataId,omitempty"`
	// The fields to prefill on the document before sending it out. Useful when you want to create a document from an existing template and pre-fill the fields with specific values.
	PrefillFields []PrefillField `json:"prefillFields,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateRequest) GetTemplateID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TemplateID
}

func (o *TemplateCreateDocumentFromTemplateRequest) GetRecipients() []TemplateCreateDocumentFromTemplateRecipientRequestBody {
	if o == nil {
		return []TemplateCreateDocumentFromTemplateRecipientRequestBody{}
	}
	return o.Recipients
}

func (o *TemplateCreateDocumentFromTemplateRequest) GetDistributeDocument() *bool {
	if o == nil {
		return nil
	}
	return o.DistributeDocument
}

func (o *TemplateCreateDocumentFromTemplateRequest) GetCustomDocumentDataID() *string {
	if o == nil {
		return nil
	}
	return o.CustomDocumentDataID
}

func (o *TemplateCreateDocumentFromTemplateRequest) GetPrefillFields() []PrefillField {
	if o == nil {
		return nil
	}
	return o.PrefillFields
}

type TemplateCreateDocumentFromTemplateVisibility string

const (
	TemplateCreateDocumentFromTemplateVisibilityEveryone        TemplateCreateDocumentFromTemplateVisibility = "EVERYONE"
	TemplateCreateDocumentFromTemplateVisibilityManagerAndAbove TemplateCreateDocumentFromTemplateVisibility = "MANAGER_AND_ABOVE"
	TemplateCreateDocumentFromTemplateVisibilityAdmin           TemplateCreateDocumentFromTemplateVisibility = "ADMIN"
)

func (e TemplateCreateDocumentFromTemplateVisibility) ToPointer() *TemplateCreateDocumentFromTemplateVisibility {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = TemplateCreateDocumentFromTemplateVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateVisibility: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateStatus string

const (
	TemplateCreateDocumentFromTemplateStatusDraft     TemplateCreateDocumentFromTemplateStatus = "DRAFT"
	TemplateCreateDocumentFromTemplateStatusPending   TemplateCreateDocumentFromTemplateStatus = "PENDING"
	TemplateCreateDocumentFromTemplateStatusCompleted TemplateCreateDocumentFromTemplateStatus = "COMPLETED"
	TemplateCreateDocumentFromTemplateStatusRejected  TemplateCreateDocumentFromTemplateStatus = "REJECTED"
)

func (e TemplateCreateDocumentFromTemplateStatus) ToPointer() *TemplateCreateDocumentFromTemplateStatus {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "PENDING":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "REJECTED":
		*e = TemplateCreateDocumentFromTemplateStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateStatus: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateSource string

const (
	TemplateCreateDocumentFromTemplateSourceDocument           TemplateCreateDocumentFromTemplateSource = "DOCUMENT"
	TemplateCreateDocumentFromTemplateSourceTemplate           TemplateCreateDocumentFromTemplateSource = "TEMPLATE"
	TemplateCreateDocumentFromTemplateSourceTemplateDirectLink TemplateCreateDocumentFromTemplateSource = "TEMPLATE_DIRECT_LINK"
)

func (e TemplateCreateDocumentFromTemplateSource) ToPointer() *TemplateCreateDocumentFromTemplateSource {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		fallthrough
	case "TEMPLATE_DIRECT_LINK":
		*e = TemplateCreateDocumentFromTemplateSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateSource: %v", v)
	}
}

// TemplateCreateDocumentFromTemplateGlobalAccessAuth - The type of authentication required for the recipient to access the document.
type TemplateCreateDocumentFromTemplateGlobalAccessAuth string

const (
	TemplateCreateDocumentFromTemplateGlobalAccessAuthAccount TemplateCreateDocumentFromTemplateGlobalAccessAuth = "ACCOUNT"
)

func (e TemplateCreateDocumentFromTemplateGlobalAccessAuth) ToPointer() *TemplateCreateDocumentFromTemplateGlobalAccessAuth {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateGlobalAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = TemplateCreateDocumentFromTemplateGlobalAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateGlobalAccessAuth: %v", v)
	}
}

// TemplateCreateDocumentFromTemplateGlobalActionAuth - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type TemplateCreateDocumentFromTemplateGlobalActionAuth string

const (
	TemplateCreateDocumentFromTemplateGlobalActionAuthAccount       TemplateCreateDocumentFromTemplateGlobalActionAuth = "ACCOUNT"
	TemplateCreateDocumentFromTemplateGlobalActionAuthPasskey       TemplateCreateDocumentFromTemplateGlobalActionAuth = "PASSKEY"
	TemplateCreateDocumentFromTemplateGlobalActionAuthTwoFactorAuth TemplateCreateDocumentFromTemplateGlobalActionAuth = "TWO_FACTOR_AUTH"
)

func (e TemplateCreateDocumentFromTemplateGlobalActionAuth) ToPointer() *TemplateCreateDocumentFromTemplateGlobalActionAuth {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateGlobalActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = TemplateCreateDocumentFromTemplateGlobalActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateGlobalActionAuth: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	GlobalAccessAuth *TemplateCreateDocumentFromTemplateGlobalAccessAuth `json:"globalAccessAuth"`
	// The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
	GlobalActionAuth *TemplateCreateDocumentFromTemplateGlobalActionAuth `json:"globalActionAuth"`
}

func (o *TemplateCreateDocumentFromTemplateAuthOptions) GetGlobalAccessAuth() *TemplateCreateDocumentFromTemplateGlobalAccessAuth {
	if o == nil {
		return nil
	}
	return o.GlobalAccessAuth
}

func (o *TemplateCreateDocumentFromTemplateAuthOptions) GetGlobalActionAuth() *TemplateCreateDocumentFromTemplateGlobalActionAuth {
	if o == nil {
		return nil
	}
	return o.GlobalActionAuth
}

type TemplateCreateDocumentFromTemplateFormValuesType string

const (
	TemplateCreateDocumentFromTemplateFormValuesTypeStr     TemplateCreateDocumentFromTemplateFormValuesType = "str"
	TemplateCreateDocumentFromTemplateFormValuesTypeBoolean TemplateCreateDocumentFromTemplateFormValuesType = "boolean"
	TemplateCreateDocumentFromTemplateFormValuesTypeNumber  TemplateCreateDocumentFromTemplateFormValuesType = "number"
)

type TemplateCreateDocumentFromTemplateFormValues struct {
	Str     *string  `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`
	Number  *float64 `queryParam:"inline"`

	Type TemplateCreateDocumentFromTemplateFormValuesType
}

func CreateTemplateCreateDocumentFromTemplateFormValuesStr(str string) TemplateCreateDocumentFromTemplateFormValues {
	typ := TemplateCreateDocumentFromTemplateFormValuesTypeStr

	return TemplateCreateDocumentFromTemplateFormValues{
		Str:  &str,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFormValuesBoolean(boolean bool) TemplateCreateDocumentFromTemplateFormValues {
	typ := TemplateCreateDocumentFromTemplateFormValuesTypeBoolean

	return TemplateCreateDocumentFromTemplateFormValues{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFormValuesNumber(number float64) TemplateCreateDocumentFromTemplateFormValues {
	typ := TemplateCreateDocumentFromTemplateFormValuesTypeNumber

	return TemplateCreateDocumentFromTemplateFormValues{
		Number: &number,
		Type:   typ,
	}
}

func (u *TemplateCreateDocumentFromTemplateFormValues) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TemplateCreateDocumentFromTemplateFormValuesTypeStr
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = TemplateCreateDocumentFromTemplateFormValuesTypeBoolean
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = TemplateCreateDocumentFromTemplateFormValuesTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TemplateCreateDocumentFromTemplateFormValues", string(data))
}

func (u TemplateCreateDocumentFromTemplateFormValues) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type TemplateCreateDocumentFromTemplateFormValues: all fields are null")
}

type TemplateCreateDocumentFromTemplateDocumentDataType string

const (
	TemplateCreateDocumentFromTemplateDocumentDataTypeS3Path  TemplateCreateDocumentFromTemplateDocumentDataType = "S3_PATH"
	TemplateCreateDocumentFromTemplateDocumentDataTypeBytes   TemplateCreateDocumentFromTemplateDocumentDataType = "BYTES"
	TemplateCreateDocumentFromTemplateDocumentDataTypeBytes64 TemplateCreateDocumentFromTemplateDocumentDataType = "BYTES_64"
)

func (e TemplateCreateDocumentFromTemplateDocumentDataType) ToPointer() *TemplateCreateDocumentFromTemplateDocumentDataType {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateDocumentDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3_PATH":
		fallthrough
	case "BYTES":
		fallthrough
	case "BYTES_64":
		*e = TemplateCreateDocumentFromTemplateDocumentDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateDocumentDataType: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateDocumentData struct {
	Type        TemplateCreateDocumentFromTemplateDocumentDataType `json:"type"`
	ID          string                                             `json:"id"`
	Data        string                                             `json:"data"`
	InitialData string                                             `json:"initialData"`
}

func (o *TemplateCreateDocumentFromTemplateDocumentData) GetType() TemplateCreateDocumentFromTemplateDocumentDataType {
	if o == nil {
		return TemplateCreateDocumentFromTemplateDocumentDataType("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateDocumentData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TemplateCreateDocumentFromTemplateDocumentData) GetData() string {
	if o == nil {
		return ""
	}
	return o.Data
}

func (o *TemplateCreateDocumentFromTemplateDocumentData) GetInitialData() string {
	if o == nil {
		return ""
	}
	return o.InitialData
}

type TemplateCreateDocumentFromTemplateSigningOrder string

const (
	TemplateCreateDocumentFromTemplateSigningOrderParallel   TemplateCreateDocumentFromTemplateSigningOrder = "PARALLEL"
	TemplateCreateDocumentFromTemplateSigningOrderSequential TemplateCreateDocumentFromTemplateSigningOrder = "SEQUENTIAL"
)

func (e TemplateCreateDocumentFromTemplateSigningOrder) ToPointer() *TemplateCreateDocumentFromTemplateSigningOrder {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateSigningOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARALLEL":
		fallthrough
	case "SEQUENTIAL":
		*e = TemplateCreateDocumentFromTemplateSigningOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateSigningOrder: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateDistributionMethod string

const (
	TemplateCreateDocumentFromTemplateDistributionMethodEmail TemplateCreateDocumentFromTemplateDistributionMethod = "EMAIL"
	TemplateCreateDocumentFromTemplateDistributionMethodNone  TemplateCreateDocumentFromTemplateDistributionMethod = "NONE"
)

func (e TemplateCreateDocumentFromTemplateDistributionMethod) ToPointer() *TemplateCreateDocumentFromTemplateDistributionMethod {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateDistributionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = TemplateCreateDocumentFromTemplateDistributionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateDistributionMethod: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateEmailSettings struct {
	// Whether to send an email to all recipients that the document is ready for them to sign.
	RecipientSigningRequest *bool `default:"true" json:"recipientSigningRequest"`
	// Whether to send an email to the recipient who was removed from a pending document.
	RecipientRemoved *bool `default:"true" json:"recipientRemoved"`
	// Whether to send an email to the document owner when a recipient has signed the document.
	RecipientSigned *bool `default:"true" json:"recipientSigned"`
	// Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
	DocumentPending *bool `default:"true" json:"documentPending"`
	// Whether to send an email to all recipients when the document is complete.
	DocumentCompleted *bool `default:"true" json:"documentCompleted"`
	// Whether to send an email to all recipients if a pending document has been deleted.
	DocumentDeleted *bool `default:"true" json:"documentDeleted"`
	// Whether to send an email to the document owner when the document is complete.
	OwnerDocumentCompleted *bool `default:"true" json:"ownerDocumentCompleted"`
}

func (t TemplateCreateDocumentFromTemplateEmailSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateCreateDocumentFromTemplateEmailSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TemplateCreateDocumentFromTemplateEmailSettings) GetRecipientSigningRequest() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigningRequest
}

func (o *TemplateCreateDocumentFromTemplateEmailSettings) GetRecipientRemoved() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientRemoved
}

func (o *TemplateCreateDocumentFromTemplateEmailSettings) GetRecipientSigned() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigned
}

func (o *TemplateCreateDocumentFromTemplateEmailSettings) GetDocumentPending() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentPending
}

func (o *TemplateCreateDocumentFromTemplateEmailSettings) GetDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentCompleted
}

func (o *TemplateCreateDocumentFromTemplateEmailSettings) GetDocumentDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentDeleted
}

func (o *TemplateCreateDocumentFromTemplateEmailSettings) GetOwnerDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.OwnerDocumentCompleted
}

type TemplateCreateDocumentFromTemplateDocumentMeta struct {
	SigningOrder           TemplateCreateDocumentFromTemplateSigningOrder       `json:"signingOrder"`
	DistributionMethod     TemplateCreateDocumentFromTemplateDistributionMethod `json:"distributionMethod"`
	ID                     string                                               `json:"id"`
	Subject                *string                                              `json:"subject"`
	Message                *string                                              `json:"message"`
	Timezone               *string                                              `json:"timezone"`
	Password               *string                                              `json:"password"`
	DateFormat             *string                                              `json:"dateFormat"`
	DocumentID             float64                                              `json:"documentId"`
	RedirectURL            *string                                              `json:"redirectUrl"`
	TypedSignatureEnabled  bool                                                 `json:"typedSignatureEnabled"`
	UploadSignatureEnabled bool                                                 `json:"uploadSignatureEnabled"`
	DrawSignatureEnabled   bool                                                 `json:"drawSignatureEnabled"`
	AllowDictateNextSigner bool                                                 `json:"allowDictateNextSigner"`
	Language               string                                               `json:"language"`
	EmailSettings          *TemplateCreateDocumentFromTemplateEmailSettings     `json:"emailSettings"`
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetSigningOrder() TemplateCreateDocumentFromTemplateSigningOrder {
	if o == nil {
		return TemplateCreateDocumentFromTemplateSigningOrder("")
	}
	return o.SigningOrder
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetDistributionMethod() TemplateCreateDocumentFromTemplateDistributionMethod {
	if o == nil {
		return TemplateCreateDocumentFromTemplateDistributionMethod("")
	}
	return o.DistributionMethod
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetDateFormat() *string {
	if o == nil {
		return nil
	}
	return o.DateFormat
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetDocumentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DocumentID
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetTypedSignatureEnabled() bool {
	if o == nil {
		return false
	}
	return o.TypedSignatureEnabled
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetUploadSignatureEnabled() bool {
	if o == nil {
		return false
	}
	return o.UploadSignatureEnabled
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetDrawSignatureEnabled() bool {
	if o == nil {
		return false
	}
	return o.DrawSignatureEnabled
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetAllowDictateNextSigner() bool {
	if o == nil {
		return false
	}
	return o.AllowDictateNextSigner
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetLanguage() string {
	if o == nil {
		return ""
	}
	return o.Language
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetEmailSettings() *TemplateCreateDocumentFromTemplateEmailSettings {
	if o == nil {
		return nil
	}
	return o.EmailSettings
}

type TemplateCreateDocumentFromTemplateRole string

const (
	TemplateCreateDocumentFromTemplateRoleCc        TemplateCreateDocumentFromTemplateRole = "CC"
	TemplateCreateDocumentFromTemplateRoleSigner    TemplateCreateDocumentFromTemplateRole = "SIGNER"
	TemplateCreateDocumentFromTemplateRoleViewer    TemplateCreateDocumentFromTemplateRole = "VIEWER"
	TemplateCreateDocumentFromTemplateRoleApprover  TemplateCreateDocumentFromTemplateRole = "APPROVER"
	TemplateCreateDocumentFromTemplateRoleAssistant TemplateCreateDocumentFromTemplateRole = "ASSISTANT"
)

func (e TemplateCreateDocumentFromTemplateRole) ToPointer() *TemplateCreateDocumentFromTemplateRole {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = TemplateCreateDocumentFromTemplateRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateRole: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateReadStatus string

const (
	TemplateCreateDocumentFromTemplateReadStatusNotOpened TemplateCreateDocumentFromTemplateReadStatus = "NOT_OPENED"
	TemplateCreateDocumentFromTemplateReadStatusOpened    TemplateCreateDocumentFromTemplateReadStatus = "OPENED"
)

func (e TemplateCreateDocumentFromTemplateReadStatus) ToPointer() *TemplateCreateDocumentFromTemplateReadStatus {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = TemplateCreateDocumentFromTemplateReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateReadStatus: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateSigningStatus string

const (
	TemplateCreateDocumentFromTemplateSigningStatusNotSigned TemplateCreateDocumentFromTemplateSigningStatus = "NOT_SIGNED"
	TemplateCreateDocumentFromTemplateSigningStatusSigned    TemplateCreateDocumentFromTemplateSigningStatus = "SIGNED"
	TemplateCreateDocumentFromTemplateSigningStatusRejected  TemplateCreateDocumentFromTemplateSigningStatus = "REJECTED"
)

func (e TemplateCreateDocumentFromTemplateSigningStatus) ToPointer() *TemplateCreateDocumentFromTemplateSigningStatus {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = TemplateCreateDocumentFromTemplateSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateSigningStatus: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateSendStatus string

const (
	TemplateCreateDocumentFromTemplateSendStatusNotSent TemplateCreateDocumentFromTemplateSendStatus = "NOT_SENT"
	TemplateCreateDocumentFromTemplateSendStatusSent    TemplateCreateDocumentFromTemplateSendStatus = "SENT"
)

func (e TemplateCreateDocumentFromTemplateSendStatus) ToPointer() *TemplateCreateDocumentFromTemplateSendStatus {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = TemplateCreateDocumentFromTemplateSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateSendStatus: %v", v)
	}
}

// TemplateCreateDocumentFromTemplateAccessAuth - The type of authentication required for the recipient to access the document.
type TemplateCreateDocumentFromTemplateAccessAuth string

const (
	TemplateCreateDocumentFromTemplateAccessAuthAccount TemplateCreateDocumentFromTemplateAccessAuth = "ACCOUNT"
)

func (e TemplateCreateDocumentFromTemplateAccessAuth) ToPointer() *TemplateCreateDocumentFromTemplateAccessAuth {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = TemplateCreateDocumentFromTemplateAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateAccessAuth: %v", v)
	}
}

// TemplateCreateDocumentFromTemplateActionAuth - The type of authentication required for the recipient to sign the document.
type TemplateCreateDocumentFromTemplateActionAuth string

const (
	TemplateCreateDocumentFromTemplateActionAuthAccount       TemplateCreateDocumentFromTemplateActionAuth = "ACCOUNT"
	TemplateCreateDocumentFromTemplateActionAuthPasskey       TemplateCreateDocumentFromTemplateActionAuth = "PASSKEY"
	TemplateCreateDocumentFromTemplateActionAuthTwoFactorAuth TemplateCreateDocumentFromTemplateActionAuth = "TWO_FACTOR_AUTH"
	TemplateCreateDocumentFromTemplateActionAuthExplicitNone  TemplateCreateDocumentFromTemplateActionAuth = "EXPLICIT_NONE"
)

func (e TemplateCreateDocumentFromTemplateActionAuth) ToPointer() *TemplateCreateDocumentFromTemplateActionAuth {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "EXPLICIT_NONE":
		*e = TemplateCreateDocumentFromTemplateActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateActionAuth: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateRecipientAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	AccessAuth *TemplateCreateDocumentFromTemplateAccessAuth `json:"accessAuth"`
	// The type of authentication required for the recipient to sign the document.
	ActionAuth *TemplateCreateDocumentFromTemplateActionAuth `json:"actionAuth"`
}

func (o *TemplateCreateDocumentFromTemplateRecipientAuthOptions) GetAccessAuth() *TemplateCreateDocumentFromTemplateAccessAuth {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *TemplateCreateDocumentFromTemplateRecipientAuthOptions) GetActionAuth() *TemplateCreateDocumentFromTemplateActionAuth {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

type TemplateCreateDocumentFromTemplateRecipientResponse struct {
	Role              TemplateCreateDocumentFromTemplateRole                  `json:"role"`
	ReadStatus        TemplateCreateDocumentFromTemplateReadStatus            `json:"readStatus"`
	SigningStatus     TemplateCreateDocumentFromTemplateSigningStatus         `json:"signingStatus"`
	SendStatus        TemplateCreateDocumentFromTemplateSendStatus            `json:"sendStatus"`
	ID                float64                                                 `json:"id"`
	DocumentID        *float64                                                `json:"documentId"`
	TemplateID        *float64                                                `json:"templateId"`
	Email             string                                                  `json:"email"`
	Name              string                                                  `json:"name"`
	Token             string                                                  `json:"token"`
	DocumentDeletedAt *string                                                 `json:"documentDeletedAt"`
	Expired           *string                                                 `json:"expired"`
	SignedAt          *string                                                 `json:"signedAt"`
	AuthOptions       *TemplateCreateDocumentFromTemplateRecipientAuthOptions `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
}

func (o *TemplateCreateDocumentFromTemplateRecipientResponse) GetRole() TemplateCreateDocumentFromTemplateRole {
	if o == nil {
		return TemplateCreateDocumentFromTemplateRole("")
	}
	return o.Role
}

func (o *TemplateCreateDocumentFromTemplateRecipientResponse) GetReadStatus() TemplateCreateDocumentFromTemplateReadStatus {
	if o == nil {
		return TemplateCreateDocumentFromTemplateReadStatus("")
	}
	return o.ReadStatus
}

func (o *TemplateCreateDocumentFromTemplateRecipientResponse) GetSigningStatus() TemplateCreateDocumentFromTemplateSigningStatus {
	if o == nil {
		return TemplateCreateDocumentFromTemplateSigningStatus("")
	}
	return o.SigningStatus
}

func (o *TemplateCreateDocumentFromTemplateRecipientResponse) GetSendStatus() TemplateCreateDocumentFromTemplateSendStatus {
	if o == nil {
		return TemplateCreateDocumentFromTemplateSendStatus("")
	}
	return o.SendStatus
}

func (o *TemplateCreateDocumentFromTemplateRecipientResponse) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateCreateDocumentFromTemplateRecipientResponse) GetDocumentID() *float64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *TemplateCreateDocumentFromTemplateRecipientResponse) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *TemplateCreateDocumentFromTemplateRecipientResponse) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *TemplateCreateDocumentFromTemplateRecipientResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TemplateCreateDocumentFromTemplateRecipientResponse) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *TemplateCreateDocumentFromTemplateRecipientResponse) GetDocumentDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DocumentDeletedAt
}

func (o *TemplateCreateDocumentFromTemplateRecipientResponse) GetExpired() *string {
	if o == nil {
		return nil
	}
	return o.Expired
}

func (o *TemplateCreateDocumentFromTemplateRecipientResponse) GetSignedAt() *string {
	if o == nil {
		return nil
	}
	return o.SignedAt
}

func (o *TemplateCreateDocumentFromTemplateRecipientResponse) GetAuthOptions() *TemplateCreateDocumentFromTemplateRecipientAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *TemplateCreateDocumentFromTemplateRecipientResponse) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *TemplateCreateDocumentFromTemplateRecipientResponse) GetRejectionReason() *string {
	if o == nil {
		return nil
	}
	return o.RejectionReason
}

type TemplateCreateDocumentFromTemplateFieldType string

const (
	TemplateCreateDocumentFromTemplateFieldTypeSignature     TemplateCreateDocumentFromTemplateFieldType = "SIGNATURE"
	TemplateCreateDocumentFromTemplateFieldTypeFreeSignature TemplateCreateDocumentFromTemplateFieldType = "FREE_SIGNATURE"
	TemplateCreateDocumentFromTemplateFieldTypeInitials      TemplateCreateDocumentFromTemplateFieldType = "INITIALS"
	TemplateCreateDocumentFromTemplateFieldTypeName          TemplateCreateDocumentFromTemplateFieldType = "NAME"
	TemplateCreateDocumentFromTemplateFieldTypeEmail         TemplateCreateDocumentFromTemplateFieldType = "EMAIL"
	TemplateCreateDocumentFromTemplateFieldTypeDate          TemplateCreateDocumentFromTemplateFieldType = "DATE"
	TemplateCreateDocumentFromTemplateFieldTypeText          TemplateCreateDocumentFromTemplateFieldType = "TEXT"
	TemplateCreateDocumentFromTemplateFieldTypeNumber        TemplateCreateDocumentFromTemplateFieldType = "NUMBER"
	TemplateCreateDocumentFromTemplateFieldTypeRadio         TemplateCreateDocumentFromTemplateFieldType = "RADIO"
	TemplateCreateDocumentFromTemplateFieldTypeCheckbox      TemplateCreateDocumentFromTemplateFieldType = "CHECKBOX"
	TemplateCreateDocumentFromTemplateFieldTypeDropdown      TemplateCreateDocumentFromTemplateFieldType = "DROPDOWN"
)

func (e TemplateCreateDocumentFromTemplateFieldType) ToPointer() *TemplateCreateDocumentFromTemplateFieldType {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = TemplateCreateDocumentFromTemplateFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateFieldType: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown string

const (
	TemplateCreateDocumentFromTemplateFieldMetaTypeDropdownDropdown TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown = "dropdown"
)

func (e TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown) ToPointer() *TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateValue3 struct {
	Value string `json:"value"`
}

func (o *TemplateCreateDocumentFromTemplateValue3) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateCreateDocumentFromTemplateFieldMetaDropdown struct {
	Label        *string                                                 `json:"label,omitempty"`
	Placeholder  *string                                                 `json:"placeholder,omitempty"`
	Required     *bool                                                   `json:"required,omitempty"`
	ReadOnly     *bool                                                   `json:"readOnly,omitempty"`
	Type         TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown `json:"type"`
	Values       []TemplateCreateDocumentFromTemplateValue3              `json:"values,omitempty"`
	DefaultValue *string                                                 `json:"defaultValue,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaDropdown) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaDropdown) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaDropdown) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaDropdown) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaDropdown) GetType() TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown {
	if o == nil {
		return TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaDropdown) GetValues() []TemplateCreateDocumentFromTemplateValue3 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaDropdown) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox string

const (
	TemplateCreateDocumentFromTemplateFieldMetaTypeCheckboxCheckbox TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox = "checkbox"
)

func (e TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox) ToPointer() *TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateValue2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *TemplateCreateDocumentFromTemplateValue2) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateCreateDocumentFromTemplateValue2) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *TemplateCreateDocumentFromTemplateValue2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateCreateDocumentFromTemplateFieldMetaCheckbox struct {
	Label            *string                                                 `json:"label,omitempty"`
	Placeholder      *string                                                 `json:"placeholder,omitempty"`
	Required         *bool                                                   `json:"required,omitempty"`
	ReadOnly         *bool                                                   `json:"readOnly,omitempty"`
	Type             TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox `json:"type"`
	Values           []TemplateCreateDocumentFromTemplateValue2              `json:"values,omitempty"`
	ValidationRule   *string                                                 `json:"validationRule,omitempty"`
	ValidationLength *float64                                                `json:"validationLength,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaCheckbox) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaCheckbox) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaCheckbox) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaCheckbox) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaCheckbox) GetType() TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox {
	if o == nil {
		return TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaCheckbox) GetValues() []TemplateCreateDocumentFromTemplateValue2 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaCheckbox) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaCheckbox) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type TemplateCreateDocumentFromTemplateFieldMetaTypeRadio string

const (
	TemplateCreateDocumentFromTemplateFieldMetaTypeRadioRadio TemplateCreateDocumentFromTemplateFieldMetaTypeRadio = "radio"
)

func (e TemplateCreateDocumentFromTemplateFieldMetaTypeRadio) ToPointer() *TemplateCreateDocumentFromTemplateFieldMetaTypeRadio {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateFieldMetaTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = TemplateCreateDocumentFromTemplateFieldMetaTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateFieldMetaTypeRadio: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateValue1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *TemplateCreateDocumentFromTemplateValue1) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateCreateDocumentFromTemplateValue1) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *TemplateCreateDocumentFromTemplateValue1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateCreateDocumentFromTemplateFieldMetaRadio struct {
	Label       *string                                              `json:"label,omitempty"`
	Placeholder *string                                              `json:"placeholder,omitempty"`
	Required    *bool                                                `json:"required,omitempty"`
	ReadOnly    *bool                                                `json:"readOnly,omitempty"`
	Type        TemplateCreateDocumentFromTemplateFieldMetaTypeRadio `json:"type"`
	Values      []TemplateCreateDocumentFromTemplateValue1           `json:"values,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaRadio) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaRadio) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaRadio) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaRadio) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaRadio) GetType() TemplateCreateDocumentFromTemplateFieldMetaTypeRadio {
	if o == nil {
		return TemplateCreateDocumentFromTemplateFieldMetaTypeRadio("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaRadio) GetValues() []TemplateCreateDocumentFromTemplateValue1 {
	if o == nil {
		return nil
	}
	return o.Values
}

type TemplateCreateDocumentFromTemplateFieldMetaTypeNumber string

const (
	TemplateCreateDocumentFromTemplateFieldMetaTypeNumberNumber TemplateCreateDocumentFromTemplateFieldMetaTypeNumber = "number"
)

func (e TemplateCreateDocumentFromTemplateFieldMetaTypeNumber) ToPointer() *TemplateCreateDocumentFromTemplateFieldMetaTypeNumber {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateFieldMetaTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = TemplateCreateDocumentFromTemplateFieldMetaTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateFieldMetaTypeNumber: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateTextAlign6 string

const (
	TemplateCreateDocumentFromTemplateTextAlign6Left   TemplateCreateDocumentFromTemplateTextAlign6 = "left"
	TemplateCreateDocumentFromTemplateTextAlign6Center TemplateCreateDocumentFromTemplateTextAlign6 = "center"
	TemplateCreateDocumentFromTemplateTextAlign6Right  TemplateCreateDocumentFromTemplateTextAlign6 = "right"
)

func (e TemplateCreateDocumentFromTemplateTextAlign6) ToPointer() *TemplateCreateDocumentFromTemplateTextAlign6 {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateTextAlign6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateCreateDocumentFromTemplateTextAlign6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateTextAlign6: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateFieldMetaNumber struct {
	Label        *string                                               `json:"label,omitempty"`
	Placeholder  *string                                               `json:"placeholder,omitempty"`
	Required     *bool                                                 `json:"required,omitempty"`
	ReadOnly     *bool                                                 `json:"readOnly,omitempty"`
	Type         TemplateCreateDocumentFromTemplateFieldMetaTypeNumber `json:"type"`
	NumberFormat *string                                               `json:"numberFormat,omitempty"`
	Value        *string                                               `json:"value,omitempty"`
	MinValue     *float64                                              `json:"minValue,omitempty"`
	MaxValue     *float64                                              `json:"maxValue,omitempty"`
	FontSize     *float64                                              `json:"fontSize,omitempty"`
	TextAlign    *TemplateCreateDocumentFromTemplateTextAlign6         `json:"textAlign,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaNumber) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaNumber) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaNumber) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaNumber) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaNumber) GetType() TemplateCreateDocumentFromTemplateFieldMetaTypeNumber {
	if o == nil {
		return TemplateCreateDocumentFromTemplateFieldMetaTypeNumber("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaNumber) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaNumber) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaNumber) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaNumber) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaNumber) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaNumber) GetTextAlign() *TemplateCreateDocumentFromTemplateTextAlign6 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateCreateDocumentFromTemplateFieldMetaTypeText string

const (
	TemplateCreateDocumentFromTemplateFieldMetaTypeTextText TemplateCreateDocumentFromTemplateFieldMetaTypeText = "text"
)

func (e TemplateCreateDocumentFromTemplateFieldMetaTypeText) ToPointer() *TemplateCreateDocumentFromTemplateFieldMetaTypeText {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateFieldMetaTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = TemplateCreateDocumentFromTemplateFieldMetaTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateFieldMetaTypeText: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateTextAlign5 string

const (
	TemplateCreateDocumentFromTemplateTextAlign5Left   TemplateCreateDocumentFromTemplateTextAlign5 = "left"
	TemplateCreateDocumentFromTemplateTextAlign5Center TemplateCreateDocumentFromTemplateTextAlign5 = "center"
	TemplateCreateDocumentFromTemplateTextAlign5Right  TemplateCreateDocumentFromTemplateTextAlign5 = "right"
)

func (e TemplateCreateDocumentFromTemplateTextAlign5) ToPointer() *TemplateCreateDocumentFromTemplateTextAlign5 {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateTextAlign5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateCreateDocumentFromTemplateTextAlign5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateTextAlign5: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateFieldMetaText struct {
	Label          *string                                             `json:"label,omitempty"`
	Placeholder    *string                                             `json:"placeholder,omitempty"`
	Required       *bool                                               `json:"required,omitempty"`
	ReadOnly       *bool                                               `json:"readOnly,omitempty"`
	Type           TemplateCreateDocumentFromTemplateFieldMetaTypeText `json:"type"`
	Text           *string                                             `json:"text,omitempty"`
	CharacterLimit *float64                                            `json:"characterLimit,omitempty"`
	FontSize       *float64                                            `json:"fontSize,omitempty"`
	TextAlign      *TemplateCreateDocumentFromTemplateTextAlign5       `json:"textAlign,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaText) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaText) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaText) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaText) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaText) GetType() TemplateCreateDocumentFromTemplateFieldMetaTypeText {
	if o == nil {
		return TemplateCreateDocumentFromTemplateFieldMetaTypeText("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaText) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaText) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaText) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaText) GetTextAlign() *TemplateCreateDocumentFromTemplateTextAlign5 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateCreateDocumentFromTemplateTypeDate string

const (
	TemplateCreateDocumentFromTemplateTypeDateDate TemplateCreateDocumentFromTemplateTypeDate = "date"
)

func (e TemplateCreateDocumentFromTemplateTypeDate) ToPointer() *TemplateCreateDocumentFromTemplateTypeDate {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = TemplateCreateDocumentFromTemplateTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateTypeDate: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateTextAlign4 string

const (
	TemplateCreateDocumentFromTemplateTextAlign4Left   TemplateCreateDocumentFromTemplateTextAlign4 = "left"
	TemplateCreateDocumentFromTemplateTextAlign4Center TemplateCreateDocumentFromTemplateTextAlign4 = "center"
	TemplateCreateDocumentFromTemplateTextAlign4Right  TemplateCreateDocumentFromTemplateTextAlign4 = "right"
)

func (e TemplateCreateDocumentFromTemplateTextAlign4) ToPointer() *TemplateCreateDocumentFromTemplateTextAlign4 {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateTextAlign4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateCreateDocumentFromTemplateTextAlign4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateTextAlign4: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateFieldMetaDate struct {
	Label       *string                                       `json:"label,omitempty"`
	Placeholder *string                                       `json:"placeholder,omitempty"`
	Required    *bool                                         `json:"required,omitempty"`
	ReadOnly    *bool                                         `json:"readOnly,omitempty"`
	Type        TemplateCreateDocumentFromTemplateTypeDate    `json:"type"`
	FontSize    *float64                                      `json:"fontSize,omitempty"`
	TextAlign   *TemplateCreateDocumentFromTemplateTextAlign4 `json:"textAlign,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaDate) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaDate) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaDate) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaDate) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaDate) GetType() TemplateCreateDocumentFromTemplateTypeDate {
	if o == nil {
		return TemplateCreateDocumentFromTemplateTypeDate("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaDate) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaDate) GetTextAlign() *TemplateCreateDocumentFromTemplateTextAlign4 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateCreateDocumentFromTemplateTypeEmail string

const (
	TemplateCreateDocumentFromTemplateTypeEmailEmail TemplateCreateDocumentFromTemplateTypeEmail = "email"
)

func (e TemplateCreateDocumentFromTemplateTypeEmail) ToPointer() *TemplateCreateDocumentFromTemplateTypeEmail {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = TemplateCreateDocumentFromTemplateTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateTypeEmail: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateTextAlign3 string

const (
	TemplateCreateDocumentFromTemplateTextAlign3Left   TemplateCreateDocumentFromTemplateTextAlign3 = "left"
	TemplateCreateDocumentFromTemplateTextAlign3Center TemplateCreateDocumentFromTemplateTextAlign3 = "center"
	TemplateCreateDocumentFromTemplateTextAlign3Right  TemplateCreateDocumentFromTemplateTextAlign3 = "right"
)

func (e TemplateCreateDocumentFromTemplateTextAlign3) ToPointer() *TemplateCreateDocumentFromTemplateTextAlign3 {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateTextAlign3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateCreateDocumentFromTemplateTextAlign3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateTextAlign3: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateFieldMetaEmail struct {
	Label       *string                                       `json:"label,omitempty"`
	Placeholder *string                                       `json:"placeholder,omitempty"`
	Required    *bool                                         `json:"required,omitempty"`
	ReadOnly    *bool                                         `json:"readOnly,omitempty"`
	Type        TemplateCreateDocumentFromTemplateTypeEmail   `json:"type"`
	FontSize    *float64                                      `json:"fontSize,omitempty"`
	TextAlign   *TemplateCreateDocumentFromTemplateTextAlign3 `json:"textAlign,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaEmail) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaEmail) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaEmail) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaEmail) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaEmail) GetType() TemplateCreateDocumentFromTemplateTypeEmail {
	if o == nil {
		return TemplateCreateDocumentFromTemplateTypeEmail("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaEmail) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaEmail) GetTextAlign() *TemplateCreateDocumentFromTemplateTextAlign3 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateCreateDocumentFromTemplateTypeName string

const (
	TemplateCreateDocumentFromTemplateTypeNameName TemplateCreateDocumentFromTemplateTypeName = "name"
)

func (e TemplateCreateDocumentFromTemplateTypeName) ToPointer() *TemplateCreateDocumentFromTemplateTypeName {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = TemplateCreateDocumentFromTemplateTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateTypeName: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateTextAlign2 string

const (
	TemplateCreateDocumentFromTemplateTextAlign2Left   TemplateCreateDocumentFromTemplateTextAlign2 = "left"
	TemplateCreateDocumentFromTemplateTextAlign2Center TemplateCreateDocumentFromTemplateTextAlign2 = "center"
	TemplateCreateDocumentFromTemplateTextAlign2Right  TemplateCreateDocumentFromTemplateTextAlign2 = "right"
)

func (e TemplateCreateDocumentFromTemplateTextAlign2) ToPointer() *TemplateCreateDocumentFromTemplateTextAlign2 {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateTextAlign2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateCreateDocumentFromTemplateTextAlign2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateTextAlign2: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateFieldMetaName struct {
	Label       *string                                       `json:"label,omitempty"`
	Placeholder *string                                       `json:"placeholder,omitempty"`
	Required    *bool                                         `json:"required,omitempty"`
	ReadOnly    *bool                                         `json:"readOnly,omitempty"`
	Type        TemplateCreateDocumentFromTemplateTypeName    `json:"type"`
	FontSize    *float64                                      `json:"fontSize,omitempty"`
	TextAlign   *TemplateCreateDocumentFromTemplateTextAlign2 `json:"textAlign,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaName) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaName) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaName) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaName) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaName) GetType() TemplateCreateDocumentFromTemplateTypeName {
	if o == nil {
		return TemplateCreateDocumentFromTemplateTypeName("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaName) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaName) GetTextAlign() *TemplateCreateDocumentFromTemplateTextAlign2 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateCreateDocumentFromTemplateTypeInitials string

const (
	TemplateCreateDocumentFromTemplateTypeInitialsInitials TemplateCreateDocumentFromTemplateTypeInitials = "initials"
)

func (e TemplateCreateDocumentFromTemplateTypeInitials) ToPointer() *TemplateCreateDocumentFromTemplateTypeInitials {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = TemplateCreateDocumentFromTemplateTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateTypeInitials: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateTextAlign1 string

const (
	TemplateCreateDocumentFromTemplateTextAlign1Left   TemplateCreateDocumentFromTemplateTextAlign1 = "left"
	TemplateCreateDocumentFromTemplateTextAlign1Center TemplateCreateDocumentFromTemplateTextAlign1 = "center"
	TemplateCreateDocumentFromTemplateTextAlign1Right  TemplateCreateDocumentFromTemplateTextAlign1 = "right"
)

func (e TemplateCreateDocumentFromTemplateTextAlign1) ToPointer() *TemplateCreateDocumentFromTemplateTextAlign1 {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateTextAlign1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateCreateDocumentFromTemplateTextAlign1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateTextAlign1: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateFieldMetaInitials struct {
	Label       *string                                        `json:"label,omitempty"`
	Placeholder *string                                        `json:"placeholder,omitempty"`
	Required    *bool                                          `json:"required,omitempty"`
	ReadOnly    *bool                                          `json:"readOnly,omitempty"`
	Type        TemplateCreateDocumentFromTemplateTypeInitials `json:"type"`
	FontSize    *float64                                       `json:"fontSize,omitempty"`
	TextAlign   *TemplateCreateDocumentFromTemplateTextAlign1  `json:"textAlign,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaInitials) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaInitials) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaInitials) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaInitials) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaInitials) GetType() TemplateCreateDocumentFromTemplateTypeInitials {
	if o == nil {
		return TemplateCreateDocumentFromTemplateTypeInitials("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaInitials) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaInitials) GetTextAlign() *TemplateCreateDocumentFromTemplateTextAlign1 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateCreateDocumentFromTemplateFieldMetaUnionType string

const (
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaInitials TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template_createDocumentFromTemplate_fieldMeta_Initials"
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaName     TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template_createDocumentFromTemplate_fieldMeta_Name"
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaEmail    TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template_createDocumentFromTemplate_fieldMeta_Email"
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaDate     TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template_createDocumentFromTemplate_fieldMeta_Date"
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaText     TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template_createDocumentFromTemplate_fieldMeta_Text"
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaNumber   TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template_createDocumentFromTemplate_fieldMeta_Number"
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaRadio    TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template_createDocumentFromTemplate_fieldMeta_Radio"
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaCheckbox TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template_createDocumentFromTemplate_fieldMeta_Checkbox"
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaDropdown TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template_createDocumentFromTemplate_fieldMeta_Dropdown"
)

type TemplateCreateDocumentFromTemplateFieldMetaUnion struct {
	TemplateCreateDocumentFromTemplateFieldMetaInitials *TemplateCreateDocumentFromTemplateFieldMetaInitials `queryParam:"inline"`
	TemplateCreateDocumentFromTemplateFieldMetaName     *TemplateCreateDocumentFromTemplateFieldMetaName     `queryParam:"inline"`
	TemplateCreateDocumentFromTemplateFieldMetaEmail    *TemplateCreateDocumentFromTemplateFieldMetaEmail    `queryParam:"inline"`
	TemplateCreateDocumentFromTemplateFieldMetaDate     *TemplateCreateDocumentFromTemplateFieldMetaDate     `queryParam:"inline"`
	TemplateCreateDocumentFromTemplateFieldMetaText     *TemplateCreateDocumentFromTemplateFieldMetaText     `queryParam:"inline"`
	TemplateCreateDocumentFromTemplateFieldMetaNumber   *TemplateCreateDocumentFromTemplateFieldMetaNumber   `queryParam:"inline"`
	TemplateCreateDocumentFromTemplateFieldMetaRadio    *TemplateCreateDocumentFromTemplateFieldMetaRadio    `queryParam:"inline"`
	TemplateCreateDocumentFromTemplateFieldMetaCheckbox *TemplateCreateDocumentFromTemplateFieldMetaCheckbox `queryParam:"inline"`
	TemplateCreateDocumentFromTemplateFieldMetaDropdown *TemplateCreateDocumentFromTemplateFieldMetaDropdown `queryParam:"inline"`

	Type TemplateCreateDocumentFromTemplateFieldMetaUnionType
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaUnionTemplateCreateDocumentFromTemplateFieldMetaInitials(templateCreateDocumentFromTemplateFieldMetaInitials TemplateCreateDocumentFromTemplateFieldMetaInitials) TemplateCreateDocumentFromTemplateFieldMetaUnion {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaInitials

	return TemplateCreateDocumentFromTemplateFieldMetaUnion{
		TemplateCreateDocumentFromTemplateFieldMetaInitials: &templateCreateDocumentFromTemplateFieldMetaInitials,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaUnionTemplateCreateDocumentFromTemplateFieldMetaName(templateCreateDocumentFromTemplateFieldMetaName TemplateCreateDocumentFromTemplateFieldMetaName) TemplateCreateDocumentFromTemplateFieldMetaUnion {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaName

	return TemplateCreateDocumentFromTemplateFieldMetaUnion{
		TemplateCreateDocumentFromTemplateFieldMetaName: &templateCreateDocumentFromTemplateFieldMetaName,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaUnionTemplateCreateDocumentFromTemplateFieldMetaEmail(templateCreateDocumentFromTemplateFieldMetaEmail TemplateCreateDocumentFromTemplateFieldMetaEmail) TemplateCreateDocumentFromTemplateFieldMetaUnion {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaEmail

	return TemplateCreateDocumentFromTemplateFieldMetaUnion{
		TemplateCreateDocumentFromTemplateFieldMetaEmail: &templateCreateDocumentFromTemplateFieldMetaEmail,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaUnionTemplateCreateDocumentFromTemplateFieldMetaDate(templateCreateDocumentFromTemplateFieldMetaDate TemplateCreateDocumentFromTemplateFieldMetaDate) TemplateCreateDocumentFromTemplateFieldMetaUnion {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaDate

	return TemplateCreateDocumentFromTemplateFieldMetaUnion{
		TemplateCreateDocumentFromTemplateFieldMetaDate: &templateCreateDocumentFromTemplateFieldMetaDate,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaUnionTemplateCreateDocumentFromTemplateFieldMetaText(templateCreateDocumentFromTemplateFieldMetaText TemplateCreateDocumentFromTemplateFieldMetaText) TemplateCreateDocumentFromTemplateFieldMetaUnion {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaText

	return TemplateCreateDocumentFromTemplateFieldMetaUnion{
		TemplateCreateDocumentFromTemplateFieldMetaText: &templateCreateDocumentFromTemplateFieldMetaText,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaUnionTemplateCreateDocumentFromTemplateFieldMetaNumber(templateCreateDocumentFromTemplateFieldMetaNumber TemplateCreateDocumentFromTemplateFieldMetaNumber) TemplateCreateDocumentFromTemplateFieldMetaUnion {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaNumber

	return TemplateCreateDocumentFromTemplateFieldMetaUnion{
		TemplateCreateDocumentFromTemplateFieldMetaNumber: &templateCreateDocumentFromTemplateFieldMetaNumber,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaUnionTemplateCreateDocumentFromTemplateFieldMetaRadio(templateCreateDocumentFromTemplateFieldMetaRadio TemplateCreateDocumentFromTemplateFieldMetaRadio) TemplateCreateDocumentFromTemplateFieldMetaUnion {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaRadio

	return TemplateCreateDocumentFromTemplateFieldMetaUnion{
		TemplateCreateDocumentFromTemplateFieldMetaRadio: &templateCreateDocumentFromTemplateFieldMetaRadio,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaUnionTemplateCreateDocumentFromTemplateFieldMetaCheckbox(templateCreateDocumentFromTemplateFieldMetaCheckbox TemplateCreateDocumentFromTemplateFieldMetaCheckbox) TemplateCreateDocumentFromTemplateFieldMetaUnion {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaCheckbox

	return TemplateCreateDocumentFromTemplateFieldMetaUnion{
		TemplateCreateDocumentFromTemplateFieldMetaCheckbox: &templateCreateDocumentFromTemplateFieldMetaCheckbox,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaUnionTemplateCreateDocumentFromTemplateFieldMetaDropdown(templateCreateDocumentFromTemplateFieldMetaDropdown TemplateCreateDocumentFromTemplateFieldMetaDropdown) TemplateCreateDocumentFromTemplateFieldMetaUnion {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaDropdown

	return TemplateCreateDocumentFromTemplateFieldMetaUnion{
		TemplateCreateDocumentFromTemplateFieldMetaDropdown: &templateCreateDocumentFromTemplateFieldMetaDropdown,
		Type: typ,
	}
}

func (u *TemplateCreateDocumentFromTemplateFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var templateCreateDocumentFromTemplateFieldMetaRadio TemplateCreateDocumentFromTemplateFieldMetaRadio = TemplateCreateDocumentFromTemplateFieldMetaRadio{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMetaRadio, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMetaRadio = &templateCreateDocumentFromTemplateFieldMetaRadio
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaRadio
		return nil
	}

	var templateCreateDocumentFromTemplateFieldMetaInitials TemplateCreateDocumentFromTemplateFieldMetaInitials = TemplateCreateDocumentFromTemplateFieldMetaInitials{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMetaInitials, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMetaInitials = &templateCreateDocumentFromTemplateFieldMetaInitials
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaInitials
		return nil
	}

	var templateCreateDocumentFromTemplateFieldMetaName TemplateCreateDocumentFromTemplateFieldMetaName = TemplateCreateDocumentFromTemplateFieldMetaName{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMetaName, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMetaName = &templateCreateDocumentFromTemplateFieldMetaName
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaName
		return nil
	}

	var templateCreateDocumentFromTemplateFieldMetaEmail TemplateCreateDocumentFromTemplateFieldMetaEmail = TemplateCreateDocumentFromTemplateFieldMetaEmail{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMetaEmail, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMetaEmail = &templateCreateDocumentFromTemplateFieldMetaEmail
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaEmail
		return nil
	}

	var templateCreateDocumentFromTemplateFieldMetaDate TemplateCreateDocumentFromTemplateFieldMetaDate = TemplateCreateDocumentFromTemplateFieldMetaDate{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMetaDate, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMetaDate = &templateCreateDocumentFromTemplateFieldMetaDate
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaDate
		return nil
	}

	var templateCreateDocumentFromTemplateFieldMetaDropdown TemplateCreateDocumentFromTemplateFieldMetaDropdown = TemplateCreateDocumentFromTemplateFieldMetaDropdown{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMetaDropdown, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMetaDropdown = &templateCreateDocumentFromTemplateFieldMetaDropdown
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaDropdown
		return nil
	}

	var templateCreateDocumentFromTemplateFieldMetaCheckbox TemplateCreateDocumentFromTemplateFieldMetaCheckbox = TemplateCreateDocumentFromTemplateFieldMetaCheckbox{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMetaCheckbox, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMetaCheckbox = &templateCreateDocumentFromTemplateFieldMetaCheckbox
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaCheckbox
		return nil
	}

	var templateCreateDocumentFromTemplateFieldMetaText TemplateCreateDocumentFromTemplateFieldMetaText = TemplateCreateDocumentFromTemplateFieldMetaText{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMetaText, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMetaText = &templateCreateDocumentFromTemplateFieldMetaText
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaText
		return nil
	}

	var templateCreateDocumentFromTemplateFieldMetaNumber TemplateCreateDocumentFromTemplateFieldMetaNumber = TemplateCreateDocumentFromTemplateFieldMetaNumber{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMetaNumber, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMetaNumber = &templateCreateDocumentFromTemplateFieldMetaNumber
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMetaNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TemplateCreateDocumentFromTemplateFieldMetaUnion", string(data))
}

func (u TemplateCreateDocumentFromTemplateFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.TemplateCreateDocumentFromTemplateFieldMetaInitials != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMetaInitials, "", true)
	}

	if u.TemplateCreateDocumentFromTemplateFieldMetaName != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMetaName, "", true)
	}

	if u.TemplateCreateDocumentFromTemplateFieldMetaEmail != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMetaEmail, "", true)
	}

	if u.TemplateCreateDocumentFromTemplateFieldMetaDate != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMetaDate, "", true)
	}

	if u.TemplateCreateDocumentFromTemplateFieldMetaText != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMetaText, "", true)
	}

	if u.TemplateCreateDocumentFromTemplateFieldMetaNumber != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMetaNumber, "", true)
	}

	if u.TemplateCreateDocumentFromTemplateFieldMetaRadio != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMetaRadio, "", true)
	}

	if u.TemplateCreateDocumentFromTemplateFieldMetaCheckbox != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMetaCheckbox, "", true)
	}

	if u.TemplateCreateDocumentFromTemplateFieldMetaDropdown != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMetaDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type TemplateCreateDocumentFromTemplateFieldMetaUnion: all fields are null")
}

type TemplateCreateDocumentFromTemplateField struct {
	Type        TemplateCreateDocumentFromTemplateFieldType `json:"type"`
	ID          float64                                     `json:"id"`
	SecondaryID string                                      `json:"secondaryId"`
	DocumentID  *float64                                    `json:"documentId"`
	TemplateID  *float64                                    `json:"templateId"`
	RecipientID float64                                     `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                                           `json:"page"`
	PositionX  any                                               `json:"positionX,omitempty"`
	PositionY  any                                               `json:"positionY,omitempty"`
	Width      any                                               `json:"width,omitempty"`
	Height     any                                               `json:"height,omitempty"`
	CustomText string                                            `json:"customText"`
	Inserted   bool                                              `json:"inserted"`
	FieldMeta  *TemplateCreateDocumentFromTemplateFieldMetaUnion `json:"fieldMeta"`
}

func (o *TemplateCreateDocumentFromTemplateField) GetType() TemplateCreateDocumentFromTemplateFieldType {
	if o == nil {
		return TemplateCreateDocumentFromTemplateFieldType("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateField) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateCreateDocumentFromTemplateField) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *TemplateCreateDocumentFromTemplateField) GetDocumentID() *float64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *TemplateCreateDocumentFromTemplateField) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *TemplateCreateDocumentFromTemplateField) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *TemplateCreateDocumentFromTemplateField) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *TemplateCreateDocumentFromTemplateField) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *TemplateCreateDocumentFromTemplateField) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *TemplateCreateDocumentFromTemplateField) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *TemplateCreateDocumentFromTemplateField) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *TemplateCreateDocumentFromTemplateField) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *TemplateCreateDocumentFromTemplateField) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *TemplateCreateDocumentFromTemplateField) GetFieldMeta() *TemplateCreateDocumentFromTemplateFieldMetaUnion {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

// TemplateCreateDocumentFromTemplateResponseBody - Successful response
type TemplateCreateDocumentFromTemplateResponseBody struct {
	Visibility TemplateCreateDocumentFromTemplateVisibility `json:"visibility"`
	Status     TemplateCreateDocumentFromTemplateStatus     `json:"status"`
	Source     TemplateCreateDocumentFromTemplateSource     `json:"source"`
	ID         float64                                      `json:"id"`
	// A custom external ID you can use to identify the document.
	ExternalID *string `json:"externalId"`
	// The ID of the user that created this document.
	UserID         float64                                                 `json:"userId"`
	AuthOptions    *TemplateCreateDocumentFromTemplateAuthOptions          `json:"authOptions"`
	FormValues     map[string]TemplateCreateDocumentFromTemplateFormValues `json:"formValues"`
	Title          string                                                  `json:"title"`
	DocumentDataID string                                                  `json:"documentDataId"`
	CreatedAt      string                                                  `json:"createdAt"`
	UpdatedAt      string                                                  `json:"updatedAt"`
	CompletedAt    *string                                                 `json:"completedAt"`
	DeletedAt      *string                                                 `json:"deletedAt"`
	TeamID         *float64                                                `json:"teamId"`
	TemplateID     *float64                                                `json:"templateId"`
	DocumentData   TemplateCreateDocumentFromTemplateDocumentData          `json:"documentData"`
	DocumentMeta   *TemplateCreateDocumentFromTemplateDocumentMeta         `json:"documentMeta"`
	Recipients     []TemplateCreateDocumentFromTemplateRecipientResponse   `json:"recipients"`
	Fields         []TemplateCreateDocumentFromTemplateField               `json:"fields"`
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetVisibility() TemplateCreateDocumentFromTemplateVisibility {
	if o == nil {
		return TemplateCreateDocumentFromTemplateVisibility("")
	}
	return o.Visibility
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetStatus() TemplateCreateDocumentFromTemplateStatus {
	if o == nil {
		return TemplateCreateDocumentFromTemplateStatus("")
	}
	return o.Status
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetSource() TemplateCreateDocumentFromTemplateSource {
	if o == nil {
		return TemplateCreateDocumentFromTemplateSource("")
	}
	return o.Source
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetUserID() float64 {
	if o == nil {
		return 0.0
	}
	return o.UserID
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetAuthOptions() *TemplateCreateDocumentFromTemplateAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetFormValues() map[string]TemplateCreateDocumentFromTemplateFormValues {
	if o == nil {
		return nil
	}
	return o.FormValues
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetDocumentDataID() string {
	if o == nil {
		return ""
	}
	return o.DocumentDataID
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetCompletedAt() *string {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetTeamID() *float64 {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetDocumentData() TemplateCreateDocumentFromTemplateDocumentData {
	if o == nil {
		return TemplateCreateDocumentFromTemplateDocumentData{}
	}
	return o.DocumentData
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetDocumentMeta() *TemplateCreateDocumentFromTemplateDocumentMeta {
	if o == nil {
		return nil
	}
	return o.DocumentMeta
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetRecipients() []TemplateCreateDocumentFromTemplateRecipientResponse {
	if o == nil {
		return []TemplateCreateDocumentFromTemplateRecipientResponse{}
	}
	return o.Recipients
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetFields() []TemplateCreateDocumentFromTemplateField {
	if o == nil {
		return []TemplateCreateDocumentFromTemplateField{}
	}
	return o.Fields
}

type TemplateCreateDocumentFromTemplateResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *TemplateCreateDocumentFromTemplateResponseBody
}

func (o *TemplateCreateDocumentFromTemplateResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *TemplateCreateDocumentFromTemplateResponse) GetObject() *TemplateCreateDocumentFromTemplateResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
