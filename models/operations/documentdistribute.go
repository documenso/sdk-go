// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

// DocumentDistributeDateFormat - The date format to use for date fields and signing the document.
type DocumentDistributeDateFormat string

const (
	DocumentDistributeDateFormatYyyyMMddHhMmA            DocumentDistributeDateFormat = "yyyy-MM-dd hh:mm a"
	DocumentDistributeDateFormatYyyyMMdd                 DocumentDistributeDateFormat = "yyyy-MM-dd"
	DocumentDistributeDateFormatDdMmSlashYyyy            DocumentDistributeDateFormat = "dd/MM/yyyy"
	DocumentDistributeDateFormatMmDdSlashYyyy            DocumentDistributeDateFormat = "MM/dd/yyyy"
	DocumentDistributeDateFormatYyMMdd                   DocumentDistributeDateFormat = "yy-MM-dd"
	DocumentDistributeDateFormatMmmmDdCommaYyyy          DocumentDistributeDateFormat = "MMMM dd, yyyy"
	DocumentDistributeDateFormatEeeeMmmmDdCommaYyyy      DocumentDistributeDateFormat = "EEEE, MMMM dd, yyyy"
	DocumentDistributeDateFormatDdMmSlashYyyyHhMmA       DocumentDistributeDateFormat = "dd/MM/yyyy hh:mm a"
	DocumentDistributeDateFormatDdMmSlashYyyyHHmm        DocumentDistributeDateFormat = "dd/MM/yyyy HH:mm"
	DocumentDistributeDateFormatMmDdSlashYyyyHhMmA       DocumentDistributeDateFormat = "MM/dd/yyyy hh:mm a"
	DocumentDistributeDateFormatMmDdSlashYyyyHHmm        DocumentDistributeDateFormat = "MM/dd/yyyy HH:mm"
	DocumentDistributeDateFormatDdDotMmDotYyyy           DocumentDistributeDateFormat = "dd.MM.yyyy"
	DocumentDistributeDateFormatDdDotMmDotYyyyHHmm       DocumentDistributeDateFormat = "dd.MM.yyyy HH:mm"
	DocumentDistributeDateFormatYyyyMMddHHmm             DocumentDistributeDateFormat = "yyyy-MM-dd HH:mm"
	DocumentDistributeDateFormatYyMMddHhMmA              DocumentDistributeDateFormat = "yy-MM-dd hh:mm a"
	DocumentDistributeDateFormatYyMMddHHmm               DocumentDistributeDateFormat = "yy-MM-dd HH:mm"
	DocumentDistributeDateFormatYyyyMMddHHmmss           DocumentDistributeDateFormat = "yyyy-MM-dd HH:mm:ss"
	DocumentDistributeDateFormatMmmmDdCommaYyyyHhMmA     DocumentDistributeDateFormat = "MMMM dd, yyyy hh:mm a"
	DocumentDistributeDateFormatMmmmDdCommaYyyyHHmm      DocumentDistributeDateFormat = "MMMM dd, yyyy HH:mm"
	DocumentDistributeDateFormatEeeeMmmmDdCommaYyyyHhMmA DocumentDistributeDateFormat = "EEEE, MMMM dd, yyyy hh:mm a"
	DocumentDistributeDateFormatEeeeMmmmDdCommaYyyyHHmm  DocumentDistributeDateFormat = "EEEE, MMMM dd, yyyy HH:mm"
	DocumentDistributeDateFormatIso8601Full              DocumentDistributeDateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSXXX"
)

func (e DocumentDistributeDateFormat) ToPointer() *DocumentDistributeDateFormat {
	return &e
}
func (e *DocumentDistributeDateFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "yyyy-MM-dd hh:mm a":
		fallthrough
	case "yyyy-MM-dd":
		fallthrough
	case "dd/MM/yyyy":
		fallthrough
	case "MM/dd/yyyy":
		fallthrough
	case "yy-MM-dd":
		fallthrough
	case "MMMM dd, yyyy":
		fallthrough
	case "EEEE, MMMM dd, yyyy":
		fallthrough
	case "dd/MM/yyyy hh:mm a":
		fallthrough
	case "dd/MM/yyyy HH:mm":
		fallthrough
	case "MM/dd/yyyy hh:mm a":
		fallthrough
	case "MM/dd/yyyy HH:mm":
		fallthrough
	case "dd.MM.yyyy":
		fallthrough
	case "dd.MM.yyyy HH:mm":
		fallthrough
	case "yyyy-MM-dd HH:mm":
		fallthrough
	case "yy-MM-dd hh:mm a":
		fallthrough
	case "yy-MM-dd HH:mm":
		fallthrough
	case "yyyy-MM-dd HH:mm:ss":
		fallthrough
	case "MMMM dd, yyyy hh:mm a":
		fallthrough
	case "MMMM dd, yyyy HH:mm":
		fallthrough
	case "EEEE, MMMM dd, yyyy hh:mm a":
		fallthrough
	case "EEEE, MMMM dd, yyyy HH:mm":
		fallthrough
	case "yyyy-MM-dd'T'HH:mm:ss.SSSXXX":
		*e = DocumentDistributeDateFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentDistributeDateFormat: %v", v)
	}
}

// DocumentDistributeDistributionMethod - The distribution method to use when sending the document to the recipients.
type DocumentDistributeDistributionMethod string

const (
	DocumentDistributeDistributionMethodEmail DocumentDistributeDistributionMethod = "EMAIL"
	DocumentDistributeDistributionMethodNone  DocumentDistributeDistributionMethod = "NONE"
)

func (e DocumentDistributeDistributionMethod) ToPointer() *DocumentDistributeDistributionMethod {
	return &e
}
func (e *DocumentDistributeDistributionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = DocumentDistributeDistributionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentDistributeDistributionMethod: %v", v)
	}
}

// DocumentDistributeLanguage - The language to use for email communications with recipients.
type DocumentDistributeLanguage string

const (
	DocumentDistributeLanguageDe DocumentDistributeLanguage = "de"
	DocumentDistributeLanguageEn DocumentDistributeLanguage = "en"
	DocumentDistributeLanguageFr DocumentDistributeLanguage = "fr"
	DocumentDistributeLanguageEs DocumentDistributeLanguage = "es"
	DocumentDistributeLanguageIt DocumentDistributeLanguage = "it"
	DocumentDistributeLanguagePl DocumentDistributeLanguage = "pl"
)

func (e DocumentDistributeLanguage) ToPointer() *DocumentDistributeLanguage {
	return &e
}
func (e *DocumentDistributeLanguage) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "de":
		fallthrough
	case "en":
		fallthrough
	case "fr":
		fallthrough
	case "es":
		fallthrough
	case "it":
		fallthrough
	case "pl":
		*e = DocumentDistributeLanguage(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentDistributeLanguage: %v", v)
	}
}

type DocumentDistributeEmailSettings struct {
	// Whether to send an email to all recipients that the document is ready for them to sign.
	RecipientSigningRequest *bool `default:"true" json:"recipientSigningRequest"`
	// Whether to send an email to the recipient who was removed from a pending document.
	RecipientRemoved *bool `default:"true" json:"recipientRemoved"`
	// Whether to send an email to the document owner when a recipient has signed the document.
	RecipientSigned *bool `default:"true" json:"recipientSigned"`
	// Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
	DocumentPending *bool `default:"true" json:"documentPending"`
	// Whether to send an email to all recipients when the document is complete.
	DocumentCompleted *bool `default:"true" json:"documentCompleted"`
	// Whether to send an email to all recipients if a pending document has been deleted.
	DocumentDeleted *bool `default:"true" json:"documentDeleted"`
	// Whether to send an email to the document owner when the document is complete.
	OwnerDocumentCompleted *bool `default:"true" json:"ownerDocumentCompleted"`
}

func (d DocumentDistributeEmailSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentDistributeEmailSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (d *DocumentDistributeEmailSettings) GetRecipientSigningRequest() *bool {
	if d == nil {
		return nil
	}
	return d.RecipientSigningRequest
}

func (d *DocumentDistributeEmailSettings) GetRecipientRemoved() *bool {
	if d == nil {
		return nil
	}
	return d.RecipientRemoved
}

func (d *DocumentDistributeEmailSettings) GetRecipientSigned() *bool {
	if d == nil {
		return nil
	}
	return d.RecipientSigned
}

func (d *DocumentDistributeEmailSettings) GetDocumentPending() *bool {
	if d == nil {
		return nil
	}
	return d.DocumentPending
}

func (d *DocumentDistributeEmailSettings) GetDocumentCompleted() *bool {
	if d == nil {
		return nil
	}
	return d.DocumentCompleted
}

func (d *DocumentDistributeEmailSettings) GetDocumentDeleted() *bool {
	if d == nil {
		return nil
	}
	return d.DocumentDeleted
}

func (d *DocumentDistributeEmailSettings) GetOwnerDocumentCompleted() *bool {
	if d == nil {
		return nil
	}
	return d.OwnerDocumentCompleted
}

type DocumentDistributeMeta struct {
	// The subject of the email that will be sent to the recipients.
	Subject *string `json:"subject,omitempty"`
	// The message of the email that will be sent to the recipients.
	Message *string `json:"message,omitempty"`
	// The timezone to use for date fields and signing the document. Example Etc/UTC, Australia/Melbourne
	Timezone *string `json:"timezone,omitempty"`
	// The date format to use for date fields and signing the document.
	DateFormat *DocumentDistributeDateFormat `json:"dateFormat,omitempty"`
	// The distribution method to use when sending the document to the recipients.
	DistributionMethod *DocumentDistributeDistributionMethod `json:"distributionMethod,omitempty"`
	// The URL to which the recipient should be redirected after signing the document.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The language to use for email communications with recipients.
	Language      *DocumentDistributeLanguage      `json:"language,omitempty"`
	EmailID       *string                          `json:"emailId,omitempty"`
	EmailReplyTo  *string                          `json:"emailReplyTo,omitempty"`
	EmailSettings *DocumentDistributeEmailSettings `json:"emailSettings,omitempty"`
}

func (d *DocumentDistributeMeta) GetSubject() *string {
	if d == nil {
		return nil
	}
	return d.Subject
}

func (d *DocumentDistributeMeta) GetMessage() *string {
	if d == nil {
		return nil
	}
	return d.Message
}

func (d *DocumentDistributeMeta) GetTimezone() *string {
	if d == nil {
		return nil
	}
	return d.Timezone
}

func (d *DocumentDistributeMeta) GetDateFormat() *DocumentDistributeDateFormat {
	if d == nil {
		return nil
	}
	return d.DateFormat
}

func (d *DocumentDistributeMeta) GetDistributionMethod() *DocumentDistributeDistributionMethod {
	if d == nil {
		return nil
	}
	return d.DistributionMethod
}

func (d *DocumentDistributeMeta) GetRedirectURL() *string {
	if d == nil {
		return nil
	}
	return d.RedirectURL
}

func (d *DocumentDistributeMeta) GetLanguage() *DocumentDistributeLanguage {
	if d == nil {
		return nil
	}
	return d.Language
}

func (d *DocumentDistributeMeta) GetEmailID() *string {
	if d == nil {
		return nil
	}
	return d.EmailID
}

func (d *DocumentDistributeMeta) GetEmailReplyTo() *string {
	if d == nil {
		return nil
	}
	return d.EmailReplyTo
}

func (d *DocumentDistributeMeta) GetEmailSettings() *DocumentDistributeEmailSettings {
	if d == nil {
		return nil
	}
	return d.EmailSettings
}

type DocumentDistributeRequest struct {
	// The ID of the document to send.
	DocumentID float64                 `json:"documentId"`
	Meta       *DocumentDistributeMeta `json:"meta,omitempty"`
}

func (d *DocumentDistributeRequest) GetDocumentID() float64 {
	if d == nil {
		return 0.0
	}
	return d.DocumentID
}

func (d *DocumentDistributeRequest) GetMeta() *DocumentDistributeMeta {
	if d == nil {
		return nil
	}
	return d.Meta
}

type DocumentDistributeVisibility string

const (
	DocumentDistributeVisibilityEveryone        DocumentDistributeVisibility = "EVERYONE"
	DocumentDistributeVisibilityManagerAndAbove DocumentDistributeVisibility = "MANAGER_AND_ABOVE"
	DocumentDistributeVisibilityAdmin           DocumentDistributeVisibility = "ADMIN"
)

func (e DocumentDistributeVisibility) ToPointer() *DocumentDistributeVisibility {
	return &e
}
func (e *DocumentDistributeVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = DocumentDistributeVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentDistributeVisibility: %v", v)
	}
}

type DocumentDistributeStatus string

const (
	DocumentDistributeStatusDraft     DocumentDistributeStatus = "DRAFT"
	DocumentDistributeStatusPending   DocumentDistributeStatus = "PENDING"
	DocumentDistributeStatusCompleted DocumentDistributeStatus = "COMPLETED"
	DocumentDistributeStatusRejected  DocumentDistributeStatus = "REJECTED"
)

func (e DocumentDistributeStatus) ToPointer() *DocumentDistributeStatus {
	return &e
}
func (e *DocumentDistributeStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "PENDING":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "REJECTED":
		*e = DocumentDistributeStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentDistributeStatus: %v", v)
	}
}

type DocumentDistributeSource string

const (
	DocumentDistributeSourceDocument           DocumentDistributeSource = "DOCUMENT"
	DocumentDistributeSourceTemplate           DocumentDistributeSource = "TEMPLATE"
	DocumentDistributeSourceTemplateDirectLink DocumentDistributeSource = "TEMPLATE_DIRECT_LINK"
)

func (e DocumentDistributeSource) ToPointer() *DocumentDistributeSource {
	return &e
}
func (e *DocumentDistributeSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		fallthrough
	case "TEMPLATE_DIRECT_LINK":
		*e = DocumentDistributeSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentDistributeSource: %v", v)
	}
}

// DocumentDistributeGlobalAccessAuth - The type of authentication required for the recipient to access the document.
type DocumentDistributeGlobalAccessAuth string

const (
	DocumentDistributeGlobalAccessAuthAccount       DocumentDistributeGlobalAccessAuth = "ACCOUNT"
	DocumentDistributeGlobalAccessAuthTwoFactorAuth DocumentDistributeGlobalAccessAuth = "TWO_FACTOR_AUTH"
)

func (e DocumentDistributeGlobalAccessAuth) ToPointer() *DocumentDistributeGlobalAccessAuth {
	return &e
}
func (e *DocumentDistributeGlobalAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = DocumentDistributeGlobalAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentDistributeGlobalAccessAuth: %v", v)
	}
}

// DocumentDistributeGlobalActionAuth - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type DocumentDistributeGlobalActionAuth string

const (
	DocumentDistributeGlobalActionAuthAccount       DocumentDistributeGlobalActionAuth = "ACCOUNT"
	DocumentDistributeGlobalActionAuthPasskey       DocumentDistributeGlobalActionAuth = "PASSKEY"
	DocumentDistributeGlobalActionAuthTwoFactorAuth DocumentDistributeGlobalActionAuth = "TWO_FACTOR_AUTH"
	DocumentDistributeGlobalActionAuthPassword      DocumentDistributeGlobalActionAuth = "PASSWORD"
)

func (e DocumentDistributeGlobalActionAuth) ToPointer() *DocumentDistributeGlobalActionAuth {
	return &e
}
func (e *DocumentDistributeGlobalActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		*e = DocumentDistributeGlobalActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentDistributeGlobalActionAuth: %v", v)
	}
}

type DocumentDistributeAuthOptions struct {
	GlobalAccessAuth []DocumentDistributeGlobalAccessAuth `json:"globalAccessAuth"`
	GlobalActionAuth []DocumentDistributeGlobalActionAuth `json:"globalActionAuth"`
}

func (d *DocumentDistributeAuthOptions) GetGlobalAccessAuth() []DocumentDistributeGlobalAccessAuth {
	if d == nil {
		return []DocumentDistributeGlobalAccessAuth{}
	}
	return d.GlobalAccessAuth
}

func (d *DocumentDistributeAuthOptions) GetGlobalActionAuth() []DocumentDistributeGlobalActionAuth {
	if d == nil {
		return []DocumentDistributeGlobalActionAuth{}
	}
	return d.GlobalActionAuth
}

type DocumentDistributeFormValuesType string

const (
	DocumentDistributeFormValuesTypeStr     DocumentDistributeFormValuesType = "str"
	DocumentDistributeFormValuesTypeBoolean DocumentDistributeFormValuesType = "boolean"
	DocumentDistributeFormValuesTypeNumber  DocumentDistributeFormValuesType = "number"
)

type DocumentDistributeFormValues struct {
	Str     *string  `queryParam:"inline,name=formValues"`
	Boolean *bool    `queryParam:"inline,name=formValues"`
	Number  *float64 `queryParam:"inline,name=formValues"`

	Type DocumentDistributeFormValuesType
}

func CreateDocumentDistributeFormValuesStr(str string) DocumentDistributeFormValues {
	typ := DocumentDistributeFormValuesTypeStr

	return DocumentDistributeFormValues{
		Str:  &str,
		Type: typ,
	}
}

func CreateDocumentDistributeFormValuesBoolean(boolean bool) DocumentDistributeFormValues {
	typ := DocumentDistributeFormValuesTypeBoolean

	return DocumentDistributeFormValues{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateDocumentDistributeFormValuesNumber(number float64) DocumentDistributeFormValues {
	typ := DocumentDistributeFormValuesTypeNumber

	return DocumentDistributeFormValues{
		Number: &number,
		Type:   typ,
	}
}

func (u *DocumentDistributeFormValues) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = DocumentDistributeFormValuesTypeStr
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = DocumentDistributeFormValuesTypeBoolean
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = DocumentDistributeFormValuesTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DocumentDistributeFormValues", string(data))
}

func (u DocumentDistributeFormValues) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type DocumentDistributeFormValues: all fields are null")
}

// DocumentDistributeResponseBody - Successful response
type DocumentDistributeResponseBody struct {
	Visibility DocumentDistributeVisibility `json:"visibility"`
	Status     DocumentDistributeStatus     `json:"status"`
	Source     DocumentDistributeSource     `json:"source"`
	ID         float64                      `json:"id"`
	// A custom external ID you can use to identify the document.
	ExternalID *string `json:"externalId"`
	// The ID of the user that created this document.
	UserID                  float64                                 `json:"userId"`
	AuthOptions             *DocumentDistributeAuthOptions          `json:"authOptions"`
	FormValues              map[string]DocumentDistributeFormValues `json:"formValues"`
	Title                   string                                  `json:"title"`
	CreatedAt               string                                  `json:"createdAt"`
	UpdatedAt               string                                  `json:"updatedAt"`
	CompletedAt             *string                                 `json:"completedAt"`
	DeletedAt               *string                                 `json:"deletedAt"`
	TeamID                  float64                                 `json:"teamId"`
	FolderID                *string                                 `json:"folderId"`
	UseLegacyFieldInsertion bool                                    `json:"useLegacyFieldInsertion"`
	EnvelopeID              string                                  `json:"envelopeId"`
	DocumentDataID          *string                                 `default:"" json:"documentDataId"`
	// The ID of the template that the document was created from, if any.
	TemplateID *float64 `json:"templateId,omitempty"`
}

func (d DocumentDistributeResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentDistributeResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"visibility", "status", "source", "id", "userId", "title", "createdAt", "updatedAt", "teamId", "useLegacyFieldInsertion", "envelopeId"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentDistributeResponseBody) GetVisibility() DocumentDistributeVisibility {
	if d == nil {
		return DocumentDistributeVisibility("")
	}
	return d.Visibility
}

func (d *DocumentDistributeResponseBody) GetStatus() DocumentDistributeStatus {
	if d == nil {
		return DocumentDistributeStatus("")
	}
	return d.Status
}

func (d *DocumentDistributeResponseBody) GetSource() DocumentDistributeSource {
	if d == nil {
		return DocumentDistributeSource("")
	}
	return d.Source
}

func (d *DocumentDistributeResponseBody) GetID() float64 {
	if d == nil {
		return 0.0
	}
	return d.ID
}

func (d *DocumentDistributeResponseBody) GetExternalID() *string {
	if d == nil {
		return nil
	}
	return d.ExternalID
}

func (d *DocumentDistributeResponseBody) GetUserID() float64 {
	if d == nil {
		return 0.0
	}
	return d.UserID
}

func (d *DocumentDistributeResponseBody) GetAuthOptions() *DocumentDistributeAuthOptions {
	if d == nil {
		return nil
	}
	return d.AuthOptions
}

func (d *DocumentDistributeResponseBody) GetFormValues() map[string]DocumentDistributeFormValues {
	if d == nil {
		return nil
	}
	return d.FormValues
}

func (d *DocumentDistributeResponseBody) GetTitle() string {
	if d == nil {
		return ""
	}
	return d.Title
}

func (d *DocumentDistributeResponseBody) GetCreatedAt() string {
	if d == nil {
		return ""
	}
	return d.CreatedAt
}

func (d *DocumentDistributeResponseBody) GetUpdatedAt() string {
	if d == nil {
		return ""
	}
	return d.UpdatedAt
}

func (d *DocumentDistributeResponseBody) GetCompletedAt() *string {
	if d == nil {
		return nil
	}
	return d.CompletedAt
}

func (d *DocumentDistributeResponseBody) GetDeletedAt() *string {
	if d == nil {
		return nil
	}
	return d.DeletedAt
}

func (d *DocumentDistributeResponseBody) GetTeamID() float64 {
	if d == nil {
		return 0.0
	}
	return d.TeamID
}

func (d *DocumentDistributeResponseBody) GetFolderID() *string {
	if d == nil {
		return nil
	}
	return d.FolderID
}

func (d *DocumentDistributeResponseBody) GetUseLegacyFieldInsertion() bool {
	if d == nil {
		return false
	}
	return d.UseLegacyFieldInsertion
}

func (d *DocumentDistributeResponseBody) GetEnvelopeID() string {
	if d == nil {
		return ""
	}
	return d.EnvelopeID
}

func (d *DocumentDistributeResponseBody) GetDocumentDataID() *string {
	if d == nil {
		return nil
	}
	return d.DocumentDataID
}

func (d *DocumentDistributeResponseBody) GetTemplateID() *float64 {
	if d == nil {
		return nil
	}
	return d.TemplateID
}

type DocumentDistributeResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *DocumentDistributeResponseBody
}

func (d *DocumentDistributeResponse) GetHTTPMeta() components.HTTPMetadata {
	if d == nil {
		return components.HTTPMetadata{}
	}
	return d.HTTPMeta
}

func (d *DocumentDistributeResponse) GetObject() *DocumentDistributeResponseBody {
	if d == nil {
		return nil
	}
	return d.Object
}
