// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldCreateDocumentFieldTypeDropdownRequest1 string

const (
	FieldCreateDocumentFieldTypeDropdownRequest1Dropdown FieldCreateDocumentFieldTypeDropdownRequest1 = "DROPDOWN"
)

func (e FieldCreateDocumentFieldTypeDropdownRequest1) ToPointer() *FieldCreateDocumentFieldTypeDropdownRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeDropdownRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = FieldCreateDocumentFieldTypeDropdownRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeDropdownRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldTypeDropdownRequest2 string

const (
	FieldCreateDocumentFieldTypeDropdownRequest2Dropdown FieldCreateDocumentFieldTypeDropdownRequest2 = "dropdown"
)

func (e FieldCreateDocumentFieldTypeDropdownRequest2) ToPointer() *FieldCreateDocumentFieldTypeDropdownRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeDropdownRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateDocumentFieldTypeDropdownRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeDropdownRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldValueDropdown struct {
	Value string `json:"value"`
}

func (f FieldCreateDocumentFieldValueDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldValueDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldValueDropdown) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldFieldMetaDropdownRequest struct {
	Label        *string                                      `json:"label,omitempty"`
	Placeholder  *string                                      `json:"placeholder,omitempty"`
	Required     *bool                                        `json:"required,omitempty"`
	ReadOnly     *bool                                        `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldTypeDropdownRequest2 `json:"type"`
	Values       []FieldCreateDocumentFieldValueDropdown      `json:"values,omitempty"`
	DefaultValue *string                                      `json:"defaultValue,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaDropdownRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaDropdownRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaDropdownRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaDropdownRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaDropdownRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaDropdownRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaDropdownRequest) GetType() FieldCreateDocumentFieldTypeDropdownRequest2 {
	if o == nil {
		return FieldCreateDocumentFieldTypeDropdownRequest2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaDropdownRequest) GetValues() []FieldCreateDocumentFieldValueDropdown {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateDocumentFieldFieldMetaDropdownRequest) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldCreateDocumentFieldFieldDropdown struct {
	Type      FieldCreateDocumentFieldTypeDropdownRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldFieldMetaDropdownRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldFieldDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldDropdown) GetType() FieldCreateDocumentFieldTypeDropdownRequest1 {
	if o == nil {
		return FieldCreateDocumentFieldTypeDropdownRequest1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldDropdown) GetFieldMeta() *FieldCreateDocumentFieldFieldMetaDropdownRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldFieldDropdown) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldFieldDropdown) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldFieldDropdown) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldFieldDropdown) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldFieldDropdown) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldFieldDropdown) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldTypeCheckboxRequest1 string

const (
	FieldCreateDocumentFieldTypeCheckboxRequest1Checkbox FieldCreateDocumentFieldTypeCheckboxRequest1 = "CHECKBOX"
)

func (e FieldCreateDocumentFieldTypeCheckboxRequest1) ToPointer() *FieldCreateDocumentFieldTypeCheckboxRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeCheckboxRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = FieldCreateDocumentFieldTypeCheckboxRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeCheckboxRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldTypeCheckboxRequest2 string

const (
	FieldCreateDocumentFieldTypeCheckboxRequest2Checkbox FieldCreateDocumentFieldTypeCheckboxRequest2 = "checkbox"
)

func (e FieldCreateDocumentFieldTypeCheckboxRequest2) ToPointer() *FieldCreateDocumentFieldTypeCheckboxRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeCheckboxRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateDocumentFieldTypeCheckboxRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeCheckboxRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldValueCheckbox struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldCreateDocumentFieldValueCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldValueCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldValueCheckbox) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldValueCheckbox) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateDocumentFieldValueCheckbox) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldFieldMetaCheckboxRequest struct {
	Label            *string                                      `json:"label,omitempty"`
	Placeholder      *string                                      `json:"placeholder,omitempty"`
	Required         *bool                                        `json:"required,omitempty"`
	ReadOnly         *bool                                        `json:"readOnly,omitempty"`
	Type             FieldCreateDocumentFieldTypeCheckboxRequest2 `json:"type"`
	Values           []FieldCreateDocumentFieldValueCheckbox      `json:"values,omitempty"`
	ValidationRule   *string                                      `json:"validationRule,omitempty"`
	ValidationLength *float64                                     `json:"validationLength,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaCheckboxRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaCheckboxRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaCheckboxRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaCheckboxRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaCheckboxRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaCheckboxRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaCheckboxRequest) GetType() FieldCreateDocumentFieldTypeCheckboxRequest2 {
	if o == nil {
		return FieldCreateDocumentFieldTypeCheckboxRequest2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaCheckboxRequest) GetValues() []FieldCreateDocumentFieldValueCheckbox {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateDocumentFieldFieldMetaCheckboxRequest) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldCreateDocumentFieldFieldMetaCheckboxRequest) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldCreateDocumentFieldFieldCheckbox struct {
	Type      FieldCreateDocumentFieldTypeCheckboxRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldFieldMetaCheckboxRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldFieldCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldCheckbox) GetType() FieldCreateDocumentFieldTypeCheckboxRequest1 {
	if o == nil {
		return FieldCreateDocumentFieldTypeCheckboxRequest1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldCheckbox) GetFieldMeta() *FieldCreateDocumentFieldFieldMetaCheckboxRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldFieldCheckbox) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldFieldCheckbox) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldFieldCheckbox) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldFieldCheckbox) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldFieldCheckbox) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldFieldCheckbox) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldTypeRadioRequest1 string

const (
	FieldCreateDocumentFieldTypeRadioRequest1Radio FieldCreateDocumentFieldTypeRadioRequest1 = "RADIO"
)

func (e FieldCreateDocumentFieldTypeRadioRequest1) ToPointer() *FieldCreateDocumentFieldTypeRadioRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeRadioRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = FieldCreateDocumentFieldTypeRadioRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeRadioRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldTypeRadioRequest2 string

const (
	FieldCreateDocumentFieldTypeRadioRequest2Radio FieldCreateDocumentFieldTypeRadioRequest2 = "radio"
)

func (e FieldCreateDocumentFieldTypeRadioRequest2) ToPointer() *FieldCreateDocumentFieldTypeRadioRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeRadioRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateDocumentFieldTypeRadioRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeRadioRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldValueRadio struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldCreateDocumentFieldValueRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldValueRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldValueRadio) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldValueRadio) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateDocumentFieldValueRadio) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldFieldMetaRadioRequest struct {
	Label       *string                                   `json:"label,omitempty"`
	Placeholder *string                                   `json:"placeholder,omitempty"`
	Required    *bool                                     `json:"required,omitempty"`
	ReadOnly    *bool                                     `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldTypeRadioRequest2 `json:"type"`
	Values      []FieldCreateDocumentFieldValueRadio      `json:"values,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaRadioRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaRadioRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaRadioRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaRadioRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaRadioRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaRadioRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaRadioRequest) GetType() FieldCreateDocumentFieldTypeRadioRequest2 {
	if o == nil {
		return FieldCreateDocumentFieldTypeRadioRequest2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaRadioRequest) GetValues() []FieldCreateDocumentFieldValueRadio {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldCreateDocumentFieldFieldRadio struct {
	Type      FieldCreateDocumentFieldTypeRadioRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldFieldMetaRadioRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldFieldRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldRadio) GetType() FieldCreateDocumentFieldTypeRadioRequest1 {
	if o == nil {
		return FieldCreateDocumentFieldTypeRadioRequest1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldRadio) GetFieldMeta() *FieldCreateDocumentFieldFieldMetaRadioRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldFieldRadio) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldFieldRadio) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldFieldRadio) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldFieldRadio) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldFieldRadio) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldFieldRadio) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldTypeNumberRequest1 string

const (
	FieldCreateDocumentFieldTypeNumberRequest1Number FieldCreateDocumentFieldTypeNumberRequest1 = "NUMBER"
)

func (e FieldCreateDocumentFieldTypeNumberRequest1) ToPointer() *FieldCreateDocumentFieldTypeNumberRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeNumberRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = FieldCreateDocumentFieldTypeNumberRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeNumberRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldTypeNumberRequest2 string

const (
	FieldCreateDocumentFieldTypeNumberRequest2Number FieldCreateDocumentFieldTypeNumberRequest2 = "number"
)

func (e FieldCreateDocumentFieldTypeNumberRequest2) ToPointer() *FieldCreateDocumentFieldTypeNumberRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeNumberRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateDocumentFieldTypeNumberRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeNumberRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldTextAlignNumber string

const (
	FieldCreateDocumentFieldTextAlignNumberLeft   FieldCreateDocumentFieldTextAlignNumber = "left"
	FieldCreateDocumentFieldTextAlignNumberCenter FieldCreateDocumentFieldTextAlignNumber = "center"
	FieldCreateDocumentFieldTextAlignNumberRight  FieldCreateDocumentFieldTextAlignNumber = "right"
)

func (e FieldCreateDocumentFieldTextAlignNumber) ToPointer() *FieldCreateDocumentFieldTextAlignNumber {
	return &e
}
func (e *FieldCreateDocumentFieldTextAlignNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldTextAlignNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTextAlignNumber: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMetaNumberRequest struct {
	Label        *string                                    `json:"label,omitempty"`
	Placeholder  *string                                    `json:"placeholder,omitempty"`
	Required     *bool                                      `json:"required,omitempty"`
	ReadOnly     *bool                                      `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldTypeNumberRequest2 `json:"type"`
	NumberFormat *string                                    `json:"numberFormat,omitempty"`
	Value        *string                                    `json:"value,omitempty"`
	MinValue     *float64                                   `json:"minValue,omitempty"`
	MaxValue     *float64                                   `json:"maxValue,omitempty"`
	FontSize     *float64                                   `json:"fontSize,omitempty"`
	TextAlign    *FieldCreateDocumentFieldTextAlignNumber   `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaNumberRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaNumberRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaNumberRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaNumberRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaNumberRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaNumberRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaNumberRequest) GetType() FieldCreateDocumentFieldTypeNumberRequest2 {
	if o == nil {
		return FieldCreateDocumentFieldTypeNumberRequest2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaNumberRequest) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldCreateDocumentFieldFieldMetaNumberRequest) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldCreateDocumentFieldFieldMetaNumberRequest) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldCreateDocumentFieldFieldMetaNumberRequest) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldCreateDocumentFieldFieldMetaNumberRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldFieldMetaNumberRequest) GetTextAlign() *FieldCreateDocumentFieldTextAlignNumber {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldFieldNumber struct {
	Type      FieldCreateDocumentFieldTypeNumberRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldFieldMetaNumberRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldFieldNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldNumber) GetType() FieldCreateDocumentFieldTypeNumberRequest1 {
	if o == nil {
		return FieldCreateDocumentFieldTypeNumberRequest1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldNumber) GetFieldMeta() *FieldCreateDocumentFieldFieldMetaNumberRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldFieldNumber) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldFieldNumber) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldFieldNumber) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldFieldNumber) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldFieldNumber) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldFieldNumber) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldTypeTextRequest1 string

const (
	FieldCreateDocumentFieldTypeTextRequest1Text FieldCreateDocumentFieldTypeTextRequest1 = "TEXT"
)

func (e FieldCreateDocumentFieldTypeTextRequest1) ToPointer() *FieldCreateDocumentFieldTypeTextRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeTextRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = FieldCreateDocumentFieldTypeTextRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeTextRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldTypeTextRequest2 string

const (
	FieldCreateDocumentFieldTypeTextRequest2Text FieldCreateDocumentFieldTypeTextRequest2 = "text"
)

func (e FieldCreateDocumentFieldTypeTextRequest2) ToPointer() *FieldCreateDocumentFieldTypeTextRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeTextRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateDocumentFieldTypeTextRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeTextRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldTextAlignText string

const (
	FieldCreateDocumentFieldTextAlignTextLeft   FieldCreateDocumentFieldTextAlignText = "left"
	FieldCreateDocumentFieldTextAlignTextCenter FieldCreateDocumentFieldTextAlignText = "center"
	FieldCreateDocumentFieldTextAlignTextRight  FieldCreateDocumentFieldTextAlignText = "right"
)

func (e FieldCreateDocumentFieldTextAlignText) ToPointer() *FieldCreateDocumentFieldTextAlignText {
	return &e
}
func (e *FieldCreateDocumentFieldTextAlignText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldTextAlignText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTextAlignText: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMetaTextRequest struct {
	Label          *string                                  `json:"label,omitempty"`
	Placeholder    *string                                  `json:"placeholder,omitempty"`
	Required       *bool                                    `json:"required,omitempty"`
	ReadOnly       *bool                                    `json:"readOnly,omitempty"`
	Type           FieldCreateDocumentFieldTypeTextRequest2 `json:"type"`
	Text           *string                                  `json:"text,omitempty"`
	CharacterLimit *float64                                 `json:"characterLimit,omitempty"`
	FontSize       *float64                                 `json:"fontSize,omitempty"`
	TextAlign      *FieldCreateDocumentFieldTextAlignText   `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaTextRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaTextRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaTextRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaTextRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaTextRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaTextRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaTextRequest) GetType() FieldCreateDocumentFieldTypeTextRequest2 {
	if o == nil {
		return FieldCreateDocumentFieldTypeTextRequest2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaTextRequest) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldCreateDocumentFieldFieldMetaTextRequest) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldCreateDocumentFieldFieldMetaTextRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldFieldMetaTextRequest) GetTextAlign() *FieldCreateDocumentFieldTextAlignText {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldFieldText struct {
	Type      FieldCreateDocumentFieldTypeTextRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldFieldMetaTextRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldFieldText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldText) GetType() FieldCreateDocumentFieldTypeTextRequest1 {
	if o == nil {
		return FieldCreateDocumentFieldTypeTextRequest1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldText) GetFieldMeta() *FieldCreateDocumentFieldFieldMetaTextRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldFieldText) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldFieldText) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldFieldText) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldFieldText) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldFieldText) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldFieldText) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldTypeDateRequest1 string

const (
	FieldCreateDocumentFieldTypeDateRequest1Date FieldCreateDocumentFieldTypeDateRequest1 = "DATE"
)

func (e FieldCreateDocumentFieldTypeDateRequest1) ToPointer() *FieldCreateDocumentFieldTypeDateRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeDateRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = FieldCreateDocumentFieldTypeDateRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeDateRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldTypeDateRequest2 string

const (
	FieldCreateDocumentFieldTypeDateRequest2Date FieldCreateDocumentFieldTypeDateRequest2 = "date"
)

func (e FieldCreateDocumentFieldTypeDateRequest2) ToPointer() *FieldCreateDocumentFieldTypeDateRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeDateRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateDocumentFieldTypeDateRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeDateRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldTextAlignDate string

const (
	FieldCreateDocumentFieldTextAlignDateLeft   FieldCreateDocumentFieldTextAlignDate = "left"
	FieldCreateDocumentFieldTextAlignDateCenter FieldCreateDocumentFieldTextAlignDate = "center"
	FieldCreateDocumentFieldTextAlignDateRight  FieldCreateDocumentFieldTextAlignDate = "right"
)

func (e FieldCreateDocumentFieldTextAlignDate) ToPointer() *FieldCreateDocumentFieldTextAlignDate {
	return &e
}
func (e *FieldCreateDocumentFieldTextAlignDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldTextAlignDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTextAlignDate: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMetaDateRequest struct {
	Label       *string                                  `json:"label,omitempty"`
	Placeholder *string                                  `json:"placeholder,omitempty"`
	Required    *bool                                    `json:"required,omitempty"`
	ReadOnly    *bool                                    `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldTypeDateRequest2 `json:"type"`
	FontSize    *float64                                 `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldTextAlignDate   `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaDateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaDateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaDateRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaDateRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaDateRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaDateRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaDateRequest) GetType() FieldCreateDocumentFieldTypeDateRequest2 {
	if o == nil {
		return FieldCreateDocumentFieldTypeDateRequest2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaDateRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldFieldMetaDateRequest) GetTextAlign() *FieldCreateDocumentFieldTextAlignDate {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldFieldDate struct {
	Type      FieldCreateDocumentFieldTypeDateRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldFieldMetaDateRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldFieldDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldDate) GetType() FieldCreateDocumentFieldTypeDateRequest1 {
	if o == nil {
		return FieldCreateDocumentFieldTypeDateRequest1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldDate) GetFieldMeta() *FieldCreateDocumentFieldFieldMetaDateRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldFieldDate) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldFieldDate) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldFieldDate) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldFieldDate) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldFieldDate) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldFieldDate) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldTypeEmailRequest1 string

const (
	FieldCreateDocumentFieldTypeEmailRequest1Email FieldCreateDocumentFieldTypeEmailRequest1 = "EMAIL"
)

func (e FieldCreateDocumentFieldTypeEmailRequest1) ToPointer() *FieldCreateDocumentFieldTypeEmailRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeEmailRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = FieldCreateDocumentFieldTypeEmailRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeEmailRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldTypeEmailRequest2 string

const (
	FieldCreateDocumentFieldTypeEmailRequest2Email FieldCreateDocumentFieldTypeEmailRequest2 = "email"
)

func (e FieldCreateDocumentFieldTypeEmailRequest2) ToPointer() *FieldCreateDocumentFieldTypeEmailRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeEmailRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateDocumentFieldTypeEmailRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeEmailRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldTextAlignEmail string

const (
	FieldCreateDocumentFieldTextAlignEmailLeft   FieldCreateDocumentFieldTextAlignEmail = "left"
	FieldCreateDocumentFieldTextAlignEmailCenter FieldCreateDocumentFieldTextAlignEmail = "center"
	FieldCreateDocumentFieldTextAlignEmailRight  FieldCreateDocumentFieldTextAlignEmail = "right"
)

func (e FieldCreateDocumentFieldTextAlignEmail) ToPointer() *FieldCreateDocumentFieldTextAlignEmail {
	return &e
}
func (e *FieldCreateDocumentFieldTextAlignEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldTextAlignEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTextAlignEmail: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMetaEmailRequest struct {
	Label       *string                                   `json:"label,omitempty"`
	Placeholder *string                                   `json:"placeholder,omitempty"`
	Required    *bool                                     `json:"required,omitempty"`
	ReadOnly    *bool                                     `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldTypeEmailRequest2 `json:"type"`
	FontSize    *float64                                  `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldTextAlignEmail   `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaEmailRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaEmailRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaEmailRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaEmailRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaEmailRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaEmailRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaEmailRequest) GetType() FieldCreateDocumentFieldTypeEmailRequest2 {
	if o == nil {
		return FieldCreateDocumentFieldTypeEmailRequest2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaEmailRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldFieldMetaEmailRequest) GetTextAlign() *FieldCreateDocumentFieldTextAlignEmail {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldFieldEmail struct {
	Type      FieldCreateDocumentFieldTypeEmailRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldFieldMetaEmailRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldFieldEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldEmail) GetType() FieldCreateDocumentFieldTypeEmailRequest1 {
	if o == nil {
		return FieldCreateDocumentFieldTypeEmailRequest1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldEmail) GetFieldMeta() *FieldCreateDocumentFieldFieldMetaEmailRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldFieldEmail) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldFieldEmail) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldFieldEmail) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldFieldEmail) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldFieldEmail) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldFieldEmail) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldTypeNameRequest1 string

const (
	FieldCreateDocumentFieldTypeNameRequest1Name FieldCreateDocumentFieldTypeNameRequest1 = "NAME"
)

func (e FieldCreateDocumentFieldTypeNameRequest1) ToPointer() *FieldCreateDocumentFieldTypeNameRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeNameRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = FieldCreateDocumentFieldTypeNameRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeNameRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldTypeNameRequest2 string

const (
	FieldCreateDocumentFieldTypeNameRequest2Name FieldCreateDocumentFieldTypeNameRequest2 = "name"
)

func (e FieldCreateDocumentFieldTypeNameRequest2) ToPointer() *FieldCreateDocumentFieldTypeNameRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeNameRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateDocumentFieldTypeNameRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeNameRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldTextAlignName string

const (
	FieldCreateDocumentFieldTextAlignNameLeft   FieldCreateDocumentFieldTextAlignName = "left"
	FieldCreateDocumentFieldTextAlignNameCenter FieldCreateDocumentFieldTextAlignName = "center"
	FieldCreateDocumentFieldTextAlignNameRight  FieldCreateDocumentFieldTextAlignName = "right"
)

func (e FieldCreateDocumentFieldTextAlignName) ToPointer() *FieldCreateDocumentFieldTextAlignName {
	return &e
}
func (e *FieldCreateDocumentFieldTextAlignName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldTextAlignName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTextAlignName: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMetaNameRequest struct {
	Label       *string                                  `json:"label,omitempty"`
	Placeholder *string                                  `json:"placeholder,omitempty"`
	Required    *bool                                    `json:"required,omitempty"`
	ReadOnly    *bool                                    `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldTypeNameRequest2 `json:"type"`
	FontSize    *float64                                 `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldTextAlignName   `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaNameRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaNameRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaNameRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaNameRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaNameRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaNameRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaNameRequest) GetType() FieldCreateDocumentFieldTypeNameRequest2 {
	if o == nil {
		return FieldCreateDocumentFieldTypeNameRequest2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaNameRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldFieldMetaNameRequest) GetTextAlign() *FieldCreateDocumentFieldTextAlignName {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldFieldName struct {
	Type      FieldCreateDocumentFieldTypeNameRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldFieldMetaNameRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldFieldName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldName) GetType() FieldCreateDocumentFieldTypeNameRequest1 {
	if o == nil {
		return FieldCreateDocumentFieldTypeNameRequest1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldName) GetFieldMeta() *FieldCreateDocumentFieldFieldMetaNameRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldFieldName) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldFieldName) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldFieldName) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldFieldName) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldFieldName) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldFieldName) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldTypeInitialsRequest1 string

const (
	FieldCreateDocumentFieldTypeInitialsRequest1Initials FieldCreateDocumentFieldTypeInitialsRequest1 = "INITIALS"
)

func (e FieldCreateDocumentFieldTypeInitialsRequest1) ToPointer() *FieldCreateDocumentFieldTypeInitialsRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeInitialsRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = FieldCreateDocumentFieldTypeInitialsRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeInitialsRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldTypeInitialsRequest2 string

const (
	FieldCreateDocumentFieldTypeInitialsRequest2Initials FieldCreateDocumentFieldTypeInitialsRequest2 = "initials"
)

func (e FieldCreateDocumentFieldTypeInitialsRequest2) ToPointer() *FieldCreateDocumentFieldTypeInitialsRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldTypeInitialsRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateDocumentFieldTypeInitialsRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeInitialsRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldTextAlignInitials string

const (
	FieldCreateDocumentFieldTextAlignInitialsLeft   FieldCreateDocumentFieldTextAlignInitials = "left"
	FieldCreateDocumentFieldTextAlignInitialsCenter FieldCreateDocumentFieldTextAlignInitials = "center"
	FieldCreateDocumentFieldTextAlignInitialsRight  FieldCreateDocumentFieldTextAlignInitials = "right"
)

func (e FieldCreateDocumentFieldTextAlignInitials) ToPointer() *FieldCreateDocumentFieldTextAlignInitials {
	return &e
}
func (e *FieldCreateDocumentFieldTextAlignInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldTextAlignInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTextAlignInitials: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMetaInitialsRequest struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldTypeInitialsRequest2 `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldTextAlignInitials   `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaInitialsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaInitialsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaInitialsRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaInitialsRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaInitialsRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaInitialsRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaInitialsRequest) GetType() FieldCreateDocumentFieldTypeInitialsRequest2 {
	if o == nil {
		return FieldCreateDocumentFieldTypeInitialsRequest2("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaInitialsRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldFieldMetaInitialsRequest) GetTextAlign() *FieldCreateDocumentFieldTextAlignInitials {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldFieldInitials struct {
	Type      FieldCreateDocumentFieldTypeInitialsRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldFieldMetaInitialsRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldFieldInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldInitials) GetType() FieldCreateDocumentFieldTypeInitialsRequest1 {
	if o == nil {
		return FieldCreateDocumentFieldTypeInitialsRequest1("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldInitials) GetFieldMeta() *FieldCreateDocumentFieldFieldMetaInitialsRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateDocumentFieldFieldInitials) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldFieldInitials) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldFieldInitials) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldFieldInitials) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldFieldInitials) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldFieldInitials) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldTypeFreeSignature string

const (
	FieldCreateDocumentFieldTypeFreeSignatureFreeSignature FieldCreateDocumentFieldTypeFreeSignature = "FREE_SIGNATURE"
)

func (e FieldCreateDocumentFieldTypeFreeSignature) ToPointer() *FieldCreateDocumentFieldTypeFreeSignature {
	return &e
}
func (e *FieldCreateDocumentFieldTypeFreeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldCreateDocumentFieldTypeFreeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeFreeSignature: %v", v)
	}
}

type FieldCreateDocumentFieldFieldFreeSignature struct {
	Type FieldCreateDocumentFieldTypeFreeSignature `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldFieldFreeSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldFreeSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldFreeSignature) GetType() FieldCreateDocumentFieldTypeFreeSignature {
	if o == nil {
		return FieldCreateDocumentFieldTypeFreeSignature("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldFreeSignature) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldFieldFreeSignature) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldFieldFreeSignature) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldFieldFreeSignature) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldFieldFreeSignature) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldFieldFreeSignature) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldTypeSignature string

const (
	FieldCreateDocumentFieldTypeSignatureSignature FieldCreateDocumentFieldTypeSignature = "SIGNATURE"
)

func (e FieldCreateDocumentFieldTypeSignature) ToPointer() *FieldCreateDocumentFieldTypeSignature {
	return &e
}
func (e *FieldCreateDocumentFieldTypeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = FieldCreateDocumentFieldTypeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeSignature: %v", v)
	}
}

type FieldCreateDocumentFieldFieldSignature struct {
	Type FieldCreateDocumentFieldTypeSignature `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldFieldSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldSignature) GetType() FieldCreateDocumentFieldTypeSignature {
	if o == nil {
		return FieldCreateDocumentFieldTypeSignature("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldSignature) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldFieldSignature) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateDocumentFieldFieldSignature) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateDocumentFieldFieldSignature) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateDocumentFieldFieldSignature) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldFieldSignature) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldFieldUnionType string

const (
	FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldSignature     FieldCreateDocumentFieldFieldUnionType = "field_createDocumentField_field_Signature"
	FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldFreeSignature FieldCreateDocumentFieldFieldUnionType = "field_createDocumentField_field_FreeSignature"
	FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldInitials      FieldCreateDocumentFieldFieldUnionType = "field_createDocumentField_field_Initials"
	FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldName          FieldCreateDocumentFieldFieldUnionType = "field_createDocumentField_field_Name"
	FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldEmail         FieldCreateDocumentFieldFieldUnionType = "field_createDocumentField_field_Email"
	FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldDate          FieldCreateDocumentFieldFieldUnionType = "field_createDocumentField_field_Date"
	FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldText          FieldCreateDocumentFieldFieldUnionType = "field_createDocumentField_field_Text"
	FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldNumber        FieldCreateDocumentFieldFieldUnionType = "field_createDocumentField_field_Number"
	FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldRadio         FieldCreateDocumentFieldFieldUnionType = "field_createDocumentField_field_Radio"
	FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldCheckbox      FieldCreateDocumentFieldFieldUnionType = "field_createDocumentField_field_Checkbox"
	FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldDropdown      FieldCreateDocumentFieldFieldUnionType = "field_createDocumentField_field_Dropdown"
)

type FieldCreateDocumentFieldFieldUnion struct {
	FieldCreateDocumentFieldFieldSignature     *FieldCreateDocumentFieldFieldSignature     `queryParam:"inline"`
	FieldCreateDocumentFieldFieldFreeSignature *FieldCreateDocumentFieldFieldFreeSignature `queryParam:"inline"`
	FieldCreateDocumentFieldFieldInitials      *FieldCreateDocumentFieldFieldInitials      `queryParam:"inline"`
	FieldCreateDocumentFieldFieldName          *FieldCreateDocumentFieldFieldName          `queryParam:"inline"`
	FieldCreateDocumentFieldFieldEmail         *FieldCreateDocumentFieldFieldEmail         `queryParam:"inline"`
	FieldCreateDocumentFieldFieldDate          *FieldCreateDocumentFieldFieldDate          `queryParam:"inline"`
	FieldCreateDocumentFieldFieldText          *FieldCreateDocumentFieldFieldText          `queryParam:"inline"`
	FieldCreateDocumentFieldFieldNumber        *FieldCreateDocumentFieldFieldNumber        `queryParam:"inline"`
	FieldCreateDocumentFieldFieldRadio         *FieldCreateDocumentFieldFieldRadio         `queryParam:"inline"`
	FieldCreateDocumentFieldFieldCheckbox      *FieldCreateDocumentFieldFieldCheckbox      `queryParam:"inline"`
	FieldCreateDocumentFieldFieldDropdown      *FieldCreateDocumentFieldFieldDropdown      `queryParam:"inline"`

	Type FieldCreateDocumentFieldFieldUnionType
}

func CreateFieldCreateDocumentFieldFieldUnionFieldCreateDocumentFieldFieldSignature(fieldCreateDocumentFieldFieldSignature FieldCreateDocumentFieldFieldSignature) FieldCreateDocumentFieldFieldUnion {
	typ := FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldSignature

	return FieldCreateDocumentFieldFieldUnion{
		FieldCreateDocumentFieldFieldSignature: &fieldCreateDocumentFieldFieldSignature,
		Type:                                   typ,
	}
}

func CreateFieldCreateDocumentFieldFieldUnionFieldCreateDocumentFieldFieldFreeSignature(fieldCreateDocumentFieldFieldFreeSignature FieldCreateDocumentFieldFieldFreeSignature) FieldCreateDocumentFieldFieldUnion {
	typ := FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldFreeSignature

	return FieldCreateDocumentFieldFieldUnion{
		FieldCreateDocumentFieldFieldFreeSignature: &fieldCreateDocumentFieldFieldFreeSignature,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldFieldUnionFieldCreateDocumentFieldFieldInitials(fieldCreateDocumentFieldFieldInitials FieldCreateDocumentFieldFieldInitials) FieldCreateDocumentFieldFieldUnion {
	typ := FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldInitials

	return FieldCreateDocumentFieldFieldUnion{
		FieldCreateDocumentFieldFieldInitials: &fieldCreateDocumentFieldFieldInitials,
		Type:                                  typ,
	}
}

func CreateFieldCreateDocumentFieldFieldUnionFieldCreateDocumentFieldFieldName(fieldCreateDocumentFieldFieldName FieldCreateDocumentFieldFieldName) FieldCreateDocumentFieldFieldUnion {
	typ := FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldName

	return FieldCreateDocumentFieldFieldUnion{
		FieldCreateDocumentFieldFieldName: &fieldCreateDocumentFieldFieldName,
		Type:                              typ,
	}
}

func CreateFieldCreateDocumentFieldFieldUnionFieldCreateDocumentFieldFieldEmail(fieldCreateDocumentFieldFieldEmail FieldCreateDocumentFieldFieldEmail) FieldCreateDocumentFieldFieldUnion {
	typ := FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldEmail

	return FieldCreateDocumentFieldFieldUnion{
		FieldCreateDocumentFieldFieldEmail: &fieldCreateDocumentFieldFieldEmail,
		Type:                               typ,
	}
}

func CreateFieldCreateDocumentFieldFieldUnionFieldCreateDocumentFieldFieldDate(fieldCreateDocumentFieldFieldDate FieldCreateDocumentFieldFieldDate) FieldCreateDocumentFieldFieldUnion {
	typ := FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldDate

	return FieldCreateDocumentFieldFieldUnion{
		FieldCreateDocumentFieldFieldDate: &fieldCreateDocumentFieldFieldDate,
		Type:                              typ,
	}
}

func CreateFieldCreateDocumentFieldFieldUnionFieldCreateDocumentFieldFieldText(fieldCreateDocumentFieldFieldText FieldCreateDocumentFieldFieldText) FieldCreateDocumentFieldFieldUnion {
	typ := FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldText

	return FieldCreateDocumentFieldFieldUnion{
		FieldCreateDocumentFieldFieldText: &fieldCreateDocumentFieldFieldText,
		Type:                              typ,
	}
}

func CreateFieldCreateDocumentFieldFieldUnionFieldCreateDocumentFieldFieldNumber(fieldCreateDocumentFieldFieldNumber FieldCreateDocumentFieldFieldNumber) FieldCreateDocumentFieldFieldUnion {
	typ := FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldNumber

	return FieldCreateDocumentFieldFieldUnion{
		FieldCreateDocumentFieldFieldNumber: &fieldCreateDocumentFieldFieldNumber,
		Type:                                typ,
	}
}

func CreateFieldCreateDocumentFieldFieldUnionFieldCreateDocumentFieldFieldRadio(fieldCreateDocumentFieldFieldRadio FieldCreateDocumentFieldFieldRadio) FieldCreateDocumentFieldFieldUnion {
	typ := FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldRadio

	return FieldCreateDocumentFieldFieldUnion{
		FieldCreateDocumentFieldFieldRadio: &fieldCreateDocumentFieldFieldRadio,
		Type:                               typ,
	}
}

func CreateFieldCreateDocumentFieldFieldUnionFieldCreateDocumentFieldFieldCheckbox(fieldCreateDocumentFieldFieldCheckbox FieldCreateDocumentFieldFieldCheckbox) FieldCreateDocumentFieldFieldUnion {
	typ := FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldCheckbox

	return FieldCreateDocumentFieldFieldUnion{
		FieldCreateDocumentFieldFieldCheckbox: &fieldCreateDocumentFieldFieldCheckbox,
		Type:                                  typ,
	}
}

func CreateFieldCreateDocumentFieldFieldUnionFieldCreateDocumentFieldFieldDropdown(fieldCreateDocumentFieldFieldDropdown FieldCreateDocumentFieldFieldDropdown) FieldCreateDocumentFieldFieldUnion {
	typ := FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldDropdown

	return FieldCreateDocumentFieldFieldUnion{
		FieldCreateDocumentFieldFieldDropdown: &fieldCreateDocumentFieldFieldDropdown,
		Type:                                  typ,
	}
}

func (u *FieldCreateDocumentFieldFieldUnion) UnmarshalJSON(data []byte) error {

	var fieldCreateDocumentFieldFieldSignature FieldCreateDocumentFieldFieldSignature = FieldCreateDocumentFieldFieldSignature{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldSignature, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldSignature = &fieldCreateDocumentFieldFieldSignature
		u.Type = FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldSignature
		return nil
	}

	var fieldCreateDocumentFieldFieldFreeSignature FieldCreateDocumentFieldFieldFreeSignature = FieldCreateDocumentFieldFieldFreeSignature{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldFreeSignature, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldFreeSignature = &fieldCreateDocumentFieldFieldFreeSignature
		u.Type = FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldFreeSignature
		return nil
	}

	var fieldCreateDocumentFieldFieldInitials FieldCreateDocumentFieldFieldInitials = FieldCreateDocumentFieldFieldInitials{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldInitials, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldInitials = &fieldCreateDocumentFieldFieldInitials
		u.Type = FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldInitials
		return nil
	}

	var fieldCreateDocumentFieldFieldName FieldCreateDocumentFieldFieldName = FieldCreateDocumentFieldFieldName{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldName, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldName = &fieldCreateDocumentFieldFieldName
		u.Type = FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldName
		return nil
	}

	var fieldCreateDocumentFieldFieldEmail FieldCreateDocumentFieldFieldEmail = FieldCreateDocumentFieldFieldEmail{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldEmail, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldEmail = &fieldCreateDocumentFieldFieldEmail
		u.Type = FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldEmail
		return nil
	}

	var fieldCreateDocumentFieldFieldDate FieldCreateDocumentFieldFieldDate = FieldCreateDocumentFieldFieldDate{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldDate, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldDate = &fieldCreateDocumentFieldFieldDate
		u.Type = FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldDate
		return nil
	}

	var fieldCreateDocumentFieldFieldText FieldCreateDocumentFieldFieldText = FieldCreateDocumentFieldFieldText{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldText, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldText = &fieldCreateDocumentFieldFieldText
		u.Type = FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldText
		return nil
	}

	var fieldCreateDocumentFieldFieldNumber FieldCreateDocumentFieldFieldNumber = FieldCreateDocumentFieldFieldNumber{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldNumber, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldNumber = &fieldCreateDocumentFieldFieldNumber
		u.Type = FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldNumber
		return nil
	}

	var fieldCreateDocumentFieldFieldRadio FieldCreateDocumentFieldFieldRadio = FieldCreateDocumentFieldFieldRadio{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldRadio, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldRadio = &fieldCreateDocumentFieldFieldRadio
		u.Type = FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldRadio
		return nil
	}

	var fieldCreateDocumentFieldFieldCheckbox FieldCreateDocumentFieldFieldCheckbox = FieldCreateDocumentFieldFieldCheckbox{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldCheckbox, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldCheckbox = &fieldCreateDocumentFieldFieldCheckbox
		u.Type = FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldCheckbox
		return nil
	}

	var fieldCreateDocumentFieldFieldDropdown FieldCreateDocumentFieldFieldDropdown = FieldCreateDocumentFieldFieldDropdown{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldDropdown, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldDropdown = &fieldCreateDocumentFieldFieldDropdown
		u.Type = FieldCreateDocumentFieldFieldUnionTypeFieldCreateDocumentFieldFieldDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldCreateDocumentFieldFieldUnion", string(data))
}

func (u FieldCreateDocumentFieldFieldUnion) MarshalJSON() ([]byte, error) {
	if u.FieldCreateDocumentFieldFieldSignature != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldSignature, "", true)
	}

	if u.FieldCreateDocumentFieldFieldFreeSignature != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldFreeSignature, "", true)
	}

	if u.FieldCreateDocumentFieldFieldInitials != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldInitials, "", true)
	}

	if u.FieldCreateDocumentFieldFieldName != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldName, "", true)
	}

	if u.FieldCreateDocumentFieldFieldEmail != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldEmail, "", true)
	}

	if u.FieldCreateDocumentFieldFieldDate != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldDate, "", true)
	}

	if u.FieldCreateDocumentFieldFieldText != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldText, "", true)
	}

	if u.FieldCreateDocumentFieldFieldNumber != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldNumber, "", true)
	}

	if u.FieldCreateDocumentFieldFieldRadio != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldRadio, "", true)
	}

	if u.FieldCreateDocumentFieldFieldCheckbox != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldCheckbox, "", true)
	}

	if u.FieldCreateDocumentFieldFieldDropdown != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type FieldCreateDocumentFieldFieldUnion: all fields are null")
}

type FieldCreateDocumentFieldRequest struct {
	DocumentID float64                            `json:"documentId"`
	Field      FieldCreateDocumentFieldFieldUnion `json:"field"`
}

func (o *FieldCreateDocumentFieldRequest) GetDocumentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DocumentID
}

func (o *FieldCreateDocumentFieldRequest) GetField() FieldCreateDocumentFieldFieldUnion {
	if o == nil {
		return FieldCreateDocumentFieldFieldUnion{}
	}
	return o.Field
}

type FieldCreateDocumentFieldTypeResponse string

const (
	FieldCreateDocumentFieldTypeResponseSignature     FieldCreateDocumentFieldTypeResponse = "SIGNATURE"
	FieldCreateDocumentFieldTypeResponseFreeSignature FieldCreateDocumentFieldTypeResponse = "FREE_SIGNATURE"
	FieldCreateDocumentFieldTypeResponseInitials      FieldCreateDocumentFieldTypeResponse = "INITIALS"
	FieldCreateDocumentFieldTypeResponseName          FieldCreateDocumentFieldTypeResponse = "NAME"
	FieldCreateDocumentFieldTypeResponseEmail         FieldCreateDocumentFieldTypeResponse = "EMAIL"
	FieldCreateDocumentFieldTypeResponseDate          FieldCreateDocumentFieldTypeResponse = "DATE"
	FieldCreateDocumentFieldTypeResponseText          FieldCreateDocumentFieldTypeResponse = "TEXT"
	FieldCreateDocumentFieldTypeResponseNumber        FieldCreateDocumentFieldTypeResponse = "NUMBER"
	FieldCreateDocumentFieldTypeResponseRadio         FieldCreateDocumentFieldTypeResponse = "RADIO"
	FieldCreateDocumentFieldTypeResponseCheckbox      FieldCreateDocumentFieldTypeResponse = "CHECKBOX"
	FieldCreateDocumentFieldTypeResponseDropdown      FieldCreateDocumentFieldTypeResponse = "DROPDOWN"
)

func (e FieldCreateDocumentFieldTypeResponse) ToPointer() *FieldCreateDocumentFieldTypeResponse {
	return &e
}
func (e *FieldCreateDocumentFieldTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldCreateDocumentFieldTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTypeResponse: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMetaTypeDropdown string

const (
	FieldCreateDocumentFieldFieldMetaTypeDropdownDropdown FieldCreateDocumentFieldFieldMetaTypeDropdown = "dropdown"
)

func (e FieldCreateDocumentFieldFieldMetaTypeDropdown) ToPointer() *FieldCreateDocumentFieldFieldMetaTypeDropdown {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateDocumentFieldFieldMetaTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaTypeDropdown: %v", v)
	}
}

type FieldCreateDocumentFieldValueResponse3 struct {
	Value string `json:"value"`
}

func (f FieldCreateDocumentFieldValueResponse3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldValueResponse3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldValueResponse3) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldFieldMetaDropdownResponse struct {
	Label        *string                                       `json:"label,omitempty"`
	Placeholder  *string                                       `json:"placeholder,omitempty"`
	Required     *bool                                         `json:"required,omitempty"`
	ReadOnly     *bool                                         `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldFieldMetaTypeDropdown `json:"type"`
	Values       []FieldCreateDocumentFieldValueResponse3      `json:"values,omitempty"`
	DefaultValue *string                                       `json:"defaultValue,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaDropdownResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaDropdownResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaDropdownResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaDropdownResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaDropdownResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaDropdownResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaDropdownResponse) GetType() FieldCreateDocumentFieldFieldMetaTypeDropdown {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaTypeDropdown("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaDropdownResponse) GetValues() []FieldCreateDocumentFieldValueResponse3 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateDocumentFieldFieldMetaDropdownResponse) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldCreateDocumentFieldFieldMetaTypeCheckbox string

const (
	FieldCreateDocumentFieldFieldMetaTypeCheckboxCheckbox FieldCreateDocumentFieldFieldMetaTypeCheckbox = "checkbox"
)

func (e FieldCreateDocumentFieldFieldMetaTypeCheckbox) ToPointer() *FieldCreateDocumentFieldFieldMetaTypeCheckbox {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateDocumentFieldFieldMetaTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaTypeCheckbox: %v", v)
	}
}

type FieldCreateDocumentFieldValueResponse2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldCreateDocumentFieldValueResponse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldValueResponse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldValueResponse2) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldValueResponse2) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateDocumentFieldValueResponse2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldFieldMetaCheckboxResponse struct {
	Label            *string                                       `json:"label,omitempty"`
	Placeholder      *string                                       `json:"placeholder,omitempty"`
	Required         *bool                                         `json:"required,omitempty"`
	ReadOnly         *bool                                         `json:"readOnly,omitempty"`
	Type             FieldCreateDocumentFieldFieldMetaTypeCheckbox `json:"type"`
	Values           []FieldCreateDocumentFieldValueResponse2      `json:"values,omitempty"`
	ValidationRule   *string                                       `json:"validationRule,omitempty"`
	ValidationLength *float64                                      `json:"validationLength,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaCheckboxResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaCheckboxResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaCheckboxResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaCheckboxResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaCheckboxResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaCheckboxResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaCheckboxResponse) GetType() FieldCreateDocumentFieldFieldMetaTypeCheckbox {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaTypeCheckbox("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaCheckboxResponse) GetValues() []FieldCreateDocumentFieldValueResponse2 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateDocumentFieldFieldMetaCheckboxResponse) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldCreateDocumentFieldFieldMetaCheckboxResponse) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldCreateDocumentFieldFieldMetaTypeRadio string

const (
	FieldCreateDocumentFieldFieldMetaTypeRadioRadio FieldCreateDocumentFieldFieldMetaTypeRadio = "radio"
)

func (e FieldCreateDocumentFieldFieldMetaTypeRadio) ToPointer() *FieldCreateDocumentFieldFieldMetaTypeRadio {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateDocumentFieldFieldMetaTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaTypeRadio: %v", v)
	}
}

type FieldCreateDocumentFieldValueResponse1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldCreateDocumentFieldValueResponse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldValueResponse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldValueResponse1) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldValueResponse1) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateDocumentFieldValueResponse1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldFieldMetaRadioResponse struct {
	Label       *string                                    `json:"label,omitempty"`
	Placeholder *string                                    `json:"placeholder,omitempty"`
	Required    *bool                                      `json:"required,omitempty"`
	ReadOnly    *bool                                      `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldFieldMetaTypeRadio `json:"type"`
	Values      []FieldCreateDocumentFieldValueResponse1   `json:"values,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaRadioResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaRadioResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaRadioResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaRadioResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaRadioResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaRadioResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaRadioResponse) GetType() FieldCreateDocumentFieldFieldMetaTypeRadio {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaTypeRadio("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaRadioResponse) GetValues() []FieldCreateDocumentFieldValueResponse1 {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldCreateDocumentFieldFieldMetaTypeNumber string

const (
	FieldCreateDocumentFieldFieldMetaTypeNumberNumber FieldCreateDocumentFieldFieldMetaTypeNumber = "number"
)

func (e FieldCreateDocumentFieldFieldMetaTypeNumber) ToPointer() *FieldCreateDocumentFieldFieldMetaTypeNumber {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateDocumentFieldFieldMetaTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaTypeNumber: %v", v)
	}
}

type FieldCreateDocumentFieldTextAlignResponse6 string

const (
	FieldCreateDocumentFieldTextAlignResponse6Left   FieldCreateDocumentFieldTextAlignResponse6 = "left"
	FieldCreateDocumentFieldTextAlignResponse6Center FieldCreateDocumentFieldTextAlignResponse6 = "center"
	FieldCreateDocumentFieldTextAlignResponse6Right  FieldCreateDocumentFieldTextAlignResponse6 = "right"
)

func (e FieldCreateDocumentFieldTextAlignResponse6) ToPointer() *FieldCreateDocumentFieldTextAlignResponse6 {
	return &e
}
func (e *FieldCreateDocumentFieldTextAlignResponse6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldTextAlignResponse6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTextAlignResponse6: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMetaNumberResponse struct {
	Label        *string                                     `json:"label,omitempty"`
	Placeholder  *string                                     `json:"placeholder,omitempty"`
	Required     *bool                                       `json:"required,omitempty"`
	ReadOnly     *bool                                       `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldFieldMetaTypeNumber `json:"type"`
	NumberFormat *string                                     `json:"numberFormat,omitempty"`
	Value        *string                                     `json:"value,omitempty"`
	MinValue     *float64                                    `json:"minValue,omitempty"`
	MaxValue     *float64                                    `json:"maxValue,omitempty"`
	FontSize     *float64                                    `json:"fontSize,omitempty"`
	TextAlign    *FieldCreateDocumentFieldTextAlignResponse6 `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaNumberResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaNumberResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaNumberResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaNumberResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaNumberResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaNumberResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaNumberResponse) GetType() FieldCreateDocumentFieldFieldMetaTypeNumber {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaTypeNumber("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaNumberResponse) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldCreateDocumentFieldFieldMetaNumberResponse) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldCreateDocumentFieldFieldMetaNumberResponse) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldCreateDocumentFieldFieldMetaNumberResponse) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldCreateDocumentFieldFieldMetaNumberResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldFieldMetaNumberResponse) GetTextAlign() *FieldCreateDocumentFieldTextAlignResponse6 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldFieldMetaTypeText string

const (
	FieldCreateDocumentFieldFieldMetaTypeTextText FieldCreateDocumentFieldFieldMetaTypeText = "text"
)

func (e FieldCreateDocumentFieldFieldMetaTypeText) ToPointer() *FieldCreateDocumentFieldFieldMetaTypeText {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateDocumentFieldFieldMetaTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaTypeText: %v", v)
	}
}

type FieldCreateDocumentFieldTextAlignResponse5 string

const (
	FieldCreateDocumentFieldTextAlignResponse5Left   FieldCreateDocumentFieldTextAlignResponse5 = "left"
	FieldCreateDocumentFieldTextAlignResponse5Center FieldCreateDocumentFieldTextAlignResponse5 = "center"
	FieldCreateDocumentFieldTextAlignResponse5Right  FieldCreateDocumentFieldTextAlignResponse5 = "right"
)

func (e FieldCreateDocumentFieldTextAlignResponse5) ToPointer() *FieldCreateDocumentFieldTextAlignResponse5 {
	return &e
}
func (e *FieldCreateDocumentFieldTextAlignResponse5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldTextAlignResponse5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTextAlignResponse5: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMetaTextResponse struct {
	Label          *string                                     `json:"label,omitempty"`
	Placeholder    *string                                     `json:"placeholder,omitempty"`
	Required       *bool                                       `json:"required,omitempty"`
	ReadOnly       *bool                                       `json:"readOnly,omitempty"`
	Type           FieldCreateDocumentFieldFieldMetaTypeText   `json:"type"`
	Text           *string                                     `json:"text,omitempty"`
	CharacterLimit *float64                                    `json:"characterLimit,omitempty"`
	FontSize       *float64                                    `json:"fontSize,omitempty"`
	TextAlign      *FieldCreateDocumentFieldTextAlignResponse5 `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaTextResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaTextResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaTextResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaTextResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaTextResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaTextResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaTextResponse) GetType() FieldCreateDocumentFieldFieldMetaTypeText {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaTypeText("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaTextResponse) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldCreateDocumentFieldFieldMetaTextResponse) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldCreateDocumentFieldFieldMetaTextResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldFieldMetaTextResponse) GetTextAlign() *FieldCreateDocumentFieldTextAlignResponse5 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldFieldMetaTypeDate string

const (
	FieldCreateDocumentFieldFieldMetaTypeDateDate FieldCreateDocumentFieldFieldMetaTypeDate = "date"
)

func (e FieldCreateDocumentFieldFieldMetaTypeDate) ToPointer() *FieldCreateDocumentFieldFieldMetaTypeDate {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateDocumentFieldFieldMetaTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaTypeDate: %v", v)
	}
}

type FieldCreateDocumentFieldTextAlignResponse4 string

const (
	FieldCreateDocumentFieldTextAlignResponse4Left   FieldCreateDocumentFieldTextAlignResponse4 = "left"
	FieldCreateDocumentFieldTextAlignResponse4Center FieldCreateDocumentFieldTextAlignResponse4 = "center"
	FieldCreateDocumentFieldTextAlignResponse4Right  FieldCreateDocumentFieldTextAlignResponse4 = "right"
)

func (e FieldCreateDocumentFieldTextAlignResponse4) ToPointer() *FieldCreateDocumentFieldTextAlignResponse4 {
	return &e
}
func (e *FieldCreateDocumentFieldTextAlignResponse4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldTextAlignResponse4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTextAlignResponse4: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMetaDateResponse struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldFieldMetaTypeDate   `json:"type"`
	FontSize    *float64                                    `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldTextAlignResponse4 `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaDateResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaDateResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaDateResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaDateResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaDateResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaDateResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaDateResponse) GetType() FieldCreateDocumentFieldFieldMetaTypeDate {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaTypeDate("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaDateResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldFieldMetaDateResponse) GetTextAlign() *FieldCreateDocumentFieldTextAlignResponse4 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldFieldMetaTypeEmail string

const (
	FieldCreateDocumentFieldFieldMetaTypeEmailEmail FieldCreateDocumentFieldFieldMetaTypeEmail = "email"
)

func (e FieldCreateDocumentFieldFieldMetaTypeEmail) ToPointer() *FieldCreateDocumentFieldFieldMetaTypeEmail {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateDocumentFieldFieldMetaTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaTypeEmail: %v", v)
	}
}

type FieldCreateDocumentFieldTextAlignResponse3 string

const (
	FieldCreateDocumentFieldTextAlignResponse3Left   FieldCreateDocumentFieldTextAlignResponse3 = "left"
	FieldCreateDocumentFieldTextAlignResponse3Center FieldCreateDocumentFieldTextAlignResponse3 = "center"
	FieldCreateDocumentFieldTextAlignResponse3Right  FieldCreateDocumentFieldTextAlignResponse3 = "right"
)

func (e FieldCreateDocumentFieldTextAlignResponse3) ToPointer() *FieldCreateDocumentFieldTextAlignResponse3 {
	return &e
}
func (e *FieldCreateDocumentFieldTextAlignResponse3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldTextAlignResponse3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTextAlignResponse3: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMetaEmailResponse struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldFieldMetaTypeEmail  `json:"type"`
	FontSize    *float64                                    `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldTextAlignResponse3 `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaEmailResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaEmailResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaEmailResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaEmailResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaEmailResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaEmailResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaEmailResponse) GetType() FieldCreateDocumentFieldFieldMetaTypeEmail {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaTypeEmail("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaEmailResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldFieldMetaEmailResponse) GetTextAlign() *FieldCreateDocumentFieldTextAlignResponse3 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldFieldMetaTypeName string

const (
	FieldCreateDocumentFieldFieldMetaTypeNameName FieldCreateDocumentFieldFieldMetaTypeName = "name"
)

func (e FieldCreateDocumentFieldFieldMetaTypeName) ToPointer() *FieldCreateDocumentFieldFieldMetaTypeName {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateDocumentFieldFieldMetaTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaTypeName: %v", v)
	}
}

type FieldCreateDocumentFieldTextAlignResponse2 string

const (
	FieldCreateDocumentFieldTextAlignResponse2Left   FieldCreateDocumentFieldTextAlignResponse2 = "left"
	FieldCreateDocumentFieldTextAlignResponse2Center FieldCreateDocumentFieldTextAlignResponse2 = "center"
	FieldCreateDocumentFieldTextAlignResponse2Right  FieldCreateDocumentFieldTextAlignResponse2 = "right"
)

func (e FieldCreateDocumentFieldTextAlignResponse2) ToPointer() *FieldCreateDocumentFieldTextAlignResponse2 {
	return &e
}
func (e *FieldCreateDocumentFieldTextAlignResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldTextAlignResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTextAlignResponse2: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMetaNameResponse struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldFieldMetaTypeName   `json:"type"`
	FontSize    *float64                                    `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldTextAlignResponse2 `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaNameResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaNameResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaNameResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaNameResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaNameResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaNameResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaNameResponse) GetType() FieldCreateDocumentFieldFieldMetaTypeName {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaTypeName("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaNameResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldFieldMetaNameResponse) GetTextAlign() *FieldCreateDocumentFieldTextAlignResponse2 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldFieldMetaTypeInitials string

const (
	FieldCreateDocumentFieldFieldMetaTypeInitialsInitials FieldCreateDocumentFieldFieldMetaTypeInitials = "initials"
)

func (e FieldCreateDocumentFieldFieldMetaTypeInitials) ToPointer() *FieldCreateDocumentFieldFieldMetaTypeInitials {
	return &e
}
func (e *FieldCreateDocumentFieldFieldMetaTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateDocumentFieldFieldMetaTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldFieldMetaTypeInitials: %v", v)
	}
}

type FieldCreateDocumentFieldTextAlignResponse1 string

const (
	FieldCreateDocumentFieldTextAlignResponse1Left   FieldCreateDocumentFieldTextAlignResponse1 = "left"
	FieldCreateDocumentFieldTextAlignResponse1Center FieldCreateDocumentFieldTextAlignResponse1 = "center"
	FieldCreateDocumentFieldTextAlignResponse1Right  FieldCreateDocumentFieldTextAlignResponse1 = "right"
)

func (e FieldCreateDocumentFieldTextAlignResponse1) ToPointer() *FieldCreateDocumentFieldTextAlignResponse1 {
	return &e
}
func (e *FieldCreateDocumentFieldTextAlignResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldTextAlignResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldTextAlignResponse1: %v", v)
	}
}

type FieldCreateDocumentFieldFieldMetaInitialsResponse struct {
	Label       *string                                       `json:"label,omitempty"`
	Placeholder *string                                       `json:"placeholder,omitempty"`
	Required    *bool                                         `json:"required,omitempty"`
	ReadOnly    *bool                                         `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldFieldMetaTypeInitials `json:"type"`
	FontSize    *float64                                      `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldTextAlignResponse1   `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldFieldMetaInitialsResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldFieldMetaInitialsResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateDocumentFieldFieldMetaInitialsResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldFieldMetaInitialsResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldFieldMetaInitialsResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldFieldMetaInitialsResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldFieldMetaInitialsResponse) GetType() FieldCreateDocumentFieldFieldMetaTypeInitials {
	if o == nil {
		return FieldCreateDocumentFieldFieldMetaTypeInitials("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldFieldMetaInitialsResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateDocumentFieldFieldMetaInitialsResponse) GetTextAlign() *FieldCreateDocumentFieldTextAlignResponse1 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateDocumentFieldFieldMetaUnionType string

const (
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaInitialsResponse FieldCreateDocumentFieldFieldMetaUnionType = "field_createDocumentField_fieldMeta_Initials_response"
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaNameResponse     FieldCreateDocumentFieldFieldMetaUnionType = "field_createDocumentField_fieldMeta_Name_response"
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaEmailResponse    FieldCreateDocumentFieldFieldMetaUnionType = "field_createDocumentField_fieldMeta_Email_response"
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaDateResponse     FieldCreateDocumentFieldFieldMetaUnionType = "field_createDocumentField_fieldMeta_Date_response"
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaTextResponse     FieldCreateDocumentFieldFieldMetaUnionType = "field_createDocumentField_fieldMeta_Text_response"
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaNumberResponse   FieldCreateDocumentFieldFieldMetaUnionType = "field_createDocumentField_fieldMeta_Number_response"
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaRadioResponse    FieldCreateDocumentFieldFieldMetaUnionType = "field_createDocumentField_fieldMeta_Radio_response"
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaCheckboxResponse FieldCreateDocumentFieldFieldMetaUnionType = "field_createDocumentField_fieldMeta_Checkbox_response"
	FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaDropdownResponse FieldCreateDocumentFieldFieldMetaUnionType = "field_createDocumentField_fieldMeta_Dropdown_response"
)

type FieldCreateDocumentFieldFieldMetaUnion struct {
	FieldCreateDocumentFieldFieldMetaInitialsResponse *FieldCreateDocumentFieldFieldMetaInitialsResponse `queryParam:"inline"`
	FieldCreateDocumentFieldFieldMetaNameResponse     *FieldCreateDocumentFieldFieldMetaNameResponse     `queryParam:"inline"`
	FieldCreateDocumentFieldFieldMetaEmailResponse    *FieldCreateDocumentFieldFieldMetaEmailResponse    `queryParam:"inline"`
	FieldCreateDocumentFieldFieldMetaDateResponse     *FieldCreateDocumentFieldFieldMetaDateResponse     `queryParam:"inline"`
	FieldCreateDocumentFieldFieldMetaTextResponse     *FieldCreateDocumentFieldFieldMetaTextResponse     `queryParam:"inline"`
	FieldCreateDocumentFieldFieldMetaNumberResponse   *FieldCreateDocumentFieldFieldMetaNumberResponse   `queryParam:"inline"`
	FieldCreateDocumentFieldFieldMetaRadioResponse    *FieldCreateDocumentFieldFieldMetaRadioResponse    `queryParam:"inline"`
	FieldCreateDocumentFieldFieldMetaCheckboxResponse *FieldCreateDocumentFieldFieldMetaCheckboxResponse `queryParam:"inline"`
	FieldCreateDocumentFieldFieldMetaDropdownResponse *FieldCreateDocumentFieldFieldMetaDropdownResponse `queryParam:"inline"`

	Type FieldCreateDocumentFieldFieldMetaUnionType
}

func CreateFieldCreateDocumentFieldFieldMetaUnionFieldCreateDocumentFieldFieldMetaInitialsResponse(fieldCreateDocumentFieldFieldMetaInitialsResponse FieldCreateDocumentFieldFieldMetaInitialsResponse) FieldCreateDocumentFieldFieldMetaUnion {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaInitialsResponse

	return FieldCreateDocumentFieldFieldMetaUnion{
		FieldCreateDocumentFieldFieldMetaInitialsResponse: &fieldCreateDocumentFieldFieldMetaInitialsResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldFieldMetaUnionFieldCreateDocumentFieldFieldMetaNameResponse(fieldCreateDocumentFieldFieldMetaNameResponse FieldCreateDocumentFieldFieldMetaNameResponse) FieldCreateDocumentFieldFieldMetaUnion {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaNameResponse

	return FieldCreateDocumentFieldFieldMetaUnion{
		FieldCreateDocumentFieldFieldMetaNameResponse: &fieldCreateDocumentFieldFieldMetaNameResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldFieldMetaUnionFieldCreateDocumentFieldFieldMetaEmailResponse(fieldCreateDocumentFieldFieldMetaEmailResponse FieldCreateDocumentFieldFieldMetaEmailResponse) FieldCreateDocumentFieldFieldMetaUnion {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaEmailResponse

	return FieldCreateDocumentFieldFieldMetaUnion{
		FieldCreateDocumentFieldFieldMetaEmailResponse: &fieldCreateDocumentFieldFieldMetaEmailResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldFieldMetaUnionFieldCreateDocumentFieldFieldMetaDateResponse(fieldCreateDocumentFieldFieldMetaDateResponse FieldCreateDocumentFieldFieldMetaDateResponse) FieldCreateDocumentFieldFieldMetaUnion {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaDateResponse

	return FieldCreateDocumentFieldFieldMetaUnion{
		FieldCreateDocumentFieldFieldMetaDateResponse: &fieldCreateDocumentFieldFieldMetaDateResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldFieldMetaUnionFieldCreateDocumentFieldFieldMetaTextResponse(fieldCreateDocumentFieldFieldMetaTextResponse FieldCreateDocumentFieldFieldMetaTextResponse) FieldCreateDocumentFieldFieldMetaUnion {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaTextResponse

	return FieldCreateDocumentFieldFieldMetaUnion{
		FieldCreateDocumentFieldFieldMetaTextResponse: &fieldCreateDocumentFieldFieldMetaTextResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldFieldMetaUnionFieldCreateDocumentFieldFieldMetaNumberResponse(fieldCreateDocumentFieldFieldMetaNumberResponse FieldCreateDocumentFieldFieldMetaNumberResponse) FieldCreateDocumentFieldFieldMetaUnion {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaNumberResponse

	return FieldCreateDocumentFieldFieldMetaUnion{
		FieldCreateDocumentFieldFieldMetaNumberResponse: &fieldCreateDocumentFieldFieldMetaNumberResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldFieldMetaUnionFieldCreateDocumentFieldFieldMetaRadioResponse(fieldCreateDocumentFieldFieldMetaRadioResponse FieldCreateDocumentFieldFieldMetaRadioResponse) FieldCreateDocumentFieldFieldMetaUnion {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaRadioResponse

	return FieldCreateDocumentFieldFieldMetaUnion{
		FieldCreateDocumentFieldFieldMetaRadioResponse: &fieldCreateDocumentFieldFieldMetaRadioResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldFieldMetaUnionFieldCreateDocumentFieldFieldMetaCheckboxResponse(fieldCreateDocumentFieldFieldMetaCheckboxResponse FieldCreateDocumentFieldFieldMetaCheckboxResponse) FieldCreateDocumentFieldFieldMetaUnion {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaCheckboxResponse

	return FieldCreateDocumentFieldFieldMetaUnion{
		FieldCreateDocumentFieldFieldMetaCheckboxResponse: &fieldCreateDocumentFieldFieldMetaCheckboxResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldFieldMetaUnionFieldCreateDocumentFieldFieldMetaDropdownResponse(fieldCreateDocumentFieldFieldMetaDropdownResponse FieldCreateDocumentFieldFieldMetaDropdownResponse) FieldCreateDocumentFieldFieldMetaUnion {
	typ := FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaDropdownResponse

	return FieldCreateDocumentFieldFieldMetaUnion{
		FieldCreateDocumentFieldFieldMetaDropdownResponse: &fieldCreateDocumentFieldFieldMetaDropdownResponse,
		Type: typ,
	}
}

func (u *FieldCreateDocumentFieldFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var fieldCreateDocumentFieldFieldMetaInitialsResponse FieldCreateDocumentFieldFieldMetaInitialsResponse = FieldCreateDocumentFieldFieldMetaInitialsResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMetaInitialsResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldMetaInitialsResponse = &fieldCreateDocumentFieldFieldMetaInitialsResponse
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaInitialsResponse
		return nil
	}

	var fieldCreateDocumentFieldFieldMetaNameResponse FieldCreateDocumentFieldFieldMetaNameResponse = FieldCreateDocumentFieldFieldMetaNameResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMetaNameResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldMetaNameResponse = &fieldCreateDocumentFieldFieldMetaNameResponse
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaNameResponse
		return nil
	}

	var fieldCreateDocumentFieldFieldMetaEmailResponse FieldCreateDocumentFieldFieldMetaEmailResponse = FieldCreateDocumentFieldFieldMetaEmailResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMetaEmailResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldMetaEmailResponse = &fieldCreateDocumentFieldFieldMetaEmailResponse
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaEmailResponse
		return nil
	}

	var fieldCreateDocumentFieldFieldMetaDateResponse FieldCreateDocumentFieldFieldMetaDateResponse = FieldCreateDocumentFieldFieldMetaDateResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMetaDateResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldMetaDateResponse = &fieldCreateDocumentFieldFieldMetaDateResponse
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaDateResponse
		return nil
	}

	var fieldCreateDocumentFieldFieldMetaTextResponse FieldCreateDocumentFieldFieldMetaTextResponse = FieldCreateDocumentFieldFieldMetaTextResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMetaTextResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldMetaTextResponse = &fieldCreateDocumentFieldFieldMetaTextResponse
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaTextResponse
		return nil
	}

	var fieldCreateDocumentFieldFieldMetaNumberResponse FieldCreateDocumentFieldFieldMetaNumberResponse = FieldCreateDocumentFieldFieldMetaNumberResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMetaNumberResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldMetaNumberResponse = &fieldCreateDocumentFieldFieldMetaNumberResponse
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaNumberResponse
		return nil
	}

	var fieldCreateDocumentFieldFieldMetaRadioResponse FieldCreateDocumentFieldFieldMetaRadioResponse = FieldCreateDocumentFieldFieldMetaRadioResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMetaRadioResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldMetaRadioResponse = &fieldCreateDocumentFieldFieldMetaRadioResponse
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaRadioResponse
		return nil
	}

	var fieldCreateDocumentFieldFieldMetaCheckboxResponse FieldCreateDocumentFieldFieldMetaCheckboxResponse = FieldCreateDocumentFieldFieldMetaCheckboxResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMetaCheckboxResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldMetaCheckboxResponse = &fieldCreateDocumentFieldFieldMetaCheckboxResponse
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaCheckboxResponse
		return nil
	}

	var fieldCreateDocumentFieldFieldMetaDropdownResponse FieldCreateDocumentFieldFieldMetaDropdownResponse = FieldCreateDocumentFieldFieldMetaDropdownResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldFieldMetaDropdownResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldFieldMetaDropdownResponse = &fieldCreateDocumentFieldFieldMetaDropdownResponse
		u.Type = FieldCreateDocumentFieldFieldMetaUnionTypeFieldCreateDocumentFieldFieldMetaDropdownResponse
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldCreateDocumentFieldFieldMetaUnion", string(data))
}

func (u FieldCreateDocumentFieldFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.FieldCreateDocumentFieldFieldMetaInitialsResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMetaInitialsResponse, "", true)
	}

	if u.FieldCreateDocumentFieldFieldMetaNameResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMetaNameResponse, "", true)
	}

	if u.FieldCreateDocumentFieldFieldMetaEmailResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMetaEmailResponse, "", true)
	}

	if u.FieldCreateDocumentFieldFieldMetaDateResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMetaDateResponse, "", true)
	}

	if u.FieldCreateDocumentFieldFieldMetaTextResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMetaTextResponse, "", true)
	}

	if u.FieldCreateDocumentFieldFieldMetaNumberResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMetaNumberResponse, "", true)
	}

	if u.FieldCreateDocumentFieldFieldMetaRadioResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMetaRadioResponse, "", true)
	}

	if u.FieldCreateDocumentFieldFieldMetaCheckboxResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMetaCheckboxResponse, "", true)
	}

	if u.FieldCreateDocumentFieldFieldMetaDropdownResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldFieldMetaDropdownResponse, "", true)
	}

	return nil, errors.New("could not marshal union type FieldCreateDocumentFieldFieldMetaUnion: all fields are null")
}

// FieldCreateDocumentFieldResponseBody - Successful response
type FieldCreateDocumentFieldResponseBody struct {
	Type        FieldCreateDocumentFieldTypeResponse `json:"type"`
	ID          float64                              `json:"id"`
	SecondaryID string                               `json:"secondaryId"`
	DocumentID  *float64                             `json:"documentId"`
	TemplateID  *float64                             `json:"templateId"`
	RecipientID float64                              `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                                 `json:"page"`
	PositionX  any                                     `json:"positionX,omitempty"`
	PositionY  any                                     `json:"positionY,omitempty"`
	Width      any                                     `json:"width,omitempty"`
	Height     any                                     `json:"height,omitempty"`
	CustomText string                                  `json:"customText"`
	Inserted   bool                                    `json:"inserted"`
	FieldMeta  *FieldCreateDocumentFieldFieldMetaUnion `json:"fieldMeta"`
}

func (o *FieldCreateDocumentFieldResponseBody) GetType() FieldCreateDocumentFieldTypeResponse {
	if o == nil {
		return FieldCreateDocumentFieldTypeResponse("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldResponseBody) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldResponseBody) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *FieldCreateDocumentFieldResponseBody) GetDocumentID() *float64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *FieldCreateDocumentFieldResponseBody) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *FieldCreateDocumentFieldResponseBody) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldResponseBody) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *FieldCreateDocumentFieldResponseBody) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *FieldCreateDocumentFieldResponseBody) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *FieldCreateDocumentFieldResponseBody) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldResponseBody) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *FieldCreateDocumentFieldResponseBody) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *FieldCreateDocumentFieldResponseBody) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *FieldCreateDocumentFieldResponseBody) GetFieldMeta() *FieldCreateDocumentFieldFieldMetaUnion {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

type FieldCreateDocumentFieldResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldCreateDocumentFieldResponseBody
}

func (o *FieldCreateDocumentFieldResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FieldCreateDocumentFieldResponse) GetObject() *FieldCreateDocumentFieldResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
