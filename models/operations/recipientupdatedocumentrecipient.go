// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type RecipientUpdateDocumentRecipientRoleRequest string

const (
	RecipientUpdateDocumentRecipientRoleRequestCc        RecipientUpdateDocumentRecipientRoleRequest = "CC"
	RecipientUpdateDocumentRecipientRoleRequestSigner    RecipientUpdateDocumentRecipientRoleRequest = "SIGNER"
	RecipientUpdateDocumentRecipientRoleRequestViewer    RecipientUpdateDocumentRecipientRoleRequest = "VIEWER"
	RecipientUpdateDocumentRecipientRoleRequestApprover  RecipientUpdateDocumentRecipientRoleRequest = "APPROVER"
	RecipientUpdateDocumentRecipientRoleRequestAssistant RecipientUpdateDocumentRecipientRoleRequest = "ASSISTANT"
)

func (e RecipientUpdateDocumentRecipientRoleRequest) ToPointer() *RecipientUpdateDocumentRecipientRoleRequest {
	return &e
}
func (e *RecipientUpdateDocumentRecipientRoleRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = RecipientUpdateDocumentRecipientRoleRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientRoleRequest: %v", v)
	}
}

// RecipientUpdateDocumentRecipientAccessAuthRequest - The type of authentication required for the recipient to access the document.
type RecipientUpdateDocumentRecipientAccessAuthRequest string

const (
	RecipientUpdateDocumentRecipientAccessAuthRequestAccount       RecipientUpdateDocumentRecipientAccessAuthRequest = "ACCOUNT"
	RecipientUpdateDocumentRecipientAccessAuthRequestTwoFactorAuth RecipientUpdateDocumentRecipientAccessAuthRequest = "TWO_FACTOR_AUTH"
)

func (e RecipientUpdateDocumentRecipientAccessAuthRequest) ToPointer() *RecipientUpdateDocumentRecipientAccessAuthRequest {
	return &e
}
func (e *RecipientUpdateDocumentRecipientAccessAuthRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = RecipientUpdateDocumentRecipientAccessAuthRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientAccessAuthRequest: %v", v)
	}
}

// RecipientUpdateDocumentRecipientActionAuthRequest - The type of authentication required for the recipient to sign the document.
type RecipientUpdateDocumentRecipientActionAuthRequest string

const (
	RecipientUpdateDocumentRecipientActionAuthRequestAccount       RecipientUpdateDocumentRecipientActionAuthRequest = "ACCOUNT"
	RecipientUpdateDocumentRecipientActionAuthRequestPasskey       RecipientUpdateDocumentRecipientActionAuthRequest = "PASSKEY"
	RecipientUpdateDocumentRecipientActionAuthRequestTwoFactorAuth RecipientUpdateDocumentRecipientActionAuthRequest = "TWO_FACTOR_AUTH"
	RecipientUpdateDocumentRecipientActionAuthRequestPassword      RecipientUpdateDocumentRecipientActionAuthRequest = "PASSWORD"
	RecipientUpdateDocumentRecipientActionAuthRequestExplicitNone  RecipientUpdateDocumentRecipientActionAuthRequest = "EXPLICIT_NONE"
)

func (e RecipientUpdateDocumentRecipientActionAuthRequest) ToPointer() *RecipientUpdateDocumentRecipientActionAuthRequest {
	return &e
}
func (e *RecipientUpdateDocumentRecipientActionAuthRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		fallthrough
	case "EXPLICIT_NONE":
		*e = RecipientUpdateDocumentRecipientActionAuthRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientActionAuthRequest: %v", v)
	}
}

type RecipientUpdateDocumentRecipientRecipient struct {
	// The ID of the recipient to update.
	ID           float64                                             `json:"id"`
	Email        *string                                             `json:"email,omitempty"`
	Name         *string                                             `json:"name,omitempty"`
	Role         *RecipientUpdateDocumentRecipientRoleRequest        `json:"role,omitempty"`
	SigningOrder *float64                                            `json:"signingOrder,omitempty"`
	AccessAuth   []RecipientUpdateDocumentRecipientAccessAuthRequest `json:"accessAuth,omitempty"`
	ActionAuth   []RecipientUpdateDocumentRecipientActionAuthRequest `json:"actionAuth,omitempty"`
}

func (r *RecipientUpdateDocumentRecipientRecipient) GetID() float64 {
	if r == nil {
		return 0.0
	}
	return r.ID
}

func (r *RecipientUpdateDocumentRecipientRecipient) GetEmail() *string {
	if r == nil {
		return nil
	}
	return r.Email
}

func (r *RecipientUpdateDocumentRecipientRecipient) GetName() *string {
	if r == nil {
		return nil
	}
	return r.Name
}

func (r *RecipientUpdateDocumentRecipientRecipient) GetRole() *RecipientUpdateDocumentRecipientRoleRequest {
	if r == nil {
		return nil
	}
	return r.Role
}

func (r *RecipientUpdateDocumentRecipientRecipient) GetSigningOrder() *float64 {
	if r == nil {
		return nil
	}
	return r.SigningOrder
}

func (r *RecipientUpdateDocumentRecipientRecipient) GetAccessAuth() []RecipientUpdateDocumentRecipientAccessAuthRequest {
	if r == nil {
		return nil
	}
	return r.AccessAuth
}

func (r *RecipientUpdateDocumentRecipientRecipient) GetActionAuth() []RecipientUpdateDocumentRecipientActionAuthRequest {
	if r == nil {
		return nil
	}
	return r.ActionAuth
}

type RecipientUpdateDocumentRecipientRequest struct {
	DocumentID float64                                   `json:"documentId"`
	Recipient  RecipientUpdateDocumentRecipientRecipient `json:"recipient"`
}

func (r *RecipientUpdateDocumentRecipientRequest) GetDocumentID() float64 {
	if r == nil {
		return 0.0
	}
	return r.DocumentID
}

func (r *RecipientUpdateDocumentRecipientRequest) GetRecipient() RecipientUpdateDocumentRecipientRecipient {
	if r == nil {
		return RecipientUpdateDocumentRecipientRecipient{}
	}
	return r.Recipient
}

type RecipientUpdateDocumentRecipientRoleResponse string

const (
	RecipientUpdateDocumentRecipientRoleResponseCc        RecipientUpdateDocumentRecipientRoleResponse = "CC"
	RecipientUpdateDocumentRecipientRoleResponseSigner    RecipientUpdateDocumentRecipientRoleResponse = "SIGNER"
	RecipientUpdateDocumentRecipientRoleResponseViewer    RecipientUpdateDocumentRecipientRoleResponse = "VIEWER"
	RecipientUpdateDocumentRecipientRoleResponseApprover  RecipientUpdateDocumentRecipientRoleResponse = "APPROVER"
	RecipientUpdateDocumentRecipientRoleResponseAssistant RecipientUpdateDocumentRecipientRoleResponse = "ASSISTANT"
)

func (e RecipientUpdateDocumentRecipientRoleResponse) ToPointer() *RecipientUpdateDocumentRecipientRoleResponse {
	return &e
}
func (e *RecipientUpdateDocumentRecipientRoleResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = RecipientUpdateDocumentRecipientRoleResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientRoleResponse: %v", v)
	}
}

type RecipientUpdateDocumentRecipientReadStatus string

const (
	RecipientUpdateDocumentRecipientReadStatusNotOpened RecipientUpdateDocumentRecipientReadStatus = "NOT_OPENED"
	RecipientUpdateDocumentRecipientReadStatusOpened    RecipientUpdateDocumentRecipientReadStatus = "OPENED"
)

func (e RecipientUpdateDocumentRecipientReadStatus) ToPointer() *RecipientUpdateDocumentRecipientReadStatus {
	return &e
}
func (e *RecipientUpdateDocumentRecipientReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = RecipientUpdateDocumentRecipientReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientReadStatus: %v", v)
	}
}

type RecipientUpdateDocumentRecipientSigningStatus string

const (
	RecipientUpdateDocumentRecipientSigningStatusNotSigned RecipientUpdateDocumentRecipientSigningStatus = "NOT_SIGNED"
	RecipientUpdateDocumentRecipientSigningStatusSigned    RecipientUpdateDocumentRecipientSigningStatus = "SIGNED"
	RecipientUpdateDocumentRecipientSigningStatusRejected  RecipientUpdateDocumentRecipientSigningStatus = "REJECTED"
)

func (e RecipientUpdateDocumentRecipientSigningStatus) ToPointer() *RecipientUpdateDocumentRecipientSigningStatus {
	return &e
}
func (e *RecipientUpdateDocumentRecipientSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = RecipientUpdateDocumentRecipientSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientSigningStatus: %v", v)
	}
}

type RecipientUpdateDocumentRecipientSendStatus string

const (
	RecipientUpdateDocumentRecipientSendStatusNotSent RecipientUpdateDocumentRecipientSendStatus = "NOT_SENT"
	RecipientUpdateDocumentRecipientSendStatusSent    RecipientUpdateDocumentRecipientSendStatus = "SENT"
)

func (e RecipientUpdateDocumentRecipientSendStatus) ToPointer() *RecipientUpdateDocumentRecipientSendStatus {
	return &e
}
func (e *RecipientUpdateDocumentRecipientSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = RecipientUpdateDocumentRecipientSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientSendStatus: %v", v)
	}
}

// RecipientUpdateDocumentRecipientAccessAuthResponse - The type of authentication required for the recipient to access the document.
type RecipientUpdateDocumentRecipientAccessAuthResponse string

const (
	RecipientUpdateDocumentRecipientAccessAuthResponseAccount       RecipientUpdateDocumentRecipientAccessAuthResponse = "ACCOUNT"
	RecipientUpdateDocumentRecipientAccessAuthResponseTwoFactorAuth RecipientUpdateDocumentRecipientAccessAuthResponse = "TWO_FACTOR_AUTH"
)

func (e RecipientUpdateDocumentRecipientAccessAuthResponse) ToPointer() *RecipientUpdateDocumentRecipientAccessAuthResponse {
	return &e
}
func (e *RecipientUpdateDocumentRecipientAccessAuthResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = RecipientUpdateDocumentRecipientAccessAuthResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientAccessAuthResponse: %v", v)
	}
}

// RecipientUpdateDocumentRecipientActionAuthResponse - The type of authentication required for the recipient to sign the document.
type RecipientUpdateDocumentRecipientActionAuthResponse string

const (
	RecipientUpdateDocumentRecipientActionAuthResponseAccount       RecipientUpdateDocumentRecipientActionAuthResponse = "ACCOUNT"
	RecipientUpdateDocumentRecipientActionAuthResponsePasskey       RecipientUpdateDocumentRecipientActionAuthResponse = "PASSKEY"
	RecipientUpdateDocumentRecipientActionAuthResponseTwoFactorAuth RecipientUpdateDocumentRecipientActionAuthResponse = "TWO_FACTOR_AUTH"
	RecipientUpdateDocumentRecipientActionAuthResponsePassword      RecipientUpdateDocumentRecipientActionAuthResponse = "PASSWORD"
	RecipientUpdateDocumentRecipientActionAuthResponseExplicitNone  RecipientUpdateDocumentRecipientActionAuthResponse = "EXPLICIT_NONE"
)

func (e RecipientUpdateDocumentRecipientActionAuthResponse) ToPointer() *RecipientUpdateDocumentRecipientActionAuthResponse {
	return &e
}
func (e *RecipientUpdateDocumentRecipientActionAuthResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		fallthrough
	case "EXPLICIT_NONE":
		*e = RecipientUpdateDocumentRecipientActionAuthResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientActionAuthResponse: %v", v)
	}
}

type RecipientUpdateDocumentRecipientAuthOptions struct {
	AccessAuth []RecipientUpdateDocumentRecipientAccessAuthResponse `json:"accessAuth"`
	ActionAuth []RecipientUpdateDocumentRecipientActionAuthResponse `json:"actionAuth"`
}

func (r *RecipientUpdateDocumentRecipientAuthOptions) GetAccessAuth() []RecipientUpdateDocumentRecipientAccessAuthResponse {
	if r == nil {
		return []RecipientUpdateDocumentRecipientAccessAuthResponse{}
	}
	return r.AccessAuth
}

func (r *RecipientUpdateDocumentRecipientAuthOptions) GetActionAuth() []RecipientUpdateDocumentRecipientActionAuthResponse {
	if r == nil {
		return []RecipientUpdateDocumentRecipientActionAuthResponse{}
	}
	return r.ActionAuth
}

type RecipientUpdateDocumentRecipientType string

const (
	RecipientUpdateDocumentRecipientTypeSignature     RecipientUpdateDocumentRecipientType = "SIGNATURE"
	RecipientUpdateDocumentRecipientTypeFreeSignature RecipientUpdateDocumentRecipientType = "FREE_SIGNATURE"
	RecipientUpdateDocumentRecipientTypeInitials      RecipientUpdateDocumentRecipientType = "INITIALS"
	RecipientUpdateDocumentRecipientTypeName          RecipientUpdateDocumentRecipientType = "NAME"
	RecipientUpdateDocumentRecipientTypeEmail         RecipientUpdateDocumentRecipientType = "EMAIL"
	RecipientUpdateDocumentRecipientTypeDate          RecipientUpdateDocumentRecipientType = "DATE"
	RecipientUpdateDocumentRecipientTypeText          RecipientUpdateDocumentRecipientType = "TEXT"
	RecipientUpdateDocumentRecipientTypeNumber        RecipientUpdateDocumentRecipientType = "NUMBER"
	RecipientUpdateDocumentRecipientTypeRadio         RecipientUpdateDocumentRecipientType = "RADIO"
	RecipientUpdateDocumentRecipientTypeCheckbox      RecipientUpdateDocumentRecipientType = "CHECKBOX"
	RecipientUpdateDocumentRecipientTypeDropdown      RecipientUpdateDocumentRecipientType = "DROPDOWN"
)

func (e RecipientUpdateDocumentRecipientType) ToPointer() *RecipientUpdateDocumentRecipientType {
	return &e
}
func (e *RecipientUpdateDocumentRecipientType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = RecipientUpdateDocumentRecipientType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientType: %v", v)
	}
}

type RecipientUpdateDocumentRecipientFieldMetaTypeDropdown string

const (
	RecipientUpdateDocumentRecipientFieldMetaTypeDropdownDropdown RecipientUpdateDocumentRecipientFieldMetaTypeDropdown = "dropdown"
)

func (e RecipientUpdateDocumentRecipientFieldMetaTypeDropdown) ToPointer() *RecipientUpdateDocumentRecipientFieldMetaTypeDropdown {
	return &e
}
func (e *RecipientUpdateDocumentRecipientFieldMetaTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = RecipientUpdateDocumentRecipientFieldMetaTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientFieldMetaTypeDropdown: %v", v)
	}
}

type RecipientUpdateDocumentRecipientValue3 struct {
	Value string `json:"value"`
}

func (r RecipientUpdateDocumentRecipientValue3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RecipientUpdateDocumentRecipientValue3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (r *RecipientUpdateDocumentRecipientValue3) GetValue() string {
	if r == nil {
		return ""
	}
	return r.Value
}

type RecipientUpdateDocumentRecipientFieldMetaDropdown struct {
	Label        *string                                               `json:"label,omitempty"`
	Placeholder  *string                                               `json:"placeholder,omitempty"`
	Required     *bool                                                 `json:"required,omitempty"`
	ReadOnly     *bool                                                 `json:"readOnly,omitempty"`
	Type         RecipientUpdateDocumentRecipientFieldMetaTypeDropdown `json:"type"`
	Values       []RecipientUpdateDocumentRecipientValue3              `json:"values,omitempty"`
	DefaultValue *string                                               `json:"defaultValue,omitempty"`
}

func (r RecipientUpdateDocumentRecipientFieldMetaDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RecipientUpdateDocumentRecipientFieldMetaDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (r *RecipientUpdateDocumentRecipientFieldMetaDropdown) GetLabel() *string {
	if r == nil {
		return nil
	}
	return r.Label
}

func (r *RecipientUpdateDocumentRecipientFieldMetaDropdown) GetPlaceholder() *string {
	if r == nil {
		return nil
	}
	return r.Placeholder
}

func (r *RecipientUpdateDocumentRecipientFieldMetaDropdown) GetRequired() *bool {
	if r == nil {
		return nil
	}
	return r.Required
}

func (r *RecipientUpdateDocumentRecipientFieldMetaDropdown) GetReadOnly() *bool {
	if r == nil {
		return nil
	}
	return r.ReadOnly
}

func (r *RecipientUpdateDocumentRecipientFieldMetaDropdown) GetType() RecipientUpdateDocumentRecipientFieldMetaTypeDropdown {
	if r == nil {
		return RecipientUpdateDocumentRecipientFieldMetaTypeDropdown("")
	}
	return r.Type
}

func (r *RecipientUpdateDocumentRecipientFieldMetaDropdown) GetValues() []RecipientUpdateDocumentRecipientValue3 {
	if r == nil {
		return nil
	}
	return r.Values
}

func (r *RecipientUpdateDocumentRecipientFieldMetaDropdown) GetDefaultValue() *string {
	if r == nil {
		return nil
	}
	return r.DefaultValue
}

type RecipientUpdateDocumentRecipientFieldMetaTypeCheckbox string

const (
	RecipientUpdateDocumentRecipientFieldMetaTypeCheckboxCheckbox RecipientUpdateDocumentRecipientFieldMetaTypeCheckbox = "checkbox"
)

func (e RecipientUpdateDocumentRecipientFieldMetaTypeCheckbox) ToPointer() *RecipientUpdateDocumentRecipientFieldMetaTypeCheckbox {
	return &e
}
func (e *RecipientUpdateDocumentRecipientFieldMetaTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = RecipientUpdateDocumentRecipientFieldMetaTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientFieldMetaTypeCheckbox: %v", v)
	}
}

type RecipientUpdateDocumentRecipientValue2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (r RecipientUpdateDocumentRecipientValue2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RecipientUpdateDocumentRecipientValue2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (r *RecipientUpdateDocumentRecipientValue2) GetID() float64 {
	if r == nil {
		return 0.0
	}
	return r.ID
}

func (r *RecipientUpdateDocumentRecipientValue2) GetChecked() bool {
	if r == nil {
		return false
	}
	return r.Checked
}

func (r *RecipientUpdateDocumentRecipientValue2) GetValue() string {
	if r == nil {
		return ""
	}
	return r.Value
}

type RecipientUpdateDocumentRecipientDirection string

const (
	RecipientUpdateDocumentRecipientDirectionVertical   RecipientUpdateDocumentRecipientDirection = "vertical"
	RecipientUpdateDocumentRecipientDirectionHorizontal RecipientUpdateDocumentRecipientDirection = "horizontal"
)

func (e RecipientUpdateDocumentRecipientDirection) ToPointer() *RecipientUpdateDocumentRecipientDirection {
	return &e
}
func (e *RecipientUpdateDocumentRecipientDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vertical":
		fallthrough
	case "horizontal":
		*e = RecipientUpdateDocumentRecipientDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientDirection: %v", v)
	}
}

type RecipientUpdateDocumentRecipientFieldMetaCheckbox struct {
	Label            *string                                               `json:"label,omitempty"`
	Placeholder      *string                                               `json:"placeholder,omitempty"`
	Required         *bool                                                 `json:"required,omitempty"`
	ReadOnly         *bool                                                 `json:"readOnly,omitempty"`
	Type             RecipientUpdateDocumentRecipientFieldMetaTypeCheckbox `json:"type"`
	Values           []RecipientUpdateDocumentRecipientValue2              `json:"values,omitempty"`
	ValidationRule   *string                                               `json:"validationRule,omitempty"`
	ValidationLength *float64                                              `json:"validationLength,omitempty"`
	Direction        *RecipientUpdateDocumentRecipientDirection            `default:"vertical" json:"direction"`
}

func (r RecipientUpdateDocumentRecipientFieldMetaCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RecipientUpdateDocumentRecipientFieldMetaCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (r *RecipientUpdateDocumentRecipientFieldMetaCheckbox) GetLabel() *string {
	if r == nil {
		return nil
	}
	return r.Label
}

func (r *RecipientUpdateDocumentRecipientFieldMetaCheckbox) GetPlaceholder() *string {
	if r == nil {
		return nil
	}
	return r.Placeholder
}

func (r *RecipientUpdateDocumentRecipientFieldMetaCheckbox) GetRequired() *bool {
	if r == nil {
		return nil
	}
	return r.Required
}

func (r *RecipientUpdateDocumentRecipientFieldMetaCheckbox) GetReadOnly() *bool {
	if r == nil {
		return nil
	}
	return r.ReadOnly
}

func (r *RecipientUpdateDocumentRecipientFieldMetaCheckbox) GetType() RecipientUpdateDocumentRecipientFieldMetaTypeCheckbox {
	if r == nil {
		return RecipientUpdateDocumentRecipientFieldMetaTypeCheckbox("")
	}
	return r.Type
}

func (r *RecipientUpdateDocumentRecipientFieldMetaCheckbox) GetValues() []RecipientUpdateDocumentRecipientValue2 {
	if r == nil {
		return nil
	}
	return r.Values
}

func (r *RecipientUpdateDocumentRecipientFieldMetaCheckbox) GetValidationRule() *string {
	if r == nil {
		return nil
	}
	return r.ValidationRule
}

func (r *RecipientUpdateDocumentRecipientFieldMetaCheckbox) GetValidationLength() *float64 {
	if r == nil {
		return nil
	}
	return r.ValidationLength
}

func (r *RecipientUpdateDocumentRecipientFieldMetaCheckbox) GetDirection() *RecipientUpdateDocumentRecipientDirection {
	if r == nil {
		return nil
	}
	return r.Direction
}

type RecipientUpdateDocumentRecipientFieldMetaTypeRadio string

const (
	RecipientUpdateDocumentRecipientFieldMetaTypeRadioRadio RecipientUpdateDocumentRecipientFieldMetaTypeRadio = "radio"
)

func (e RecipientUpdateDocumentRecipientFieldMetaTypeRadio) ToPointer() *RecipientUpdateDocumentRecipientFieldMetaTypeRadio {
	return &e
}
func (e *RecipientUpdateDocumentRecipientFieldMetaTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = RecipientUpdateDocumentRecipientFieldMetaTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientFieldMetaTypeRadio: %v", v)
	}
}

type RecipientUpdateDocumentRecipientValue1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (r RecipientUpdateDocumentRecipientValue1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RecipientUpdateDocumentRecipientValue1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (r *RecipientUpdateDocumentRecipientValue1) GetID() float64 {
	if r == nil {
		return 0.0
	}
	return r.ID
}

func (r *RecipientUpdateDocumentRecipientValue1) GetChecked() bool {
	if r == nil {
		return false
	}
	return r.Checked
}

func (r *RecipientUpdateDocumentRecipientValue1) GetValue() string {
	if r == nil {
		return ""
	}
	return r.Value
}

type RecipientUpdateDocumentRecipientFieldMetaRadio struct {
	Label       *string                                            `json:"label,omitempty"`
	Placeholder *string                                            `json:"placeholder,omitempty"`
	Required    *bool                                              `json:"required,omitempty"`
	ReadOnly    *bool                                              `json:"readOnly,omitempty"`
	Type        RecipientUpdateDocumentRecipientFieldMetaTypeRadio `json:"type"`
	Values      []RecipientUpdateDocumentRecipientValue1           `json:"values,omitempty"`
}

func (r RecipientUpdateDocumentRecipientFieldMetaRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RecipientUpdateDocumentRecipientFieldMetaRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (r *RecipientUpdateDocumentRecipientFieldMetaRadio) GetLabel() *string {
	if r == nil {
		return nil
	}
	return r.Label
}

func (r *RecipientUpdateDocumentRecipientFieldMetaRadio) GetPlaceholder() *string {
	if r == nil {
		return nil
	}
	return r.Placeholder
}

func (r *RecipientUpdateDocumentRecipientFieldMetaRadio) GetRequired() *bool {
	if r == nil {
		return nil
	}
	return r.Required
}

func (r *RecipientUpdateDocumentRecipientFieldMetaRadio) GetReadOnly() *bool {
	if r == nil {
		return nil
	}
	return r.ReadOnly
}

func (r *RecipientUpdateDocumentRecipientFieldMetaRadio) GetType() RecipientUpdateDocumentRecipientFieldMetaTypeRadio {
	if r == nil {
		return RecipientUpdateDocumentRecipientFieldMetaTypeRadio("")
	}
	return r.Type
}

func (r *RecipientUpdateDocumentRecipientFieldMetaRadio) GetValues() []RecipientUpdateDocumentRecipientValue1 {
	if r == nil {
		return nil
	}
	return r.Values
}

type RecipientUpdateDocumentRecipientFieldMetaTypeNumber string

const (
	RecipientUpdateDocumentRecipientFieldMetaTypeNumberNumber RecipientUpdateDocumentRecipientFieldMetaTypeNumber = "number"
)

func (e RecipientUpdateDocumentRecipientFieldMetaTypeNumber) ToPointer() *RecipientUpdateDocumentRecipientFieldMetaTypeNumber {
	return &e
}
func (e *RecipientUpdateDocumentRecipientFieldMetaTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = RecipientUpdateDocumentRecipientFieldMetaTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientFieldMetaTypeNumber: %v", v)
	}
}

type RecipientUpdateDocumentRecipientTextAlign6 string

const (
	RecipientUpdateDocumentRecipientTextAlign6Left   RecipientUpdateDocumentRecipientTextAlign6 = "left"
	RecipientUpdateDocumentRecipientTextAlign6Center RecipientUpdateDocumentRecipientTextAlign6 = "center"
	RecipientUpdateDocumentRecipientTextAlign6Right  RecipientUpdateDocumentRecipientTextAlign6 = "right"
)

func (e RecipientUpdateDocumentRecipientTextAlign6) ToPointer() *RecipientUpdateDocumentRecipientTextAlign6 {
	return &e
}
func (e *RecipientUpdateDocumentRecipientTextAlign6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = RecipientUpdateDocumentRecipientTextAlign6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientTextAlign6: %v", v)
	}
}

type RecipientUpdateDocumentRecipientFieldMetaNumber struct {
	Label        *string                                             `json:"label,omitempty"`
	Placeholder  *string                                             `json:"placeholder,omitempty"`
	Required     *bool                                               `json:"required,omitempty"`
	ReadOnly     *bool                                               `json:"readOnly,omitempty"`
	Type         RecipientUpdateDocumentRecipientFieldMetaTypeNumber `json:"type"`
	NumberFormat *string                                             `json:"numberFormat,omitempty"`
	Value        *string                                             `json:"value,omitempty"`
	MinValue     *float64                                            `json:"minValue,omitempty"`
	MaxValue     *float64                                            `json:"maxValue,omitempty"`
	FontSize     *float64                                            `json:"fontSize,omitempty"`
	TextAlign    *RecipientUpdateDocumentRecipientTextAlign6         `json:"textAlign,omitempty"`
}

func (r RecipientUpdateDocumentRecipientFieldMetaNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RecipientUpdateDocumentRecipientFieldMetaNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (r *RecipientUpdateDocumentRecipientFieldMetaNumber) GetLabel() *string {
	if r == nil {
		return nil
	}
	return r.Label
}

func (r *RecipientUpdateDocumentRecipientFieldMetaNumber) GetPlaceholder() *string {
	if r == nil {
		return nil
	}
	return r.Placeholder
}

func (r *RecipientUpdateDocumentRecipientFieldMetaNumber) GetRequired() *bool {
	if r == nil {
		return nil
	}
	return r.Required
}

func (r *RecipientUpdateDocumentRecipientFieldMetaNumber) GetReadOnly() *bool {
	if r == nil {
		return nil
	}
	return r.ReadOnly
}

func (r *RecipientUpdateDocumentRecipientFieldMetaNumber) GetType() RecipientUpdateDocumentRecipientFieldMetaTypeNumber {
	if r == nil {
		return RecipientUpdateDocumentRecipientFieldMetaTypeNumber("")
	}
	return r.Type
}

func (r *RecipientUpdateDocumentRecipientFieldMetaNumber) GetNumberFormat() *string {
	if r == nil {
		return nil
	}
	return r.NumberFormat
}

func (r *RecipientUpdateDocumentRecipientFieldMetaNumber) GetValue() *string {
	if r == nil {
		return nil
	}
	return r.Value
}

func (r *RecipientUpdateDocumentRecipientFieldMetaNumber) GetMinValue() *float64 {
	if r == nil {
		return nil
	}
	return r.MinValue
}

func (r *RecipientUpdateDocumentRecipientFieldMetaNumber) GetMaxValue() *float64 {
	if r == nil {
		return nil
	}
	return r.MaxValue
}

func (r *RecipientUpdateDocumentRecipientFieldMetaNumber) GetFontSize() *float64 {
	if r == nil {
		return nil
	}
	return r.FontSize
}

func (r *RecipientUpdateDocumentRecipientFieldMetaNumber) GetTextAlign() *RecipientUpdateDocumentRecipientTextAlign6 {
	if r == nil {
		return nil
	}
	return r.TextAlign
}

type RecipientUpdateDocumentRecipientFieldMetaTypeText string

const (
	RecipientUpdateDocumentRecipientFieldMetaTypeTextText RecipientUpdateDocumentRecipientFieldMetaTypeText = "text"
)

func (e RecipientUpdateDocumentRecipientFieldMetaTypeText) ToPointer() *RecipientUpdateDocumentRecipientFieldMetaTypeText {
	return &e
}
func (e *RecipientUpdateDocumentRecipientFieldMetaTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = RecipientUpdateDocumentRecipientFieldMetaTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientFieldMetaTypeText: %v", v)
	}
}

type RecipientUpdateDocumentRecipientTextAlign5 string

const (
	RecipientUpdateDocumentRecipientTextAlign5Left   RecipientUpdateDocumentRecipientTextAlign5 = "left"
	RecipientUpdateDocumentRecipientTextAlign5Center RecipientUpdateDocumentRecipientTextAlign5 = "center"
	RecipientUpdateDocumentRecipientTextAlign5Right  RecipientUpdateDocumentRecipientTextAlign5 = "right"
)

func (e RecipientUpdateDocumentRecipientTextAlign5) ToPointer() *RecipientUpdateDocumentRecipientTextAlign5 {
	return &e
}
func (e *RecipientUpdateDocumentRecipientTextAlign5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = RecipientUpdateDocumentRecipientTextAlign5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientTextAlign5: %v", v)
	}
}

type RecipientUpdateDocumentRecipientFieldMetaText struct {
	Label          *string                                           `json:"label,omitempty"`
	Placeholder    *string                                           `json:"placeholder,omitempty"`
	Required       *bool                                             `json:"required,omitempty"`
	ReadOnly       *bool                                             `json:"readOnly,omitempty"`
	Type           RecipientUpdateDocumentRecipientFieldMetaTypeText `json:"type"`
	Text           *string                                           `json:"text,omitempty"`
	CharacterLimit *float64                                          `json:"characterLimit,omitempty"`
	FontSize       *float64                                          `json:"fontSize,omitempty"`
	TextAlign      *RecipientUpdateDocumentRecipientTextAlign5       `json:"textAlign,omitempty"`
}

func (r RecipientUpdateDocumentRecipientFieldMetaText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RecipientUpdateDocumentRecipientFieldMetaText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (r *RecipientUpdateDocumentRecipientFieldMetaText) GetLabel() *string {
	if r == nil {
		return nil
	}
	return r.Label
}

func (r *RecipientUpdateDocumentRecipientFieldMetaText) GetPlaceholder() *string {
	if r == nil {
		return nil
	}
	return r.Placeholder
}

func (r *RecipientUpdateDocumentRecipientFieldMetaText) GetRequired() *bool {
	if r == nil {
		return nil
	}
	return r.Required
}

func (r *RecipientUpdateDocumentRecipientFieldMetaText) GetReadOnly() *bool {
	if r == nil {
		return nil
	}
	return r.ReadOnly
}

func (r *RecipientUpdateDocumentRecipientFieldMetaText) GetType() RecipientUpdateDocumentRecipientFieldMetaTypeText {
	if r == nil {
		return RecipientUpdateDocumentRecipientFieldMetaTypeText("")
	}
	return r.Type
}

func (r *RecipientUpdateDocumentRecipientFieldMetaText) GetText() *string {
	if r == nil {
		return nil
	}
	return r.Text
}

func (r *RecipientUpdateDocumentRecipientFieldMetaText) GetCharacterLimit() *float64 {
	if r == nil {
		return nil
	}
	return r.CharacterLimit
}

func (r *RecipientUpdateDocumentRecipientFieldMetaText) GetFontSize() *float64 {
	if r == nil {
		return nil
	}
	return r.FontSize
}

func (r *RecipientUpdateDocumentRecipientFieldMetaText) GetTextAlign() *RecipientUpdateDocumentRecipientTextAlign5 {
	if r == nil {
		return nil
	}
	return r.TextAlign
}

type RecipientUpdateDocumentRecipientFieldMetaTypeDate string

const (
	RecipientUpdateDocumentRecipientFieldMetaTypeDateDate RecipientUpdateDocumentRecipientFieldMetaTypeDate = "date"
)

func (e RecipientUpdateDocumentRecipientFieldMetaTypeDate) ToPointer() *RecipientUpdateDocumentRecipientFieldMetaTypeDate {
	return &e
}
func (e *RecipientUpdateDocumentRecipientFieldMetaTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = RecipientUpdateDocumentRecipientFieldMetaTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientFieldMetaTypeDate: %v", v)
	}
}

type RecipientUpdateDocumentRecipientTextAlign4 string

const (
	RecipientUpdateDocumentRecipientTextAlign4Left   RecipientUpdateDocumentRecipientTextAlign4 = "left"
	RecipientUpdateDocumentRecipientTextAlign4Center RecipientUpdateDocumentRecipientTextAlign4 = "center"
	RecipientUpdateDocumentRecipientTextAlign4Right  RecipientUpdateDocumentRecipientTextAlign4 = "right"
)

func (e RecipientUpdateDocumentRecipientTextAlign4) ToPointer() *RecipientUpdateDocumentRecipientTextAlign4 {
	return &e
}
func (e *RecipientUpdateDocumentRecipientTextAlign4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = RecipientUpdateDocumentRecipientTextAlign4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientTextAlign4: %v", v)
	}
}

type RecipientUpdateDocumentRecipientFieldMetaDate struct {
	Label       *string                                           `json:"label,omitempty"`
	Placeholder *string                                           `json:"placeholder,omitempty"`
	Required    *bool                                             `json:"required,omitempty"`
	ReadOnly    *bool                                             `json:"readOnly,omitempty"`
	Type        RecipientUpdateDocumentRecipientFieldMetaTypeDate `json:"type"`
	FontSize    *float64                                          `json:"fontSize,omitempty"`
	TextAlign   *RecipientUpdateDocumentRecipientTextAlign4       `json:"textAlign,omitempty"`
}

func (r RecipientUpdateDocumentRecipientFieldMetaDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RecipientUpdateDocumentRecipientFieldMetaDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (r *RecipientUpdateDocumentRecipientFieldMetaDate) GetLabel() *string {
	if r == nil {
		return nil
	}
	return r.Label
}

func (r *RecipientUpdateDocumentRecipientFieldMetaDate) GetPlaceholder() *string {
	if r == nil {
		return nil
	}
	return r.Placeholder
}

func (r *RecipientUpdateDocumentRecipientFieldMetaDate) GetRequired() *bool {
	if r == nil {
		return nil
	}
	return r.Required
}

func (r *RecipientUpdateDocumentRecipientFieldMetaDate) GetReadOnly() *bool {
	if r == nil {
		return nil
	}
	return r.ReadOnly
}

func (r *RecipientUpdateDocumentRecipientFieldMetaDate) GetType() RecipientUpdateDocumentRecipientFieldMetaTypeDate {
	if r == nil {
		return RecipientUpdateDocumentRecipientFieldMetaTypeDate("")
	}
	return r.Type
}

func (r *RecipientUpdateDocumentRecipientFieldMetaDate) GetFontSize() *float64 {
	if r == nil {
		return nil
	}
	return r.FontSize
}

func (r *RecipientUpdateDocumentRecipientFieldMetaDate) GetTextAlign() *RecipientUpdateDocumentRecipientTextAlign4 {
	if r == nil {
		return nil
	}
	return r.TextAlign
}

type RecipientUpdateDocumentRecipientFieldMetaTypeEmail string

const (
	RecipientUpdateDocumentRecipientFieldMetaTypeEmailEmail RecipientUpdateDocumentRecipientFieldMetaTypeEmail = "email"
)

func (e RecipientUpdateDocumentRecipientFieldMetaTypeEmail) ToPointer() *RecipientUpdateDocumentRecipientFieldMetaTypeEmail {
	return &e
}
func (e *RecipientUpdateDocumentRecipientFieldMetaTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = RecipientUpdateDocumentRecipientFieldMetaTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientFieldMetaTypeEmail: %v", v)
	}
}

type RecipientUpdateDocumentRecipientTextAlign3 string

const (
	RecipientUpdateDocumentRecipientTextAlign3Left   RecipientUpdateDocumentRecipientTextAlign3 = "left"
	RecipientUpdateDocumentRecipientTextAlign3Center RecipientUpdateDocumentRecipientTextAlign3 = "center"
	RecipientUpdateDocumentRecipientTextAlign3Right  RecipientUpdateDocumentRecipientTextAlign3 = "right"
)

func (e RecipientUpdateDocumentRecipientTextAlign3) ToPointer() *RecipientUpdateDocumentRecipientTextAlign3 {
	return &e
}
func (e *RecipientUpdateDocumentRecipientTextAlign3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = RecipientUpdateDocumentRecipientTextAlign3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientTextAlign3: %v", v)
	}
}

type RecipientUpdateDocumentRecipientFieldMetaEmail struct {
	Label       *string                                            `json:"label,omitempty"`
	Placeholder *string                                            `json:"placeholder,omitempty"`
	Required    *bool                                              `json:"required,omitempty"`
	ReadOnly    *bool                                              `json:"readOnly,omitempty"`
	Type        RecipientUpdateDocumentRecipientFieldMetaTypeEmail `json:"type"`
	FontSize    *float64                                           `json:"fontSize,omitempty"`
	TextAlign   *RecipientUpdateDocumentRecipientTextAlign3        `json:"textAlign,omitempty"`
}

func (r RecipientUpdateDocumentRecipientFieldMetaEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RecipientUpdateDocumentRecipientFieldMetaEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (r *RecipientUpdateDocumentRecipientFieldMetaEmail) GetLabel() *string {
	if r == nil {
		return nil
	}
	return r.Label
}

func (r *RecipientUpdateDocumentRecipientFieldMetaEmail) GetPlaceholder() *string {
	if r == nil {
		return nil
	}
	return r.Placeholder
}

func (r *RecipientUpdateDocumentRecipientFieldMetaEmail) GetRequired() *bool {
	if r == nil {
		return nil
	}
	return r.Required
}

func (r *RecipientUpdateDocumentRecipientFieldMetaEmail) GetReadOnly() *bool {
	if r == nil {
		return nil
	}
	return r.ReadOnly
}

func (r *RecipientUpdateDocumentRecipientFieldMetaEmail) GetType() RecipientUpdateDocumentRecipientFieldMetaTypeEmail {
	if r == nil {
		return RecipientUpdateDocumentRecipientFieldMetaTypeEmail("")
	}
	return r.Type
}

func (r *RecipientUpdateDocumentRecipientFieldMetaEmail) GetFontSize() *float64 {
	if r == nil {
		return nil
	}
	return r.FontSize
}

func (r *RecipientUpdateDocumentRecipientFieldMetaEmail) GetTextAlign() *RecipientUpdateDocumentRecipientTextAlign3 {
	if r == nil {
		return nil
	}
	return r.TextAlign
}

type RecipientUpdateDocumentRecipientFieldMetaTypeName string

const (
	RecipientUpdateDocumentRecipientFieldMetaTypeNameName RecipientUpdateDocumentRecipientFieldMetaTypeName = "name"
)

func (e RecipientUpdateDocumentRecipientFieldMetaTypeName) ToPointer() *RecipientUpdateDocumentRecipientFieldMetaTypeName {
	return &e
}
func (e *RecipientUpdateDocumentRecipientFieldMetaTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = RecipientUpdateDocumentRecipientFieldMetaTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientFieldMetaTypeName: %v", v)
	}
}

type RecipientUpdateDocumentRecipientTextAlign2 string

const (
	RecipientUpdateDocumentRecipientTextAlign2Left   RecipientUpdateDocumentRecipientTextAlign2 = "left"
	RecipientUpdateDocumentRecipientTextAlign2Center RecipientUpdateDocumentRecipientTextAlign2 = "center"
	RecipientUpdateDocumentRecipientTextAlign2Right  RecipientUpdateDocumentRecipientTextAlign2 = "right"
)

func (e RecipientUpdateDocumentRecipientTextAlign2) ToPointer() *RecipientUpdateDocumentRecipientTextAlign2 {
	return &e
}
func (e *RecipientUpdateDocumentRecipientTextAlign2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = RecipientUpdateDocumentRecipientTextAlign2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientTextAlign2: %v", v)
	}
}

type RecipientUpdateDocumentRecipientFieldMetaName struct {
	Label       *string                                           `json:"label,omitempty"`
	Placeholder *string                                           `json:"placeholder,omitempty"`
	Required    *bool                                             `json:"required,omitempty"`
	ReadOnly    *bool                                             `json:"readOnly,omitempty"`
	Type        RecipientUpdateDocumentRecipientFieldMetaTypeName `json:"type"`
	FontSize    *float64                                          `json:"fontSize,omitempty"`
	TextAlign   *RecipientUpdateDocumentRecipientTextAlign2       `json:"textAlign,omitempty"`
}

func (r RecipientUpdateDocumentRecipientFieldMetaName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RecipientUpdateDocumentRecipientFieldMetaName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (r *RecipientUpdateDocumentRecipientFieldMetaName) GetLabel() *string {
	if r == nil {
		return nil
	}
	return r.Label
}

func (r *RecipientUpdateDocumentRecipientFieldMetaName) GetPlaceholder() *string {
	if r == nil {
		return nil
	}
	return r.Placeholder
}

func (r *RecipientUpdateDocumentRecipientFieldMetaName) GetRequired() *bool {
	if r == nil {
		return nil
	}
	return r.Required
}

func (r *RecipientUpdateDocumentRecipientFieldMetaName) GetReadOnly() *bool {
	if r == nil {
		return nil
	}
	return r.ReadOnly
}

func (r *RecipientUpdateDocumentRecipientFieldMetaName) GetType() RecipientUpdateDocumentRecipientFieldMetaTypeName {
	if r == nil {
		return RecipientUpdateDocumentRecipientFieldMetaTypeName("")
	}
	return r.Type
}

func (r *RecipientUpdateDocumentRecipientFieldMetaName) GetFontSize() *float64 {
	if r == nil {
		return nil
	}
	return r.FontSize
}

func (r *RecipientUpdateDocumentRecipientFieldMetaName) GetTextAlign() *RecipientUpdateDocumentRecipientTextAlign2 {
	if r == nil {
		return nil
	}
	return r.TextAlign
}

type RecipientUpdateDocumentRecipientFieldMetaTypeInitials string

const (
	RecipientUpdateDocumentRecipientFieldMetaTypeInitialsInitials RecipientUpdateDocumentRecipientFieldMetaTypeInitials = "initials"
)

func (e RecipientUpdateDocumentRecipientFieldMetaTypeInitials) ToPointer() *RecipientUpdateDocumentRecipientFieldMetaTypeInitials {
	return &e
}
func (e *RecipientUpdateDocumentRecipientFieldMetaTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = RecipientUpdateDocumentRecipientFieldMetaTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientFieldMetaTypeInitials: %v", v)
	}
}

type RecipientUpdateDocumentRecipientTextAlign1 string

const (
	RecipientUpdateDocumentRecipientTextAlign1Left   RecipientUpdateDocumentRecipientTextAlign1 = "left"
	RecipientUpdateDocumentRecipientTextAlign1Center RecipientUpdateDocumentRecipientTextAlign1 = "center"
	RecipientUpdateDocumentRecipientTextAlign1Right  RecipientUpdateDocumentRecipientTextAlign1 = "right"
)

func (e RecipientUpdateDocumentRecipientTextAlign1) ToPointer() *RecipientUpdateDocumentRecipientTextAlign1 {
	return &e
}
func (e *RecipientUpdateDocumentRecipientTextAlign1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = RecipientUpdateDocumentRecipientTextAlign1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecipientUpdateDocumentRecipientTextAlign1: %v", v)
	}
}

type RecipientUpdateDocumentRecipientFieldMetaInitials struct {
	Label       *string                                               `json:"label,omitempty"`
	Placeholder *string                                               `json:"placeholder,omitempty"`
	Required    *bool                                                 `json:"required,omitempty"`
	ReadOnly    *bool                                                 `json:"readOnly,omitempty"`
	Type        RecipientUpdateDocumentRecipientFieldMetaTypeInitials `json:"type"`
	FontSize    *float64                                              `json:"fontSize,omitempty"`
	TextAlign   *RecipientUpdateDocumentRecipientTextAlign1           `json:"textAlign,omitempty"`
}

func (r RecipientUpdateDocumentRecipientFieldMetaInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RecipientUpdateDocumentRecipientFieldMetaInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (r *RecipientUpdateDocumentRecipientFieldMetaInitials) GetLabel() *string {
	if r == nil {
		return nil
	}
	return r.Label
}

func (r *RecipientUpdateDocumentRecipientFieldMetaInitials) GetPlaceholder() *string {
	if r == nil {
		return nil
	}
	return r.Placeholder
}

func (r *RecipientUpdateDocumentRecipientFieldMetaInitials) GetRequired() *bool {
	if r == nil {
		return nil
	}
	return r.Required
}

func (r *RecipientUpdateDocumentRecipientFieldMetaInitials) GetReadOnly() *bool {
	if r == nil {
		return nil
	}
	return r.ReadOnly
}

func (r *RecipientUpdateDocumentRecipientFieldMetaInitials) GetType() RecipientUpdateDocumentRecipientFieldMetaTypeInitials {
	if r == nil {
		return RecipientUpdateDocumentRecipientFieldMetaTypeInitials("")
	}
	return r.Type
}

func (r *RecipientUpdateDocumentRecipientFieldMetaInitials) GetFontSize() *float64 {
	if r == nil {
		return nil
	}
	return r.FontSize
}

func (r *RecipientUpdateDocumentRecipientFieldMetaInitials) GetTextAlign() *RecipientUpdateDocumentRecipientTextAlign1 {
	if r == nil {
		return nil
	}
	return r.TextAlign
}

type RecipientUpdateDocumentRecipientFieldMetaUnionType string

const (
	RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaInitials RecipientUpdateDocumentRecipientFieldMetaUnionType = "recipient_updateDocumentRecipient_fieldMeta_Initials"
	RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaName     RecipientUpdateDocumentRecipientFieldMetaUnionType = "recipient_updateDocumentRecipient_fieldMeta_Name"
	RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaEmail    RecipientUpdateDocumentRecipientFieldMetaUnionType = "recipient_updateDocumentRecipient_fieldMeta_Email"
	RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaDate     RecipientUpdateDocumentRecipientFieldMetaUnionType = "recipient_updateDocumentRecipient_fieldMeta_Date"
	RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaText     RecipientUpdateDocumentRecipientFieldMetaUnionType = "recipient_updateDocumentRecipient_fieldMeta_Text"
	RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaNumber   RecipientUpdateDocumentRecipientFieldMetaUnionType = "recipient_updateDocumentRecipient_fieldMeta_Number"
	RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaRadio    RecipientUpdateDocumentRecipientFieldMetaUnionType = "recipient_updateDocumentRecipient_fieldMeta_Radio"
	RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaCheckbox RecipientUpdateDocumentRecipientFieldMetaUnionType = "recipient_updateDocumentRecipient_fieldMeta_Checkbox"
	RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaDropdown RecipientUpdateDocumentRecipientFieldMetaUnionType = "recipient_updateDocumentRecipient_fieldMeta_Dropdown"
)

type RecipientUpdateDocumentRecipientFieldMetaUnion struct {
	RecipientUpdateDocumentRecipientFieldMetaInitials *RecipientUpdateDocumentRecipientFieldMetaInitials `queryParam:"inline,name=fieldMeta"`
	RecipientUpdateDocumentRecipientFieldMetaName     *RecipientUpdateDocumentRecipientFieldMetaName     `queryParam:"inline,name=fieldMeta"`
	RecipientUpdateDocumentRecipientFieldMetaEmail    *RecipientUpdateDocumentRecipientFieldMetaEmail    `queryParam:"inline,name=fieldMeta"`
	RecipientUpdateDocumentRecipientFieldMetaDate     *RecipientUpdateDocumentRecipientFieldMetaDate     `queryParam:"inline,name=fieldMeta"`
	RecipientUpdateDocumentRecipientFieldMetaText     *RecipientUpdateDocumentRecipientFieldMetaText     `queryParam:"inline,name=fieldMeta"`
	RecipientUpdateDocumentRecipientFieldMetaNumber   *RecipientUpdateDocumentRecipientFieldMetaNumber   `queryParam:"inline,name=fieldMeta"`
	RecipientUpdateDocumentRecipientFieldMetaRadio    *RecipientUpdateDocumentRecipientFieldMetaRadio    `queryParam:"inline,name=fieldMeta"`
	RecipientUpdateDocumentRecipientFieldMetaCheckbox *RecipientUpdateDocumentRecipientFieldMetaCheckbox `queryParam:"inline,name=fieldMeta"`
	RecipientUpdateDocumentRecipientFieldMetaDropdown *RecipientUpdateDocumentRecipientFieldMetaDropdown `queryParam:"inline,name=fieldMeta"`

	Type RecipientUpdateDocumentRecipientFieldMetaUnionType
}

func CreateRecipientUpdateDocumentRecipientFieldMetaUnionRecipientUpdateDocumentRecipientFieldMetaInitials(recipientUpdateDocumentRecipientFieldMetaInitials RecipientUpdateDocumentRecipientFieldMetaInitials) RecipientUpdateDocumentRecipientFieldMetaUnion {
	typ := RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaInitials

	return RecipientUpdateDocumentRecipientFieldMetaUnion{
		RecipientUpdateDocumentRecipientFieldMetaInitials: &recipientUpdateDocumentRecipientFieldMetaInitials,
		Type: typ,
	}
}

func CreateRecipientUpdateDocumentRecipientFieldMetaUnionRecipientUpdateDocumentRecipientFieldMetaName(recipientUpdateDocumentRecipientFieldMetaName RecipientUpdateDocumentRecipientFieldMetaName) RecipientUpdateDocumentRecipientFieldMetaUnion {
	typ := RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaName

	return RecipientUpdateDocumentRecipientFieldMetaUnion{
		RecipientUpdateDocumentRecipientFieldMetaName: &recipientUpdateDocumentRecipientFieldMetaName,
		Type: typ,
	}
}

func CreateRecipientUpdateDocumentRecipientFieldMetaUnionRecipientUpdateDocumentRecipientFieldMetaEmail(recipientUpdateDocumentRecipientFieldMetaEmail RecipientUpdateDocumentRecipientFieldMetaEmail) RecipientUpdateDocumentRecipientFieldMetaUnion {
	typ := RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaEmail

	return RecipientUpdateDocumentRecipientFieldMetaUnion{
		RecipientUpdateDocumentRecipientFieldMetaEmail: &recipientUpdateDocumentRecipientFieldMetaEmail,
		Type: typ,
	}
}

func CreateRecipientUpdateDocumentRecipientFieldMetaUnionRecipientUpdateDocumentRecipientFieldMetaDate(recipientUpdateDocumentRecipientFieldMetaDate RecipientUpdateDocumentRecipientFieldMetaDate) RecipientUpdateDocumentRecipientFieldMetaUnion {
	typ := RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaDate

	return RecipientUpdateDocumentRecipientFieldMetaUnion{
		RecipientUpdateDocumentRecipientFieldMetaDate: &recipientUpdateDocumentRecipientFieldMetaDate,
		Type: typ,
	}
}

func CreateRecipientUpdateDocumentRecipientFieldMetaUnionRecipientUpdateDocumentRecipientFieldMetaText(recipientUpdateDocumentRecipientFieldMetaText RecipientUpdateDocumentRecipientFieldMetaText) RecipientUpdateDocumentRecipientFieldMetaUnion {
	typ := RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaText

	return RecipientUpdateDocumentRecipientFieldMetaUnion{
		RecipientUpdateDocumentRecipientFieldMetaText: &recipientUpdateDocumentRecipientFieldMetaText,
		Type: typ,
	}
}

func CreateRecipientUpdateDocumentRecipientFieldMetaUnionRecipientUpdateDocumentRecipientFieldMetaNumber(recipientUpdateDocumentRecipientFieldMetaNumber RecipientUpdateDocumentRecipientFieldMetaNumber) RecipientUpdateDocumentRecipientFieldMetaUnion {
	typ := RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaNumber

	return RecipientUpdateDocumentRecipientFieldMetaUnion{
		RecipientUpdateDocumentRecipientFieldMetaNumber: &recipientUpdateDocumentRecipientFieldMetaNumber,
		Type: typ,
	}
}

func CreateRecipientUpdateDocumentRecipientFieldMetaUnionRecipientUpdateDocumentRecipientFieldMetaRadio(recipientUpdateDocumentRecipientFieldMetaRadio RecipientUpdateDocumentRecipientFieldMetaRadio) RecipientUpdateDocumentRecipientFieldMetaUnion {
	typ := RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaRadio

	return RecipientUpdateDocumentRecipientFieldMetaUnion{
		RecipientUpdateDocumentRecipientFieldMetaRadio: &recipientUpdateDocumentRecipientFieldMetaRadio,
		Type: typ,
	}
}

func CreateRecipientUpdateDocumentRecipientFieldMetaUnionRecipientUpdateDocumentRecipientFieldMetaCheckbox(recipientUpdateDocumentRecipientFieldMetaCheckbox RecipientUpdateDocumentRecipientFieldMetaCheckbox) RecipientUpdateDocumentRecipientFieldMetaUnion {
	typ := RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaCheckbox

	return RecipientUpdateDocumentRecipientFieldMetaUnion{
		RecipientUpdateDocumentRecipientFieldMetaCheckbox: &recipientUpdateDocumentRecipientFieldMetaCheckbox,
		Type: typ,
	}
}

func CreateRecipientUpdateDocumentRecipientFieldMetaUnionRecipientUpdateDocumentRecipientFieldMetaDropdown(recipientUpdateDocumentRecipientFieldMetaDropdown RecipientUpdateDocumentRecipientFieldMetaDropdown) RecipientUpdateDocumentRecipientFieldMetaUnion {
	typ := RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaDropdown

	return RecipientUpdateDocumentRecipientFieldMetaUnion{
		RecipientUpdateDocumentRecipientFieldMetaDropdown: &recipientUpdateDocumentRecipientFieldMetaDropdown,
		Type: typ,
	}
}

func (u *RecipientUpdateDocumentRecipientFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var recipientUpdateDocumentRecipientFieldMetaInitials RecipientUpdateDocumentRecipientFieldMetaInitials = RecipientUpdateDocumentRecipientFieldMetaInitials{}
	if err := utils.UnmarshalJSON(data, &recipientUpdateDocumentRecipientFieldMetaInitials, "", true, nil); err == nil {
		u.RecipientUpdateDocumentRecipientFieldMetaInitials = &recipientUpdateDocumentRecipientFieldMetaInitials
		u.Type = RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaInitials
		return nil
	}

	var recipientUpdateDocumentRecipientFieldMetaName RecipientUpdateDocumentRecipientFieldMetaName = RecipientUpdateDocumentRecipientFieldMetaName{}
	if err := utils.UnmarshalJSON(data, &recipientUpdateDocumentRecipientFieldMetaName, "", true, nil); err == nil {
		u.RecipientUpdateDocumentRecipientFieldMetaName = &recipientUpdateDocumentRecipientFieldMetaName
		u.Type = RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaName
		return nil
	}

	var recipientUpdateDocumentRecipientFieldMetaEmail RecipientUpdateDocumentRecipientFieldMetaEmail = RecipientUpdateDocumentRecipientFieldMetaEmail{}
	if err := utils.UnmarshalJSON(data, &recipientUpdateDocumentRecipientFieldMetaEmail, "", true, nil); err == nil {
		u.RecipientUpdateDocumentRecipientFieldMetaEmail = &recipientUpdateDocumentRecipientFieldMetaEmail
		u.Type = RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaEmail
		return nil
	}

	var recipientUpdateDocumentRecipientFieldMetaDate RecipientUpdateDocumentRecipientFieldMetaDate = RecipientUpdateDocumentRecipientFieldMetaDate{}
	if err := utils.UnmarshalJSON(data, &recipientUpdateDocumentRecipientFieldMetaDate, "", true, nil); err == nil {
		u.RecipientUpdateDocumentRecipientFieldMetaDate = &recipientUpdateDocumentRecipientFieldMetaDate
		u.Type = RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaDate
		return nil
	}

	var recipientUpdateDocumentRecipientFieldMetaText RecipientUpdateDocumentRecipientFieldMetaText = RecipientUpdateDocumentRecipientFieldMetaText{}
	if err := utils.UnmarshalJSON(data, &recipientUpdateDocumentRecipientFieldMetaText, "", true, nil); err == nil {
		u.RecipientUpdateDocumentRecipientFieldMetaText = &recipientUpdateDocumentRecipientFieldMetaText
		u.Type = RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaText
		return nil
	}

	var recipientUpdateDocumentRecipientFieldMetaNumber RecipientUpdateDocumentRecipientFieldMetaNumber = RecipientUpdateDocumentRecipientFieldMetaNumber{}
	if err := utils.UnmarshalJSON(data, &recipientUpdateDocumentRecipientFieldMetaNumber, "", true, nil); err == nil {
		u.RecipientUpdateDocumentRecipientFieldMetaNumber = &recipientUpdateDocumentRecipientFieldMetaNumber
		u.Type = RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaNumber
		return nil
	}

	var recipientUpdateDocumentRecipientFieldMetaRadio RecipientUpdateDocumentRecipientFieldMetaRadio = RecipientUpdateDocumentRecipientFieldMetaRadio{}
	if err := utils.UnmarshalJSON(data, &recipientUpdateDocumentRecipientFieldMetaRadio, "", true, nil); err == nil {
		u.RecipientUpdateDocumentRecipientFieldMetaRadio = &recipientUpdateDocumentRecipientFieldMetaRadio
		u.Type = RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaRadio
		return nil
	}

	var recipientUpdateDocumentRecipientFieldMetaCheckbox RecipientUpdateDocumentRecipientFieldMetaCheckbox = RecipientUpdateDocumentRecipientFieldMetaCheckbox{}
	if err := utils.UnmarshalJSON(data, &recipientUpdateDocumentRecipientFieldMetaCheckbox, "", true, nil); err == nil {
		u.RecipientUpdateDocumentRecipientFieldMetaCheckbox = &recipientUpdateDocumentRecipientFieldMetaCheckbox
		u.Type = RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaCheckbox
		return nil
	}

	var recipientUpdateDocumentRecipientFieldMetaDropdown RecipientUpdateDocumentRecipientFieldMetaDropdown = RecipientUpdateDocumentRecipientFieldMetaDropdown{}
	if err := utils.UnmarshalJSON(data, &recipientUpdateDocumentRecipientFieldMetaDropdown, "", true, nil); err == nil {
		u.RecipientUpdateDocumentRecipientFieldMetaDropdown = &recipientUpdateDocumentRecipientFieldMetaDropdown
		u.Type = RecipientUpdateDocumentRecipientFieldMetaUnionTypeRecipientUpdateDocumentRecipientFieldMetaDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RecipientUpdateDocumentRecipientFieldMetaUnion", string(data))
}

func (u RecipientUpdateDocumentRecipientFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.RecipientUpdateDocumentRecipientFieldMetaInitials != nil {
		return utils.MarshalJSON(u.RecipientUpdateDocumentRecipientFieldMetaInitials, "", true)
	}

	if u.RecipientUpdateDocumentRecipientFieldMetaName != nil {
		return utils.MarshalJSON(u.RecipientUpdateDocumentRecipientFieldMetaName, "", true)
	}

	if u.RecipientUpdateDocumentRecipientFieldMetaEmail != nil {
		return utils.MarshalJSON(u.RecipientUpdateDocumentRecipientFieldMetaEmail, "", true)
	}

	if u.RecipientUpdateDocumentRecipientFieldMetaDate != nil {
		return utils.MarshalJSON(u.RecipientUpdateDocumentRecipientFieldMetaDate, "", true)
	}

	if u.RecipientUpdateDocumentRecipientFieldMetaText != nil {
		return utils.MarshalJSON(u.RecipientUpdateDocumentRecipientFieldMetaText, "", true)
	}

	if u.RecipientUpdateDocumentRecipientFieldMetaNumber != nil {
		return utils.MarshalJSON(u.RecipientUpdateDocumentRecipientFieldMetaNumber, "", true)
	}

	if u.RecipientUpdateDocumentRecipientFieldMetaRadio != nil {
		return utils.MarshalJSON(u.RecipientUpdateDocumentRecipientFieldMetaRadio, "", true)
	}

	if u.RecipientUpdateDocumentRecipientFieldMetaCheckbox != nil {
		return utils.MarshalJSON(u.RecipientUpdateDocumentRecipientFieldMetaCheckbox, "", true)
	}

	if u.RecipientUpdateDocumentRecipientFieldMetaDropdown != nil {
		return utils.MarshalJSON(u.RecipientUpdateDocumentRecipientFieldMetaDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type RecipientUpdateDocumentRecipientFieldMetaUnion: all fields are null")
}

type RecipientUpdateDocumentRecipientField struct {
	EnvelopeID     string                               `json:"envelopeId"`
	EnvelopeItemID string                               `json:"envelopeItemId"`
	Type           RecipientUpdateDocumentRecipientType `json:"type"`
	ID             float64                              `json:"id"`
	SecondaryID    string                               `json:"secondaryId"`
	RecipientID    float64                              `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                                         `json:"page"`
	PositionX  any                                             `json:"positionX,omitempty"`
	PositionY  any                                             `json:"positionY,omitempty"`
	Width      any                                             `json:"width,omitempty"`
	Height     any                                             `json:"height,omitempty"`
	CustomText string                                          `json:"customText"`
	Inserted   bool                                            `json:"inserted"`
	FieldMeta  *RecipientUpdateDocumentRecipientFieldMetaUnion `json:"fieldMeta"`
	DocumentID *float64                                        `json:"documentId,omitempty"`
	TemplateID *float64                                        `json:"templateId,omitempty"`
}

func (r *RecipientUpdateDocumentRecipientField) GetEnvelopeID() string {
	if r == nil {
		return ""
	}
	return r.EnvelopeID
}

func (r *RecipientUpdateDocumentRecipientField) GetEnvelopeItemID() string {
	if r == nil {
		return ""
	}
	return r.EnvelopeItemID
}

func (r *RecipientUpdateDocumentRecipientField) GetType() RecipientUpdateDocumentRecipientType {
	if r == nil {
		return RecipientUpdateDocumentRecipientType("")
	}
	return r.Type
}

func (r *RecipientUpdateDocumentRecipientField) GetID() float64 {
	if r == nil {
		return 0.0
	}
	return r.ID
}

func (r *RecipientUpdateDocumentRecipientField) GetSecondaryID() string {
	if r == nil {
		return ""
	}
	return r.SecondaryID
}

func (r *RecipientUpdateDocumentRecipientField) GetRecipientID() float64 {
	if r == nil {
		return 0.0
	}
	return r.RecipientID
}

func (r *RecipientUpdateDocumentRecipientField) GetPage() float64 {
	if r == nil {
		return 0.0
	}
	return r.Page
}

func (r *RecipientUpdateDocumentRecipientField) GetPositionX() any {
	if r == nil {
		return nil
	}
	return r.PositionX
}

func (r *RecipientUpdateDocumentRecipientField) GetPositionY() any {
	if r == nil {
		return nil
	}
	return r.PositionY
}

func (r *RecipientUpdateDocumentRecipientField) GetWidth() any {
	if r == nil {
		return nil
	}
	return r.Width
}

func (r *RecipientUpdateDocumentRecipientField) GetHeight() any {
	if r == nil {
		return nil
	}
	return r.Height
}

func (r *RecipientUpdateDocumentRecipientField) GetCustomText() string {
	if r == nil {
		return ""
	}
	return r.CustomText
}

func (r *RecipientUpdateDocumentRecipientField) GetInserted() bool {
	if r == nil {
		return false
	}
	return r.Inserted
}

func (r *RecipientUpdateDocumentRecipientField) GetFieldMeta() *RecipientUpdateDocumentRecipientFieldMetaUnion {
	if r == nil {
		return nil
	}
	return r.FieldMeta
}

func (r *RecipientUpdateDocumentRecipientField) GetDocumentID() *float64 {
	if r == nil {
		return nil
	}
	return r.DocumentID
}

func (r *RecipientUpdateDocumentRecipientField) GetTemplateID() *float64 {
	if r == nil {
		return nil
	}
	return r.TemplateID
}

// RecipientUpdateDocumentRecipientResponseBody - Successful response
type RecipientUpdateDocumentRecipientResponseBody struct {
	EnvelopeID        string                                        `json:"envelopeId"`
	Role              RecipientUpdateDocumentRecipientRoleResponse  `json:"role"`
	ReadStatus        RecipientUpdateDocumentRecipientReadStatus    `json:"readStatus"`
	SigningStatus     RecipientUpdateDocumentRecipientSigningStatus `json:"signingStatus"`
	SendStatus        RecipientUpdateDocumentRecipientSendStatus    `json:"sendStatus"`
	ID                float64                                       `json:"id"`
	Email             string                                        `json:"email"`
	Name              string                                        `json:"name"`
	Token             string                                        `json:"token"`
	DocumentDeletedAt *string                                       `json:"documentDeletedAt"`
	Expired           *string                                       `json:"expired"`
	SignedAt          *string                                       `json:"signedAt"`
	AuthOptions       *RecipientUpdateDocumentRecipientAuthOptions  `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64                                `json:"signingOrder"`
	RejectionReason *string                                 `json:"rejectionReason"`
	Fields          []RecipientUpdateDocumentRecipientField `json:"fields"`
	DocumentID      *float64                                `json:"documentId,omitempty"`
	TemplateID      *float64                                `json:"templateId,omitempty"`
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetEnvelopeID() string {
	if r == nil {
		return ""
	}
	return r.EnvelopeID
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetRole() RecipientUpdateDocumentRecipientRoleResponse {
	if r == nil {
		return RecipientUpdateDocumentRecipientRoleResponse("")
	}
	return r.Role
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetReadStatus() RecipientUpdateDocumentRecipientReadStatus {
	if r == nil {
		return RecipientUpdateDocumentRecipientReadStatus("")
	}
	return r.ReadStatus
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetSigningStatus() RecipientUpdateDocumentRecipientSigningStatus {
	if r == nil {
		return RecipientUpdateDocumentRecipientSigningStatus("")
	}
	return r.SigningStatus
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetSendStatus() RecipientUpdateDocumentRecipientSendStatus {
	if r == nil {
		return RecipientUpdateDocumentRecipientSendStatus("")
	}
	return r.SendStatus
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetID() float64 {
	if r == nil {
		return 0.0
	}
	return r.ID
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetEmail() string {
	if r == nil {
		return ""
	}
	return r.Email
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetName() string {
	if r == nil {
		return ""
	}
	return r.Name
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetToken() string {
	if r == nil {
		return ""
	}
	return r.Token
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetDocumentDeletedAt() *string {
	if r == nil {
		return nil
	}
	return r.DocumentDeletedAt
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetExpired() *string {
	if r == nil {
		return nil
	}
	return r.Expired
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetSignedAt() *string {
	if r == nil {
		return nil
	}
	return r.SignedAt
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetAuthOptions() *RecipientUpdateDocumentRecipientAuthOptions {
	if r == nil {
		return nil
	}
	return r.AuthOptions
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetSigningOrder() *float64 {
	if r == nil {
		return nil
	}
	return r.SigningOrder
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetRejectionReason() *string {
	if r == nil {
		return nil
	}
	return r.RejectionReason
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetFields() []RecipientUpdateDocumentRecipientField {
	if r == nil {
		return []RecipientUpdateDocumentRecipientField{}
	}
	return r.Fields
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetDocumentID() *float64 {
	if r == nil {
		return nil
	}
	return r.DocumentID
}

func (r *RecipientUpdateDocumentRecipientResponseBody) GetTemplateID() *float64 {
	if r == nil {
		return nil
	}
	return r.TemplateID
}

type RecipientUpdateDocumentRecipientResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *RecipientUpdateDocumentRecipientResponseBody
}

func (r *RecipientUpdateDocumentRecipientResponse) GetHTTPMeta() components.HTTPMetadata {
	if r == nil {
		return components.HTTPMetadata{}
	}
	return r.HTTPMeta
}

func (r *RecipientUpdateDocumentRecipientResponse) GetObject() *RecipientUpdateDocumentRecipientResponseBody {
	if r == nil {
		return nil
	}
	return r.Object
}
