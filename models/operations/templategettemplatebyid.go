// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type TemplateGetTemplateByIDRequest struct {
	TemplateID float64 `pathParam:"style=simple,explode=false,name=templateId"`
}

func (o *TemplateGetTemplateByIDRequest) GetTemplateID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TemplateID
}

type TemplateGetTemplateByIDType string

const (
	TemplateGetTemplateByIDTypePublic  TemplateGetTemplateByIDType = "PUBLIC"
	TemplateGetTemplateByIDTypePrivate TemplateGetTemplateByIDType = "PRIVATE"
)

func (e TemplateGetTemplateByIDType) ToPointer() *TemplateGetTemplateByIDType {
	return &e
}
func (e *TemplateGetTemplateByIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PUBLIC":
		fallthrough
	case "PRIVATE":
		*e = TemplateGetTemplateByIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDType: %v", v)
	}
}

type TemplateGetTemplateByIDVisibility string

const (
	TemplateGetTemplateByIDVisibilityEveryone        TemplateGetTemplateByIDVisibility = "EVERYONE"
	TemplateGetTemplateByIDVisibilityManagerAndAbove TemplateGetTemplateByIDVisibility = "MANAGER_AND_ABOVE"
	TemplateGetTemplateByIDVisibilityAdmin           TemplateGetTemplateByIDVisibility = "ADMIN"
)

func (e TemplateGetTemplateByIDVisibility) ToPointer() *TemplateGetTemplateByIDVisibility {
	return &e
}
func (e *TemplateGetTemplateByIDVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = TemplateGetTemplateByIDVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDVisibility: %v", v)
	}
}

// TemplateGetTemplateByIDGlobalAccessAuth - The type of authentication required for the recipient to access the document.
type TemplateGetTemplateByIDGlobalAccessAuth string

const (
	TemplateGetTemplateByIDGlobalAccessAuthAccount TemplateGetTemplateByIDGlobalAccessAuth = "ACCOUNT"
)

func (e TemplateGetTemplateByIDGlobalAccessAuth) ToPointer() *TemplateGetTemplateByIDGlobalAccessAuth {
	return &e
}
func (e *TemplateGetTemplateByIDGlobalAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = TemplateGetTemplateByIDGlobalAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDGlobalAccessAuth: %v", v)
	}
}

// TemplateGetTemplateByIDGlobalActionAuth - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type TemplateGetTemplateByIDGlobalActionAuth string

const (
	TemplateGetTemplateByIDGlobalActionAuthAccount       TemplateGetTemplateByIDGlobalActionAuth = "ACCOUNT"
	TemplateGetTemplateByIDGlobalActionAuthPasskey       TemplateGetTemplateByIDGlobalActionAuth = "PASSKEY"
	TemplateGetTemplateByIDGlobalActionAuthTwoFactorAuth TemplateGetTemplateByIDGlobalActionAuth = "TWO_FACTOR_AUTH"
)

func (e TemplateGetTemplateByIDGlobalActionAuth) ToPointer() *TemplateGetTemplateByIDGlobalActionAuth {
	return &e
}
func (e *TemplateGetTemplateByIDGlobalActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = TemplateGetTemplateByIDGlobalActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDGlobalActionAuth: %v", v)
	}
}

type TemplateGetTemplateByIDAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	GlobalAccessAuth *TemplateGetTemplateByIDGlobalAccessAuth `json:"globalAccessAuth"`
	// The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
	GlobalActionAuth *TemplateGetTemplateByIDGlobalActionAuth `json:"globalActionAuth"`
}

func (o *TemplateGetTemplateByIDAuthOptions) GetGlobalAccessAuth() *TemplateGetTemplateByIDGlobalAccessAuth {
	if o == nil {
		return nil
	}
	return o.GlobalAccessAuth
}

func (o *TemplateGetTemplateByIDAuthOptions) GetGlobalActionAuth() *TemplateGetTemplateByIDGlobalActionAuth {
	if o == nil {
		return nil
	}
	return o.GlobalActionAuth
}

type TemplateGetTemplateByIDTemplatesType string

const (
	TemplateGetTemplateByIDTemplatesTypeS3Path  TemplateGetTemplateByIDTemplatesType = "S3_PATH"
	TemplateGetTemplateByIDTemplatesTypeBytes   TemplateGetTemplateByIDTemplatesType = "BYTES"
	TemplateGetTemplateByIDTemplatesTypeBytes64 TemplateGetTemplateByIDTemplatesType = "BYTES_64"
)

func (e TemplateGetTemplateByIDTemplatesType) ToPointer() *TemplateGetTemplateByIDTemplatesType {
	return &e
}
func (e *TemplateGetTemplateByIDTemplatesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3_PATH":
		fallthrough
	case "BYTES":
		fallthrough
	case "BYTES_64":
		*e = TemplateGetTemplateByIDTemplatesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDTemplatesType: %v", v)
	}
}

type TemplateDocumentData struct {
	Type        TemplateGetTemplateByIDTemplatesType `json:"type"`
	ID          string                               `json:"id"`
	Data        string                               `json:"data"`
	InitialData string                               `json:"initialData"`
}

func (o *TemplateDocumentData) GetType() TemplateGetTemplateByIDTemplatesType {
	if o == nil {
		return TemplateGetTemplateByIDTemplatesType("")
	}
	return o.Type
}

func (o *TemplateDocumentData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TemplateDocumentData) GetData() string {
	if o == nil {
		return ""
	}
	return o.Data
}

func (o *TemplateDocumentData) GetInitialData() string {
	if o == nil {
		return ""
	}
	return o.InitialData
}

type TemplateGetTemplateByIDSigningOrder string

const (
	TemplateGetTemplateByIDSigningOrderParallel   TemplateGetTemplateByIDSigningOrder = "PARALLEL"
	TemplateGetTemplateByIDSigningOrderSequential TemplateGetTemplateByIDSigningOrder = "SEQUENTIAL"
)

func (e TemplateGetTemplateByIDSigningOrder) ToPointer() *TemplateGetTemplateByIDSigningOrder {
	return &e
}
func (e *TemplateGetTemplateByIDSigningOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARALLEL":
		fallthrough
	case "SEQUENTIAL":
		*e = TemplateGetTemplateByIDSigningOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDSigningOrder: %v", v)
	}
}

type TemplateGetTemplateByIDDistributionMethod string

const (
	TemplateGetTemplateByIDDistributionMethodEmail TemplateGetTemplateByIDDistributionMethod = "EMAIL"
	TemplateGetTemplateByIDDistributionMethodNone  TemplateGetTemplateByIDDistributionMethod = "NONE"
)

func (e TemplateGetTemplateByIDDistributionMethod) ToPointer() *TemplateGetTemplateByIDDistributionMethod {
	return &e
}
func (e *TemplateGetTemplateByIDDistributionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = TemplateGetTemplateByIDDistributionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDDistributionMethod: %v", v)
	}
}

type TemplateGetTemplateByIDEmailSettings struct {
	// Whether to send an email to all recipients that the document is ready for them to sign.
	RecipientSigningRequest *bool `default:"true" json:"recipientSigningRequest"`
	// Whether to send an email to the recipient who was removed from a pending document.
	RecipientRemoved *bool `default:"true" json:"recipientRemoved"`
	// Whether to send an email to the document owner when a recipient has signed the document.
	RecipientSigned *bool `default:"true" json:"recipientSigned"`
	// Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
	DocumentPending *bool `default:"true" json:"documentPending"`
	// Whether to send an email to all recipients when the document is complete.
	DocumentCompleted *bool `default:"true" json:"documentCompleted"`
	// Whether to send an email to all recipients if a pending document has been deleted.
	DocumentDeleted *bool `default:"true" json:"documentDeleted"`
	// Whether to send an email to the document owner when the document is complete.
	OwnerDocumentCompleted *bool `default:"true" json:"ownerDocumentCompleted"`
}

func (t TemplateGetTemplateByIDEmailSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateGetTemplateByIDEmailSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TemplateGetTemplateByIDEmailSettings) GetRecipientSigningRequest() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigningRequest
}

func (o *TemplateGetTemplateByIDEmailSettings) GetRecipientRemoved() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientRemoved
}

func (o *TemplateGetTemplateByIDEmailSettings) GetRecipientSigned() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigned
}

func (o *TemplateGetTemplateByIDEmailSettings) GetDocumentPending() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentPending
}

func (o *TemplateGetTemplateByIDEmailSettings) GetDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentCompleted
}

func (o *TemplateGetTemplateByIDEmailSettings) GetDocumentDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentDeleted
}

func (o *TemplateGetTemplateByIDEmailSettings) GetOwnerDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.OwnerDocumentCompleted
}

type TemplateMeta struct {
	ID                    string                                    `json:"id"`
	Subject               *string                                   `json:"subject"`
	Message               *string                                   `json:"message"`
	Timezone              *string                                   `json:"timezone"`
	DateFormat            *string                                   `json:"dateFormat"`
	SigningOrder          *TemplateGetTemplateByIDSigningOrder      `json:"signingOrder"`
	TypedSignatureEnabled bool                                      `json:"typedSignatureEnabled"`
	DistributionMethod    TemplateGetTemplateByIDDistributionMethod `json:"distributionMethod"`
	TemplateID            int64                                     `json:"templateId"`
	RedirectURL           *string                                   `json:"redirectUrl"`
	Language              string                                    `json:"language"`
	EmailSettings         *TemplateGetTemplateByIDEmailSettings     `json:"emailSettings"`
}

func (o *TemplateMeta) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TemplateMeta) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *TemplateMeta) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *TemplateMeta) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *TemplateMeta) GetDateFormat() *string {
	if o == nil {
		return nil
	}
	return o.DateFormat
}

func (o *TemplateMeta) GetSigningOrder() *TemplateGetTemplateByIDSigningOrder {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *TemplateMeta) GetTypedSignatureEnabled() bool {
	if o == nil {
		return false
	}
	return o.TypedSignatureEnabled
}

func (o *TemplateMeta) GetDistributionMethod() TemplateGetTemplateByIDDistributionMethod {
	if o == nil {
		return TemplateGetTemplateByIDDistributionMethod("")
	}
	return o.DistributionMethod
}

func (o *TemplateMeta) GetTemplateID() int64 {
	if o == nil {
		return 0
	}
	return o.TemplateID
}

func (o *TemplateMeta) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *TemplateMeta) GetLanguage() string {
	if o == nil {
		return ""
	}
	return o.Language
}

func (o *TemplateMeta) GetEmailSettings() *TemplateGetTemplateByIDEmailSettings {
	if o == nil {
		return nil
	}
	return o.EmailSettings
}

type DirectLink struct {
	ID                        string `json:"id"`
	TemplateID                int64  `json:"templateId"`
	Token                     string `json:"token"`
	CreatedAt                 string `json:"createdAt"`
	Enabled                   bool   `json:"enabled"`
	DirectTemplateRecipientID int64  `json:"directTemplateRecipientId"`
}

func (o *DirectLink) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DirectLink) GetTemplateID() int64 {
	if o == nil {
		return 0
	}
	return o.TemplateID
}

func (o *DirectLink) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *DirectLink) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *DirectLink) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *DirectLink) GetDirectTemplateRecipientID() int64 {
	if o == nil {
		return 0
	}
	return o.DirectTemplateRecipientID
}

type User struct {
	ID    int64   `json:"id"`
	Name  *string `json:"name"`
	Email string  `json:"email"`
}

func (o *User) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *User) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *User) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

type TemplateGetTemplateByIDRole string

const (
	TemplateGetTemplateByIDRoleCc       TemplateGetTemplateByIDRole = "CC"
	TemplateGetTemplateByIDRoleSigner   TemplateGetTemplateByIDRole = "SIGNER"
	TemplateGetTemplateByIDRoleViewer   TemplateGetTemplateByIDRole = "VIEWER"
	TemplateGetTemplateByIDRoleApprover TemplateGetTemplateByIDRole = "APPROVER"
)

func (e TemplateGetTemplateByIDRole) ToPointer() *TemplateGetTemplateByIDRole {
	return &e
}
func (e *TemplateGetTemplateByIDRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		*e = TemplateGetTemplateByIDRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDRole: %v", v)
	}
}

type TemplateGetTemplateByIDReadStatus string

const (
	TemplateGetTemplateByIDReadStatusNotOpened TemplateGetTemplateByIDReadStatus = "NOT_OPENED"
	TemplateGetTemplateByIDReadStatusOpened    TemplateGetTemplateByIDReadStatus = "OPENED"
)

func (e TemplateGetTemplateByIDReadStatus) ToPointer() *TemplateGetTemplateByIDReadStatus {
	return &e
}
func (e *TemplateGetTemplateByIDReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = TemplateGetTemplateByIDReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDReadStatus: %v", v)
	}
}

type TemplateGetTemplateByIDSigningStatus string

const (
	TemplateGetTemplateByIDSigningStatusNotSigned TemplateGetTemplateByIDSigningStatus = "NOT_SIGNED"
	TemplateGetTemplateByIDSigningStatusSigned    TemplateGetTemplateByIDSigningStatus = "SIGNED"
	TemplateGetTemplateByIDSigningStatusRejected  TemplateGetTemplateByIDSigningStatus = "REJECTED"
)

func (e TemplateGetTemplateByIDSigningStatus) ToPointer() *TemplateGetTemplateByIDSigningStatus {
	return &e
}
func (e *TemplateGetTemplateByIDSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = TemplateGetTemplateByIDSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDSigningStatus: %v", v)
	}
}

type TemplateGetTemplateByIDSendStatus string

const (
	TemplateGetTemplateByIDSendStatusNotSent TemplateGetTemplateByIDSendStatus = "NOT_SENT"
	TemplateGetTemplateByIDSendStatusSent    TemplateGetTemplateByIDSendStatus = "SENT"
)

func (e TemplateGetTemplateByIDSendStatus) ToPointer() *TemplateGetTemplateByIDSendStatus {
	return &e
}
func (e *TemplateGetTemplateByIDSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = TemplateGetTemplateByIDSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDSendStatus: %v", v)
	}
}

// TemplateGetTemplateByIDAccessAuth - The type of authentication required for the recipient to access the document.
type TemplateGetTemplateByIDAccessAuth string

const (
	TemplateGetTemplateByIDAccessAuthAccount TemplateGetTemplateByIDAccessAuth = "ACCOUNT"
)

func (e TemplateGetTemplateByIDAccessAuth) ToPointer() *TemplateGetTemplateByIDAccessAuth {
	return &e
}
func (e *TemplateGetTemplateByIDAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = TemplateGetTemplateByIDAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDAccessAuth: %v", v)
	}
}

// TemplateGetTemplateByIDActionAuth - The type of authentication required for the recipient to sign the document.
type TemplateGetTemplateByIDActionAuth string

const (
	TemplateGetTemplateByIDActionAuthAccount       TemplateGetTemplateByIDActionAuth = "ACCOUNT"
	TemplateGetTemplateByIDActionAuthPasskey       TemplateGetTemplateByIDActionAuth = "PASSKEY"
	TemplateGetTemplateByIDActionAuthTwoFactorAuth TemplateGetTemplateByIDActionAuth = "TWO_FACTOR_AUTH"
	TemplateGetTemplateByIDActionAuthExplicitNone  TemplateGetTemplateByIDActionAuth = "EXPLICIT_NONE"
)

func (e TemplateGetTemplateByIDActionAuth) ToPointer() *TemplateGetTemplateByIDActionAuth {
	return &e
}
func (e *TemplateGetTemplateByIDActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "EXPLICIT_NONE":
		*e = TemplateGetTemplateByIDActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDActionAuth: %v", v)
	}
}

type TemplateGetTemplateByIDTemplatesAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	AccessAuth *TemplateGetTemplateByIDAccessAuth `json:"accessAuth"`
	// The type of authentication required for the recipient to sign the document.
	ActionAuth *TemplateGetTemplateByIDActionAuth `json:"actionAuth"`
}

func (o *TemplateGetTemplateByIDTemplatesAuthOptions) GetAccessAuth() *TemplateGetTemplateByIDAccessAuth {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *TemplateGetTemplateByIDTemplatesAuthOptions) GetActionAuth() *TemplateGetTemplateByIDActionAuth {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

type TemplateGetTemplateByIDRecipients struct {
	Role              TemplateGetTemplateByIDRole                  `json:"role"`
	ReadStatus        TemplateGetTemplateByIDReadStatus            `json:"readStatus"`
	SigningStatus     TemplateGetTemplateByIDSigningStatus         `json:"signingStatus"`
	SendStatus        TemplateGetTemplateByIDSendStatus            `json:"sendStatus"`
	ID                int64                                        `json:"id"`
	DocumentID        *int64                                       `json:"documentId"`
	TemplateID        *int64                                       `json:"templateId"`
	Email             string                                       `json:"email"`
	Name              string                                       `json:"name"`
	Token             string                                       `json:"token"`
	DocumentDeletedAt *string                                      `json:"documentDeletedAt"`
	Expired           *string                                      `json:"expired"`
	SignedAt          *string                                      `json:"signedAt"`
	AuthOptions       *TemplateGetTemplateByIDTemplatesAuthOptions `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
}

func (o *TemplateGetTemplateByIDRecipients) GetRole() TemplateGetTemplateByIDRole {
	if o == nil {
		return TemplateGetTemplateByIDRole("")
	}
	return o.Role
}

func (o *TemplateGetTemplateByIDRecipients) GetReadStatus() TemplateGetTemplateByIDReadStatus {
	if o == nil {
		return TemplateGetTemplateByIDReadStatus("")
	}
	return o.ReadStatus
}

func (o *TemplateGetTemplateByIDRecipients) GetSigningStatus() TemplateGetTemplateByIDSigningStatus {
	if o == nil {
		return TemplateGetTemplateByIDSigningStatus("")
	}
	return o.SigningStatus
}

func (o *TemplateGetTemplateByIDRecipients) GetSendStatus() TemplateGetTemplateByIDSendStatus {
	if o == nil {
		return TemplateGetTemplateByIDSendStatus("")
	}
	return o.SendStatus
}

func (o *TemplateGetTemplateByIDRecipients) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *TemplateGetTemplateByIDRecipients) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *TemplateGetTemplateByIDRecipients) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *TemplateGetTemplateByIDRecipients) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *TemplateGetTemplateByIDRecipients) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TemplateGetTemplateByIDRecipients) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *TemplateGetTemplateByIDRecipients) GetDocumentDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DocumentDeletedAt
}

func (o *TemplateGetTemplateByIDRecipients) GetExpired() *string {
	if o == nil {
		return nil
	}
	return o.Expired
}

func (o *TemplateGetTemplateByIDRecipients) GetSignedAt() *string {
	if o == nil {
		return nil
	}
	return o.SignedAt
}

func (o *TemplateGetTemplateByIDRecipients) GetAuthOptions() *TemplateGetTemplateByIDTemplatesAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *TemplateGetTemplateByIDRecipients) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *TemplateGetTemplateByIDRecipients) GetRejectionReason() *string {
	if o == nil {
		return nil
	}
	return o.RejectionReason
}

type TemplateGetTemplateByIDTemplatesResponseType string

const (
	TemplateGetTemplateByIDTemplatesResponseTypeSignature     TemplateGetTemplateByIDTemplatesResponseType = "SIGNATURE"
	TemplateGetTemplateByIDTemplatesResponseTypeFreeSignature TemplateGetTemplateByIDTemplatesResponseType = "FREE_SIGNATURE"
	TemplateGetTemplateByIDTemplatesResponseTypeInitials      TemplateGetTemplateByIDTemplatesResponseType = "INITIALS"
	TemplateGetTemplateByIDTemplatesResponseTypeName          TemplateGetTemplateByIDTemplatesResponseType = "NAME"
	TemplateGetTemplateByIDTemplatesResponseTypeEmail         TemplateGetTemplateByIDTemplatesResponseType = "EMAIL"
	TemplateGetTemplateByIDTemplatesResponseTypeDate          TemplateGetTemplateByIDTemplatesResponseType = "DATE"
	TemplateGetTemplateByIDTemplatesResponseTypeText          TemplateGetTemplateByIDTemplatesResponseType = "TEXT"
	TemplateGetTemplateByIDTemplatesResponseTypeNumber        TemplateGetTemplateByIDTemplatesResponseType = "NUMBER"
	TemplateGetTemplateByIDTemplatesResponseTypeRadio         TemplateGetTemplateByIDTemplatesResponseType = "RADIO"
	TemplateGetTemplateByIDTemplatesResponseTypeCheckbox      TemplateGetTemplateByIDTemplatesResponseType = "CHECKBOX"
	TemplateGetTemplateByIDTemplatesResponseTypeDropdown      TemplateGetTemplateByIDTemplatesResponseType = "DROPDOWN"
)

func (e TemplateGetTemplateByIDTemplatesResponseType) ToPointer() *TemplateGetTemplateByIDTemplatesResponseType {
	return &e
}
func (e *TemplateGetTemplateByIDTemplatesResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = TemplateGetTemplateByIDTemplatesResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDTemplatesResponseType: %v", v)
	}
}

type TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type string

const (
	TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9TypeDropdown TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type = "dropdown"
)

func (e TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type) ToPointer() *TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type {
	return &e
}
func (e *TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type: %v", v)
	}
}

type TemplateGetTemplateByIDFieldMetaTemplatesResponseValues struct {
	Value string `json:"value"`
}

func (o *TemplateGetTemplateByIDFieldMetaTemplatesResponseValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateGetTemplateByIDFieldMeta9 struct {
	Label        *string                                                                                    `json:"label,omitempty"`
	Placeholder  *string                                                                                    `json:"placeholder,omitempty"`
	Required     *bool                                                                                      `json:"required,omitempty"`
	ReadOnly     *bool                                                                                      `json:"readOnly,omitempty"`
	Type         TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type `json:"type"`
	Values       []TemplateGetTemplateByIDFieldMetaTemplatesResponseValues                                  `json:"values,omitempty"`
	DefaultValue *string                                                                                    `json:"defaultValue,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMeta9) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMeta9) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMeta9) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMeta9) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMeta9) GetType() TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type {
	if o == nil {
		return TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMeta9) GetValues() []TemplateGetTemplateByIDFieldMetaTemplatesResponseValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *TemplateGetTemplateByIDFieldMeta9) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type string

const (
	TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8TypeCheckbox TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type = "checkbox"
)

func (e TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type) ToPointer() *TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type {
	return &e
}
func (e *TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type: %v", v)
	}
}

type TemplateGetTemplateByIDFieldMetaTemplatesValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *TemplateGetTemplateByIDFieldMetaTemplatesValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateGetTemplateByIDFieldMetaTemplatesValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *TemplateGetTemplateByIDFieldMetaTemplatesValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateGetTemplateByIDFieldMeta8 struct {
	Label            *string                                                                                    `json:"label,omitempty"`
	Placeholder      *string                                                                                    `json:"placeholder,omitempty"`
	Required         *bool                                                                                      `json:"required,omitempty"`
	ReadOnly         *bool                                                                                      `json:"readOnly,omitempty"`
	Type             TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type `json:"type"`
	Values           []TemplateGetTemplateByIDFieldMetaTemplatesValues                                          `json:"values,omitempty"`
	ValidationRule   *string                                                                                    `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                                   `json:"validationLength,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMeta8) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMeta8) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMeta8) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMeta8) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMeta8) GetType() TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type {
	if o == nil {
		return TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMeta8) GetValues() []TemplateGetTemplateByIDFieldMetaTemplatesValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *TemplateGetTemplateByIDFieldMeta8) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *TemplateGetTemplateByIDFieldMeta8) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType string

const (
	TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsTypeRadio TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType = "radio"
)

func (e TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType) ToPointer() *TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType {
	return &e
}
func (e *TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType: %v", v)
	}
}

type TemplateGetTemplateByIDFieldMetaValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *TemplateGetTemplateByIDFieldMetaValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateGetTemplateByIDFieldMetaValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *TemplateGetTemplateByIDFieldMetaValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateGetTemplateByIDFieldMeta7 struct {
	Label       *string                                                                                   `json:"label,omitempty"`
	Placeholder *string                                                                                   `json:"placeholder,omitempty"`
	Required    *bool                                                                                     `json:"required,omitempty"`
	ReadOnly    *bool                                                                                     `json:"readOnly,omitempty"`
	Type        TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType `json:"type"`
	Values      []TemplateGetTemplateByIDFieldMetaValues                                                  `json:"values,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMeta7) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMeta7) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMeta7) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMeta7) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMeta7) GetType() TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType {
	if o == nil {
		return TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMeta7) GetValues() []TemplateGetTemplateByIDFieldMetaValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType string

const (
	TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyTypeNumber TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType = "number"
)

func (e TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType) ToPointer() *TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type TemplateGetTemplateByIDFieldMeta6 struct {
	Label        *string                                                                             `json:"label,omitempty"`
	Placeholder  *string                                                                             `json:"placeholder,omitempty"`
	Required     *bool                                                                               `json:"required,omitempty"`
	ReadOnly     *bool                                                                               `json:"readOnly,omitempty"`
	Type         TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType `json:"type"`
	NumberFormat *string                                                                             `json:"numberFormat,omitempty"`
	Value        *string                                                                             `json:"value,omitempty"`
	MinValue     *float64                                                                            `json:"minValue,omitempty"`
	MaxValue     *float64                                                                            `json:"maxValue,omitempty"`
	FontSize     *float64                                                                            `json:"fontSize,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMeta6) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMeta6) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMeta6) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMeta6) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMeta6) GetType() TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMeta6) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *TemplateGetTemplateByIDFieldMeta6) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *TemplateGetTemplateByIDFieldMeta6) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *TemplateGetTemplateByIDFieldMeta6) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *TemplateGetTemplateByIDFieldMeta6) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONType string

const (
	TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONTypeText TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONType = "text"
)

func (e TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONType) ToPointer() *TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONType {
	return &e
}
func (e *TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONType: %v", v)
	}
}

type TemplateGetTemplateByIDFieldMeta5 struct {
	Label          *string                                                                 `json:"label,omitempty"`
	Placeholder    *string                                                                 `json:"placeholder,omitempty"`
	Required       *bool                                                                   `json:"required,omitempty"`
	ReadOnly       *bool                                                                   `json:"readOnly,omitempty"`
	Type           TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONType `json:"type"`
	Text           *string                                                                 `json:"text,omitempty"`
	CharacterLimit *float64                                                                `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                `json:"fontSize,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMeta5) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMeta5) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMeta5) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMeta5) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMeta5) GetType() TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONType {
	if o == nil {
		return TemplateGetTemplateByIDFieldMetaTemplatesResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMeta5) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *TemplateGetTemplateByIDFieldMeta5) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *TemplateGetTemplateByIDFieldMeta5) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateGetTemplateByIDFieldMetaTemplatesResponse200Type string

const (
	TemplateGetTemplateByIDFieldMetaTemplatesResponse200TypeDate TemplateGetTemplateByIDFieldMetaTemplatesResponse200Type = "date"
)

func (e TemplateGetTemplateByIDFieldMetaTemplatesResponse200Type) ToPointer() *TemplateGetTemplateByIDFieldMetaTemplatesResponse200Type {
	return &e
}
func (e *TemplateGetTemplateByIDFieldMetaTemplatesResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = TemplateGetTemplateByIDFieldMetaTemplatesResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDFieldMetaTemplatesResponse200Type: %v", v)
	}
}

type TemplateGetTemplateByIDFieldMeta4 struct {
	Label       *string                                                  `json:"label,omitempty"`
	Placeholder *string                                                  `json:"placeholder,omitempty"`
	Required    *bool                                                    `json:"required,omitempty"`
	ReadOnly    *bool                                                    `json:"readOnly,omitempty"`
	Type        TemplateGetTemplateByIDFieldMetaTemplatesResponse200Type `json:"type"`
	FontSize    *float64                                                 `json:"fontSize,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMeta4) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMeta4) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMeta4) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMeta4) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMeta4) GetType() TemplateGetTemplateByIDFieldMetaTemplatesResponse200Type {
	if o == nil {
		return TemplateGetTemplateByIDFieldMetaTemplatesResponse200Type("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMeta4) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateGetTemplateByIDFieldMetaTemplatesResponseType string

const (
	TemplateGetTemplateByIDFieldMetaTemplatesResponseTypeEmail TemplateGetTemplateByIDFieldMetaTemplatesResponseType = "email"
)

func (e TemplateGetTemplateByIDFieldMetaTemplatesResponseType) ToPointer() *TemplateGetTemplateByIDFieldMetaTemplatesResponseType {
	return &e
}
func (e *TemplateGetTemplateByIDFieldMetaTemplatesResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = TemplateGetTemplateByIDFieldMetaTemplatesResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDFieldMetaTemplatesResponseType: %v", v)
	}
}

type TemplateGetTemplateByIDFieldMeta3 struct {
	Label       *string                                               `json:"label,omitempty"`
	Placeholder *string                                               `json:"placeholder,omitempty"`
	Required    *bool                                                 `json:"required,omitempty"`
	ReadOnly    *bool                                                 `json:"readOnly,omitempty"`
	Type        TemplateGetTemplateByIDFieldMetaTemplatesResponseType `json:"type"`
	FontSize    *float64                                              `json:"fontSize,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMeta3) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMeta3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMeta3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMeta3) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMeta3) GetType() TemplateGetTemplateByIDFieldMetaTemplatesResponseType {
	if o == nil {
		return TemplateGetTemplateByIDFieldMetaTemplatesResponseType("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMeta3) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateGetTemplateByIDFieldMetaTemplatesType string

const (
	TemplateGetTemplateByIDFieldMetaTemplatesTypeName TemplateGetTemplateByIDFieldMetaTemplatesType = "name"
)

func (e TemplateGetTemplateByIDFieldMetaTemplatesType) ToPointer() *TemplateGetTemplateByIDFieldMetaTemplatesType {
	return &e
}
func (e *TemplateGetTemplateByIDFieldMetaTemplatesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = TemplateGetTemplateByIDFieldMetaTemplatesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDFieldMetaTemplatesType: %v", v)
	}
}

type TemplateGetTemplateByIDFieldMeta2 struct {
	Label       *string                                       `json:"label,omitempty"`
	Placeholder *string                                       `json:"placeholder,omitempty"`
	Required    *bool                                         `json:"required,omitempty"`
	ReadOnly    *bool                                         `json:"readOnly,omitempty"`
	Type        TemplateGetTemplateByIDFieldMetaTemplatesType `json:"type"`
	FontSize    *float64                                      `json:"fontSize,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMeta2) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMeta2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMeta2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMeta2) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMeta2) GetType() TemplateGetTemplateByIDFieldMetaTemplatesType {
	if o == nil {
		return TemplateGetTemplateByIDFieldMetaTemplatesType("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMeta2) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateGetTemplateByIDFieldMetaType string

const (
	TemplateGetTemplateByIDFieldMetaTypeInitials TemplateGetTemplateByIDFieldMetaType = "initials"
)

func (e TemplateGetTemplateByIDFieldMetaType) ToPointer() *TemplateGetTemplateByIDFieldMetaType {
	return &e
}
func (e *TemplateGetTemplateByIDFieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = TemplateGetTemplateByIDFieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDFieldMetaType: %v", v)
	}
}

type TemplateGetTemplateByIDFieldMeta1 struct {
	Label       *string                              `json:"label,omitempty"`
	Placeholder *string                              `json:"placeholder,omitempty"`
	Required    *bool                                `json:"required,omitempty"`
	ReadOnly    *bool                                `json:"readOnly,omitempty"`
	Type        TemplateGetTemplateByIDFieldMetaType `json:"type"`
	FontSize    *float64                             `json:"fontSize,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMeta1) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMeta1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMeta1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMeta1) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMeta1) GetType() TemplateGetTemplateByIDFieldMetaType {
	if o == nil {
		return TemplateGetTemplateByIDFieldMetaType("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMeta1) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateGetTemplateByIDFieldMetaUnionType string

const (
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta1 TemplateGetTemplateByIDFieldMetaUnionType = "template-getTemplateById_fieldMeta_1"
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta2 TemplateGetTemplateByIDFieldMetaUnionType = "template-getTemplateById_fieldMeta_2"
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta3 TemplateGetTemplateByIDFieldMetaUnionType = "template-getTemplateById_fieldMeta_3"
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta4 TemplateGetTemplateByIDFieldMetaUnionType = "template-getTemplateById_fieldMeta_4"
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta5 TemplateGetTemplateByIDFieldMetaUnionType = "template-getTemplateById_fieldMeta_5"
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta6 TemplateGetTemplateByIDFieldMetaUnionType = "template-getTemplateById_fieldMeta_6"
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta7 TemplateGetTemplateByIDFieldMetaUnionType = "template-getTemplateById_fieldMeta_7"
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta8 TemplateGetTemplateByIDFieldMetaUnionType = "template-getTemplateById_fieldMeta_8"
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta9 TemplateGetTemplateByIDFieldMetaUnionType = "template-getTemplateById_fieldMeta_9"
)

type TemplateGetTemplateByIDFieldMeta struct {
	TemplateGetTemplateByIDFieldMeta1 *TemplateGetTemplateByIDFieldMeta1 `queryParam:"inline"`
	TemplateGetTemplateByIDFieldMeta2 *TemplateGetTemplateByIDFieldMeta2 `queryParam:"inline"`
	TemplateGetTemplateByIDFieldMeta3 *TemplateGetTemplateByIDFieldMeta3 `queryParam:"inline"`
	TemplateGetTemplateByIDFieldMeta4 *TemplateGetTemplateByIDFieldMeta4 `queryParam:"inline"`
	TemplateGetTemplateByIDFieldMeta5 *TemplateGetTemplateByIDFieldMeta5 `queryParam:"inline"`
	TemplateGetTemplateByIDFieldMeta6 *TemplateGetTemplateByIDFieldMeta6 `queryParam:"inline"`
	TemplateGetTemplateByIDFieldMeta7 *TemplateGetTemplateByIDFieldMeta7 `queryParam:"inline"`
	TemplateGetTemplateByIDFieldMeta8 *TemplateGetTemplateByIDFieldMeta8 `queryParam:"inline"`
	TemplateGetTemplateByIDFieldMeta9 *TemplateGetTemplateByIDFieldMeta9 `queryParam:"inline"`

	Type TemplateGetTemplateByIDFieldMetaUnionType
}

func CreateTemplateGetTemplateByIDFieldMetaTemplateGetTemplateByIDFieldMeta1(templateGetTemplateByIDFieldMeta1 TemplateGetTemplateByIDFieldMeta1) TemplateGetTemplateByIDFieldMeta {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta1

	return TemplateGetTemplateByIDFieldMeta{
		TemplateGetTemplateByIDFieldMeta1: &templateGetTemplateByIDFieldMeta1,
		Type:                              typ,
	}
}

func CreateTemplateGetTemplateByIDFieldMetaTemplateGetTemplateByIDFieldMeta2(templateGetTemplateByIDFieldMeta2 TemplateGetTemplateByIDFieldMeta2) TemplateGetTemplateByIDFieldMeta {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta2

	return TemplateGetTemplateByIDFieldMeta{
		TemplateGetTemplateByIDFieldMeta2: &templateGetTemplateByIDFieldMeta2,
		Type:                              typ,
	}
}

func CreateTemplateGetTemplateByIDFieldMetaTemplateGetTemplateByIDFieldMeta3(templateGetTemplateByIDFieldMeta3 TemplateGetTemplateByIDFieldMeta3) TemplateGetTemplateByIDFieldMeta {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta3

	return TemplateGetTemplateByIDFieldMeta{
		TemplateGetTemplateByIDFieldMeta3: &templateGetTemplateByIDFieldMeta3,
		Type:                              typ,
	}
}

func CreateTemplateGetTemplateByIDFieldMetaTemplateGetTemplateByIDFieldMeta4(templateGetTemplateByIDFieldMeta4 TemplateGetTemplateByIDFieldMeta4) TemplateGetTemplateByIDFieldMeta {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta4

	return TemplateGetTemplateByIDFieldMeta{
		TemplateGetTemplateByIDFieldMeta4: &templateGetTemplateByIDFieldMeta4,
		Type:                              typ,
	}
}

func CreateTemplateGetTemplateByIDFieldMetaTemplateGetTemplateByIDFieldMeta5(templateGetTemplateByIDFieldMeta5 TemplateGetTemplateByIDFieldMeta5) TemplateGetTemplateByIDFieldMeta {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta5

	return TemplateGetTemplateByIDFieldMeta{
		TemplateGetTemplateByIDFieldMeta5: &templateGetTemplateByIDFieldMeta5,
		Type:                              typ,
	}
}

func CreateTemplateGetTemplateByIDFieldMetaTemplateGetTemplateByIDFieldMeta6(templateGetTemplateByIDFieldMeta6 TemplateGetTemplateByIDFieldMeta6) TemplateGetTemplateByIDFieldMeta {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta6

	return TemplateGetTemplateByIDFieldMeta{
		TemplateGetTemplateByIDFieldMeta6: &templateGetTemplateByIDFieldMeta6,
		Type:                              typ,
	}
}

func CreateTemplateGetTemplateByIDFieldMetaTemplateGetTemplateByIDFieldMeta7(templateGetTemplateByIDFieldMeta7 TemplateGetTemplateByIDFieldMeta7) TemplateGetTemplateByIDFieldMeta {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta7

	return TemplateGetTemplateByIDFieldMeta{
		TemplateGetTemplateByIDFieldMeta7: &templateGetTemplateByIDFieldMeta7,
		Type:                              typ,
	}
}

func CreateTemplateGetTemplateByIDFieldMetaTemplateGetTemplateByIDFieldMeta8(templateGetTemplateByIDFieldMeta8 TemplateGetTemplateByIDFieldMeta8) TemplateGetTemplateByIDFieldMeta {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta8

	return TemplateGetTemplateByIDFieldMeta{
		TemplateGetTemplateByIDFieldMeta8: &templateGetTemplateByIDFieldMeta8,
		Type:                              typ,
	}
}

func CreateTemplateGetTemplateByIDFieldMetaTemplateGetTemplateByIDFieldMeta9(templateGetTemplateByIDFieldMeta9 TemplateGetTemplateByIDFieldMeta9) TemplateGetTemplateByIDFieldMeta {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta9

	return TemplateGetTemplateByIDFieldMeta{
		TemplateGetTemplateByIDFieldMeta9: &templateGetTemplateByIDFieldMeta9,
		Type:                              typ,
	}
}

func (u *TemplateGetTemplateByIDFieldMeta) UnmarshalJSON(data []byte) error {

	var templateGetTemplateByIDFieldMeta1 TemplateGetTemplateByIDFieldMeta1 = TemplateGetTemplateByIDFieldMeta1{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMeta1, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMeta1 = &templateGetTemplateByIDFieldMeta1
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta1
		return nil
	}

	var templateGetTemplateByIDFieldMeta2 TemplateGetTemplateByIDFieldMeta2 = TemplateGetTemplateByIDFieldMeta2{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMeta2, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMeta2 = &templateGetTemplateByIDFieldMeta2
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta2
		return nil
	}

	var templateGetTemplateByIDFieldMeta3 TemplateGetTemplateByIDFieldMeta3 = TemplateGetTemplateByIDFieldMeta3{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMeta3, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMeta3 = &templateGetTemplateByIDFieldMeta3
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta3
		return nil
	}

	var templateGetTemplateByIDFieldMeta4 TemplateGetTemplateByIDFieldMeta4 = TemplateGetTemplateByIDFieldMeta4{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMeta4, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMeta4 = &templateGetTemplateByIDFieldMeta4
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta4
		return nil
	}

	var templateGetTemplateByIDFieldMeta7 TemplateGetTemplateByIDFieldMeta7 = TemplateGetTemplateByIDFieldMeta7{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMeta7, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMeta7 = &templateGetTemplateByIDFieldMeta7
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta7
		return nil
	}

	var templateGetTemplateByIDFieldMeta9 TemplateGetTemplateByIDFieldMeta9 = TemplateGetTemplateByIDFieldMeta9{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMeta9, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMeta9 = &templateGetTemplateByIDFieldMeta9
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta9
		return nil
	}

	var templateGetTemplateByIDFieldMeta5 TemplateGetTemplateByIDFieldMeta5 = TemplateGetTemplateByIDFieldMeta5{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMeta5, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMeta5 = &templateGetTemplateByIDFieldMeta5
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta5
		return nil
	}

	var templateGetTemplateByIDFieldMeta8 TemplateGetTemplateByIDFieldMeta8 = TemplateGetTemplateByIDFieldMeta8{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMeta8, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMeta8 = &templateGetTemplateByIDFieldMeta8
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta8
		return nil
	}

	var templateGetTemplateByIDFieldMeta6 TemplateGetTemplateByIDFieldMeta6 = TemplateGetTemplateByIDFieldMeta6{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMeta6, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMeta6 = &templateGetTemplateByIDFieldMeta6
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMeta6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TemplateGetTemplateByIDFieldMeta", string(data))
}

func (u TemplateGetTemplateByIDFieldMeta) MarshalJSON() ([]byte, error) {
	if u.TemplateGetTemplateByIDFieldMeta1 != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMeta1, "", true)
	}

	if u.TemplateGetTemplateByIDFieldMeta2 != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMeta2, "", true)
	}

	if u.TemplateGetTemplateByIDFieldMeta3 != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMeta3, "", true)
	}

	if u.TemplateGetTemplateByIDFieldMeta4 != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMeta4, "", true)
	}

	if u.TemplateGetTemplateByIDFieldMeta5 != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMeta5, "", true)
	}

	if u.TemplateGetTemplateByIDFieldMeta6 != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMeta6, "", true)
	}

	if u.TemplateGetTemplateByIDFieldMeta7 != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMeta7, "", true)
	}

	if u.TemplateGetTemplateByIDFieldMeta8 != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMeta8, "", true)
	}

	if u.TemplateGetTemplateByIDFieldMeta9 != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMeta9, "", true)
	}

	return nil, errors.New("could not marshal union type TemplateGetTemplateByIDFieldMeta: all fields are null")
}

type TemplateGetTemplateByIDFields struct {
	Type        TemplateGetTemplateByIDTemplatesResponseType `json:"type"`
	ID          int64                                        `json:"id"`
	SecondaryID string                                       `json:"secondaryId"`
	DocumentID  *int64                                       `json:"documentId"`
	TemplateID  *int64                                       `json:"templateId"`
	RecipientID int64                                        `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                           `json:"page"`
	PositionX  any                               `json:"positionX,omitempty"`
	PositionY  any                               `json:"positionY,omitempty"`
	Width      any                               `json:"width,omitempty"`
	Height     any                               `json:"height,omitempty"`
	CustomText string                            `json:"customText"`
	Inserted   bool                              `json:"inserted"`
	FieldMeta  *TemplateGetTemplateByIDFieldMeta `json:"fieldMeta"`
}

func (o *TemplateGetTemplateByIDFields) GetType() TemplateGetTemplateByIDTemplatesResponseType {
	if o == nil {
		return TemplateGetTemplateByIDTemplatesResponseType("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFields) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *TemplateGetTemplateByIDFields) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *TemplateGetTemplateByIDFields) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *TemplateGetTemplateByIDFields) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *TemplateGetTemplateByIDFields) GetRecipientID() int64 {
	if o == nil {
		return 0
	}
	return o.RecipientID
}

func (o *TemplateGetTemplateByIDFields) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *TemplateGetTemplateByIDFields) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *TemplateGetTemplateByIDFields) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *TemplateGetTemplateByIDFields) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *TemplateGetTemplateByIDFields) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *TemplateGetTemplateByIDFields) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *TemplateGetTemplateByIDFields) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *TemplateGetTemplateByIDFields) GetFieldMeta() *TemplateGetTemplateByIDFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

// TemplateGetTemplateByIDResponseBody - Successful response
type TemplateGetTemplateByIDResponseBody struct {
	Type                   TemplateGetTemplateByIDType         `json:"type"`
	Visibility             TemplateGetTemplateByIDVisibility   `json:"visibility"`
	ID                     int64                               `json:"id"`
	ExternalID             *string                             `json:"externalId"`
	Title                  string                              `json:"title"`
	UserID                 int64                               `json:"userId"`
	TeamID                 *int64                              `json:"teamId"`
	AuthOptions            *TemplateGetTemplateByIDAuthOptions `json:"authOptions"`
	TemplateDocumentDataID string                              `json:"templateDocumentDataId"`
	CreatedAt              string                              `json:"createdAt"`
	UpdatedAt              string                              `json:"updatedAt"`
	PublicTitle            string                              `json:"publicTitle"`
	PublicDescription      string                              `json:"publicDescription"`
	TemplateDocumentData   TemplateDocumentData                `json:"templateDocumentData"`
	TemplateMeta           *TemplateMeta                       `json:"templateMeta"`
	DirectLink             *DirectLink                         `json:"directLink"`
	User                   User                                `json:"user"`
	Recipients             []TemplateGetTemplateByIDRecipients `json:"recipients"`
	Fields                 []TemplateGetTemplateByIDFields     `json:"fields"`
}

func (o *TemplateGetTemplateByIDResponseBody) GetType() TemplateGetTemplateByIDType {
	if o == nil {
		return TemplateGetTemplateByIDType("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDResponseBody) GetVisibility() TemplateGetTemplateByIDVisibility {
	if o == nil {
		return TemplateGetTemplateByIDVisibility("")
	}
	return o.Visibility
}

func (o *TemplateGetTemplateByIDResponseBody) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *TemplateGetTemplateByIDResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *TemplateGetTemplateByIDResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *TemplateGetTemplateByIDResponseBody) GetUserID() int64 {
	if o == nil {
		return 0
	}
	return o.UserID
}

func (o *TemplateGetTemplateByIDResponseBody) GetTeamID() *int64 {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *TemplateGetTemplateByIDResponseBody) GetAuthOptions() *TemplateGetTemplateByIDAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *TemplateGetTemplateByIDResponseBody) GetTemplateDocumentDataID() string {
	if o == nil {
		return ""
	}
	return o.TemplateDocumentDataID
}

func (o *TemplateGetTemplateByIDResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *TemplateGetTemplateByIDResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *TemplateGetTemplateByIDResponseBody) GetPublicTitle() string {
	if o == nil {
		return ""
	}
	return o.PublicTitle
}

func (o *TemplateGetTemplateByIDResponseBody) GetPublicDescription() string {
	if o == nil {
		return ""
	}
	return o.PublicDescription
}

func (o *TemplateGetTemplateByIDResponseBody) GetTemplateDocumentData() TemplateDocumentData {
	if o == nil {
		return TemplateDocumentData{}
	}
	return o.TemplateDocumentData
}

func (o *TemplateGetTemplateByIDResponseBody) GetTemplateMeta() *TemplateMeta {
	if o == nil {
		return nil
	}
	return o.TemplateMeta
}

func (o *TemplateGetTemplateByIDResponseBody) GetDirectLink() *DirectLink {
	if o == nil {
		return nil
	}
	return o.DirectLink
}

func (o *TemplateGetTemplateByIDResponseBody) GetUser() User {
	if o == nil {
		return User{}
	}
	return o.User
}

func (o *TemplateGetTemplateByIDResponseBody) GetRecipients() []TemplateGetTemplateByIDRecipients {
	if o == nil {
		return []TemplateGetTemplateByIDRecipients{}
	}
	return o.Recipients
}

func (o *TemplateGetTemplateByIDResponseBody) GetFields() []TemplateGetTemplateByIDFields {
	if o == nil {
		return []TemplateGetTemplateByIDFields{}
	}
	return o.Fields
}

type TemplateGetTemplateByIDResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *TemplateGetTemplateByIDResponseBody
}

func (o *TemplateGetTemplateByIDResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *TemplateGetTemplateByIDResponse) GetObject() *TemplateGetTemplateByIDResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
