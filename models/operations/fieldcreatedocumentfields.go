// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldCreateDocumentFieldsTypeDropdownRequest1 string

const (
	FieldCreateDocumentFieldsTypeDropdownRequest1Dropdown FieldCreateDocumentFieldsTypeDropdownRequest1 = "DROPDOWN"
)

func (e FieldCreateDocumentFieldsTypeDropdownRequest1) ToPointer() *FieldCreateDocumentFieldsTypeDropdownRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeDropdownRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = FieldCreateDocumentFieldsTypeDropdownRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeDropdownRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeDropdownRequest2 string

const (
	FieldCreateDocumentFieldsTypeDropdownRequest2Dropdown FieldCreateDocumentFieldsTypeDropdownRequest2 = "dropdown"
)

func (e FieldCreateDocumentFieldsTypeDropdownRequest2) ToPointer() *FieldCreateDocumentFieldsTypeDropdownRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeDropdownRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateDocumentFieldsTypeDropdownRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeDropdownRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldsValueDropdown struct {
	Value string `json:"value"`
}

func (f FieldCreateDocumentFieldsValueDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsValueDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsValueDropdown) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldCreateDocumentFieldsFieldMetaDropdownRequest struct {
	Label        *string                                       `json:"label,omitempty"`
	Placeholder  *string                                       `json:"placeholder,omitempty"`
	Required     *bool                                         `json:"required,omitempty"`
	ReadOnly     *bool                                         `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldsTypeDropdownRequest2 `json:"type"`
	Values       []FieldCreateDocumentFieldsValueDropdown      `json:"values,omitempty"`
	DefaultValue *string                                       `json:"defaultValue,omitempty"`
}

func (f FieldCreateDocumentFieldsFieldMetaDropdownRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaDropdownRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaDropdownRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaDropdownRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaDropdownRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaDropdownRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaDropdownRequest) GetType() FieldCreateDocumentFieldsTypeDropdownRequest2 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeDropdownRequest2("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaDropdownRequest) GetValues() []FieldCreateDocumentFieldsValueDropdown {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldCreateDocumentFieldsFieldMetaDropdownRequest) GetDefaultValue() *string {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

type FieldCreateDocumentFieldsFieldDropdown struct {
	Type      FieldCreateDocumentFieldsTypeDropdownRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaDropdownRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldsFieldDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldDropdown) GetType() FieldCreateDocumentFieldsTypeDropdownRequest1 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeDropdownRequest1("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldDropdown) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaDropdownRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateDocumentFieldsFieldDropdown) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateDocumentFieldsFieldDropdown) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateDocumentFieldsFieldDropdown) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateDocumentFieldsFieldDropdown) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateDocumentFieldsFieldDropdown) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateDocumentFieldsFieldDropdown) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateDocumentFieldsTypeCheckboxRequest1 string

const (
	FieldCreateDocumentFieldsTypeCheckboxRequest1Checkbox FieldCreateDocumentFieldsTypeCheckboxRequest1 = "CHECKBOX"
)

func (e FieldCreateDocumentFieldsTypeCheckboxRequest1) ToPointer() *FieldCreateDocumentFieldsTypeCheckboxRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeCheckboxRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = FieldCreateDocumentFieldsTypeCheckboxRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeCheckboxRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeCheckboxRequest2 string

const (
	FieldCreateDocumentFieldsTypeCheckboxRequest2Checkbox FieldCreateDocumentFieldsTypeCheckboxRequest2 = "checkbox"
)

func (e FieldCreateDocumentFieldsTypeCheckboxRequest2) ToPointer() *FieldCreateDocumentFieldsTypeCheckboxRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeCheckboxRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateDocumentFieldsTypeCheckboxRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeCheckboxRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldsValueCheckbox struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldCreateDocumentFieldsValueCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsValueCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsValueCheckbox) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldCreateDocumentFieldsValueCheckbox) GetChecked() bool {
	if f == nil {
		return false
	}
	return f.Checked
}

func (f *FieldCreateDocumentFieldsValueCheckbox) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldCreateDocumentFieldsDirectionRequest string

const (
	FieldCreateDocumentFieldsDirectionRequestVertical   FieldCreateDocumentFieldsDirectionRequest = "vertical"
	FieldCreateDocumentFieldsDirectionRequestHorizontal FieldCreateDocumentFieldsDirectionRequest = "horizontal"
)

func (e FieldCreateDocumentFieldsDirectionRequest) ToPointer() *FieldCreateDocumentFieldsDirectionRequest {
	return &e
}
func (e *FieldCreateDocumentFieldsDirectionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vertical":
		fallthrough
	case "horizontal":
		*e = FieldCreateDocumentFieldsDirectionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsDirectionRequest: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaCheckboxRequest struct {
	Label            *string                                       `json:"label,omitempty"`
	Placeholder      *string                                       `json:"placeholder,omitempty"`
	Required         *bool                                         `json:"required,omitempty"`
	ReadOnly         *bool                                         `json:"readOnly,omitempty"`
	Type             FieldCreateDocumentFieldsTypeCheckboxRequest2 `json:"type"`
	Values           []FieldCreateDocumentFieldsValueCheckbox      `json:"values,omitempty"`
	ValidationRule   *string                                       `json:"validationRule,omitempty"`
	ValidationLength *float64                                      `json:"validationLength,omitempty"`
	Direction        *FieldCreateDocumentFieldsDirectionRequest    `default:"vertical" json:"direction"`
}

func (f FieldCreateDocumentFieldsFieldMetaCheckboxRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxRequest) GetType() FieldCreateDocumentFieldsTypeCheckboxRequest2 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeCheckboxRequest2("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxRequest) GetValues() []FieldCreateDocumentFieldsValueCheckbox {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxRequest) GetValidationRule() *string {
	if f == nil {
		return nil
	}
	return f.ValidationRule
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxRequest) GetValidationLength() *float64 {
	if f == nil {
		return nil
	}
	return f.ValidationLength
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxRequest) GetDirection() *FieldCreateDocumentFieldsDirectionRequest {
	if f == nil {
		return nil
	}
	return f.Direction
}

type FieldCreateDocumentFieldsFieldCheckbox struct {
	Type      FieldCreateDocumentFieldsTypeCheckboxRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaCheckboxRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldsFieldCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldCheckbox) GetType() FieldCreateDocumentFieldsTypeCheckboxRequest1 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeCheckboxRequest1("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldCheckbox) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaCheckboxRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateDocumentFieldsFieldCheckbox) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateDocumentFieldsFieldCheckbox) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateDocumentFieldsFieldCheckbox) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateDocumentFieldsFieldCheckbox) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateDocumentFieldsFieldCheckbox) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateDocumentFieldsFieldCheckbox) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateDocumentFieldsTypeRadioRequest1 string

const (
	FieldCreateDocumentFieldsTypeRadioRequest1Radio FieldCreateDocumentFieldsTypeRadioRequest1 = "RADIO"
)

func (e FieldCreateDocumentFieldsTypeRadioRequest1) ToPointer() *FieldCreateDocumentFieldsTypeRadioRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeRadioRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = FieldCreateDocumentFieldsTypeRadioRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeRadioRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeRadioRequest2 string

const (
	FieldCreateDocumentFieldsTypeRadioRequest2Radio FieldCreateDocumentFieldsTypeRadioRequest2 = "radio"
)

func (e FieldCreateDocumentFieldsTypeRadioRequest2) ToPointer() *FieldCreateDocumentFieldsTypeRadioRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeRadioRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateDocumentFieldsTypeRadioRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeRadioRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldsValueRadio struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldCreateDocumentFieldsValueRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsValueRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsValueRadio) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldCreateDocumentFieldsValueRadio) GetChecked() bool {
	if f == nil {
		return false
	}
	return f.Checked
}

func (f *FieldCreateDocumentFieldsValueRadio) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldCreateDocumentFieldsFieldMetaRadioRequest struct {
	Label       *string                                    `json:"label,omitempty"`
	Placeholder *string                                    `json:"placeholder,omitempty"`
	Required    *bool                                      `json:"required,omitempty"`
	ReadOnly    *bool                                      `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsTypeRadioRequest2 `json:"type"`
	Values      []FieldCreateDocumentFieldsValueRadio      `json:"values,omitempty"`
}

func (f FieldCreateDocumentFieldsFieldMetaRadioRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaRadioRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaRadioRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaRadioRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaRadioRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaRadioRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaRadioRequest) GetType() FieldCreateDocumentFieldsTypeRadioRequest2 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeRadioRequest2("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaRadioRequest) GetValues() []FieldCreateDocumentFieldsValueRadio {
	if f == nil {
		return nil
	}
	return f.Values
}

type FieldCreateDocumentFieldsFieldRadio struct {
	Type      FieldCreateDocumentFieldsTypeRadioRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaRadioRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldsFieldRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldRadio) GetType() FieldCreateDocumentFieldsTypeRadioRequest1 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeRadioRequest1("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldRadio) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaRadioRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateDocumentFieldsFieldRadio) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateDocumentFieldsFieldRadio) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateDocumentFieldsFieldRadio) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateDocumentFieldsFieldRadio) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateDocumentFieldsFieldRadio) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateDocumentFieldsFieldRadio) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateDocumentFieldsTypeNumberRequest1 string

const (
	FieldCreateDocumentFieldsTypeNumberRequest1Number FieldCreateDocumentFieldsTypeNumberRequest1 = "NUMBER"
)

func (e FieldCreateDocumentFieldsTypeNumberRequest1) ToPointer() *FieldCreateDocumentFieldsTypeNumberRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeNumberRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = FieldCreateDocumentFieldsTypeNumberRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeNumberRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeNumberRequest2 string

const (
	FieldCreateDocumentFieldsTypeNumberRequest2Number FieldCreateDocumentFieldsTypeNumberRequest2 = "number"
)

func (e FieldCreateDocumentFieldsTypeNumberRequest2) ToPointer() *FieldCreateDocumentFieldsTypeNumberRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeNumberRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateDocumentFieldsTypeNumberRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeNumberRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignNumber string

const (
	FieldCreateDocumentFieldsTextAlignNumberLeft   FieldCreateDocumentFieldsTextAlignNumber = "left"
	FieldCreateDocumentFieldsTextAlignNumberCenter FieldCreateDocumentFieldsTextAlignNumber = "center"
	FieldCreateDocumentFieldsTextAlignNumberRight  FieldCreateDocumentFieldsTextAlignNumber = "right"
)

func (e FieldCreateDocumentFieldsTextAlignNumber) ToPointer() *FieldCreateDocumentFieldsTextAlignNumber {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignNumber: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaNumberRequest struct {
	Label        *string                                     `json:"label,omitempty"`
	Placeholder  *string                                     `json:"placeholder,omitempty"`
	Required     *bool                                       `json:"required,omitempty"`
	ReadOnly     *bool                                       `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldsTypeNumberRequest2 `json:"type"`
	NumberFormat *string                                     `json:"numberFormat,omitempty"`
	Value        *string                                     `json:"value,omitempty"`
	MinValue     *float64                                    `json:"minValue,omitempty"`
	MaxValue     *float64                                    `json:"maxValue,omitempty"`
	FontSize     *float64                                    `json:"fontSize,omitempty"`
	TextAlign    *FieldCreateDocumentFieldsTextAlignNumber   `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldsFieldMetaNumberRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberRequest) GetType() FieldCreateDocumentFieldsTypeNumberRequest2 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeNumberRequest2("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberRequest) GetNumberFormat() *string {
	if f == nil {
		return nil
	}
	return f.NumberFormat
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberRequest) GetValue() *string {
	if f == nil {
		return nil
	}
	return f.Value
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberRequest) GetMinValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MinValue
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberRequest) GetMaxValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MaxValue
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberRequest) GetTextAlign() *FieldCreateDocumentFieldsTextAlignNumber {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateDocumentFieldsFieldNumber struct {
	Type      FieldCreateDocumentFieldsTypeNumberRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaNumberRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldsFieldNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldNumber) GetType() FieldCreateDocumentFieldsTypeNumberRequest1 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeNumberRequest1("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldNumber) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaNumberRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateDocumentFieldsFieldNumber) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateDocumentFieldsFieldNumber) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateDocumentFieldsFieldNumber) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateDocumentFieldsFieldNumber) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateDocumentFieldsFieldNumber) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateDocumentFieldsFieldNumber) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateDocumentFieldsTypeTextRequest1 string

const (
	FieldCreateDocumentFieldsTypeTextRequest1Text FieldCreateDocumentFieldsTypeTextRequest1 = "TEXT"
)

func (e FieldCreateDocumentFieldsTypeTextRequest1) ToPointer() *FieldCreateDocumentFieldsTypeTextRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeTextRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = FieldCreateDocumentFieldsTypeTextRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeTextRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeTextRequest2 string

const (
	FieldCreateDocumentFieldsTypeTextRequest2Text FieldCreateDocumentFieldsTypeTextRequest2 = "text"
)

func (e FieldCreateDocumentFieldsTypeTextRequest2) ToPointer() *FieldCreateDocumentFieldsTypeTextRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeTextRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateDocumentFieldsTypeTextRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeTextRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignText string

const (
	FieldCreateDocumentFieldsTextAlignTextLeft   FieldCreateDocumentFieldsTextAlignText = "left"
	FieldCreateDocumentFieldsTextAlignTextCenter FieldCreateDocumentFieldsTextAlignText = "center"
	FieldCreateDocumentFieldsTextAlignTextRight  FieldCreateDocumentFieldsTextAlignText = "right"
)

func (e FieldCreateDocumentFieldsTextAlignText) ToPointer() *FieldCreateDocumentFieldsTextAlignText {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignText: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaTextRequest struct {
	Label          *string                                   `json:"label,omitempty"`
	Placeholder    *string                                   `json:"placeholder,omitempty"`
	Required       *bool                                     `json:"required,omitempty"`
	ReadOnly       *bool                                     `json:"readOnly,omitempty"`
	Type           FieldCreateDocumentFieldsTypeTextRequest2 `json:"type"`
	Text           *string                                   `json:"text,omitempty"`
	CharacterLimit *float64                                  `json:"characterLimit,omitempty"`
	FontSize       *float64                                  `json:"fontSize,omitempty"`
	TextAlign      *FieldCreateDocumentFieldsTextAlignText   `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldsFieldMetaTextRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaTextRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaTextRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaTextRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaTextRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaTextRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaTextRequest) GetType() FieldCreateDocumentFieldsTypeTextRequest2 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeTextRequest2("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaTextRequest) GetText() *string {
	if f == nil {
		return nil
	}
	return f.Text
}

func (f *FieldCreateDocumentFieldsFieldMetaTextRequest) GetCharacterLimit() *float64 {
	if f == nil {
		return nil
	}
	return f.CharacterLimit
}

func (f *FieldCreateDocumentFieldsFieldMetaTextRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateDocumentFieldsFieldMetaTextRequest) GetTextAlign() *FieldCreateDocumentFieldsTextAlignText {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateDocumentFieldsFieldText struct {
	Type      FieldCreateDocumentFieldsTypeTextRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaTextRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldsFieldText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldText) GetType() FieldCreateDocumentFieldsTypeTextRequest1 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeTextRequest1("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldText) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaTextRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateDocumentFieldsFieldText) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateDocumentFieldsFieldText) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateDocumentFieldsFieldText) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateDocumentFieldsFieldText) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateDocumentFieldsFieldText) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateDocumentFieldsFieldText) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateDocumentFieldsTypeDateRequest1 string

const (
	FieldCreateDocumentFieldsTypeDateRequest1Date FieldCreateDocumentFieldsTypeDateRequest1 = "DATE"
)

func (e FieldCreateDocumentFieldsTypeDateRequest1) ToPointer() *FieldCreateDocumentFieldsTypeDateRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeDateRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = FieldCreateDocumentFieldsTypeDateRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeDateRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeDateRequest2 string

const (
	FieldCreateDocumentFieldsTypeDateRequest2Date FieldCreateDocumentFieldsTypeDateRequest2 = "date"
)

func (e FieldCreateDocumentFieldsTypeDateRequest2) ToPointer() *FieldCreateDocumentFieldsTypeDateRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeDateRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateDocumentFieldsTypeDateRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeDateRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignDate string

const (
	FieldCreateDocumentFieldsTextAlignDateLeft   FieldCreateDocumentFieldsTextAlignDate = "left"
	FieldCreateDocumentFieldsTextAlignDateCenter FieldCreateDocumentFieldsTextAlignDate = "center"
	FieldCreateDocumentFieldsTextAlignDateRight  FieldCreateDocumentFieldsTextAlignDate = "right"
)

func (e FieldCreateDocumentFieldsTextAlignDate) ToPointer() *FieldCreateDocumentFieldsTextAlignDate {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignDate: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaDateRequest struct {
	Label       *string                                   `json:"label,omitempty"`
	Placeholder *string                                   `json:"placeholder,omitempty"`
	Required    *bool                                     `json:"required,omitempty"`
	ReadOnly    *bool                                     `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsTypeDateRequest2 `json:"type"`
	FontSize    *float64                                  `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldsTextAlignDate   `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldsFieldMetaDateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaDateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaDateRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaDateRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaDateRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaDateRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaDateRequest) GetType() FieldCreateDocumentFieldsTypeDateRequest2 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeDateRequest2("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaDateRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateDocumentFieldsFieldMetaDateRequest) GetTextAlign() *FieldCreateDocumentFieldsTextAlignDate {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateDocumentFieldsFieldDate struct {
	Type      FieldCreateDocumentFieldsTypeDateRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaDateRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldsFieldDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldDate) GetType() FieldCreateDocumentFieldsTypeDateRequest1 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeDateRequest1("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldDate) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaDateRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateDocumentFieldsFieldDate) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateDocumentFieldsFieldDate) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateDocumentFieldsFieldDate) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateDocumentFieldsFieldDate) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateDocumentFieldsFieldDate) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateDocumentFieldsFieldDate) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateDocumentFieldsTypeEmailRequest1 string

const (
	FieldCreateDocumentFieldsTypeEmailRequest1Email FieldCreateDocumentFieldsTypeEmailRequest1 = "EMAIL"
)

func (e FieldCreateDocumentFieldsTypeEmailRequest1) ToPointer() *FieldCreateDocumentFieldsTypeEmailRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeEmailRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = FieldCreateDocumentFieldsTypeEmailRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeEmailRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeEmailRequest2 string

const (
	FieldCreateDocumentFieldsTypeEmailRequest2Email FieldCreateDocumentFieldsTypeEmailRequest2 = "email"
)

func (e FieldCreateDocumentFieldsTypeEmailRequest2) ToPointer() *FieldCreateDocumentFieldsTypeEmailRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeEmailRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateDocumentFieldsTypeEmailRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeEmailRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignEmail string

const (
	FieldCreateDocumentFieldsTextAlignEmailLeft   FieldCreateDocumentFieldsTextAlignEmail = "left"
	FieldCreateDocumentFieldsTextAlignEmailCenter FieldCreateDocumentFieldsTextAlignEmail = "center"
	FieldCreateDocumentFieldsTextAlignEmailRight  FieldCreateDocumentFieldsTextAlignEmail = "right"
)

func (e FieldCreateDocumentFieldsTextAlignEmail) ToPointer() *FieldCreateDocumentFieldsTextAlignEmail {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignEmail: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaEmailRequest struct {
	Label       *string                                    `json:"label,omitempty"`
	Placeholder *string                                    `json:"placeholder,omitempty"`
	Required    *bool                                      `json:"required,omitempty"`
	ReadOnly    *bool                                      `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsTypeEmailRequest2 `json:"type"`
	FontSize    *float64                                   `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldsTextAlignEmail   `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldsFieldMetaEmailRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaEmailRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaEmailRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaEmailRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaEmailRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaEmailRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaEmailRequest) GetType() FieldCreateDocumentFieldsTypeEmailRequest2 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeEmailRequest2("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaEmailRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateDocumentFieldsFieldMetaEmailRequest) GetTextAlign() *FieldCreateDocumentFieldsTextAlignEmail {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateDocumentFieldsFieldEmail struct {
	Type      FieldCreateDocumentFieldsTypeEmailRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaEmailRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldsFieldEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldEmail) GetType() FieldCreateDocumentFieldsTypeEmailRequest1 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeEmailRequest1("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldEmail) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaEmailRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateDocumentFieldsFieldEmail) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateDocumentFieldsFieldEmail) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateDocumentFieldsFieldEmail) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateDocumentFieldsFieldEmail) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateDocumentFieldsFieldEmail) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateDocumentFieldsFieldEmail) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateDocumentFieldsTypeNameRequest1 string

const (
	FieldCreateDocumentFieldsTypeNameRequest1Name FieldCreateDocumentFieldsTypeNameRequest1 = "NAME"
)

func (e FieldCreateDocumentFieldsTypeNameRequest1) ToPointer() *FieldCreateDocumentFieldsTypeNameRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeNameRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = FieldCreateDocumentFieldsTypeNameRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeNameRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeNameRequest2 string

const (
	FieldCreateDocumentFieldsTypeNameRequest2Name FieldCreateDocumentFieldsTypeNameRequest2 = "name"
)

func (e FieldCreateDocumentFieldsTypeNameRequest2) ToPointer() *FieldCreateDocumentFieldsTypeNameRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeNameRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateDocumentFieldsTypeNameRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeNameRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignName string

const (
	FieldCreateDocumentFieldsTextAlignNameLeft   FieldCreateDocumentFieldsTextAlignName = "left"
	FieldCreateDocumentFieldsTextAlignNameCenter FieldCreateDocumentFieldsTextAlignName = "center"
	FieldCreateDocumentFieldsTextAlignNameRight  FieldCreateDocumentFieldsTextAlignName = "right"
)

func (e FieldCreateDocumentFieldsTextAlignName) ToPointer() *FieldCreateDocumentFieldsTextAlignName {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignName: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaNameRequest struct {
	Label       *string                                   `json:"label,omitempty"`
	Placeholder *string                                   `json:"placeholder,omitempty"`
	Required    *bool                                     `json:"required,omitempty"`
	ReadOnly    *bool                                     `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsTypeNameRequest2 `json:"type"`
	FontSize    *float64                                  `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldsTextAlignName   `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldsFieldMetaNameRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaNameRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaNameRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaNameRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaNameRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaNameRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaNameRequest) GetType() FieldCreateDocumentFieldsTypeNameRequest2 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeNameRequest2("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaNameRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateDocumentFieldsFieldMetaNameRequest) GetTextAlign() *FieldCreateDocumentFieldsTextAlignName {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateDocumentFieldsFieldName struct {
	Type      FieldCreateDocumentFieldsTypeNameRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaNameRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldsFieldName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldName) GetType() FieldCreateDocumentFieldsTypeNameRequest1 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeNameRequest1("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldName) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaNameRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateDocumentFieldsFieldName) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateDocumentFieldsFieldName) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateDocumentFieldsFieldName) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateDocumentFieldsFieldName) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateDocumentFieldsFieldName) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateDocumentFieldsFieldName) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateDocumentFieldsTypeInitialsRequest1 string

const (
	FieldCreateDocumentFieldsTypeInitialsRequest1Initials FieldCreateDocumentFieldsTypeInitialsRequest1 = "INITIALS"
)

func (e FieldCreateDocumentFieldsTypeInitialsRequest1) ToPointer() *FieldCreateDocumentFieldsTypeInitialsRequest1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeInitialsRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = FieldCreateDocumentFieldsTypeInitialsRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeInitialsRequest1: %v", v)
	}
}

type FieldCreateDocumentFieldsTypeInitialsRequest2 string

const (
	FieldCreateDocumentFieldsTypeInitialsRequest2Initials FieldCreateDocumentFieldsTypeInitialsRequest2 = "initials"
)

func (e FieldCreateDocumentFieldsTypeInitialsRequest2) ToPointer() *FieldCreateDocumentFieldsTypeInitialsRequest2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeInitialsRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateDocumentFieldsTypeInitialsRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeInitialsRequest2: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignInitials string

const (
	FieldCreateDocumentFieldsTextAlignInitialsLeft   FieldCreateDocumentFieldsTextAlignInitials = "left"
	FieldCreateDocumentFieldsTextAlignInitialsCenter FieldCreateDocumentFieldsTextAlignInitials = "center"
	FieldCreateDocumentFieldsTextAlignInitialsRight  FieldCreateDocumentFieldsTextAlignInitials = "right"
)

func (e FieldCreateDocumentFieldsTextAlignInitials) ToPointer() *FieldCreateDocumentFieldsTextAlignInitials {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignInitials: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaInitialsRequest struct {
	Label       *string                                       `json:"label,omitempty"`
	Placeholder *string                                       `json:"placeholder,omitempty"`
	Required    *bool                                         `json:"required,omitempty"`
	ReadOnly    *bool                                         `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsTypeInitialsRequest2 `json:"type"`
	FontSize    *float64                                      `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldsTextAlignInitials   `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldsFieldMetaInitialsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaInitialsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaInitialsRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaInitialsRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaInitialsRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaInitialsRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaInitialsRequest) GetType() FieldCreateDocumentFieldsTypeInitialsRequest2 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeInitialsRequest2("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaInitialsRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateDocumentFieldsFieldMetaInitialsRequest) GetTextAlign() *FieldCreateDocumentFieldsTextAlignInitials {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateDocumentFieldsFieldInitials struct {
	Type      FieldCreateDocumentFieldsTypeInitialsRequest1      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldMetaInitialsRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldsFieldInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldInitials) GetType() FieldCreateDocumentFieldsTypeInitialsRequest1 {
	if f == nil {
		return FieldCreateDocumentFieldsTypeInitialsRequest1("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldInitials) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaInitialsRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateDocumentFieldsFieldInitials) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateDocumentFieldsFieldInitials) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateDocumentFieldsFieldInitials) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateDocumentFieldsFieldInitials) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateDocumentFieldsFieldInitials) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateDocumentFieldsFieldInitials) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateDocumentFieldsTypeFreeSignature string

const (
	FieldCreateDocumentFieldsTypeFreeSignatureFreeSignature FieldCreateDocumentFieldsTypeFreeSignature = "FREE_SIGNATURE"
)

func (e FieldCreateDocumentFieldsTypeFreeSignature) ToPointer() *FieldCreateDocumentFieldsTypeFreeSignature {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeFreeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldCreateDocumentFieldsTypeFreeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeFreeSignature: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldFreeSignature struct {
	Type FieldCreateDocumentFieldsTypeFreeSignature `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldsFieldFreeSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldFreeSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldFreeSignature) GetType() FieldCreateDocumentFieldsTypeFreeSignature {
	if f == nil {
		return FieldCreateDocumentFieldsTypeFreeSignature("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldFreeSignature) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateDocumentFieldsFieldFreeSignature) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateDocumentFieldsFieldFreeSignature) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateDocumentFieldsFieldFreeSignature) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateDocumentFieldsFieldFreeSignature) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateDocumentFieldsFieldFreeSignature) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateDocumentFieldsTypeSignature string

const (
	FieldCreateDocumentFieldsTypeSignatureSignature FieldCreateDocumentFieldsTypeSignature = "SIGNATURE"
)

func (e FieldCreateDocumentFieldsTypeSignature) ToPointer() *FieldCreateDocumentFieldsTypeSignature {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = FieldCreateDocumentFieldsTypeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeSignature: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldSignature struct {
	Type FieldCreateDocumentFieldsTypeSignature `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateDocumentFieldsFieldSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldSignature) GetType() FieldCreateDocumentFieldsTypeSignature {
	if f == nil {
		return FieldCreateDocumentFieldsTypeSignature("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldSignature) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateDocumentFieldsFieldSignature) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateDocumentFieldsFieldSignature) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateDocumentFieldsFieldSignature) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateDocumentFieldsFieldSignature) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateDocumentFieldsFieldSignature) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateDocumentFieldsFieldUnionType string

const (
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldSignature     FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Signature"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldFreeSignature FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_FreeSignature"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldInitials      FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Initials"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldName          FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Name"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldEmail         FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Email"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldDate          FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Date"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldText          FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Text"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldNumber        FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Number"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldRadio         FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Radio"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldCheckbox      FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Checkbox"
	FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldDropdown      FieldCreateDocumentFieldsFieldUnionType = "field_createDocumentFields_field_Dropdown"
)

type FieldCreateDocumentFieldsFieldUnion struct {
	FieldCreateDocumentFieldsFieldSignature     *FieldCreateDocumentFieldsFieldSignature     `queryParam:"inline,name=field"`
	FieldCreateDocumentFieldsFieldFreeSignature *FieldCreateDocumentFieldsFieldFreeSignature `queryParam:"inline,name=field"`
	FieldCreateDocumentFieldsFieldInitials      *FieldCreateDocumentFieldsFieldInitials      `queryParam:"inline,name=field"`
	FieldCreateDocumentFieldsFieldName          *FieldCreateDocumentFieldsFieldName          `queryParam:"inline,name=field"`
	FieldCreateDocumentFieldsFieldEmail         *FieldCreateDocumentFieldsFieldEmail         `queryParam:"inline,name=field"`
	FieldCreateDocumentFieldsFieldDate          *FieldCreateDocumentFieldsFieldDate          `queryParam:"inline,name=field"`
	FieldCreateDocumentFieldsFieldText          *FieldCreateDocumentFieldsFieldText          `queryParam:"inline,name=field"`
	FieldCreateDocumentFieldsFieldNumber        *FieldCreateDocumentFieldsFieldNumber        `queryParam:"inline,name=field"`
	FieldCreateDocumentFieldsFieldRadio         *FieldCreateDocumentFieldsFieldRadio         `queryParam:"inline,name=field"`
	FieldCreateDocumentFieldsFieldCheckbox      *FieldCreateDocumentFieldsFieldCheckbox      `queryParam:"inline,name=field"`
	FieldCreateDocumentFieldsFieldDropdown      *FieldCreateDocumentFieldsFieldDropdown      `queryParam:"inline,name=field"`

	Type FieldCreateDocumentFieldsFieldUnionType
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldSignature(fieldCreateDocumentFieldsFieldSignature FieldCreateDocumentFieldsFieldSignature) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldSignature

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldSignature: &fieldCreateDocumentFieldsFieldSignature,
		Type:                                    typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldFreeSignature(fieldCreateDocumentFieldsFieldFreeSignature FieldCreateDocumentFieldsFieldFreeSignature) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldFreeSignature

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldFreeSignature: &fieldCreateDocumentFieldsFieldFreeSignature,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldInitials(fieldCreateDocumentFieldsFieldInitials FieldCreateDocumentFieldsFieldInitials) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldInitials

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldInitials: &fieldCreateDocumentFieldsFieldInitials,
		Type:                                   typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldName(fieldCreateDocumentFieldsFieldName FieldCreateDocumentFieldsFieldName) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldName

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldName: &fieldCreateDocumentFieldsFieldName,
		Type:                               typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldEmail(fieldCreateDocumentFieldsFieldEmail FieldCreateDocumentFieldsFieldEmail) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldEmail

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldEmail: &fieldCreateDocumentFieldsFieldEmail,
		Type:                                typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldDate(fieldCreateDocumentFieldsFieldDate FieldCreateDocumentFieldsFieldDate) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldDate

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldDate: &fieldCreateDocumentFieldsFieldDate,
		Type:                               typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldText(fieldCreateDocumentFieldsFieldText FieldCreateDocumentFieldsFieldText) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldText

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldText: &fieldCreateDocumentFieldsFieldText,
		Type:                               typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldNumber(fieldCreateDocumentFieldsFieldNumber FieldCreateDocumentFieldsFieldNumber) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldNumber

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldNumber: &fieldCreateDocumentFieldsFieldNumber,
		Type:                                 typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldRadio(fieldCreateDocumentFieldsFieldRadio FieldCreateDocumentFieldsFieldRadio) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldRadio

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldRadio: &fieldCreateDocumentFieldsFieldRadio,
		Type:                                typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldCheckbox(fieldCreateDocumentFieldsFieldCheckbox FieldCreateDocumentFieldsFieldCheckbox) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldCheckbox

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldCheckbox: &fieldCreateDocumentFieldsFieldCheckbox,
		Type:                                   typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldUnionFieldCreateDocumentFieldsFieldDropdown(fieldCreateDocumentFieldsFieldDropdown FieldCreateDocumentFieldsFieldDropdown) FieldCreateDocumentFieldsFieldUnion {
	typ := FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldDropdown

	return FieldCreateDocumentFieldsFieldUnion{
		FieldCreateDocumentFieldsFieldDropdown: &fieldCreateDocumentFieldsFieldDropdown,
		Type:                                   typ,
	}
}

func (u *FieldCreateDocumentFieldsFieldUnion) UnmarshalJSON(data []byte) error {

	var fieldCreateDocumentFieldsFieldSignature FieldCreateDocumentFieldsFieldSignature = FieldCreateDocumentFieldsFieldSignature{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldSignature, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldSignature = &fieldCreateDocumentFieldsFieldSignature
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldSignature
		return nil
	}

	var fieldCreateDocumentFieldsFieldFreeSignature FieldCreateDocumentFieldsFieldFreeSignature = FieldCreateDocumentFieldsFieldFreeSignature{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldFreeSignature, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldFreeSignature = &fieldCreateDocumentFieldsFieldFreeSignature
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldFreeSignature
		return nil
	}

	var fieldCreateDocumentFieldsFieldInitials FieldCreateDocumentFieldsFieldInitials = FieldCreateDocumentFieldsFieldInitials{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldInitials, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldInitials = &fieldCreateDocumentFieldsFieldInitials
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldInitials
		return nil
	}

	var fieldCreateDocumentFieldsFieldName FieldCreateDocumentFieldsFieldName = FieldCreateDocumentFieldsFieldName{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldName, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldName = &fieldCreateDocumentFieldsFieldName
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldName
		return nil
	}

	var fieldCreateDocumentFieldsFieldEmail FieldCreateDocumentFieldsFieldEmail = FieldCreateDocumentFieldsFieldEmail{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldEmail, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldEmail = &fieldCreateDocumentFieldsFieldEmail
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldEmail
		return nil
	}

	var fieldCreateDocumentFieldsFieldDate FieldCreateDocumentFieldsFieldDate = FieldCreateDocumentFieldsFieldDate{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldDate, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldDate = &fieldCreateDocumentFieldsFieldDate
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldDate
		return nil
	}

	var fieldCreateDocumentFieldsFieldText FieldCreateDocumentFieldsFieldText = FieldCreateDocumentFieldsFieldText{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldText, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldText = &fieldCreateDocumentFieldsFieldText
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldText
		return nil
	}

	var fieldCreateDocumentFieldsFieldNumber FieldCreateDocumentFieldsFieldNumber = FieldCreateDocumentFieldsFieldNumber{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldNumber, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldNumber = &fieldCreateDocumentFieldsFieldNumber
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldNumber
		return nil
	}

	var fieldCreateDocumentFieldsFieldRadio FieldCreateDocumentFieldsFieldRadio = FieldCreateDocumentFieldsFieldRadio{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldRadio, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldRadio = &fieldCreateDocumentFieldsFieldRadio
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldRadio
		return nil
	}

	var fieldCreateDocumentFieldsFieldCheckbox FieldCreateDocumentFieldsFieldCheckbox = FieldCreateDocumentFieldsFieldCheckbox{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldCheckbox, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldCheckbox = &fieldCreateDocumentFieldsFieldCheckbox
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldCheckbox
		return nil
	}

	var fieldCreateDocumentFieldsFieldDropdown FieldCreateDocumentFieldsFieldDropdown = FieldCreateDocumentFieldsFieldDropdown{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldDropdown, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldDropdown = &fieldCreateDocumentFieldsFieldDropdown
		u.Type = FieldCreateDocumentFieldsFieldUnionTypeFieldCreateDocumentFieldsFieldDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldCreateDocumentFieldsFieldUnion", string(data))
}

func (u FieldCreateDocumentFieldsFieldUnion) MarshalJSON() ([]byte, error) {
	if u.FieldCreateDocumentFieldsFieldSignature != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldSignature, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldFreeSignature != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldFreeSignature, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldInitials != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldInitials, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldName != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldName, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldEmail != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldEmail, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldDate != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldDate, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldText != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldText, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldNumber != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldNumber, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldRadio != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldRadio, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldCheckbox != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldCheckbox, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldDropdown != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type FieldCreateDocumentFieldsFieldUnion: all fields are null")
}

type FieldCreateDocumentFieldsRequest struct {
	DocumentID float64                               `json:"documentId"`
	Fields     []FieldCreateDocumentFieldsFieldUnion `json:"fields"`
}

func (f *FieldCreateDocumentFieldsRequest) GetDocumentID() float64 {
	if f == nil {
		return 0.0
	}
	return f.DocumentID
}

func (f *FieldCreateDocumentFieldsRequest) GetFields() []FieldCreateDocumentFieldsFieldUnion {
	if f == nil {
		return []FieldCreateDocumentFieldsFieldUnion{}
	}
	return f.Fields
}

type FieldCreateDocumentFieldsTypeResponse string

const (
	FieldCreateDocumentFieldsTypeResponseSignature     FieldCreateDocumentFieldsTypeResponse = "SIGNATURE"
	FieldCreateDocumentFieldsTypeResponseFreeSignature FieldCreateDocumentFieldsTypeResponse = "FREE_SIGNATURE"
	FieldCreateDocumentFieldsTypeResponseInitials      FieldCreateDocumentFieldsTypeResponse = "INITIALS"
	FieldCreateDocumentFieldsTypeResponseName          FieldCreateDocumentFieldsTypeResponse = "NAME"
	FieldCreateDocumentFieldsTypeResponseEmail         FieldCreateDocumentFieldsTypeResponse = "EMAIL"
	FieldCreateDocumentFieldsTypeResponseDate          FieldCreateDocumentFieldsTypeResponse = "DATE"
	FieldCreateDocumentFieldsTypeResponseText          FieldCreateDocumentFieldsTypeResponse = "TEXT"
	FieldCreateDocumentFieldsTypeResponseNumber        FieldCreateDocumentFieldsTypeResponse = "NUMBER"
	FieldCreateDocumentFieldsTypeResponseRadio         FieldCreateDocumentFieldsTypeResponse = "RADIO"
	FieldCreateDocumentFieldsTypeResponseCheckbox      FieldCreateDocumentFieldsTypeResponse = "CHECKBOX"
	FieldCreateDocumentFieldsTypeResponseDropdown      FieldCreateDocumentFieldsTypeResponse = "DROPDOWN"
)

func (e FieldCreateDocumentFieldsTypeResponse) ToPointer() *FieldCreateDocumentFieldsTypeResponse {
	return &e
}
func (e *FieldCreateDocumentFieldsTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldCreateDocumentFieldsTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTypeResponse: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaTypeDropdown string

const (
	FieldCreateDocumentFieldsFieldMetaTypeDropdownDropdown FieldCreateDocumentFieldsFieldMetaTypeDropdown = "dropdown"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeDropdown) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeDropdown {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateDocumentFieldsFieldMetaTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeDropdown: %v", v)
	}
}

type FieldCreateDocumentFieldsValueResponse3 struct {
	Value string `json:"value"`
}

func (f FieldCreateDocumentFieldsValueResponse3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsValueResponse3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsValueResponse3) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldCreateDocumentFieldsFieldMetaDropdownResponse struct {
	Label        *string                                        `json:"label,omitempty"`
	Placeholder  *string                                        `json:"placeholder,omitempty"`
	Required     *bool                                          `json:"required,omitempty"`
	ReadOnly     *bool                                          `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldsFieldMetaTypeDropdown `json:"type"`
	Values       []FieldCreateDocumentFieldsValueResponse3      `json:"values,omitempty"`
	DefaultValue *string                                        `json:"defaultValue,omitempty"`
}

func (f FieldCreateDocumentFieldsFieldMetaDropdownResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaDropdownResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaDropdownResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaDropdownResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaDropdownResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaDropdownResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaDropdownResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeDropdown {
	if f == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeDropdown("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaDropdownResponse) GetValues() []FieldCreateDocumentFieldsValueResponse3 {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldCreateDocumentFieldsFieldMetaDropdownResponse) GetDefaultValue() *string {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

type FieldCreateDocumentFieldsFieldMetaTypeCheckbox string

const (
	FieldCreateDocumentFieldsFieldMetaTypeCheckboxCheckbox FieldCreateDocumentFieldsFieldMetaTypeCheckbox = "checkbox"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeCheckbox) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeCheckbox {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateDocumentFieldsFieldMetaTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeCheckbox: %v", v)
	}
}

type FieldCreateDocumentFieldsValueResponse2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldCreateDocumentFieldsValueResponse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsValueResponse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsValueResponse2) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldCreateDocumentFieldsValueResponse2) GetChecked() bool {
	if f == nil {
		return false
	}
	return f.Checked
}

func (f *FieldCreateDocumentFieldsValueResponse2) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldCreateDocumentFieldsDirectionResponse string

const (
	FieldCreateDocumentFieldsDirectionResponseVertical   FieldCreateDocumentFieldsDirectionResponse = "vertical"
	FieldCreateDocumentFieldsDirectionResponseHorizontal FieldCreateDocumentFieldsDirectionResponse = "horizontal"
)

func (e FieldCreateDocumentFieldsDirectionResponse) ToPointer() *FieldCreateDocumentFieldsDirectionResponse {
	return &e
}
func (e *FieldCreateDocumentFieldsDirectionResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vertical":
		fallthrough
	case "horizontal":
		*e = FieldCreateDocumentFieldsDirectionResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsDirectionResponse: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaCheckboxResponse struct {
	Label            *string                                        `json:"label,omitempty"`
	Placeholder      *string                                        `json:"placeholder,omitempty"`
	Required         *bool                                          `json:"required,omitempty"`
	ReadOnly         *bool                                          `json:"readOnly,omitempty"`
	Type             FieldCreateDocumentFieldsFieldMetaTypeCheckbox `json:"type"`
	Values           []FieldCreateDocumentFieldsValueResponse2      `json:"values,omitempty"`
	ValidationRule   *string                                        `json:"validationRule,omitempty"`
	ValidationLength *float64                                       `json:"validationLength,omitempty"`
	Direction        *FieldCreateDocumentFieldsDirectionResponse    `default:"vertical" json:"direction"`
}

func (f FieldCreateDocumentFieldsFieldMetaCheckboxResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeCheckbox {
	if f == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeCheckbox("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) GetValues() []FieldCreateDocumentFieldsValueResponse2 {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) GetValidationRule() *string {
	if f == nil {
		return nil
	}
	return f.ValidationRule
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) GetValidationLength() *float64 {
	if f == nil {
		return nil
	}
	return f.ValidationLength
}

func (f *FieldCreateDocumentFieldsFieldMetaCheckboxResponse) GetDirection() *FieldCreateDocumentFieldsDirectionResponse {
	if f == nil {
		return nil
	}
	return f.Direction
}

type FieldCreateDocumentFieldsFieldMetaTypeRadio string

const (
	FieldCreateDocumentFieldsFieldMetaTypeRadioRadio FieldCreateDocumentFieldsFieldMetaTypeRadio = "radio"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeRadio) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeRadio {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateDocumentFieldsFieldMetaTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeRadio: %v", v)
	}
}

type FieldCreateDocumentFieldsValueResponse1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldCreateDocumentFieldsValueResponse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsValueResponse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsValueResponse1) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldCreateDocumentFieldsValueResponse1) GetChecked() bool {
	if f == nil {
		return false
	}
	return f.Checked
}

func (f *FieldCreateDocumentFieldsValueResponse1) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldCreateDocumentFieldsFieldMetaRadioResponse struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldMetaTypeRadio `json:"type"`
	Values      []FieldCreateDocumentFieldsValueResponse1   `json:"values,omitempty"`
}

func (f FieldCreateDocumentFieldsFieldMetaRadioResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaRadioResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaRadioResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaRadioResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaRadioResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaRadioResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaRadioResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeRadio {
	if f == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeRadio("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaRadioResponse) GetValues() []FieldCreateDocumentFieldsValueResponse1 {
	if f == nil {
		return nil
	}
	return f.Values
}

type FieldCreateDocumentFieldsFieldMetaTypeNumber string

const (
	FieldCreateDocumentFieldsFieldMetaTypeNumberNumber FieldCreateDocumentFieldsFieldMetaTypeNumber = "number"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeNumber) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeNumber {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateDocumentFieldsFieldMetaTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeNumber: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignResponse6 string

const (
	FieldCreateDocumentFieldsTextAlignResponse6Left   FieldCreateDocumentFieldsTextAlignResponse6 = "left"
	FieldCreateDocumentFieldsTextAlignResponse6Center FieldCreateDocumentFieldsTextAlignResponse6 = "center"
	FieldCreateDocumentFieldsTextAlignResponse6Right  FieldCreateDocumentFieldsTextAlignResponse6 = "right"
)

func (e FieldCreateDocumentFieldsTextAlignResponse6) ToPointer() *FieldCreateDocumentFieldsTextAlignResponse6 {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignResponse6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignResponse6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignResponse6: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaNumberResponse struct {
	Label        *string                                      `json:"label,omitempty"`
	Placeholder  *string                                      `json:"placeholder,omitempty"`
	Required     *bool                                        `json:"required,omitempty"`
	ReadOnly     *bool                                        `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldsFieldMetaTypeNumber `json:"type"`
	NumberFormat *string                                      `json:"numberFormat,omitempty"`
	Value        *string                                      `json:"value,omitempty"`
	MinValue     *float64                                     `json:"minValue,omitempty"`
	MaxValue     *float64                                     `json:"maxValue,omitempty"`
	FontSize     *float64                                     `json:"fontSize,omitempty"`
	TextAlign    *FieldCreateDocumentFieldsTextAlignResponse6 `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldsFieldMetaNumberResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeNumber {
	if f == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeNumber("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetNumberFormat() *string {
	if f == nil {
		return nil
	}
	return f.NumberFormat
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetValue() *string {
	if f == nil {
		return nil
	}
	return f.Value
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetMinValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MinValue
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetMaxValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MaxValue
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateDocumentFieldsFieldMetaNumberResponse) GetTextAlign() *FieldCreateDocumentFieldsTextAlignResponse6 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateDocumentFieldsFieldMetaTypeText string

const (
	FieldCreateDocumentFieldsFieldMetaTypeTextText FieldCreateDocumentFieldsFieldMetaTypeText = "text"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeText) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeText {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateDocumentFieldsFieldMetaTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeText: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignResponse5 string

const (
	FieldCreateDocumentFieldsTextAlignResponse5Left   FieldCreateDocumentFieldsTextAlignResponse5 = "left"
	FieldCreateDocumentFieldsTextAlignResponse5Center FieldCreateDocumentFieldsTextAlignResponse5 = "center"
	FieldCreateDocumentFieldsTextAlignResponse5Right  FieldCreateDocumentFieldsTextAlignResponse5 = "right"
)

func (e FieldCreateDocumentFieldsTextAlignResponse5) ToPointer() *FieldCreateDocumentFieldsTextAlignResponse5 {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignResponse5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignResponse5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignResponse5: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaTextResponse struct {
	Label          *string                                      `json:"label,omitempty"`
	Placeholder    *string                                      `json:"placeholder,omitempty"`
	Required       *bool                                        `json:"required,omitempty"`
	ReadOnly       *bool                                        `json:"readOnly,omitempty"`
	Type           FieldCreateDocumentFieldsFieldMetaTypeText   `json:"type"`
	Text           *string                                      `json:"text,omitempty"`
	CharacterLimit *float64                                     `json:"characterLimit,omitempty"`
	FontSize       *float64                                     `json:"fontSize,omitempty"`
	TextAlign      *FieldCreateDocumentFieldsTextAlignResponse5 `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldsFieldMetaTextResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaTextResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaTextResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaTextResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaTextResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaTextResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaTextResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeText {
	if f == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeText("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaTextResponse) GetText() *string {
	if f == nil {
		return nil
	}
	return f.Text
}

func (f *FieldCreateDocumentFieldsFieldMetaTextResponse) GetCharacterLimit() *float64 {
	if f == nil {
		return nil
	}
	return f.CharacterLimit
}

func (f *FieldCreateDocumentFieldsFieldMetaTextResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateDocumentFieldsFieldMetaTextResponse) GetTextAlign() *FieldCreateDocumentFieldsTextAlignResponse5 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateDocumentFieldsFieldMetaTypeDate string

const (
	FieldCreateDocumentFieldsFieldMetaTypeDateDate FieldCreateDocumentFieldsFieldMetaTypeDate = "date"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeDate) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeDate {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateDocumentFieldsFieldMetaTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeDate: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignResponse4 string

const (
	FieldCreateDocumentFieldsTextAlignResponse4Left   FieldCreateDocumentFieldsTextAlignResponse4 = "left"
	FieldCreateDocumentFieldsTextAlignResponse4Center FieldCreateDocumentFieldsTextAlignResponse4 = "center"
	FieldCreateDocumentFieldsTextAlignResponse4Right  FieldCreateDocumentFieldsTextAlignResponse4 = "right"
)

func (e FieldCreateDocumentFieldsTextAlignResponse4) ToPointer() *FieldCreateDocumentFieldsTextAlignResponse4 {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignResponse4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignResponse4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignResponse4: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaDateResponse struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldMetaTypeDate   `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldsTextAlignResponse4 `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldsFieldMetaDateResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaDateResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaDateResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaDateResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaDateResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaDateResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaDateResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeDate {
	if f == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeDate("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaDateResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateDocumentFieldsFieldMetaDateResponse) GetTextAlign() *FieldCreateDocumentFieldsTextAlignResponse4 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateDocumentFieldsFieldMetaTypeEmail string

const (
	FieldCreateDocumentFieldsFieldMetaTypeEmailEmail FieldCreateDocumentFieldsFieldMetaTypeEmail = "email"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeEmail) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeEmail {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateDocumentFieldsFieldMetaTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeEmail: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignResponse3 string

const (
	FieldCreateDocumentFieldsTextAlignResponse3Left   FieldCreateDocumentFieldsTextAlignResponse3 = "left"
	FieldCreateDocumentFieldsTextAlignResponse3Center FieldCreateDocumentFieldsTextAlignResponse3 = "center"
	FieldCreateDocumentFieldsTextAlignResponse3Right  FieldCreateDocumentFieldsTextAlignResponse3 = "right"
)

func (e FieldCreateDocumentFieldsTextAlignResponse3) ToPointer() *FieldCreateDocumentFieldsTextAlignResponse3 {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignResponse3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignResponse3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignResponse3: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaEmailResponse struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldMetaTypeEmail  `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldsTextAlignResponse3 `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldsFieldMetaEmailResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaEmailResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaEmailResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaEmailResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaEmailResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaEmailResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaEmailResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeEmail {
	if f == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeEmail("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaEmailResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateDocumentFieldsFieldMetaEmailResponse) GetTextAlign() *FieldCreateDocumentFieldsTextAlignResponse3 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateDocumentFieldsFieldMetaTypeName string

const (
	FieldCreateDocumentFieldsFieldMetaTypeNameName FieldCreateDocumentFieldsFieldMetaTypeName = "name"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeName) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeName {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateDocumentFieldsFieldMetaTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeName: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignResponse2 string

const (
	FieldCreateDocumentFieldsTextAlignResponse2Left   FieldCreateDocumentFieldsTextAlignResponse2 = "left"
	FieldCreateDocumentFieldsTextAlignResponse2Center FieldCreateDocumentFieldsTextAlignResponse2 = "center"
	FieldCreateDocumentFieldsTextAlignResponse2Right  FieldCreateDocumentFieldsTextAlignResponse2 = "right"
)

func (e FieldCreateDocumentFieldsTextAlignResponse2) ToPointer() *FieldCreateDocumentFieldsTextAlignResponse2 {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignResponse2: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaNameResponse struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldMetaTypeName   `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldsTextAlignResponse2 `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldsFieldMetaNameResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaNameResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaNameResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaNameResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaNameResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaNameResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaNameResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeName {
	if f == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeName("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaNameResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateDocumentFieldsFieldMetaNameResponse) GetTextAlign() *FieldCreateDocumentFieldsTextAlignResponse2 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateDocumentFieldsFieldMetaTypeInitials string

const (
	FieldCreateDocumentFieldsFieldMetaTypeInitialsInitials FieldCreateDocumentFieldsFieldMetaTypeInitials = "initials"
)

func (e FieldCreateDocumentFieldsFieldMetaTypeInitials) ToPointer() *FieldCreateDocumentFieldsFieldMetaTypeInitials {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateDocumentFieldsFieldMetaTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaTypeInitials: %v", v)
	}
}

type FieldCreateDocumentFieldsTextAlignResponse1 string

const (
	FieldCreateDocumentFieldsTextAlignResponse1Left   FieldCreateDocumentFieldsTextAlignResponse1 = "left"
	FieldCreateDocumentFieldsTextAlignResponse1Center FieldCreateDocumentFieldsTextAlignResponse1 = "center"
	FieldCreateDocumentFieldsTextAlignResponse1Right  FieldCreateDocumentFieldsTextAlignResponse1 = "right"
)

func (e FieldCreateDocumentFieldsTextAlignResponse1) ToPointer() *FieldCreateDocumentFieldsTextAlignResponse1 {
	return &e
}
func (e *FieldCreateDocumentFieldsTextAlignResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateDocumentFieldsTextAlignResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsTextAlignResponse1: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaInitialsResponse struct {
	Label       *string                                        `json:"label,omitempty"`
	Placeholder *string                                        `json:"placeholder,omitempty"`
	Required    *bool                                          `json:"required,omitempty"`
	ReadOnly    *bool                                          `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldMetaTypeInitials `json:"type"`
	FontSize    *float64                                       `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateDocumentFieldsTextAlignResponse1   `json:"textAlign,omitempty"`
}

func (f FieldCreateDocumentFieldsFieldMetaInitialsResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateDocumentFieldsFieldMetaInitialsResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateDocumentFieldsFieldMetaInitialsResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateDocumentFieldsFieldMetaInitialsResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateDocumentFieldsFieldMetaInitialsResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateDocumentFieldsFieldMetaInitialsResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateDocumentFieldsFieldMetaInitialsResponse) GetType() FieldCreateDocumentFieldsFieldMetaTypeInitials {
	if f == nil {
		return FieldCreateDocumentFieldsFieldMetaTypeInitials("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldMetaInitialsResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateDocumentFieldsFieldMetaInitialsResponse) GetTextAlign() *FieldCreateDocumentFieldsTextAlignResponse1 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateDocumentFieldsFieldMetaUnionType string

const (
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaInitialsResponse FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Initials_response"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaNameResponse     FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Name_response"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaEmailResponse    FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Email_response"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaDateResponse     FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Date_response"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaTextResponse     FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Text_response"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaNumberResponse   FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Number_response"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaRadioResponse    FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Radio_response"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaCheckboxResponse FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Checkbox_response"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaDropdownResponse FieldCreateDocumentFieldsFieldMetaUnionType = "field_createDocumentFields_fieldMeta_Dropdown_response"
)

type FieldCreateDocumentFieldsFieldMetaUnion struct {
	FieldCreateDocumentFieldsFieldMetaInitialsResponse *FieldCreateDocumentFieldsFieldMetaInitialsResponse `queryParam:"inline,name=fieldMeta"`
	FieldCreateDocumentFieldsFieldMetaNameResponse     *FieldCreateDocumentFieldsFieldMetaNameResponse     `queryParam:"inline,name=fieldMeta"`
	FieldCreateDocumentFieldsFieldMetaEmailResponse    *FieldCreateDocumentFieldsFieldMetaEmailResponse    `queryParam:"inline,name=fieldMeta"`
	FieldCreateDocumentFieldsFieldMetaDateResponse     *FieldCreateDocumentFieldsFieldMetaDateResponse     `queryParam:"inline,name=fieldMeta"`
	FieldCreateDocumentFieldsFieldMetaTextResponse     *FieldCreateDocumentFieldsFieldMetaTextResponse     `queryParam:"inline,name=fieldMeta"`
	FieldCreateDocumentFieldsFieldMetaNumberResponse   *FieldCreateDocumentFieldsFieldMetaNumberResponse   `queryParam:"inline,name=fieldMeta"`
	FieldCreateDocumentFieldsFieldMetaRadioResponse    *FieldCreateDocumentFieldsFieldMetaRadioResponse    `queryParam:"inline,name=fieldMeta"`
	FieldCreateDocumentFieldsFieldMetaCheckboxResponse *FieldCreateDocumentFieldsFieldMetaCheckboxResponse `queryParam:"inline,name=fieldMeta"`
	FieldCreateDocumentFieldsFieldMetaDropdownResponse *FieldCreateDocumentFieldsFieldMetaDropdownResponse `queryParam:"inline,name=fieldMeta"`

	Type FieldCreateDocumentFieldsFieldMetaUnionType
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaInitialsResponse(fieldCreateDocumentFieldsFieldMetaInitialsResponse FieldCreateDocumentFieldsFieldMetaInitialsResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaInitialsResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaInitialsResponse: &fieldCreateDocumentFieldsFieldMetaInitialsResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaNameResponse(fieldCreateDocumentFieldsFieldMetaNameResponse FieldCreateDocumentFieldsFieldMetaNameResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaNameResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaNameResponse: &fieldCreateDocumentFieldsFieldMetaNameResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaEmailResponse(fieldCreateDocumentFieldsFieldMetaEmailResponse FieldCreateDocumentFieldsFieldMetaEmailResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaEmailResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaEmailResponse: &fieldCreateDocumentFieldsFieldMetaEmailResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaDateResponse(fieldCreateDocumentFieldsFieldMetaDateResponse FieldCreateDocumentFieldsFieldMetaDateResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaDateResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaDateResponse: &fieldCreateDocumentFieldsFieldMetaDateResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaTextResponse(fieldCreateDocumentFieldsFieldMetaTextResponse FieldCreateDocumentFieldsFieldMetaTextResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaTextResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaTextResponse: &fieldCreateDocumentFieldsFieldMetaTextResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaNumberResponse(fieldCreateDocumentFieldsFieldMetaNumberResponse FieldCreateDocumentFieldsFieldMetaNumberResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaNumberResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaNumberResponse: &fieldCreateDocumentFieldsFieldMetaNumberResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaRadioResponse(fieldCreateDocumentFieldsFieldMetaRadioResponse FieldCreateDocumentFieldsFieldMetaRadioResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaRadioResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaRadioResponse: &fieldCreateDocumentFieldsFieldMetaRadioResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaCheckboxResponse(fieldCreateDocumentFieldsFieldMetaCheckboxResponse FieldCreateDocumentFieldsFieldMetaCheckboxResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaCheckboxResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaCheckboxResponse: &fieldCreateDocumentFieldsFieldMetaCheckboxResponse,
		Type: typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaUnionFieldCreateDocumentFieldsFieldMetaDropdownResponse(fieldCreateDocumentFieldsFieldMetaDropdownResponse FieldCreateDocumentFieldsFieldMetaDropdownResponse) FieldCreateDocumentFieldsFieldMetaUnion {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaDropdownResponse

	return FieldCreateDocumentFieldsFieldMetaUnion{
		FieldCreateDocumentFieldsFieldMetaDropdownResponse: &fieldCreateDocumentFieldsFieldMetaDropdownResponse,
		Type: typ,
	}
}

func (u *FieldCreateDocumentFieldsFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var fieldCreateDocumentFieldsFieldMetaInitialsResponse FieldCreateDocumentFieldsFieldMetaInitialsResponse = FieldCreateDocumentFieldsFieldMetaInitialsResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaInitialsResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaInitialsResponse = &fieldCreateDocumentFieldsFieldMetaInitialsResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaInitialsResponse
		return nil
	}

	var fieldCreateDocumentFieldsFieldMetaNameResponse FieldCreateDocumentFieldsFieldMetaNameResponse = FieldCreateDocumentFieldsFieldMetaNameResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaNameResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaNameResponse = &fieldCreateDocumentFieldsFieldMetaNameResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaNameResponse
		return nil
	}

	var fieldCreateDocumentFieldsFieldMetaEmailResponse FieldCreateDocumentFieldsFieldMetaEmailResponse = FieldCreateDocumentFieldsFieldMetaEmailResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaEmailResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaEmailResponse = &fieldCreateDocumentFieldsFieldMetaEmailResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaEmailResponse
		return nil
	}

	var fieldCreateDocumentFieldsFieldMetaDateResponse FieldCreateDocumentFieldsFieldMetaDateResponse = FieldCreateDocumentFieldsFieldMetaDateResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaDateResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaDateResponse = &fieldCreateDocumentFieldsFieldMetaDateResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaDateResponse
		return nil
	}

	var fieldCreateDocumentFieldsFieldMetaTextResponse FieldCreateDocumentFieldsFieldMetaTextResponse = FieldCreateDocumentFieldsFieldMetaTextResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaTextResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaTextResponse = &fieldCreateDocumentFieldsFieldMetaTextResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaTextResponse
		return nil
	}

	var fieldCreateDocumentFieldsFieldMetaNumberResponse FieldCreateDocumentFieldsFieldMetaNumberResponse = FieldCreateDocumentFieldsFieldMetaNumberResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaNumberResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaNumberResponse = &fieldCreateDocumentFieldsFieldMetaNumberResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaNumberResponse
		return nil
	}

	var fieldCreateDocumentFieldsFieldMetaRadioResponse FieldCreateDocumentFieldsFieldMetaRadioResponse = FieldCreateDocumentFieldsFieldMetaRadioResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaRadioResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaRadioResponse = &fieldCreateDocumentFieldsFieldMetaRadioResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaRadioResponse
		return nil
	}

	var fieldCreateDocumentFieldsFieldMetaCheckboxResponse FieldCreateDocumentFieldsFieldMetaCheckboxResponse = FieldCreateDocumentFieldsFieldMetaCheckboxResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaCheckboxResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaCheckboxResponse = &fieldCreateDocumentFieldsFieldMetaCheckboxResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaCheckboxResponse
		return nil
	}

	var fieldCreateDocumentFieldsFieldMetaDropdownResponse FieldCreateDocumentFieldsFieldMetaDropdownResponse = FieldCreateDocumentFieldsFieldMetaDropdownResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMetaDropdownResponse, "", true, nil); err == nil {
		u.FieldCreateDocumentFieldsFieldMetaDropdownResponse = &fieldCreateDocumentFieldsFieldMetaDropdownResponse
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMetaDropdownResponse
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldCreateDocumentFieldsFieldMetaUnion", string(data))
}

func (u FieldCreateDocumentFieldsFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.FieldCreateDocumentFieldsFieldMetaInitialsResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaInitialsResponse, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMetaNameResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaNameResponse, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMetaEmailResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaEmailResponse, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMetaDateResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaDateResponse, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMetaTextResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaTextResponse, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMetaNumberResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaNumberResponse, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMetaRadioResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaRadioResponse, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMetaCheckboxResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaCheckboxResponse, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMetaDropdownResponse != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMetaDropdownResponse, "", true)
	}

	return nil, errors.New("could not marshal union type FieldCreateDocumentFieldsFieldMetaUnion: all fields are null")
}

type FieldCreateDocumentFieldsFieldResponse struct {
	EnvelopeID     string                                `json:"envelopeId"`
	EnvelopeItemID string                                `json:"envelopeItemId"`
	Type           FieldCreateDocumentFieldsTypeResponse `json:"type"`
	ID             float64                               `json:"id"`
	SecondaryID    string                                `json:"secondaryId"`
	RecipientID    float64                               `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                                  `json:"page"`
	PositionX  any                                      `json:"positionX,omitempty"`
	PositionY  any                                      `json:"positionY,omitempty"`
	Width      any                                      `json:"width,omitempty"`
	Height     any                                      `json:"height,omitempty"`
	CustomText string                                   `json:"customText"`
	Inserted   bool                                     `json:"inserted"`
	FieldMeta  *FieldCreateDocumentFieldsFieldMetaUnion `json:"fieldMeta"`
	DocumentID *float64                                 `json:"documentId,omitempty"`
	TemplateID *float64                                 `json:"templateId,omitempty"`
}

func (f *FieldCreateDocumentFieldsFieldResponse) GetEnvelopeID() string {
	if f == nil {
		return ""
	}
	return f.EnvelopeID
}

func (f *FieldCreateDocumentFieldsFieldResponse) GetEnvelopeItemID() string {
	if f == nil {
		return ""
	}
	return f.EnvelopeItemID
}

func (f *FieldCreateDocumentFieldsFieldResponse) GetType() FieldCreateDocumentFieldsTypeResponse {
	if f == nil {
		return FieldCreateDocumentFieldsTypeResponse("")
	}
	return f.Type
}

func (f *FieldCreateDocumentFieldsFieldResponse) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldCreateDocumentFieldsFieldResponse) GetSecondaryID() string {
	if f == nil {
		return ""
	}
	return f.SecondaryID
}

func (f *FieldCreateDocumentFieldsFieldResponse) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateDocumentFieldsFieldResponse) GetPage() float64 {
	if f == nil {
		return 0.0
	}
	return f.Page
}

func (f *FieldCreateDocumentFieldsFieldResponse) GetPositionX() any {
	if f == nil {
		return nil
	}
	return f.PositionX
}

func (f *FieldCreateDocumentFieldsFieldResponse) GetPositionY() any {
	if f == nil {
		return nil
	}
	return f.PositionY
}

func (f *FieldCreateDocumentFieldsFieldResponse) GetWidth() any {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FieldCreateDocumentFieldsFieldResponse) GetHeight() any {
	if f == nil {
		return nil
	}
	return f.Height
}

func (f *FieldCreateDocumentFieldsFieldResponse) GetCustomText() string {
	if f == nil {
		return ""
	}
	return f.CustomText
}

func (f *FieldCreateDocumentFieldsFieldResponse) GetInserted() bool {
	if f == nil {
		return false
	}
	return f.Inserted
}

func (f *FieldCreateDocumentFieldsFieldResponse) GetFieldMeta() *FieldCreateDocumentFieldsFieldMetaUnion {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateDocumentFieldsFieldResponse) GetDocumentID() *float64 {
	if f == nil {
		return nil
	}
	return f.DocumentID
}

func (f *FieldCreateDocumentFieldsFieldResponse) GetTemplateID() *float64 {
	if f == nil {
		return nil
	}
	return f.TemplateID
}

// FieldCreateDocumentFieldsResponseBody - Successful response
type FieldCreateDocumentFieldsResponseBody struct {
	Fields []FieldCreateDocumentFieldsFieldResponse `json:"fields"`
}

func (f *FieldCreateDocumentFieldsResponseBody) GetFields() []FieldCreateDocumentFieldsFieldResponse {
	if f == nil {
		return []FieldCreateDocumentFieldsFieldResponse{}
	}
	return f.Fields
}

type FieldCreateDocumentFieldsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldCreateDocumentFieldsResponseBody
}

func (f *FieldCreateDocumentFieldsResponse) GetHTTPMeta() components.HTTPMetadata {
	if f == nil {
		return components.HTTPMetadata{}
	}
	return f.HTTPMeta
}

func (f *FieldCreateDocumentFieldsResponse) GetObject() *FieldCreateDocumentFieldsResponseBody {
	if f == nil {
		return nil
	}
	return f.Object
}
