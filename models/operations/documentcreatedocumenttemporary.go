// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

// Visibility - The visibility of the document.
type Visibility string

const (
	VisibilityEveryone        Visibility = "EVERYONE"
	VisibilityManagerAndAbove Visibility = "MANAGER_AND_ABOVE"
	VisibilityAdmin           Visibility = "ADMIN"
)

func (e Visibility) ToPointer() *Visibility {
	return &e
}
func (e *Visibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = Visibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Visibility: %v", v)
	}
}

// GlobalAccessAuth - The type of authentication required for the recipient to access the document.
type GlobalAccessAuth string

const (
	GlobalAccessAuthAccount GlobalAccessAuth = "ACCOUNT"
)

func (e GlobalAccessAuth) ToPointer() *GlobalAccessAuth {
	return &e
}
func (e *GlobalAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = GlobalAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GlobalAccessAuth: %v", v)
	}
}

// GlobalActionAuth - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type GlobalActionAuth string

const (
	GlobalActionAuthAccount       GlobalActionAuth = "ACCOUNT"
	GlobalActionAuthPasskey       GlobalActionAuth = "PASSKEY"
	GlobalActionAuthTwoFactorAuth GlobalActionAuth = "TWO_FACTOR_AUTH"
)

func (e GlobalActionAuth) ToPointer() *GlobalActionAuth {
	return &e
}
func (e *GlobalActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = GlobalActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GlobalActionAuth: %v", v)
	}
}

type FormValuesType string

const (
	FormValuesTypeStr     FormValuesType = "str"
	FormValuesTypeBoolean FormValuesType = "boolean"
	FormValuesTypeNumber  FormValuesType = "number"
)

type FormValues struct {
	Str     *string  `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`
	Number  *float64 `queryParam:"inline"`

	Type FormValuesType
}

func CreateFormValuesStr(str string) FormValues {
	typ := FormValuesTypeStr

	return FormValues{
		Str:  &str,
		Type: typ,
	}
}

func CreateFormValuesBoolean(boolean bool) FormValues {
	typ := FormValuesTypeBoolean

	return FormValues{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateFormValuesNumber(number float64) FormValues {
	typ := FormValuesTypeNumber

	return FormValues{
		Number: &number,
		Type:   typ,
	}
}

func (u *FormValues) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = FormValuesTypeStr
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = FormValuesTypeBoolean
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = FormValuesTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FormValues", string(data))
}

func (u FormValues) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type FormValues: all fields are null")
}

type Role string

const (
	RoleCc       Role = "CC"
	RoleSigner   Role = "SIGNER"
	RoleViewer   Role = "VIEWER"
	RoleApprover Role = "APPROVER"
)

func (e Role) ToPointer() *Role {
	return &e
}
func (e *Role) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		*e = Role(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Role: %v", v)
	}
}

// AccessAuth - The type of authentication required for the recipient to access the document.
type AccessAuth string

const (
	AccessAuthAccount AccessAuth = "ACCOUNT"
)

func (e AccessAuth) ToPointer() *AccessAuth {
	return &e
}
func (e *AccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = AccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccessAuth: %v", v)
	}
}

// ActionAuth - The type of authentication required for the recipient to sign the document.
type ActionAuth string

const (
	ActionAuthAccount       ActionAuth = "ACCOUNT"
	ActionAuthPasskey       ActionAuth = "PASSKEY"
	ActionAuthTwoFactorAuth ActionAuth = "TWO_FACTOR_AUTH"
	ActionAuthExplicitNone  ActionAuth = "EXPLICIT_NONE"
)

func (e ActionAuth) ToPointer() *ActionAuth {
	return &e
}
func (e *ActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "EXPLICIT_NONE":
		*e = ActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionAuth: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11Type string

const (
	DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11TypeDropdown DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11Type = "DROPDOWN"
)

func (e DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11Type) ToPointer() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11Type {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11Type: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMetaType string

const (
	DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMetaTypeDropdown DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMetaType = "dropdown"
)

func (e DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMetaType) ToPointer() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMetaType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMetaType: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldsValues struct {
	Value string `json:"value"`
}

func (o *DocumentCreateDocumentTemporaryFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMeta struct {
	Label        *string                                                                                   `json:"label,omitempty"`
	Placeholder  *string                                                                                   `json:"placeholder,omitempty"`
	Required     *bool                                                                                     `json:"required,omitempty"`
	ReadOnly     *bool                                                                                     `json:"readOnly,omitempty"`
	Type         DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMetaType `json:"type"`
	Values       []DocumentCreateDocumentTemporaryFieldsValues                                             `json:"values,omitempty"`
	DefaultValue *string                                                                                   `json:"defaultValue,omitempty"`
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMeta) GetType() DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMetaType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMetaType("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMeta) GetValues() []DocumentCreateDocumentTemporaryFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMeta) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type Eleven struct {
	Type      DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11Type       `json:"type"`
	FieldMeta *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMeta `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Eleven) GetType() DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11Type {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11Type("")
	}
	return o.Type
}

func (o *Eleven) GetFieldMeta() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients11FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Eleven) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Eleven) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Eleven) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Eleven) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Eleven) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10Type string

const (
	DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10TypeCheckbox DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10Type = "CHECKBOX"
)

func (e DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10Type) ToPointer() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10Type {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10Type: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMetaType string

const (
	DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMetaTypeCheckbox DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMetaType = "checkbox"
)

func (e DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMetaType) ToPointer() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMetaType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMetaType: %v", v)
	}
}

type FieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMeta struct {
	Label            *string                                                                                   `json:"label,omitempty"`
	Placeholder      *string                                                                                   `json:"placeholder,omitempty"`
	Required         *bool                                                                                     `json:"required,omitempty"`
	ReadOnly         *bool                                                                                     `json:"readOnly,omitempty"`
	Type             DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMetaType `json:"type"`
	Values           []FieldsValues                                                                            `json:"values,omitempty"`
	ValidationRule   *string                                                                                   `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                                  `json:"validationLength,omitempty"`
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMeta) GetType() DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMetaType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMetaType("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMeta) GetValues() []FieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMeta) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMeta) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type Ten struct {
	Type      DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10Type       `json:"type"`
	FieldMeta *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMeta `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Ten) GetType() DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10Type {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10Type("")
	}
	return o.Type
}

func (o *Ten) GetFieldMeta() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients10FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Ten) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Ten) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Ten) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Ten) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Ten) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9Type string

const (
	DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9TypeRadio DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9Type = "RADIO"
)

func (e DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9Type) ToPointer() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9Type {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9Type: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9FieldMetaType string

const (
	DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9FieldMetaTypeRadio DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9FieldMetaType = "radio"
)

func (e DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9FieldMetaType) ToPointer() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9FieldMetaType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9FieldMetaType: %v", v)
	}
}

type Values struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *Values) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *Values) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *Values) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsFieldMeta struct {
	Label       *string                                                                                  `json:"label,omitempty"`
	Placeholder *string                                                                                  `json:"placeholder,omitempty"`
	Required    *bool                                                                                    `json:"required,omitempty"`
	ReadOnly    *bool                                                                                    `json:"readOnly,omitempty"`
	Type        DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9FieldMetaType `json:"type"`
	Values      []Values                                                                                 `json:"values,omitempty"`
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsFieldMeta) GetType() DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9FieldMetaType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9FieldMetaType("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsFieldMeta) GetValues() []Values {
	if o == nil {
		return nil
	}
	return o.Values
}

type Nine struct {
	Type      DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9Type      `json:"type"`
	FieldMeta *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsFieldMeta `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Nine) GetType() DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9Type {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients9Type("")
	}
	return o.Type
}

func (o *Nine) GetFieldMeta() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Nine) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Nine) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Nine) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Nine) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Nine) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8Type string

const (
	DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8TypeNumber DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8Type = "NUMBER"
)

func (e DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8Type) ToPointer() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8Type {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8Type: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8FieldMetaType string

const (
	DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8FieldMetaTypeNumber DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8FieldMetaType = "number"
)

func (e DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8FieldMetaType) ToPointer() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8FieldMetaType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8FieldMetaType: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyFieldMeta struct {
	Label        *string                                                                                  `json:"label,omitempty"`
	Placeholder  *string                                                                                  `json:"placeholder,omitempty"`
	Required     *bool                                                                                    `json:"required,omitempty"`
	ReadOnly     *bool                                                                                    `json:"readOnly,omitempty"`
	Type         DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8FieldMetaType `json:"type"`
	NumberFormat *string                                                                                  `json:"numberFormat,omitempty"`
	Value        *string                                                                                  `json:"value,omitempty"`
	MinValue     *float64                                                                                 `json:"minValue,omitempty"`
	MaxValue     *float64                                                                                 `json:"maxValue,omitempty"`
	FontSize     *float64                                                                                 `json:"fontSize,omitempty"`
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyFieldMeta) GetType() DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8FieldMetaType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8FieldMetaType("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyFieldMeta) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyFieldMeta) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyFieldMeta) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyFieldMeta) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Eight struct {
	Type      DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8Type `json:"type"`
	FieldMeta *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyFieldMeta      `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Eight) GetType() DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8Type {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients8Type("")
	}
	return o.Type
}

func (o *Eight) GetFieldMeta() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Eight) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Eight) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Eight) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Eight) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Eight) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7Type string

const (
	DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7TypeText DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7Type = "TEXT"
)

func (e DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7Type) ToPointer() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7Type {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7Type: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7FieldMetaType string

const (
	DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7FieldMetaTypeText DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7FieldMetaType = "text"
)

func (e DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7FieldMetaType) ToPointer() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7FieldMetaType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7FieldMetaType: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestFieldMeta struct {
	Label          *string                                                                                  `json:"label,omitempty"`
	Placeholder    *string                                                                                  `json:"placeholder,omitempty"`
	Required       *bool                                                                                    `json:"required,omitempty"`
	ReadOnly       *bool                                                                                    `json:"readOnly,omitempty"`
	Type           DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7FieldMetaType `json:"type"`
	Text           *string                                                                                  `json:"text,omitempty"`
	CharacterLimit *float64                                                                                 `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                                 `json:"fontSize,omitempty"`
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestFieldMeta) GetType() DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7FieldMetaType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7FieldMetaType("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestFieldMeta) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestFieldMeta) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsRequestFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Seven struct {
	Type      DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7Type `json:"type"`
	FieldMeta *DocumentCreateDocumentTemporaryFieldsDocumentsRequestFieldMeta                 `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Seven) GetType() DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7Type {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients7Type("")
	}
	return o.Type
}

func (o *Seven) GetFieldMeta() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Seven) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Seven) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Seven) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Seven) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Seven) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6Type string

const (
	DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6TypeDate DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6Type = "DATE"
)

func (e DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6Type) ToPointer() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6Type {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6Type: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6FieldMetaType string

const (
	DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6FieldMetaTypeDate DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6FieldMetaType = "date"
)

func (e DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6FieldMetaType) ToPointer() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6FieldMetaType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6FieldMetaType: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldsDocumentsFieldMeta struct {
	Label       *string                                                                                  `json:"label,omitempty"`
	Placeholder *string                                                                                  `json:"placeholder,omitempty"`
	Required    *bool                                                                                    `json:"required,omitempty"`
	ReadOnly    *bool                                                                                    `json:"readOnly,omitempty"`
	Type        DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6FieldMetaType `json:"type"`
	FontSize    *float64                                                                                 `json:"fontSize,omitempty"`
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsFieldMeta) GetType() DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6FieldMetaType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6FieldMetaType("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryFieldsDocumentsFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Six struct {
	Type      DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6Type `json:"type"`
	FieldMeta *DocumentCreateDocumentTemporaryFieldsDocumentsFieldMeta                        `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Six) GetType() DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6Type {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients6Type("")
	}
	return o.Type
}

func (o *Six) GetFieldMeta() *DocumentCreateDocumentTemporaryFieldsDocumentsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Six) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Six) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Six) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Six) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Six) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsType string

const (
	DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsTypeEmail DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsType = "EMAIL"
)

func (e DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsType) ToPointer() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsType: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients5Type string

const (
	DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients5TypeEmail DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients5Type = "email"
)

func (e DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients5Type) ToPointer() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients5Type {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients5Type: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldsFieldMeta struct {
	Label       *string                                                                         `json:"label,omitempty"`
	Placeholder *string                                                                         `json:"placeholder,omitempty"`
	Required    *bool                                                                           `json:"required,omitempty"`
	ReadOnly    *bool                                                                           `json:"readOnly,omitempty"`
	Type        DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients5Type `json:"type"`
	FontSize    *float64                                                                        `json:"fontSize,omitempty"`
}

func (o *DocumentCreateDocumentTemporaryFieldsFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentCreateDocumentTemporaryFieldsFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentCreateDocumentTemporaryFieldsFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentCreateDocumentTemporaryFieldsFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentCreateDocumentTemporaryFieldsFieldMeta) GetType() DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients5Type {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipients5Type("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryFieldsFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Five struct {
	Type      DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsType `json:"type"`
	FieldMeta *DocumentCreateDocumentTemporaryFieldsFieldMeta                                `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Five) GetType() DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyRecipientsType("")
	}
	return o.Type
}

func (o *Five) GetFieldMeta() *DocumentCreateDocumentTemporaryFieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Five) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Five) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Five) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Five) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Five) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestType string

const (
	DocumentCreateDocumentTemporaryFieldsDocumentsRequestTypeName DocumentCreateDocumentTemporaryFieldsDocumentsRequestType = "NAME"
)

func (e DocumentCreateDocumentTemporaryFieldsDocumentsRequestType) ToPointer() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsDocumentsRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = DocumentCreateDocumentTemporaryFieldsDocumentsRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsDocumentsRequestType: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyType string

const (
	DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyTypeName DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyType = "name"
)

func (e DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyType) ToPointer() *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyType: %v", v)
	}
}

type FieldsFieldMeta struct {
	Label       *string                                                              `json:"label,omitempty"`
	Placeholder *string                                                              `json:"placeholder,omitempty"`
	Required    *bool                                                                `json:"required,omitempty"`
	ReadOnly    *bool                                                                `json:"readOnly,omitempty"`
	Type        DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyType `json:"type"`
	FontSize    *float64                                                             `json:"fontSize,omitempty"`
}

func (o *FieldsFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldsFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldsFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldsFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldsFieldMeta) GetType() DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsDocumentsRequestRequestBodyType("")
	}
	return o.Type
}

func (o *FieldsFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Four struct {
	Type      DocumentCreateDocumentTemporaryFieldsDocumentsRequestType `json:"type"`
	FieldMeta *FieldsFieldMeta                                          `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Four) GetType() DocumentCreateDocumentTemporaryFieldsDocumentsRequestType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsDocumentsRequestType("")
	}
	return o.Type
}

func (o *Four) GetFieldMeta() *FieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Four) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Four) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Four) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Four) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Four) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type DocumentCreateDocumentTemporaryFieldsType string

const (
	DocumentCreateDocumentTemporaryFieldsTypeInitials DocumentCreateDocumentTemporaryFieldsType = "INITIALS"
)

func (e DocumentCreateDocumentTemporaryFieldsType) ToPointer() *DocumentCreateDocumentTemporaryFieldsType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = DocumentCreateDocumentTemporaryFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsType: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldsDocumentsType string

const (
	DocumentCreateDocumentTemporaryFieldsDocumentsTypeInitials DocumentCreateDocumentTemporaryFieldsDocumentsType = "initials"
)

func (e DocumentCreateDocumentTemporaryFieldsDocumentsType) ToPointer() *DocumentCreateDocumentTemporaryFieldsDocumentsType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldsDocumentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = DocumentCreateDocumentTemporaryFieldsDocumentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldsDocumentsType: %v", v)
	}
}

type FieldMeta struct {
	Label       *string                                            `json:"label,omitempty"`
	Placeholder *string                                            `json:"placeholder,omitempty"`
	Required    *bool                                              `json:"required,omitempty"`
	ReadOnly    *bool                                              `json:"readOnly,omitempty"`
	Type        DocumentCreateDocumentTemporaryFieldsDocumentsType `json:"type"`
	FontSize    *float64                                           `json:"fontSize,omitempty"`
}

func (o *FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldMeta) GetType() DocumentCreateDocumentTemporaryFieldsDocumentsType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsDocumentsType("")
	}
	return o.Type
}

func (o *FieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Three struct {
	Type      DocumentCreateDocumentTemporaryFieldsType `json:"type"`
	FieldMeta *FieldMeta                                `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Three) GetType() DocumentCreateDocumentTemporaryFieldsType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldsType("")
	}
	return o.Type
}

func (o *Three) GetFieldMeta() *FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Three) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Three) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Three) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Three) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Three) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldsType string

const (
	FieldsTypeFreeSignature FieldsType = "FREE_SIGNATURE"
)

func (e FieldsType) ToPointer() *FieldsType {
	return &e
}
func (e *FieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldsType: %v", v)
	}
}

type Two struct {
	Type FieldsType `json:"type"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Two) GetType() FieldsType {
	if o == nil {
		return FieldsType("")
	}
	return o.Type
}

func (o *Two) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Two) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Two) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Two) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Two) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type Type string

const (
	TypeSignature Type = "SIGNATURE"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type One struct {
	Type Type `json:"type"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *One) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

func (o *One) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *One) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *One) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *One) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *One) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldsUnionType string

const (
	FieldsUnionTypeOne    FieldsUnionType = "1"
	FieldsUnionTypeTwo    FieldsUnionType = "2"
	FieldsUnionTypeThree  FieldsUnionType = "3"
	FieldsUnionTypeFour   FieldsUnionType = "4"
	FieldsUnionTypeFive   FieldsUnionType = "5"
	FieldsUnionTypeSix    FieldsUnionType = "6"
	FieldsUnionTypeSeven  FieldsUnionType = "7"
	FieldsUnionTypeEight  FieldsUnionType = "8"
	FieldsUnionTypeNine   FieldsUnionType = "9"
	FieldsUnionTypeTen    FieldsUnionType = "10"
	FieldsUnionTypeEleven FieldsUnionType = "11"
)

type Fields struct {
	One    *One    `queryParam:"inline"`
	Two    *Two    `queryParam:"inline"`
	Three  *Three  `queryParam:"inline"`
	Four   *Four   `queryParam:"inline"`
	Five   *Five   `queryParam:"inline"`
	Six    *Six    `queryParam:"inline"`
	Seven  *Seven  `queryParam:"inline"`
	Eight  *Eight  `queryParam:"inline"`
	Nine   *Nine   `queryParam:"inline"`
	Ten    *Ten    `queryParam:"inline"`
	Eleven *Eleven `queryParam:"inline"`

	Type FieldsUnionType
}

func CreateFieldsOne(one One) Fields {
	typ := FieldsUnionTypeOne

	return Fields{
		One:  &one,
		Type: typ,
	}
}

func CreateFieldsTwo(two Two) Fields {
	typ := FieldsUnionTypeTwo

	return Fields{
		Two:  &two,
		Type: typ,
	}
}

func CreateFieldsThree(three Three) Fields {
	typ := FieldsUnionTypeThree

	return Fields{
		Three: &three,
		Type:  typ,
	}
}

func CreateFieldsFour(four Four) Fields {
	typ := FieldsUnionTypeFour

	return Fields{
		Four: &four,
		Type: typ,
	}
}

func CreateFieldsFive(five Five) Fields {
	typ := FieldsUnionTypeFive

	return Fields{
		Five: &five,
		Type: typ,
	}
}

func CreateFieldsSix(six Six) Fields {
	typ := FieldsUnionTypeSix

	return Fields{
		Six:  &six,
		Type: typ,
	}
}

func CreateFieldsSeven(seven Seven) Fields {
	typ := FieldsUnionTypeSeven

	return Fields{
		Seven: &seven,
		Type:  typ,
	}
}

func CreateFieldsEight(eight Eight) Fields {
	typ := FieldsUnionTypeEight

	return Fields{
		Eight: &eight,
		Type:  typ,
	}
}

func CreateFieldsNine(nine Nine) Fields {
	typ := FieldsUnionTypeNine

	return Fields{
		Nine: &nine,
		Type: typ,
	}
}

func CreateFieldsTen(ten Ten) Fields {
	typ := FieldsUnionTypeTen

	return Fields{
		Ten:  &ten,
		Type: typ,
	}
}

func CreateFieldsEleven(eleven Eleven) Fields {
	typ := FieldsUnionTypeEleven

	return Fields{
		Eleven: &eleven,
		Type:   typ,
	}
}

func (u *Fields) UnmarshalJSON(data []byte) error {

	var one One = One{}
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = &one
		u.Type = FieldsUnionTypeOne
		return nil
	}

	var two Two = Two{}
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = &two
		u.Type = FieldsUnionTypeTwo
		return nil
	}

	var three Three = Three{}
	if err := utils.UnmarshalJSON(data, &three, "", true, true); err == nil {
		u.Three = &three
		u.Type = FieldsUnionTypeThree
		return nil
	}

	var four Four = Four{}
	if err := utils.UnmarshalJSON(data, &four, "", true, true); err == nil {
		u.Four = &four
		u.Type = FieldsUnionTypeFour
		return nil
	}

	var five Five = Five{}
	if err := utils.UnmarshalJSON(data, &five, "", true, true); err == nil {
		u.Five = &five
		u.Type = FieldsUnionTypeFive
		return nil
	}

	var six Six = Six{}
	if err := utils.UnmarshalJSON(data, &six, "", true, true); err == nil {
		u.Six = &six
		u.Type = FieldsUnionTypeSix
		return nil
	}

	var seven Seven = Seven{}
	if err := utils.UnmarshalJSON(data, &seven, "", true, true); err == nil {
		u.Seven = &seven
		u.Type = FieldsUnionTypeSeven
		return nil
	}

	var eight Eight = Eight{}
	if err := utils.UnmarshalJSON(data, &eight, "", true, true); err == nil {
		u.Eight = &eight
		u.Type = FieldsUnionTypeEight
		return nil
	}

	var nine Nine = Nine{}
	if err := utils.UnmarshalJSON(data, &nine, "", true, true); err == nil {
		u.Nine = &nine
		u.Type = FieldsUnionTypeNine
		return nil
	}

	var ten Ten = Ten{}
	if err := utils.UnmarshalJSON(data, &ten, "", true, true); err == nil {
		u.Ten = &ten
		u.Type = FieldsUnionTypeTen
		return nil
	}

	var eleven Eleven = Eleven{}
	if err := utils.UnmarshalJSON(data, &eleven, "", true, true); err == nil {
		u.Eleven = &eleven
		u.Type = FieldsUnionTypeEleven
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Fields", string(data))
}

func (u Fields) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	if u.Three != nil {
		return utils.MarshalJSON(u.Three, "", true)
	}

	if u.Four != nil {
		return utils.MarshalJSON(u.Four, "", true)
	}

	if u.Five != nil {
		return utils.MarshalJSON(u.Five, "", true)
	}

	if u.Six != nil {
		return utils.MarshalJSON(u.Six, "", true)
	}

	if u.Seven != nil {
		return utils.MarshalJSON(u.Seven, "", true)
	}

	if u.Eight != nil {
		return utils.MarshalJSON(u.Eight, "", true)
	}

	if u.Nine != nil {
		return utils.MarshalJSON(u.Nine, "", true)
	}

	if u.Ten != nil {
		return utils.MarshalJSON(u.Ten, "", true)
	}

	if u.Eleven != nil {
		return utils.MarshalJSON(u.Eleven, "", true)
	}

	return nil, errors.New("could not marshal union type Fields: all fields are null")
}

type Recipients struct {
	Email        string   `json:"email"`
	Name         string   `json:"name"`
	Role         Role     `json:"role"`
	SigningOrder *float64 `json:"signingOrder,omitempty"`
	// The type of authentication required for the recipient to access the document.
	AccessAuth *AccessAuth `json:"accessAuth,omitempty"`
	// The type of authentication required for the recipient to sign the document.
	ActionAuth *ActionAuth `json:"actionAuth,omitempty"`
	Fields     []Fields    `json:"fields,omitempty"`
}

func (o *Recipients) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *Recipients) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Recipients) GetRole() Role {
	if o == nil {
		return Role("")
	}
	return o.Role
}

func (o *Recipients) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *Recipients) GetAccessAuth() *AccessAuth {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *Recipients) GetActionAuth() *ActionAuth {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

func (o *Recipients) GetFields() []Fields {
	if o == nil {
		return nil
	}
	return o.Fields
}

// DateFormat - The date format to use for date fields and signing the document.
type DateFormat string

const (
	DateFormatYyyyMmDdHhMmA         DateFormat = "yyyy-MM-dd hh:mm a"
	DateFormatYyyyMmDd              DateFormat = "yyyy-MM-dd"
	DateFormatDdMmYyyyHhMmA         DateFormat = "dd/MM/yyyy hh:mm a"
	DateFormatMmDdYyyyHhMmA         DateFormat = "MM/dd/yyyy hh:mm a"
	DateFormatYyyyMmDdHhMm          DateFormat = "yyyy-MM-dd HH:mm"
	DateFormatYyMmDdHhMmA           DateFormat = "yy-MM-dd hh:mm a"
	DateFormatYyyyMmDdHhMmSs        DateFormat = "yyyy-MM-dd HH:mm:ss"
	DateFormatMmmmDdYyyyHhMmA       DateFormat = "MMMM dd, yyyy hh:mm a"
	DateFormatEeeeMmmmDdYyyyHhMmA   DateFormat = "EEEE, MMMM dd, yyyy hh:mm a"
	DateFormatYyyyMmDdTHhMmSsSssxxx DateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSXXX"
)

func (e DateFormat) ToPointer() *DateFormat {
	return &e
}
func (e *DateFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "yyyy-MM-dd hh:mm a":
		fallthrough
	case "yyyy-MM-dd":
		fallthrough
	case "dd/MM/yyyy hh:mm a":
		fallthrough
	case "MM/dd/yyyy hh:mm a":
		fallthrough
	case "yyyy-MM-dd HH:mm":
		fallthrough
	case "yy-MM-dd hh:mm a":
		fallthrough
	case "yyyy-MM-dd HH:mm:ss":
		fallthrough
	case "MMMM dd, yyyy hh:mm a":
		fallthrough
	case "EEEE, MMMM dd, yyyy hh:mm a":
		fallthrough
	case "yyyy-MM-dd'T'HH:mm:ss.SSSXXX":
		*e = DateFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DateFormat: %v", v)
	}
}

// DistributionMethod - The distribution method to use when sending the document to the recipients.
type DistributionMethod string

const (
	DistributionMethodEmail DistributionMethod = "EMAIL"
	DistributionMethodNone  DistributionMethod = "NONE"
)

func (e DistributionMethod) ToPointer() *DistributionMethod {
	return &e
}
func (e *DistributionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = DistributionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionMethod: %v", v)
	}
}

type SigningOrder string

const (
	SigningOrderParallel   SigningOrder = "PARALLEL"
	SigningOrderSequential SigningOrder = "SEQUENTIAL"
)

func (e SigningOrder) ToPointer() *SigningOrder {
	return &e
}
func (e *SigningOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARALLEL":
		fallthrough
	case "SEQUENTIAL":
		*e = SigningOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SigningOrder: %v", v)
	}
}

// Language - The language to use for email communications with recipients.
type Language string

const (
	LanguageDe Language = "de"
	LanguageEn Language = "en"
	LanguageFr Language = "fr"
	LanguageEs Language = "es"
)

func (e Language) ToPointer() *Language {
	return &e
}
func (e *Language) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "de":
		fallthrough
	case "en":
		fallthrough
	case "fr":
		fallthrough
	case "es":
		*e = Language(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Language: %v", v)
	}
}

type EmailSettings struct {
	// Whether to send an email to all recipients that the document is ready for them to sign.
	RecipientSigningRequest *bool `default:"true" json:"recipientSigningRequest"`
	// Whether to send an email to the recipient who was removed from a pending document.
	RecipientRemoved *bool `default:"true" json:"recipientRemoved"`
	// Whether to send an email to the document owner when a recipient has signed the document.
	RecipientSigned *bool `default:"true" json:"recipientSigned"`
	// Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
	DocumentPending *bool `default:"true" json:"documentPending"`
	// Whether to send an email to all recipients when the document is complete.
	DocumentCompleted *bool `default:"true" json:"documentCompleted"`
	// Whether to send an email to all recipients if a pending document has been deleted.
	DocumentDeleted *bool `default:"true" json:"documentDeleted"`
	// Whether to send an email to the document owner when the document is complete.
	OwnerDocumentCompleted *bool `default:"true" json:"ownerDocumentCompleted"`
}

func (e EmailSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EmailSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EmailSettings) GetRecipientSigningRequest() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigningRequest
}

func (o *EmailSettings) GetRecipientRemoved() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientRemoved
}

func (o *EmailSettings) GetRecipientSigned() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigned
}

func (o *EmailSettings) GetDocumentPending() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentPending
}

func (o *EmailSettings) GetDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentCompleted
}

func (o *EmailSettings) GetDocumentDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentDeleted
}

func (o *EmailSettings) GetOwnerDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.OwnerDocumentCompleted
}

type Meta struct {
	// The subject of the email that will be sent to the recipients.
	Subject *string `json:"subject,omitempty"`
	// The message of the email that will be sent to the recipients.
	Message *string `json:"message,omitempty"`
	// The timezone to use for date fields and signing the document. Example Etc/UTC, Australia/Melbourne
	Timezone *string `json:"timezone,omitempty"`
	// The date format to use for date fields and signing the document.
	DateFormat *DateFormat `json:"dateFormat,omitempty"`
	// The distribution method to use when sending the document to the recipients.
	DistributionMethod *DistributionMethod `json:"distributionMethod,omitempty"`
	SigningOrder       *SigningOrder       `json:"signingOrder,omitempty"`
	// The URL to which the recipient should be redirected after signing the document.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The language to use for email communications with recipients.
	Language *Language `json:"language,omitempty"`
	// Whether to allow recipients to sign using a typed signature.
	TypedSignatureEnabled *bool          `json:"typedSignatureEnabled,omitempty"`
	EmailSettings         *EmailSettings `json:"emailSettings,omitempty"`
}

func (o *Meta) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *Meta) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *Meta) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *Meta) GetDateFormat() *DateFormat {
	if o == nil {
		return nil
	}
	return o.DateFormat
}

func (o *Meta) GetDistributionMethod() *DistributionMethod {
	if o == nil {
		return nil
	}
	return o.DistributionMethod
}

func (o *Meta) GetSigningOrder() *SigningOrder {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *Meta) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *Meta) GetLanguage() *Language {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *Meta) GetTypedSignatureEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.TypedSignatureEnabled
}

func (o *Meta) GetEmailSettings() *EmailSettings {
	if o == nil {
		return nil
	}
	return o.EmailSettings
}

type DocumentCreateDocumentTemporaryRequestBody struct {
	// The title of the document.
	Title string `json:"title"`
	// The external ID of the document.
	ExternalID *string `json:"externalId,omitempty"`
	// The visibility of the document.
	Visibility *Visibility `json:"visibility,omitempty"`
	// The type of authentication required for the recipient to access the document.
	GlobalAccessAuth *GlobalAccessAuth `json:"globalAccessAuth,omitempty"`
	// The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
	GlobalActionAuth *GlobalActionAuth     `json:"globalActionAuth,omitempty"`
	FormValues       map[string]FormValues `json:"formValues,omitempty"`
	Recipients       []Recipients          `json:"recipients,omitempty"`
	Meta             *Meta                 `json:"meta,omitempty"`
}

func (o *DocumentCreateDocumentTemporaryRequestBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *DocumentCreateDocumentTemporaryRequestBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *DocumentCreateDocumentTemporaryRequestBody) GetVisibility() *Visibility {
	if o == nil {
		return nil
	}
	return o.Visibility
}

func (o *DocumentCreateDocumentTemporaryRequestBody) GetGlobalAccessAuth() *GlobalAccessAuth {
	if o == nil {
		return nil
	}
	return o.GlobalAccessAuth
}

func (o *DocumentCreateDocumentTemporaryRequestBody) GetGlobalActionAuth() *GlobalActionAuth {
	if o == nil {
		return nil
	}
	return o.GlobalActionAuth
}

func (o *DocumentCreateDocumentTemporaryRequestBody) GetFormValues() map[string]FormValues {
	if o == nil {
		return nil
	}
	return o.FormValues
}

func (o *DocumentCreateDocumentTemporaryRequestBody) GetRecipients() []Recipients {
	if o == nil {
		return nil
	}
	return o.Recipients
}

func (o *DocumentCreateDocumentTemporaryRequestBody) GetMeta() *Meta {
	if o == nil {
		return nil
	}
	return o.Meta
}

type DocumentCreateDocumentTemporaryVisibility string

const (
	DocumentCreateDocumentTemporaryVisibilityEveryone        DocumentCreateDocumentTemporaryVisibility = "EVERYONE"
	DocumentCreateDocumentTemporaryVisibilityManagerAndAbove DocumentCreateDocumentTemporaryVisibility = "MANAGER_AND_ABOVE"
	DocumentCreateDocumentTemporaryVisibilityAdmin           DocumentCreateDocumentTemporaryVisibility = "ADMIN"
)

func (e DocumentCreateDocumentTemporaryVisibility) ToPointer() *DocumentCreateDocumentTemporaryVisibility {
	return &e
}
func (e *DocumentCreateDocumentTemporaryVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = DocumentCreateDocumentTemporaryVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryVisibility: %v", v)
	}
}

type DocumentCreateDocumentTemporaryStatus string

const (
	DocumentCreateDocumentTemporaryStatusDraft     DocumentCreateDocumentTemporaryStatus = "DRAFT"
	DocumentCreateDocumentTemporaryStatusPending   DocumentCreateDocumentTemporaryStatus = "PENDING"
	DocumentCreateDocumentTemporaryStatusCompleted DocumentCreateDocumentTemporaryStatus = "COMPLETED"
)

func (e DocumentCreateDocumentTemporaryStatus) ToPointer() *DocumentCreateDocumentTemporaryStatus {
	return &e
}
func (e *DocumentCreateDocumentTemporaryStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "PENDING":
		fallthrough
	case "COMPLETED":
		*e = DocumentCreateDocumentTemporaryStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryStatus: %v", v)
	}
}

type DocumentCreateDocumentTemporarySource string

const (
	DocumentCreateDocumentTemporarySourceDocument           DocumentCreateDocumentTemporarySource = "DOCUMENT"
	DocumentCreateDocumentTemporarySourceTemplate           DocumentCreateDocumentTemporarySource = "TEMPLATE"
	DocumentCreateDocumentTemporarySourceTemplateDirectLink DocumentCreateDocumentTemporarySource = "TEMPLATE_DIRECT_LINK"
)

func (e DocumentCreateDocumentTemporarySource) ToPointer() *DocumentCreateDocumentTemporarySource {
	return &e
}
func (e *DocumentCreateDocumentTemporarySource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		fallthrough
	case "TEMPLATE_DIRECT_LINK":
		*e = DocumentCreateDocumentTemporarySource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporarySource: %v", v)
	}
}

// DocumentCreateDocumentTemporaryGlobalAccessAuth - The type of authentication required for the recipient to access the document.
type DocumentCreateDocumentTemporaryGlobalAccessAuth string

const (
	DocumentCreateDocumentTemporaryGlobalAccessAuthAccount DocumentCreateDocumentTemporaryGlobalAccessAuth = "ACCOUNT"
)

func (e DocumentCreateDocumentTemporaryGlobalAccessAuth) ToPointer() *DocumentCreateDocumentTemporaryGlobalAccessAuth {
	return &e
}
func (e *DocumentCreateDocumentTemporaryGlobalAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = DocumentCreateDocumentTemporaryGlobalAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryGlobalAccessAuth: %v", v)
	}
}

// DocumentCreateDocumentTemporaryGlobalActionAuth - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type DocumentCreateDocumentTemporaryGlobalActionAuth string

const (
	DocumentCreateDocumentTemporaryGlobalActionAuthAccount       DocumentCreateDocumentTemporaryGlobalActionAuth = "ACCOUNT"
	DocumentCreateDocumentTemporaryGlobalActionAuthPasskey       DocumentCreateDocumentTemporaryGlobalActionAuth = "PASSKEY"
	DocumentCreateDocumentTemporaryGlobalActionAuthTwoFactorAuth DocumentCreateDocumentTemporaryGlobalActionAuth = "TWO_FACTOR_AUTH"
)

func (e DocumentCreateDocumentTemporaryGlobalActionAuth) ToPointer() *DocumentCreateDocumentTemporaryGlobalActionAuth {
	return &e
}
func (e *DocumentCreateDocumentTemporaryGlobalActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = DocumentCreateDocumentTemporaryGlobalActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryGlobalActionAuth: %v", v)
	}
}

type DocumentCreateDocumentTemporaryAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	GlobalAccessAuth *DocumentCreateDocumentTemporaryGlobalAccessAuth `json:"globalAccessAuth"`
	// The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
	GlobalActionAuth *DocumentCreateDocumentTemporaryGlobalActionAuth `json:"globalActionAuth"`
}

func (o *DocumentCreateDocumentTemporaryAuthOptions) GetGlobalAccessAuth() *DocumentCreateDocumentTemporaryGlobalAccessAuth {
	if o == nil {
		return nil
	}
	return o.GlobalAccessAuth
}

func (o *DocumentCreateDocumentTemporaryAuthOptions) GetGlobalActionAuth() *DocumentCreateDocumentTemporaryGlobalActionAuth {
	if o == nil {
		return nil
	}
	return o.GlobalActionAuth
}

type DocumentCreateDocumentTemporaryFormValuesType string

const (
	DocumentCreateDocumentTemporaryFormValuesTypeStr     DocumentCreateDocumentTemporaryFormValuesType = "str"
	DocumentCreateDocumentTemporaryFormValuesTypeBoolean DocumentCreateDocumentTemporaryFormValuesType = "boolean"
	DocumentCreateDocumentTemporaryFormValuesTypeNumber  DocumentCreateDocumentTemporaryFormValuesType = "number"
)

type DocumentCreateDocumentTemporaryFormValues struct {
	Str     *string  `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`
	Number  *float64 `queryParam:"inline"`

	Type DocumentCreateDocumentTemporaryFormValuesType
}

func CreateDocumentCreateDocumentTemporaryFormValuesStr(str string) DocumentCreateDocumentTemporaryFormValues {
	typ := DocumentCreateDocumentTemporaryFormValuesTypeStr

	return DocumentCreateDocumentTemporaryFormValues{
		Str:  &str,
		Type: typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFormValuesBoolean(boolean bool) DocumentCreateDocumentTemporaryFormValues {
	typ := DocumentCreateDocumentTemporaryFormValuesTypeBoolean

	return DocumentCreateDocumentTemporaryFormValues{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFormValuesNumber(number float64) DocumentCreateDocumentTemporaryFormValues {
	typ := DocumentCreateDocumentTemporaryFormValuesTypeNumber

	return DocumentCreateDocumentTemporaryFormValues{
		Number: &number,
		Type:   typ,
	}
}

func (u *DocumentCreateDocumentTemporaryFormValues) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = DocumentCreateDocumentTemporaryFormValuesTypeStr
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = DocumentCreateDocumentTemporaryFormValuesTypeBoolean
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = DocumentCreateDocumentTemporaryFormValuesTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DocumentCreateDocumentTemporaryFormValues", string(data))
}

func (u DocumentCreateDocumentTemporaryFormValues) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type DocumentCreateDocumentTemporaryFormValues: all fields are null")
}

type DocumentCreateDocumentTemporaryType string

const (
	DocumentCreateDocumentTemporaryTypeS3Path  DocumentCreateDocumentTemporaryType = "S3_PATH"
	DocumentCreateDocumentTemporaryTypeBytes   DocumentCreateDocumentTemporaryType = "BYTES"
	DocumentCreateDocumentTemporaryTypeBytes64 DocumentCreateDocumentTemporaryType = "BYTES_64"
)

func (e DocumentCreateDocumentTemporaryType) ToPointer() *DocumentCreateDocumentTemporaryType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3_PATH":
		fallthrough
	case "BYTES":
		fallthrough
	case "BYTES_64":
		*e = DocumentCreateDocumentTemporaryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryType: %v", v)
	}
}

type DocumentCreateDocumentTemporaryDocumentData struct {
	Type        DocumentCreateDocumentTemporaryType `json:"type"`
	ID          string                              `json:"id"`
	Data        string                              `json:"data"`
	InitialData string                              `json:"initialData"`
}

func (o *DocumentCreateDocumentTemporaryDocumentData) GetType() DocumentCreateDocumentTemporaryType {
	if o == nil {
		return DocumentCreateDocumentTemporaryType("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryDocumentData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DocumentCreateDocumentTemporaryDocumentData) GetData() string {
	if o == nil {
		return ""
	}
	return o.Data
}

func (o *DocumentCreateDocumentTemporaryDocumentData) GetInitialData() string {
	if o == nil {
		return ""
	}
	return o.InitialData
}

type DocumentCreateDocumentTemporarySigningOrder string

const (
	DocumentCreateDocumentTemporarySigningOrderParallel   DocumentCreateDocumentTemporarySigningOrder = "PARALLEL"
	DocumentCreateDocumentTemporarySigningOrderSequential DocumentCreateDocumentTemporarySigningOrder = "SEQUENTIAL"
)

func (e DocumentCreateDocumentTemporarySigningOrder) ToPointer() *DocumentCreateDocumentTemporarySigningOrder {
	return &e
}
func (e *DocumentCreateDocumentTemporarySigningOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARALLEL":
		fallthrough
	case "SEQUENTIAL":
		*e = DocumentCreateDocumentTemporarySigningOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporarySigningOrder: %v", v)
	}
}

type DocumentCreateDocumentTemporaryDistributionMethod string

const (
	DocumentCreateDocumentTemporaryDistributionMethodEmail DocumentCreateDocumentTemporaryDistributionMethod = "EMAIL"
	DocumentCreateDocumentTemporaryDistributionMethodNone  DocumentCreateDocumentTemporaryDistributionMethod = "NONE"
)

func (e DocumentCreateDocumentTemporaryDistributionMethod) ToPointer() *DocumentCreateDocumentTemporaryDistributionMethod {
	return &e
}
func (e *DocumentCreateDocumentTemporaryDistributionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = DocumentCreateDocumentTemporaryDistributionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryDistributionMethod: %v", v)
	}
}

type DocumentCreateDocumentTemporaryEmailSettings struct {
	// Whether to send an email to all recipients that the document is ready for them to sign.
	RecipientSigningRequest *bool `default:"true" json:"recipientSigningRequest"`
	// Whether to send an email to the recipient who was removed from a pending document.
	RecipientRemoved *bool `default:"true" json:"recipientRemoved"`
	// Whether to send an email to the document owner when a recipient has signed the document.
	RecipientSigned *bool `default:"true" json:"recipientSigned"`
	// Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
	DocumentPending *bool `default:"true" json:"documentPending"`
	// Whether to send an email to all recipients when the document is complete.
	DocumentCompleted *bool `default:"true" json:"documentCompleted"`
	// Whether to send an email to all recipients if a pending document has been deleted.
	DocumentDeleted *bool `default:"true" json:"documentDeleted"`
	// Whether to send an email to the document owner when the document is complete.
	OwnerDocumentCompleted *bool `default:"true" json:"ownerDocumentCompleted"`
}

func (d DocumentCreateDocumentTemporaryEmailSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryEmailSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DocumentCreateDocumentTemporaryEmailSettings) GetRecipientSigningRequest() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigningRequest
}

func (o *DocumentCreateDocumentTemporaryEmailSettings) GetRecipientRemoved() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientRemoved
}

func (o *DocumentCreateDocumentTemporaryEmailSettings) GetRecipientSigned() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigned
}

func (o *DocumentCreateDocumentTemporaryEmailSettings) GetDocumentPending() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentPending
}

func (o *DocumentCreateDocumentTemporaryEmailSettings) GetDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentCompleted
}

func (o *DocumentCreateDocumentTemporaryEmailSettings) GetDocumentDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentDeleted
}

func (o *DocumentCreateDocumentTemporaryEmailSettings) GetOwnerDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.OwnerDocumentCompleted
}

type DocumentCreateDocumentTemporaryDocumentMeta struct {
	SigningOrder          DocumentCreateDocumentTemporarySigningOrder       `json:"signingOrder"`
	DistributionMethod    DocumentCreateDocumentTemporaryDistributionMethod `json:"distributionMethod"`
	ID                    string                                            `json:"id"`
	Subject               *string                                           `json:"subject"`
	Message               *string                                           `json:"message"`
	Timezone              *string                                           `json:"timezone"`
	Password              *string                                           `json:"password"`
	DateFormat            *string                                           `json:"dateFormat"`
	DocumentID            int64                                             `json:"documentId"`
	RedirectURL           *string                                           `json:"redirectUrl"`
	TypedSignatureEnabled bool                                              `json:"typedSignatureEnabled"`
	Language              string                                            `json:"language"`
	EmailSettings         *DocumentCreateDocumentTemporaryEmailSettings     `json:"emailSettings"`
}

func (o *DocumentCreateDocumentTemporaryDocumentMeta) GetSigningOrder() DocumentCreateDocumentTemporarySigningOrder {
	if o == nil {
		return DocumentCreateDocumentTemporarySigningOrder("")
	}
	return o.SigningOrder
}

func (o *DocumentCreateDocumentTemporaryDocumentMeta) GetDistributionMethod() DocumentCreateDocumentTemporaryDistributionMethod {
	if o == nil {
		return DocumentCreateDocumentTemporaryDistributionMethod("")
	}
	return o.DistributionMethod
}

func (o *DocumentCreateDocumentTemporaryDocumentMeta) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DocumentCreateDocumentTemporaryDocumentMeta) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *DocumentCreateDocumentTemporaryDocumentMeta) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *DocumentCreateDocumentTemporaryDocumentMeta) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *DocumentCreateDocumentTemporaryDocumentMeta) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *DocumentCreateDocumentTemporaryDocumentMeta) GetDateFormat() *string {
	if o == nil {
		return nil
	}
	return o.DateFormat
}

func (o *DocumentCreateDocumentTemporaryDocumentMeta) GetDocumentID() int64 {
	if o == nil {
		return 0
	}
	return o.DocumentID
}

func (o *DocumentCreateDocumentTemporaryDocumentMeta) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *DocumentCreateDocumentTemporaryDocumentMeta) GetTypedSignatureEnabled() bool {
	if o == nil {
		return false
	}
	return o.TypedSignatureEnabled
}

func (o *DocumentCreateDocumentTemporaryDocumentMeta) GetLanguage() string {
	if o == nil {
		return ""
	}
	return o.Language
}

func (o *DocumentCreateDocumentTemporaryDocumentMeta) GetEmailSettings() *DocumentCreateDocumentTemporaryEmailSettings {
	if o == nil {
		return nil
	}
	return o.EmailSettings
}

type DocumentCreateDocumentTemporaryRole string

const (
	DocumentCreateDocumentTemporaryRoleCc       DocumentCreateDocumentTemporaryRole = "CC"
	DocumentCreateDocumentTemporaryRoleSigner   DocumentCreateDocumentTemporaryRole = "SIGNER"
	DocumentCreateDocumentTemporaryRoleViewer   DocumentCreateDocumentTemporaryRole = "VIEWER"
	DocumentCreateDocumentTemporaryRoleApprover DocumentCreateDocumentTemporaryRole = "APPROVER"
)

func (e DocumentCreateDocumentTemporaryRole) ToPointer() *DocumentCreateDocumentTemporaryRole {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		*e = DocumentCreateDocumentTemporaryRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRole: %v", v)
	}
}

type DocumentCreateDocumentTemporaryReadStatus string

const (
	DocumentCreateDocumentTemporaryReadStatusNotOpened DocumentCreateDocumentTemporaryReadStatus = "NOT_OPENED"
	DocumentCreateDocumentTemporaryReadStatusOpened    DocumentCreateDocumentTemporaryReadStatus = "OPENED"
)

func (e DocumentCreateDocumentTemporaryReadStatus) ToPointer() *DocumentCreateDocumentTemporaryReadStatus {
	return &e
}
func (e *DocumentCreateDocumentTemporaryReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = DocumentCreateDocumentTemporaryReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryReadStatus: %v", v)
	}
}

type DocumentCreateDocumentTemporarySigningStatus string

const (
	DocumentCreateDocumentTemporarySigningStatusNotSigned DocumentCreateDocumentTemporarySigningStatus = "NOT_SIGNED"
	DocumentCreateDocumentTemporarySigningStatusSigned    DocumentCreateDocumentTemporarySigningStatus = "SIGNED"
	DocumentCreateDocumentTemporarySigningStatusRejected  DocumentCreateDocumentTemporarySigningStatus = "REJECTED"
)

func (e DocumentCreateDocumentTemporarySigningStatus) ToPointer() *DocumentCreateDocumentTemporarySigningStatus {
	return &e
}
func (e *DocumentCreateDocumentTemporarySigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = DocumentCreateDocumentTemporarySigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporarySigningStatus: %v", v)
	}
}

type DocumentCreateDocumentTemporarySendStatus string

const (
	DocumentCreateDocumentTemporarySendStatusNotSent DocumentCreateDocumentTemporarySendStatus = "NOT_SENT"
	DocumentCreateDocumentTemporarySendStatusSent    DocumentCreateDocumentTemporarySendStatus = "SENT"
)

func (e DocumentCreateDocumentTemporarySendStatus) ToPointer() *DocumentCreateDocumentTemporarySendStatus {
	return &e
}
func (e *DocumentCreateDocumentTemporarySendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = DocumentCreateDocumentTemporarySendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporarySendStatus: %v", v)
	}
}

// DocumentCreateDocumentTemporaryAccessAuth - The type of authentication required for the recipient to access the document.
type DocumentCreateDocumentTemporaryAccessAuth string

const (
	DocumentCreateDocumentTemporaryAccessAuthAccount DocumentCreateDocumentTemporaryAccessAuth = "ACCOUNT"
)

func (e DocumentCreateDocumentTemporaryAccessAuth) ToPointer() *DocumentCreateDocumentTemporaryAccessAuth {
	return &e
}
func (e *DocumentCreateDocumentTemporaryAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = DocumentCreateDocumentTemporaryAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryAccessAuth: %v", v)
	}
}

// DocumentCreateDocumentTemporaryActionAuth - The type of authentication required for the recipient to sign the document.
type DocumentCreateDocumentTemporaryActionAuth string

const (
	DocumentCreateDocumentTemporaryActionAuthAccount       DocumentCreateDocumentTemporaryActionAuth = "ACCOUNT"
	DocumentCreateDocumentTemporaryActionAuthPasskey       DocumentCreateDocumentTemporaryActionAuth = "PASSKEY"
	DocumentCreateDocumentTemporaryActionAuthTwoFactorAuth DocumentCreateDocumentTemporaryActionAuth = "TWO_FACTOR_AUTH"
	DocumentCreateDocumentTemporaryActionAuthExplicitNone  DocumentCreateDocumentTemporaryActionAuth = "EXPLICIT_NONE"
)

func (e DocumentCreateDocumentTemporaryActionAuth) ToPointer() *DocumentCreateDocumentTemporaryActionAuth {
	return &e
}
func (e *DocumentCreateDocumentTemporaryActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "EXPLICIT_NONE":
		*e = DocumentCreateDocumentTemporaryActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryActionAuth: %v", v)
	}
}

type DocumentCreateDocumentTemporaryDocumentsAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	AccessAuth *DocumentCreateDocumentTemporaryAccessAuth `json:"accessAuth"`
	// The type of authentication required for the recipient to sign the document.
	ActionAuth *DocumentCreateDocumentTemporaryActionAuth `json:"actionAuth"`
}

func (o *DocumentCreateDocumentTemporaryDocumentsAuthOptions) GetAccessAuth() *DocumentCreateDocumentTemporaryAccessAuth {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *DocumentCreateDocumentTemporaryDocumentsAuthOptions) GetActionAuth() *DocumentCreateDocumentTemporaryActionAuth {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

type DocumentCreateDocumentTemporaryRecipients struct {
	Role              DocumentCreateDocumentTemporaryRole                  `json:"role"`
	ReadStatus        DocumentCreateDocumentTemporaryReadStatus            `json:"readStatus"`
	SigningStatus     DocumentCreateDocumentTemporarySigningStatus         `json:"signingStatus"`
	SendStatus        DocumentCreateDocumentTemporarySendStatus            `json:"sendStatus"`
	ID                int64                                                `json:"id"`
	DocumentID        *int64                                               `json:"documentId"`
	TemplateID        *int64                                               `json:"templateId"`
	Email             string                                               `json:"email"`
	Name              string                                               `json:"name"`
	Token             string                                               `json:"token"`
	DocumentDeletedAt *string                                              `json:"documentDeletedAt"`
	Expired           *string                                              `json:"expired"`
	SignedAt          *string                                              `json:"signedAt"`
	AuthOptions       *DocumentCreateDocumentTemporaryDocumentsAuthOptions `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
}

func (o *DocumentCreateDocumentTemporaryRecipients) GetRole() DocumentCreateDocumentTemporaryRole {
	if o == nil {
		return DocumentCreateDocumentTemporaryRole("")
	}
	return o.Role
}

func (o *DocumentCreateDocumentTemporaryRecipients) GetReadStatus() DocumentCreateDocumentTemporaryReadStatus {
	if o == nil {
		return DocumentCreateDocumentTemporaryReadStatus("")
	}
	return o.ReadStatus
}

func (o *DocumentCreateDocumentTemporaryRecipients) GetSigningStatus() DocumentCreateDocumentTemporarySigningStatus {
	if o == nil {
		return DocumentCreateDocumentTemporarySigningStatus("")
	}
	return o.SigningStatus
}

func (o *DocumentCreateDocumentTemporaryRecipients) GetSendStatus() DocumentCreateDocumentTemporarySendStatus {
	if o == nil {
		return DocumentCreateDocumentTemporarySendStatus("")
	}
	return o.SendStatus
}

func (o *DocumentCreateDocumentTemporaryRecipients) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *DocumentCreateDocumentTemporaryRecipients) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *DocumentCreateDocumentTemporaryRecipients) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *DocumentCreateDocumentTemporaryRecipients) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *DocumentCreateDocumentTemporaryRecipients) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DocumentCreateDocumentTemporaryRecipients) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *DocumentCreateDocumentTemporaryRecipients) GetDocumentDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DocumentDeletedAt
}

func (o *DocumentCreateDocumentTemporaryRecipients) GetExpired() *string {
	if o == nil {
		return nil
	}
	return o.Expired
}

func (o *DocumentCreateDocumentTemporaryRecipients) GetSignedAt() *string {
	if o == nil {
		return nil
	}
	return o.SignedAt
}

func (o *DocumentCreateDocumentTemporaryRecipients) GetAuthOptions() *DocumentCreateDocumentTemporaryDocumentsAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *DocumentCreateDocumentTemporaryRecipients) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *DocumentCreateDocumentTemporaryRecipients) GetRejectionReason() *string {
	if o == nil {
		return nil
	}
	return o.RejectionReason
}

type DocumentCreateDocumentTemporaryDocumentsType string

const (
	DocumentCreateDocumentTemporaryDocumentsTypeSignature     DocumentCreateDocumentTemporaryDocumentsType = "SIGNATURE"
	DocumentCreateDocumentTemporaryDocumentsTypeFreeSignature DocumentCreateDocumentTemporaryDocumentsType = "FREE_SIGNATURE"
	DocumentCreateDocumentTemporaryDocumentsTypeInitials      DocumentCreateDocumentTemporaryDocumentsType = "INITIALS"
	DocumentCreateDocumentTemporaryDocumentsTypeName          DocumentCreateDocumentTemporaryDocumentsType = "NAME"
	DocumentCreateDocumentTemporaryDocumentsTypeEmail         DocumentCreateDocumentTemporaryDocumentsType = "EMAIL"
	DocumentCreateDocumentTemporaryDocumentsTypeDate          DocumentCreateDocumentTemporaryDocumentsType = "DATE"
	DocumentCreateDocumentTemporaryDocumentsTypeText          DocumentCreateDocumentTemporaryDocumentsType = "TEXT"
	DocumentCreateDocumentTemporaryDocumentsTypeNumber        DocumentCreateDocumentTemporaryDocumentsType = "NUMBER"
	DocumentCreateDocumentTemporaryDocumentsTypeRadio         DocumentCreateDocumentTemporaryDocumentsType = "RADIO"
	DocumentCreateDocumentTemporaryDocumentsTypeCheckbox      DocumentCreateDocumentTemporaryDocumentsType = "CHECKBOX"
	DocumentCreateDocumentTemporaryDocumentsTypeDropdown      DocumentCreateDocumentTemporaryDocumentsType = "DROPDOWN"
)

func (e DocumentCreateDocumentTemporaryDocumentsType) ToPointer() *DocumentCreateDocumentTemporaryDocumentsType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryDocumentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = DocumentCreateDocumentTemporaryDocumentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryDocumentsType: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFields9Type string

const (
	DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFields9TypeDropdown DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFields9Type = "dropdown"
)

func (e DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFields9Type) ToPointer() *DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFields9Type {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFields9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFields9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFields9Type: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldMetaDocumentsResponseValues struct {
	Value string `json:"value"`
}

func (o *DocumentCreateDocumentTemporaryFieldMetaDocumentsResponseValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type DocumentCreateDocumentTemporaryFieldMeta9 struct {
	Label        *string                                                                                                    `json:"label,omitempty"`
	Placeholder  *string                                                                                                    `json:"placeholder,omitempty"`
	Required     *bool                                                                                                      `json:"required,omitempty"`
	ReadOnly     *bool                                                                                                      `json:"readOnly,omitempty"`
	Type         DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFields9Type `json:"type"`
	Values       []DocumentCreateDocumentTemporaryFieldMetaDocumentsResponseValues                                          `json:"values,omitempty"`
	DefaultValue *string                                                                                                    `json:"defaultValue,omitempty"`
}

func (o *DocumentCreateDocumentTemporaryFieldMeta9) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentCreateDocumentTemporaryFieldMeta9) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentCreateDocumentTemporaryFieldMeta9) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentCreateDocumentTemporaryFieldMeta9) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentCreateDocumentTemporaryFieldMeta9) GetType() DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFields9Type {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFields9Type("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryFieldMeta9) GetValues() []DocumentCreateDocumentTemporaryFieldMetaDocumentsResponseValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *DocumentCreateDocumentTemporaryFieldMeta9) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFieldsType string

const (
	DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFieldsTypeCheckbox DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFieldsType = "checkbox"
)

func (e DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFieldsType) ToPointer() *DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFieldsType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFieldsType: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldMetaDocumentsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *DocumentCreateDocumentTemporaryFieldMetaDocumentsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *DocumentCreateDocumentTemporaryFieldMetaDocumentsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *DocumentCreateDocumentTemporaryFieldMetaDocumentsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type DocumentCreateDocumentTemporaryFieldMeta8 struct {
	Label            *string                                                                                                   `json:"label,omitempty"`
	Placeholder      *string                                                                                                   `json:"placeholder,omitempty"`
	Required         *bool                                                                                                     `json:"required,omitempty"`
	ReadOnly         *bool                                                                                                     `json:"readOnly,omitempty"`
	Type             DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFieldsType `json:"type"`
	Values           []DocumentCreateDocumentTemporaryFieldMetaDocumentsValues                                                 `json:"values,omitempty"`
	ValidationRule   *string                                                                                                   `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                                                  `json:"validationLength,omitempty"`
}

func (o *DocumentCreateDocumentTemporaryFieldMeta8) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentCreateDocumentTemporaryFieldMeta8) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentCreateDocumentTemporaryFieldMeta8) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentCreateDocumentTemporaryFieldMeta8) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentCreateDocumentTemporaryFieldMeta8) GetType() DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFieldsType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentFieldsType("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryFieldMeta8) GetValues() []DocumentCreateDocumentTemporaryFieldMetaDocumentsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *DocumentCreateDocumentTemporaryFieldMeta8) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *DocumentCreateDocumentTemporaryFieldMeta8) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentType string

const (
	DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentTypeRadio DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentType = "radio"
)

func (e DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentType) ToPointer() *DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentType: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldMetaValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *DocumentCreateDocumentTemporaryFieldMetaValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *DocumentCreateDocumentTemporaryFieldMetaValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *DocumentCreateDocumentTemporaryFieldMetaValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type DocumentCreateDocumentTemporaryFieldMeta7 struct {
	Label       *string                                                                                             `json:"label,omitempty"`
	Placeholder *string                                                                                             `json:"placeholder,omitempty"`
	Required    *bool                                                                                               `json:"required,omitempty"`
	ReadOnly    *bool                                                                                               `json:"readOnly,omitempty"`
	Type        DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentType `json:"type"`
	Values      []DocumentCreateDocumentTemporaryFieldMetaValues                                                    `json:"values,omitempty"`
}

func (o *DocumentCreateDocumentTemporaryFieldMeta7) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentCreateDocumentTemporaryFieldMeta7) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentCreateDocumentTemporaryFieldMeta7) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentCreateDocumentTemporaryFieldMeta7) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentCreateDocumentTemporaryFieldMeta7) GetType() DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyDocumentType("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryFieldMeta7) GetValues() []DocumentCreateDocumentTemporaryFieldMetaValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType string

const (
	DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyTypeNumber DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType = "number"
)

func (e DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType) ToPointer() *DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldMeta6 struct {
	Label        *string                                                                                     `json:"label,omitempty"`
	Placeholder  *string                                                                                     `json:"placeholder,omitempty"`
	Required     *bool                                                                                       `json:"required,omitempty"`
	ReadOnly     *bool                                                                                       `json:"readOnly,omitempty"`
	Type         DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType `json:"type"`
	NumberFormat *string                                                                                     `json:"numberFormat,omitempty"`
	Value        *string                                                                                     `json:"value,omitempty"`
	MinValue     *float64                                                                                    `json:"minValue,omitempty"`
	MaxValue     *float64                                                                                    `json:"maxValue,omitempty"`
	FontSize     *float64                                                                                    `json:"fontSize,omitempty"`
}

func (o *DocumentCreateDocumentTemporaryFieldMeta6) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentCreateDocumentTemporaryFieldMeta6) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentCreateDocumentTemporaryFieldMeta6) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentCreateDocumentTemporaryFieldMeta6) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentCreateDocumentTemporaryFieldMeta6) GetType() DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryFieldMeta6) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *DocumentCreateDocumentTemporaryFieldMeta6) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *DocumentCreateDocumentTemporaryFieldMeta6) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *DocumentCreateDocumentTemporaryFieldMeta6) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *DocumentCreateDocumentTemporaryFieldMeta6) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONType string

const (
	DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONTypeText DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONType = "text"
)

func (e DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONType) ToPointer() *DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONType: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldMeta5 struct {
	Label          *string                                                                         `json:"label,omitempty"`
	Placeholder    *string                                                                         `json:"placeholder,omitempty"`
	Required       *bool                                                                           `json:"required,omitempty"`
	ReadOnly       *bool                                                                           `json:"readOnly,omitempty"`
	Type           DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONType `json:"type"`
	Text           *string                                                                         `json:"text,omitempty"`
	CharacterLimit *float64                                                                        `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                        `json:"fontSize,omitempty"`
}

func (o *DocumentCreateDocumentTemporaryFieldMeta5) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentCreateDocumentTemporaryFieldMeta5) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentCreateDocumentTemporaryFieldMeta5) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentCreateDocumentTemporaryFieldMeta5) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentCreateDocumentTemporaryFieldMeta5) GetType() DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryFieldMeta5) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *DocumentCreateDocumentTemporaryFieldMeta5) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *DocumentCreateDocumentTemporaryFieldMeta5) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200Type string

const (
	DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200TypeDate DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200Type = "date"
)

func (e DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200Type) ToPointer() *DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200Type {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200Type: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldMeta4 struct {
	Label       *string                                                          `json:"label,omitempty"`
	Placeholder *string                                                          `json:"placeholder,omitempty"`
	Required    *bool                                                            `json:"required,omitempty"`
	ReadOnly    *bool                                                            `json:"readOnly,omitempty"`
	Type        DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200Type `json:"type"`
	FontSize    *float64                                                         `json:"fontSize,omitempty"`
}

func (o *DocumentCreateDocumentTemporaryFieldMeta4) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentCreateDocumentTemporaryFieldMeta4) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentCreateDocumentTemporaryFieldMeta4) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentCreateDocumentTemporaryFieldMeta4) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentCreateDocumentTemporaryFieldMeta4) GetType() DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200Type {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldMetaDocumentsResponse200Type("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryFieldMeta4) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type DocumentCreateDocumentTemporaryFieldMetaDocumentsResponseType string

const (
	DocumentCreateDocumentTemporaryFieldMetaDocumentsResponseTypeEmail DocumentCreateDocumentTemporaryFieldMetaDocumentsResponseType = "email"
)

func (e DocumentCreateDocumentTemporaryFieldMetaDocumentsResponseType) ToPointer() *DocumentCreateDocumentTemporaryFieldMetaDocumentsResponseType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldMetaDocumentsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = DocumentCreateDocumentTemporaryFieldMetaDocumentsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldMetaDocumentsResponseType: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldMeta3 struct {
	Label       *string                                                       `json:"label,omitempty"`
	Placeholder *string                                                       `json:"placeholder,omitempty"`
	Required    *bool                                                         `json:"required,omitempty"`
	ReadOnly    *bool                                                         `json:"readOnly,omitempty"`
	Type        DocumentCreateDocumentTemporaryFieldMetaDocumentsResponseType `json:"type"`
	FontSize    *float64                                                      `json:"fontSize,omitempty"`
}

func (o *DocumentCreateDocumentTemporaryFieldMeta3) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentCreateDocumentTemporaryFieldMeta3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentCreateDocumentTemporaryFieldMeta3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentCreateDocumentTemporaryFieldMeta3) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentCreateDocumentTemporaryFieldMeta3) GetType() DocumentCreateDocumentTemporaryFieldMetaDocumentsResponseType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldMetaDocumentsResponseType("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryFieldMeta3) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type DocumentCreateDocumentTemporaryFieldMetaDocumentsType string

const (
	DocumentCreateDocumentTemporaryFieldMetaDocumentsTypeName DocumentCreateDocumentTemporaryFieldMetaDocumentsType = "name"
)

func (e DocumentCreateDocumentTemporaryFieldMetaDocumentsType) ToPointer() *DocumentCreateDocumentTemporaryFieldMetaDocumentsType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldMetaDocumentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = DocumentCreateDocumentTemporaryFieldMetaDocumentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldMetaDocumentsType: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldMeta2 struct {
	Label       *string                                               `json:"label,omitempty"`
	Placeholder *string                                               `json:"placeholder,omitempty"`
	Required    *bool                                                 `json:"required,omitempty"`
	ReadOnly    *bool                                                 `json:"readOnly,omitempty"`
	Type        DocumentCreateDocumentTemporaryFieldMetaDocumentsType `json:"type"`
	FontSize    *float64                                              `json:"fontSize,omitempty"`
}

func (o *DocumentCreateDocumentTemporaryFieldMeta2) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentCreateDocumentTemporaryFieldMeta2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentCreateDocumentTemporaryFieldMeta2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentCreateDocumentTemporaryFieldMeta2) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentCreateDocumentTemporaryFieldMeta2) GetType() DocumentCreateDocumentTemporaryFieldMetaDocumentsType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldMetaDocumentsType("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryFieldMeta2) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type DocumentCreateDocumentTemporaryFieldMetaType string

const (
	DocumentCreateDocumentTemporaryFieldMetaTypeInitials DocumentCreateDocumentTemporaryFieldMetaType = "initials"
)

func (e DocumentCreateDocumentTemporaryFieldMetaType) ToPointer() *DocumentCreateDocumentTemporaryFieldMetaType {
	return &e
}
func (e *DocumentCreateDocumentTemporaryFieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = DocumentCreateDocumentTemporaryFieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryFieldMetaType: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldMeta1 struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        DocumentCreateDocumentTemporaryFieldMetaType `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
}

func (o *DocumentCreateDocumentTemporaryFieldMeta1) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentCreateDocumentTemporaryFieldMeta1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentCreateDocumentTemporaryFieldMeta1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentCreateDocumentTemporaryFieldMeta1) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentCreateDocumentTemporaryFieldMeta1) GetType() DocumentCreateDocumentTemporaryFieldMetaType {
	if o == nil {
		return DocumentCreateDocumentTemporaryFieldMetaType("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryFieldMeta1) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type DocumentCreateDocumentTemporaryFieldMetaUnionType string

const (
	DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta1 DocumentCreateDocumentTemporaryFieldMetaUnionType = "document-createDocumentTemporary_fieldMeta_1"
	DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta2 DocumentCreateDocumentTemporaryFieldMetaUnionType = "document-createDocumentTemporary_fieldMeta_2"
	DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta3 DocumentCreateDocumentTemporaryFieldMetaUnionType = "document-createDocumentTemporary_fieldMeta_3"
	DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta4 DocumentCreateDocumentTemporaryFieldMetaUnionType = "document-createDocumentTemporary_fieldMeta_4"
	DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta5 DocumentCreateDocumentTemporaryFieldMetaUnionType = "document-createDocumentTemporary_fieldMeta_5"
	DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta6 DocumentCreateDocumentTemporaryFieldMetaUnionType = "document-createDocumentTemporary_fieldMeta_6"
	DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta7 DocumentCreateDocumentTemporaryFieldMetaUnionType = "document-createDocumentTemporary_fieldMeta_7"
	DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta8 DocumentCreateDocumentTemporaryFieldMetaUnionType = "document-createDocumentTemporary_fieldMeta_8"
	DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta9 DocumentCreateDocumentTemporaryFieldMetaUnionType = "document-createDocumentTemporary_fieldMeta_9"
)

type DocumentCreateDocumentTemporaryFieldMeta struct {
	DocumentCreateDocumentTemporaryFieldMeta1 *DocumentCreateDocumentTemporaryFieldMeta1 `queryParam:"inline"`
	DocumentCreateDocumentTemporaryFieldMeta2 *DocumentCreateDocumentTemporaryFieldMeta2 `queryParam:"inline"`
	DocumentCreateDocumentTemporaryFieldMeta3 *DocumentCreateDocumentTemporaryFieldMeta3 `queryParam:"inline"`
	DocumentCreateDocumentTemporaryFieldMeta4 *DocumentCreateDocumentTemporaryFieldMeta4 `queryParam:"inline"`
	DocumentCreateDocumentTemporaryFieldMeta5 *DocumentCreateDocumentTemporaryFieldMeta5 `queryParam:"inline"`
	DocumentCreateDocumentTemporaryFieldMeta6 *DocumentCreateDocumentTemporaryFieldMeta6 `queryParam:"inline"`
	DocumentCreateDocumentTemporaryFieldMeta7 *DocumentCreateDocumentTemporaryFieldMeta7 `queryParam:"inline"`
	DocumentCreateDocumentTemporaryFieldMeta8 *DocumentCreateDocumentTemporaryFieldMeta8 `queryParam:"inline"`
	DocumentCreateDocumentTemporaryFieldMeta9 *DocumentCreateDocumentTemporaryFieldMeta9 `queryParam:"inline"`

	Type DocumentCreateDocumentTemporaryFieldMetaUnionType
}

func CreateDocumentCreateDocumentTemporaryFieldMetaDocumentCreateDocumentTemporaryFieldMeta1(documentCreateDocumentTemporaryFieldMeta1 DocumentCreateDocumentTemporaryFieldMeta1) DocumentCreateDocumentTemporaryFieldMeta {
	typ := DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta1

	return DocumentCreateDocumentTemporaryFieldMeta{
		DocumentCreateDocumentTemporaryFieldMeta1: &documentCreateDocumentTemporaryFieldMeta1,
		Type: typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldMetaDocumentCreateDocumentTemporaryFieldMeta2(documentCreateDocumentTemporaryFieldMeta2 DocumentCreateDocumentTemporaryFieldMeta2) DocumentCreateDocumentTemporaryFieldMeta {
	typ := DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta2

	return DocumentCreateDocumentTemporaryFieldMeta{
		DocumentCreateDocumentTemporaryFieldMeta2: &documentCreateDocumentTemporaryFieldMeta2,
		Type: typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldMetaDocumentCreateDocumentTemporaryFieldMeta3(documentCreateDocumentTemporaryFieldMeta3 DocumentCreateDocumentTemporaryFieldMeta3) DocumentCreateDocumentTemporaryFieldMeta {
	typ := DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta3

	return DocumentCreateDocumentTemporaryFieldMeta{
		DocumentCreateDocumentTemporaryFieldMeta3: &documentCreateDocumentTemporaryFieldMeta3,
		Type: typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldMetaDocumentCreateDocumentTemporaryFieldMeta4(documentCreateDocumentTemporaryFieldMeta4 DocumentCreateDocumentTemporaryFieldMeta4) DocumentCreateDocumentTemporaryFieldMeta {
	typ := DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta4

	return DocumentCreateDocumentTemporaryFieldMeta{
		DocumentCreateDocumentTemporaryFieldMeta4: &documentCreateDocumentTemporaryFieldMeta4,
		Type: typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldMetaDocumentCreateDocumentTemporaryFieldMeta5(documentCreateDocumentTemporaryFieldMeta5 DocumentCreateDocumentTemporaryFieldMeta5) DocumentCreateDocumentTemporaryFieldMeta {
	typ := DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta5

	return DocumentCreateDocumentTemporaryFieldMeta{
		DocumentCreateDocumentTemporaryFieldMeta5: &documentCreateDocumentTemporaryFieldMeta5,
		Type: typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldMetaDocumentCreateDocumentTemporaryFieldMeta6(documentCreateDocumentTemporaryFieldMeta6 DocumentCreateDocumentTemporaryFieldMeta6) DocumentCreateDocumentTemporaryFieldMeta {
	typ := DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta6

	return DocumentCreateDocumentTemporaryFieldMeta{
		DocumentCreateDocumentTemporaryFieldMeta6: &documentCreateDocumentTemporaryFieldMeta6,
		Type: typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldMetaDocumentCreateDocumentTemporaryFieldMeta7(documentCreateDocumentTemporaryFieldMeta7 DocumentCreateDocumentTemporaryFieldMeta7) DocumentCreateDocumentTemporaryFieldMeta {
	typ := DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta7

	return DocumentCreateDocumentTemporaryFieldMeta{
		DocumentCreateDocumentTemporaryFieldMeta7: &documentCreateDocumentTemporaryFieldMeta7,
		Type: typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldMetaDocumentCreateDocumentTemporaryFieldMeta8(documentCreateDocumentTemporaryFieldMeta8 DocumentCreateDocumentTemporaryFieldMeta8) DocumentCreateDocumentTemporaryFieldMeta {
	typ := DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta8

	return DocumentCreateDocumentTemporaryFieldMeta{
		DocumentCreateDocumentTemporaryFieldMeta8: &documentCreateDocumentTemporaryFieldMeta8,
		Type: typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldMetaDocumentCreateDocumentTemporaryFieldMeta9(documentCreateDocumentTemporaryFieldMeta9 DocumentCreateDocumentTemporaryFieldMeta9) DocumentCreateDocumentTemporaryFieldMeta {
	typ := DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta9

	return DocumentCreateDocumentTemporaryFieldMeta{
		DocumentCreateDocumentTemporaryFieldMeta9: &documentCreateDocumentTemporaryFieldMeta9,
		Type: typ,
	}
}

func (u *DocumentCreateDocumentTemporaryFieldMeta) UnmarshalJSON(data []byte) error {

	var documentCreateDocumentTemporaryFieldMeta1 DocumentCreateDocumentTemporaryFieldMeta1 = DocumentCreateDocumentTemporaryFieldMeta1{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldMeta1, "", true, true); err == nil {
		u.DocumentCreateDocumentTemporaryFieldMeta1 = &documentCreateDocumentTemporaryFieldMeta1
		u.Type = DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta1
		return nil
	}

	var documentCreateDocumentTemporaryFieldMeta2 DocumentCreateDocumentTemporaryFieldMeta2 = DocumentCreateDocumentTemporaryFieldMeta2{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldMeta2, "", true, true); err == nil {
		u.DocumentCreateDocumentTemporaryFieldMeta2 = &documentCreateDocumentTemporaryFieldMeta2
		u.Type = DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta2
		return nil
	}

	var documentCreateDocumentTemporaryFieldMeta3 DocumentCreateDocumentTemporaryFieldMeta3 = DocumentCreateDocumentTemporaryFieldMeta3{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldMeta3, "", true, true); err == nil {
		u.DocumentCreateDocumentTemporaryFieldMeta3 = &documentCreateDocumentTemporaryFieldMeta3
		u.Type = DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta3
		return nil
	}

	var documentCreateDocumentTemporaryFieldMeta4 DocumentCreateDocumentTemporaryFieldMeta4 = DocumentCreateDocumentTemporaryFieldMeta4{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldMeta4, "", true, true); err == nil {
		u.DocumentCreateDocumentTemporaryFieldMeta4 = &documentCreateDocumentTemporaryFieldMeta4
		u.Type = DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta4
		return nil
	}

	var documentCreateDocumentTemporaryFieldMeta7 DocumentCreateDocumentTemporaryFieldMeta7 = DocumentCreateDocumentTemporaryFieldMeta7{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldMeta7, "", true, true); err == nil {
		u.DocumentCreateDocumentTemporaryFieldMeta7 = &documentCreateDocumentTemporaryFieldMeta7
		u.Type = DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta7
		return nil
	}

	var documentCreateDocumentTemporaryFieldMeta9 DocumentCreateDocumentTemporaryFieldMeta9 = DocumentCreateDocumentTemporaryFieldMeta9{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldMeta9, "", true, true); err == nil {
		u.DocumentCreateDocumentTemporaryFieldMeta9 = &documentCreateDocumentTemporaryFieldMeta9
		u.Type = DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta9
		return nil
	}

	var documentCreateDocumentTemporaryFieldMeta5 DocumentCreateDocumentTemporaryFieldMeta5 = DocumentCreateDocumentTemporaryFieldMeta5{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldMeta5, "", true, true); err == nil {
		u.DocumentCreateDocumentTemporaryFieldMeta5 = &documentCreateDocumentTemporaryFieldMeta5
		u.Type = DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta5
		return nil
	}

	var documentCreateDocumentTemporaryFieldMeta8 DocumentCreateDocumentTemporaryFieldMeta8 = DocumentCreateDocumentTemporaryFieldMeta8{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldMeta8, "", true, true); err == nil {
		u.DocumentCreateDocumentTemporaryFieldMeta8 = &documentCreateDocumentTemporaryFieldMeta8
		u.Type = DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta8
		return nil
	}

	var documentCreateDocumentTemporaryFieldMeta6 DocumentCreateDocumentTemporaryFieldMeta6 = DocumentCreateDocumentTemporaryFieldMeta6{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldMeta6, "", true, true); err == nil {
		u.DocumentCreateDocumentTemporaryFieldMeta6 = &documentCreateDocumentTemporaryFieldMeta6
		u.Type = DocumentCreateDocumentTemporaryFieldMetaUnionTypeDocumentCreateDocumentTemporaryFieldMeta6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DocumentCreateDocumentTemporaryFieldMeta", string(data))
}

func (u DocumentCreateDocumentTemporaryFieldMeta) MarshalJSON() ([]byte, error) {
	if u.DocumentCreateDocumentTemporaryFieldMeta1 != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldMeta1, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldMeta2 != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldMeta2, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldMeta3 != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldMeta3, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldMeta4 != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldMeta4, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldMeta5 != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldMeta5, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldMeta6 != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldMeta6, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldMeta7 != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldMeta7, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldMeta8 != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldMeta8, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldMeta9 != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldMeta9, "", true)
	}

	return nil, errors.New("could not marshal union type DocumentCreateDocumentTemporaryFieldMeta: all fields are null")
}

type DocumentCreateDocumentTemporaryFields struct {
	Type        DocumentCreateDocumentTemporaryDocumentsType `json:"type"`
	ID          int64                                        `json:"id"`
	SecondaryID string                                       `json:"secondaryId"`
	DocumentID  *int64                                       `json:"documentId"`
	TemplateID  *int64                                       `json:"templateId"`
	RecipientID int64                                        `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                                   `json:"page"`
	PositionX  any                                       `json:"positionX,omitempty"`
	PositionY  any                                       `json:"positionY,omitempty"`
	Width      any                                       `json:"width,omitempty"`
	Height     any                                       `json:"height,omitempty"`
	CustomText string                                    `json:"customText"`
	Inserted   bool                                      `json:"inserted"`
	FieldMeta  *DocumentCreateDocumentTemporaryFieldMeta `json:"fieldMeta"`
}

func (o *DocumentCreateDocumentTemporaryFields) GetType() DocumentCreateDocumentTemporaryDocumentsType {
	if o == nil {
		return DocumentCreateDocumentTemporaryDocumentsType("")
	}
	return o.Type
}

func (o *DocumentCreateDocumentTemporaryFields) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *DocumentCreateDocumentTemporaryFields) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *DocumentCreateDocumentTemporaryFields) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *DocumentCreateDocumentTemporaryFields) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *DocumentCreateDocumentTemporaryFields) GetRecipientID() int64 {
	if o == nil {
		return 0
	}
	return o.RecipientID
}

func (o *DocumentCreateDocumentTemporaryFields) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *DocumentCreateDocumentTemporaryFields) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *DocumentCreateDocumentTemporaryFields) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *DocumentCreateDocumentTemporaryFields) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *DocumentCreateDocumentTemporaryFields) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *DocumentCreateDocumentTemporaryFields) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *DocumentCreateDocumentTemporaryFields) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *DocumentCreateDocumentTemporaryFields) GetFieldMeta() *DocumentCreateDocumentTemporaryFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

type Document struct {
	Visibility DocumentCreateDocumentTemporaryVisibility `json:"visibility"`
	Status     DocumentCreateDocumentTemporaryStatus     `json:"status"`
	Source     DocumentCreateDocumentTemporarySource     `json:"source"`
	ID         int64                                     `json:"id"`
	// A custom external ID you can use to identify the document.
	ExternalID *string `json:"externalId"`
	// The ID of the user that created this document.
	UserID         float64                                              `json:"userId"`
	AuthOptions    *DocumentCreateDocumentTemporaryAuthOptions          `json:"authOptions"`
	FormValues     map[string]DocumentCreateDocumentTemporaryFormValues `json:"formValues"`
	Title          string                                               `json:"title"`
	DocumentDataID string                                               `json:"documentDataId"`
	CreatedAt      string                                               `json:"createdAt"`
	UpdatedAt      string                                               `json:"updatedAt"`
	CompletedAt    *string                                              `json:"completedAt"`
	DeletedAt      *string                                              `json:"deletedAt"`
	TeamID         *int64                                               `json:"teamId"`
	TemplateID     *int64                                               `json:"templateId"`
	DocumentData   DocumentCreateDocumentTemporaryDocumentData          `json:"documentData"`
	DocumentMeta   *DocumentCreateDocumentTemporaryDocumentMeta         `json:"documentMeta"`
	Recipients     []DocumentCreateDocumentTemporaryRecipients          `json:"recipients"`
	Fields         []DocumentCreateDocumentTemporaryFields              `json:"fields"`
}

func (o *Document) GetVisibility() DocumentCreateDocumentTemporaryVisibility {
	if o == nil {
		return DocumentCreateDocumentTemporaryVisibility("")
	}
	return o.Visibility
}

func (o *Document) GetStatus() DocumentCreateDocumentTemporaryStatus {
	if o == nil {
		return DocumentCreateDocumentTemporaryStatus("")
	}
	return o.Status
}

func (o *Document) GetSource() DocumentCreateDocumentTemporarySource {
	if o == nil {
		return DocumentCreateDocumentTemporarySource("")
	}
	return o.Source
}

func (o *Document) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *Document) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *Document) GetUserID() float64 {
	if o == nil {
		return 0.0
	}
	return o.UserID
}

func (o *Document) GetAuthOptions() *DocumentCreateDocumentTemporaryAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *Document) GetFormValues() map[string]DocumentCreateDocumentTemporaryFormValues {
	if o == nil {
		return nil
	}
	return o.FormValues
}

func (o *Document) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *Document) GetDocumentDataID() string {
	if o == nil {
		return ""
	}
	return o.DocumentDataID
}

func (o *Document) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *Document) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *Document) GetCompletedAt() *string {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *Document) GetDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Document) GetTeamID() *int64 {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *Document) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *Document) GetDocumentData() DocumentCreateDocumentTemporaryDocumentData {
	if o == nil {
		return DocumentCreateDocumentTemporaryDocumentData{}
	}
	return o.DocumentData
}

func (o *Document) GetDocumentMeta() *DocumentCreateDocumentTemporaryDocumentMeta {
	if o == nil {
		return nil
	}
	return o.DocumentMeta
}

func (o *Document) GetRecipients() []DocumentCreateDocumentTemporaryRecipients {
	if o == nil {
		return []DocumentCreateDocumentTemporaryRecipients{}
	}
	return o.Recipients
}

func (o *Document) GetFields() []DocumentCreateDocumentTemporaryFields {
	if o == nil {
		return []DocumentCreateDocumentTemporaryFields{}
	}
	return o.Fields
}

// DocumentCreateDocumentTemporaryResponseBody - Successful response
type DocumentCreateDocumentTemporaryResponseBody struct {
	Document Document `json:"document"`
	// The URL to upload the document PDF to. Use a PUT request with the file via form-data
	UploadURL string `json:"uploadUrl"`
}

func (o *DocumentCreateDocumentTemporaryResponseBody) GetDocument() Document {
	if o == nil {
		return Document{}
	}
	return o.Document
}

func (o *DocumentCreateDocumentTemporaryResponseBody) GetUploadURL() string {
	if o == nil {
		return ""
	}
	return o.UploadURL
}

type DocumentCreateDocumentTemporaryResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *DocumentCreateDocumentTemporaryResponseBody
}

func (o *DocumentCreateDocumentTemporaryResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *DocumentCreateDocumentTemporaryResponse) GetObject() *DocumentCreateDocumentTemporaryResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
