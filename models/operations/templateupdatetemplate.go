// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type TemplateUpdateTemplateVisibilityRequest string

const (
	TemplateUpdateTemplateVisibilityRequestEveryone        TemplateUpdateTemplateVisibilityRequest = "EVERYONE"
	TemplateUpdateTemplateVisibilityRequestManagerAndAbove TemplateUpdateTemplateVisibilityRequest = "MANAGER_AND_ABOVE"
	TemplateUpdateTemplateVisibilityRequestAdmin           TemplateUpdateTemplateVisibilityRequest = "ADMIN"
)

func (e TemplateUpdateTemplateVisibilityRequest) ToPointer() *TemplateUpdateTemplateVisibilityRequest {
	return &e
}
func (e *TemplateUpdateTemplateVisibilityRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = TemplateUpdateTemplateVisibilityRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateUpdateTemplateVisibilityRequest: %v", v)
	}
}

// TemplateUpdateTemplateGlobalAccessAuthRequest - The type of authentication required for the recipient to access the document.
type TemplateUpdateTemplateGlobalAccessAuthRequest string

const (
	TemplateUpdateTemplateGlobalAccessAuthRequestAccount       TemplateUpdateTemplateGlobalAccessAuthRequest = "ACCOUNT"
	TemplateUpdateTemplateGlobalAccessAuthRequestTwoFactorAuth TemplateUpdateTemplateGlobalAccessAuthRequest = "TWO_FACTOR_AUTH"
)

func (e TemplateUpdateTemplateGlobalAccessAuthRequest) ToPointer() *TemplateUpdateTemplateGlobalAccessAuthRequest {
	return &e
}
func (e *TemplateUpdateTemplateGlobalAccessAuthRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = TemplateUpdateTemplateGlobalAccessAuthRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateUpdateTemplateGlobalAccessAuthRequest: %v", v)
	}
}

// TemplateUpdateTemplateGlobalActionAuthRequest - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type TemplateUpdateTemplateGlobalActionAuthRequest string

const (
	TemplateUpdateTemplateGlobalActionAuthRequestAccount       TemplateUpdateTemplateGlobalActionAuthRequest = "ACCOUNT"
	TemplateUpdateTemplateGlobalActionAuthRequestPasskey       TemplateUpdateTemplateGlobalActionAuthRequest = "PASSKEY"
	TemplateUpdateTemplateGlobalActionAuthRequestTwoFactorAuth TemplateUpdateTemplateGlobalActionAuthRequest = "TWO_FACTOR_AUTH"
	TemplateUpdateTemplateGlobalActionAuthRequestPassword      TemplateUpdateTemplateGlobalActionAuthRequest = "PASSWORD"
)

func (e TemplateUpdateTemplateGlobalActionAuthRequest) ToPointer() *TemplateUpdateTemplateGlobalActionAuthRequest {
	return &e
}
func (e *TemplateUpdateTemplateGlobalActionAuthRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		*e = TemplateUpdateTemplateGlobalActionAuthRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateUpdateTemplateGlobalActionAuthRequest: %v", v)
	}
}

type TemplateUpdateTemplateDataType string

const (
	TemplateUpdateTemplateDataTypePublic  TemplateUpdateTemplateDataType = "PUBLIC"
	TemplateUpdateTemplateDataTypePrivate TemplateUpdateTemplateDataType = "PRIVATE"
)

func (e TemplateUpdateTemplateDataType) ToPointer() *TemplateUpdateTemplateDataType {
	return &e
}
func (e *TemplateUpdateTemplateDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PUBLIC":
		fallthrough
	case "PRIVATE":
		*e = TemplateUpdateTemplateDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateUpdateTemplateDataType: %v", v)
	}
}

type TemplateUpdateTemplateData struct {
	// The title of the document.
	Title            *string                                         `json:"title,omitempty"`
	ExternalID       *string                                         `json:"externalId,omitempty"`
	Visibility       *TemplateUpdateTemplateVisibilityRequest        `json:"visibility,omitempty"`
	GlobalAccessAuth []TemplateUpdateTemplateGlobalAccessAuthRequest `json:"globalAccessAuth,omitempty"`
	GlobalActionAuth []TemplateUpdateTemplateGlobalActionAuthRequest `json:"globalActionAuth,omitempty"`
	// The title of the template that will be displayed to the public. Only applicable for public templates.
	PublicTitle *string `json:"publicTitle,omitempty"`
	// The description of the template that will be displayed to the public. Only applicable for public templates.
	PublicDescription       *string                         `json:"publicDescription,omitempty"`
	Type                    *TemplateUpdateTemplateDataType `json:"type,omitempty"`
	UseLegacyFieldInsertion *bool                           `json:"useLegacyFieldInsertion,omitempty"`
	FolderID                *string                         `json:"folderId,omitempty"`
}

func (t *TemplateUpdateTemplateData) GetTitle() *string {
	if t == nil {
		return nil
	}
	return t.Title
}

func (t *TemplateUpdateTemplateData) GetExternalID() *string {
	if t == nil {
		return nil
	}
	return t.ExternalID
}

func (t *TemplateUpdateTemplateData) GetVisibility() *TemplateUpdateTemplateVisibilityRequest {
	if t == nil {
		return nil
	}
	return t.Visibility
}

func (t *TemplateUpdateTemplateData) GetGlobalAccessAuth() []TemplateUpdateTemplateGlobalAccessAuthRequest {
	if t == nil {
		return nil
	}
	return t.GlobalAccessAuth
}

func (t *TemplateUpdateTemplateData) GetGlobalActionAuth() []TemplateUpdateTemplateGlobalActionAuthRequest {
	if t == nil {
		return nil
	}
	return t.GlobalActionAuth
}

func (t *TemplateUpdateTemplateData) GetPublicTitle() *string {
	if t == nil {
		return nil
	}
	return t.PublicTitle
}

func (t *TemplateUpdateTemplateData) GetPublicDescription() *string {
	if t == nil {
		return nil
	}
	return t.PublicDescription
}

func (t *TemplateUpdateTemplateData) GetType() *TemplateUpdateTemplateDataType {
	if t == nil {
		return nil
	}
	return t.Type
}

func (t *TemplateUpdateTemplateData) GetUseLegacyFieldInsertion() *bool {
	if t == nil {
		return nil
	}
	return t.UseLegacyFieldInsertion
}

func (t *TemplateUpdateTemplateData) GetFolderID() *string {
	if t == nil {
		return nil
	}
	return t.FolderID
}

// TemplateUpdateTemplateDateFormat - The date format to use for date fields and signing the document.
type TemplateUpdateTemplateDateFormat string

const (
	TemplateUpdateTemplateDateFormatYyyyMMddHhMmA            TemplateUpdateTemplateDateFormat = "yyyy-MM-dd hh:mm a"
	TemplateUpdateTemplateDateFormatYyyyMMdd                 TemplateUpdateTemplateDateFormat = "yyyy-MM-dd"
	TemplateUpdateTemplateDateFormatDdMmSlashYyyy            TemplateUpdateTemplateDateFormat = "dd/MM/yyyy"
	TemplateUpdateTemplateDateFormatMmDdSlashYyyy            TemplateUpdateTemplateDateFormat = "MM/dd/yyyy"
	TemplateUpdateTemplateDateFormatYyMMdd                   TemplateUpdateTemplateDateFormat = "yy-MM-dd"
	TemplateUpdateTemplateDateFormatMmmmDdCommaYyyy          TemplateUpdateTemplateDateFormat = "MMMM dd, yyyy"
	TemplateUpdateTemplateDateFormatEeeeMmmmDdCommaYyyy      TemplateUpdateTemplateDateFormat = "EEEE, MMMM dd, yyyy"
	TemplateUpdateTemplateDateFormatDdMmSlashYyyyHhMmA       TemplateUpdateTemplateDateFormat = "dd/MM/yyyy hh:mm a"
	TemplateUpdateTemplateDateFormatDdMmSlashYyyyHHmm        TemplateUpdateTemplateDateFormat = "dd/MM/yyyy HH:mm"
	TemplateUpdateTemplateDateFormatMmDdSlashYyyyHhMmA       TemplateUpdateTemplateDateFormat = "MM/dd/yyyy hh:mm a"
	TemplateUpdateTemplateDateFormatMmDdSlashYyyyHHmm        TemplateUpdateTemplateDateFormat = "MM/dd/yyyy HH:mm"
	TemplateUpdateTemplateDateFormatDdDotMmDotYyyy           TemplateUpdateTemplateDateFormat = "dd.MM.yyyy"
	TemplateUpdateTemplateDateFormatDdDotMmDotYyyyHHmm       TemplateUpdateTemplateDateFormat = "dd.MM.yyyy HH:mm"
	TemplateUpdateTemplateDateFormatYyyyMMddHHmm             TemplateUpdateTemplateDateFormat = "yyyy-MM-dd HH:mm"
	TemplateUpdateTemplateDateFormatYyMMddHhMmA              TemplateUpdateTemplateDateFormat = "yy-MM-dd hh:mm a"
	TemplateUpdateTemplateDateFormatYyMMddHHmm               TemplateUpdateTemplateDateFormat = "yy-MM-dd HH:mm"
	TemplateUpdateTemplateDateFormatYyyyMMddHHmmss           TemplateUpdateTemplateDateFormat = "yyyy-MM-dd HH:mm:ss"
	TemplateUpdateTemplateDateFormatMmmmDdCommaYyyyHhMmA     TemplateUpdateTemplateDateFormat = "MMMM dd, yyyy hh:mm a"
	TemplateUpdateTemplateDateFormatMmmmDdCommaYyyyHHmm      TemplateUpdateTemplateDateFormat = "MMMM dd, yyyy HH:mm"
	TemplateUpdateTemplateDateFormatEeeeMmmmDdCommaYyyyHhMmA TemplateUpdateTemplateDateFormat = "EEEE, MMMM dd, yyyy hh:mm a"
	TemplateUpdateTemplateDateFormatEeeeMmmmDdCommaYyyyHHmm  TemplateUpdateTemplateDateFormat = "EEEE, MMMM dd, yyyy HH:mm"
	TemplateUpdateTemplateDateFormatIso8601Full              TemplateUpdateTemplateDateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSXXX"
)

func (e TemplateUpdateTemplateDateFormat) ToPointer() *TemplateUpdateTemplateDateFormat {
	return &e
}
func (e *TemplateUpdateTemplateDateFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "yyyy-MM-dd hh:mm a":
		fallthrough
	case "yyyy-MM-dd":
		fallthrough
	case "dd/MM/yyyy":
		fallthrough
	case "MM/dd/yyyy":
		fallthrough
	case "yy-MM-dd":
		fallthrough
	case "MMMM dd, yyyy":
		fallthrough
	case "EEEE, MMMM dd, yyyy":
		fallthrough
	case "dd/MM/yyyy hh:mm a":
		fallthrough
	case "dd/MM/yyyy HH:mm":
		fallthrough
	case "MM/dd/yyyy hh:mm a":
		fallthrough
	case "MM/dd/yyyy HH:mm":
		fallthrough
	case "dd.MM.yyyy":
		fallthrough
	case "dd.MM.yyyy HH:mm":
		fallthrough
	case "yyyy-MM-dd HH:mm":
		fallthrough
	case "yy-MM-dd hh:mm a":
		fallthrough
	case "yy-MM-dd HH:mm":
		fallthrough
	case "yyyy-MM-dd HH:mm:ss":
		fallthrough
	case "MMMM dd, yyyy hh:mm a":
		fallthrough
	case "MMMM dd, yyyy HH:mm":
		fallthrough
	case "EEEE, MMMM dd, yyyy hh:mm a":
		fallthrough
	case "EEEE, MMMM dd, yyyy HH:mm":
		fallthrough
	case "yyyy-MM-dd'T'HH:mm:ss.SSSXXX":
		*e = TemplateUpdateTemplateDateFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateUpdateTemplateDateFormat: %v", v)
	}
}

// TemplateUpdateTemplateDistributionMethod - The distribution method to use when sending the document to the recipients.
type TemplateUpdateTemplateDistributionMethod string

const (
	TemplateUpdateTemplateDistributionMethodEmail TemplateUpdateTemplateDistributionMethod = "EMAIL"
	TemplateUpdateTemplateDistributionMethodNone  TemplateUpdateTemplateDistributionMethod = "NONE"
)

func (e TemplateUpdateTemplateDistributionMethod) ToPointer() *TemplateUpdateTemplateDistributionMethod {
	return &e
}
func (e *TemplateUpdateTemplateDistributionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = TemplateUpdateTemplateDistributionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateUpdateTemplateDistributionMethod: %v", v)
	}
}

type TemplateUpdateTemplateEmailSettings struct {
	// Whether to send an email to all recipients that the document is ready for them to sign.
	RecipientSigningRequest *bool `default:"true" json:"recipientSigningRequest"`
	// Whether to send an email to the recipient who was removed from a pending document.
	RecipientRemoved *bool `default:"true" json:"recipientRemoved"`
	// Whether to send an email to the document owner when a recipient has signed the document.
	RecipientSigned *bool `default:"true" json:"recipientSigned"`
	// Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
	DocumentPending *bool `default:"true" json:"documentPending"`
	// Whether to send an email to all recipients when the document is complete.
	DocumentCompleted *bool `default:"true" json:"documentCompleted"`
	// Whether to send an email to all recipients if a pending document has been deleted.
	DocumentDeleted *bool `default:"true" json:"documentDeleted"`
	// Whether to send an email to the document owner when the document is complete.
	OwnerDocumentCompleted *bool `default:"true" json:"ownerDocumentCompleted"`
}

func (t TemplateUpdateTemplateEmailSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateUpdateTemplateEmailSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (t *TemplateUpdateTemplateEmailSettings) GetRecipientSigningRequest() *bool {
	if t == nil {
		return nil
	}
	return t.RecipientSigningRequest
}

func (t *TemplateUpdateTemplateEmailSettings) GetRecipientRemoved() *bool {
	if t == nil {
		return nil
	}
	return t.RecipientRemoved
}

func (t *TemplateUpdateTemplateEmailSettings) GetRecipientSigned() *bool {
	if t == nil {
		return nil
	}
	return t.RecipientSigned
}

func (t *TemplateUpdateTemplateEmailSettings) GetDocumentPending() *bool {
	if t == nil {
		return nil
	}
	return t.DocumentPending
}

func (t *TemplateUpdateTemplateEmailSettings) GetDocumentCompleted() *bool {
	if t == nil {
		return nil
	}
	return t.DocumentCompleted
}

func (t *TemplateUpdateTemplateEmailSettings) GetDocumentDeleted() *bool {
	if t == nil {
		return nil
	}
	return t.DocumentDeleted
}

func (t *TemplateUpdateTemplateEmailSettings) GetOwnerDocumentCompleted() *bool {
	if t == nil {
		return nil
	}
	return t.OwnerDocumentCompleted
}

// TemplateUpdateTemplateLanguage - The language to use for email communications with recipients.
type TemplateUpdateTemplateLanguage string

const (
	TemplateUpdateTemplateLanguageDe TemplateUpdateTemplateLanguage = "de"
	TemplateUpdateTemplateLanguageEn TemplateUpdateTemplateLanguage = "en"
	TemplateUpdateTemplateLanguageFr TemplateUpdateTemplateLanguage = "fr"
	TemplateUpdateTemplateLanguageEs TemplateUpdateTemplateLanguage = "es"
	TemplateUpdateTemplateLanguageIt TemplateUpdateTemplateLanguage = "it"
	TemplateUpdateTemplateLanguagePl TemplateUpdateTemplateLanguage = "pl"
)

func (e TemplateUpdateTemplateLanguage) ToPointer() *TemplateUpdateTemplateLanguage {
	return &e
}
func (e *TemplateUpdateTemplateLanguage) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "de":
		fallthrough
	case "en":
		fallthrough
	case "fr":
		fallthrough
	case "es":
		fallthrough
	case "it":
		fallthrough
	case "pl":
		*e = TemplateUpdateTemplateLanguage(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateUpdateTemplateLanguage: %v", v)
	}
}

type TemplateUpdateTemplateSigningOrder string

const (
	TemplateUpdateTemplateSigningOrderParallel   TemplateUpdateTemplateSigningOrder = "PARALLEL"
	TemplateUpdateTemplateSigningOrderSequential TemplateUpdateTemplateSigningOrder = "SEQUENTIAL"
)

func (e TemplateUpdateTemplateSigningOrder) ToPointer() *TemplateUpdateTemplateSigningOrder {
	return &e
}
func (e *TemplateUpdateTemplateSigningOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARALLEL":
		fallthrough
	case "SEQUENTIAL":
		*e = TemplateUpdateTemplateSigningOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateUpdateTemplateSigningOrder: %v", v)
	}
}

type TemplateUpdateTemplateMeta struct {
	// The subject of the email that will be sent to the recipients.
	Subject *string `json:"subject,omitempty"`
	// The message of the email that will be sent to the recipients.
	Message *string `json:"message,omitempty"`
	// The timezone to use for date fields and signing the document. Example Etc/UTC, Australia/Melbourne
	Timezone *string `json:"timezone,omitempty"`
	// The date format to use for date fields and signing the document.
	DateFormat *TemplateUpdateTemplateDateFormat `json:"dateFormat,omitempty"`
	// The distribution method to use when sending the document to the recipients.
	DistributionMethod *TemplateUpdateTemplateDistributionMethod `json:"distributionMethod,omitempty"`
	EmailID            *string                                   `json:"emailId,omitempty"`
	EmailReplyTo       *string                                   `json:"emailReplyTo,omitempty"`
	EmailSettings      *TemplateUpdateTemplateEmailSettings      `json:"emailSettings,omitempty"`
	// The URL to which the recipient should be redirected after signing the document.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The language to use for email communications with recipients.
	Language *TemplateUpdateTemplateLanguage `json:"language,omitempty"`
	// Whether to allow recipients to sign using a typed signature.
	TypedSignatureEnabled *bool `json:"typedSignatureEnabled,omitempty"`
	// Whether to allow recipients to sign using an uploaded signature.
	UploadSignatureEnabled *bool `json:"uploadSignatureEnabled,omitempty"`
	// Whether to allow recipients to sign using a draw signature.
	DrawSignatureEnabled   *bool                               `json:"drawSignatureEnabled,omitempty"`
	SigningOrder           *TemplateUpdateTemplateSigningOrder `json:"signingOrder,omitempty"`
	AllowDictateNextSigner *bool                               `json:"allowDictateNextSigner,omitempty"`
}

func (t *TemplateUpdateTemplateMeta) GetSubject() *string {
	if t == nil {
		return nil
	}
	return t.Subject
}

func (t *TemplateUpdateTemplateMeta) GetMessage() *string {
	if t == nil {
		return nil
	}
	return t.Message
}

func (t *TemplateUpdateTemplateMeta) GetTimezone() *string {
	if t == nil {
		return nil
	}
	return t.Timezone
}

func (t *TemplateUpdateTemplateMeta) GetDateFormat() *TemplateUpdateTemplateDateFormat {
	if t == nil {
		return nil
	}
	return t.DateFormat
}

func (t *TemplateUpdateTemplateMeta) GetDistributionMethod() *TemplateUpdateTemplateDistributionMethod {
	if t == nil {
		return nil
	}
	return t.DistributionMethod
}

func (t *TemplateUpdateTemplateMeta) GetEmailID() *string {
	if t == nil {
		return nil
	}
	return t.EmailID
}

func (t *TemplateUpdateTemplateMeta) GetEmailReplyTo() *string {
	if t == nil {
		return nil
	}
	return t.EmailReplyTo
}

func (t *TemplateUpdateTemplateMeta) GetEmailSettings() *TemplateUpdateTemplateEmailSettings {
	if t == nil {
		return nil
	}
	return t.EmailSettings
}

func (t *TemplateUpdateTemplateMeta) GetRedirectURL() *string {
	if t == nil {
		return nil
	}
	return t.RedirectURL
}

func (t *TemplateUpdateTemplateMeta) GetLanguage() *TemplateUpdateTemplateLanguage {
	if t == nil {
		return nil
	}
	return t.Language
}

func (t *TemplateUpdateTemplateMeta) GetTypedSignatureEnabled() *bool {
	if t == nil {
		return nil
	}
	return t.TypedSignatureEnabled
}

func (t *TemplateUpdateTemplateMeta) GetUploadSignatureEnabled() *bool {
	if t == nil {
		return nil
	}
	return t.UploadSignatureEnabled
}

func (t *TemplateUpdateTemplateMeta) GetDrawSignatureEnabled() *bool {
	if t == nil {
		return nil
	}
	return t.DrawSignatureEnabled
}

func (t *TemplateUpdateTemplateMeta) GetSigningOrder() *TemplateUpdateTemplateSigningOrder {
	if t == nil {
		return nil
	}
	return t.SigningOrder
}

func (t *TemplateUpdateTemplateMeta) GetAllowDictateNextSigner() *bool {
	if t == nil {
		return nil
	}
	return t.AllowDictateNextSigner
}

type TemplateUpdateTemplateRequest struct {
	TemplateID float64                     `json:"templateId"`
	Data       *TemplateUpdateTemplateData `json:"data,omitempty"`
	Meta       *TemplateUpdateTemplateMeta `json:"meta,omitempty"`
}

func (t *TemplateUpdateTemplateRequest) GetTemplateID() float64 {
	if t == nil {
		return 0.0
	}
	return t.TemplateID
}

func (t *TemplateUpdateTemplateRequest) GetData() *TemplateUpdateTemplateData {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *TemplateUpdateTemplateRequest) GetMeta() *TemplateUpdateTemplateMeta {
	if t == nil {
		return nil
	}
	return t.Meta
}

type TemplateUpdateTemplateTypeResponse string

const (
	TemplateUpdateTemplateTypeResponsePublic  TemplateUpdateTemplateTypeResponse = "PUBLIC"
	TemplateUpdateTemplateTypeResponsePrivate TemplateUpdateTemplateTypeResponse = "PRIVATE"
)

func (e TemplateUpdateTemplateTypeResponse) ToPointer() *TemplateUpdateTemplateTypeResponse {
	return &e
}
func (e *TemplateUpdateTemplateTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PUBLIC":
		fallthrough
	case "PRIVATE":
		*e = TemplateUpdateTemplateTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateUpdateTemplateTypeResponse: %v", v)
	}
}

type TemplateUpdateTemplateVisibilityResponse string

const (
	TemplateUpdateTemplateVisibilityResponseEveryone        TemplateUpdateTemplateVisibilityResponse = "EVERYONE"
	TemplateUpdateTemplateVisibilityResponseManagerAndAbove TemplateUpdateTemplateVisibilityResponse = "MANAGER_AND_ABOVE"
	TemplateUpdateTemplateVisibilityResponseAdmin           TemplateUpdateTemplateVisibilityResponse = "ADMIN"
)

func (e TemplateUpdateTemplateVisibilityResponse) ToPointer() *TemplateUpdateTemplateVisibilityResponse {
	return &e
}
func (e *TemplateUpdateTemplateVisibilityResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = TemplateUpdateTemplateVisibilityResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateUpdateTemplateVisibilityResponse: %v", v)
	}
}

// TemplateUpdateTemplateGlobalAccessAuthResponse - The type of authentication required for the recipient to access the document.
type TemplateUpdateTemplateGlobalAccessAuthResponse string

const (
	TemplateUpdateTemplateGlobalAccessAuthResponseAccount       TemplateUpdateTemplateGlobalAccessAuthResponse = "ACCOUNT"
	TemplateUpdateTemplateGlobalAccessAuthResponseTwoFactorAuth TemplateUpdateTemplateGlobalAccessAuthResponse = "TWO_FACTOR_AUTH"
)

func (e TemplateUpdateTemplateGlobalAccessAuthResponse) ToPointer() *TemplateUpdateTemplateGlobalAccessAuthResponse {
	return &e
}
func (e *TemplateUpdateTemplateGlobalAccessAuthResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = TemplateUpdateTemplateGlobalAccessAuthResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateUpdateTemplateGlobalAccessAuthResponse: %v", v)
	}
}

// TemplateUpdateTemplateGlobalActionAuthResponse - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type TemplateUpdateTemplateGlobalActionAuthResponse string

const (
	TemplateUpdateTemplateGlobalActionAuthResponseAccount       TemplateUpdateTemplateGlobalActionAuthResponse = "ACCOUNT"
	TemplateUpdateTemplateGlobalActionAuthResponsePasskey       TemplateUpdateTemplateGlobalActionAuthResponse = "PASSKEY"
	TemplateUpdateTemplateGlobalActionAuthResponseTwoFactorAuth TemplateUpdateTemplateGlobalActionAuthResponse = "TWO_FACTOR_AUTH"
	TemplateUpdateTemplateGlobalActionAuthResponsePassword      TemplateUpdateTemplateGlobalActionAuthResponse = "PASSWORD"
)

func (e TemplateUpdateTemplateGlobalActionAuthResponse) ToPointer() *TemplateUpdateTemplateGlobalActionAuthResponse {
	return &e
}
func (e *TemplateUpdateTemplateGlobalActionAuthResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		*e = TemplateUpdateTemplateGlobalActionAuthResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateUpdateTemplateGlobalActionAuthResponse: %v", v)
	}
}

type TemplateUpdateTemplateAuthOptions struct {
	GlobalAccessAuth []TemplateUpdateTemplateGlobalAccessAuthResponse `json:"globalAccessAuth"`
	GlobalActionAuth []TemplateUpdateTemplateGlobalActionAuthResponse `json:"globalActionAuth"`
}

func (t *TemplateUpdateTemplateAuthOptions) GetGlobalAccessAuth() []TemplateUpdateTemplateGlobalAccessAuthResponse {
	if t == nil {
		return []TemplateUpdateTemplateGlobalAccessAuthResponse{}
	}
	return t.GlobalAccessAuth
}

func (t *TemplateUpdateTemplateAuthOptions) GetGlobalActionAuth() []TemplateUpdateTemplateGlobalActionAuthResponse {
	if t == nil {
		return []TemplateUpdateTemplateGlobalActionAuthResponse{}
	}
	return t.GlobalActionAuth
}

// TemplateUpdateTemplateResponseBody - Successful response
type TemplateUpdateTemplateResponseBody struct {
	Type                    TemplateUpdateTemplateTypeResponse       `json:"type"`
	Visibility              TemplateUpdateTemplateVisibilityResponse `json:"visibility"`
	ID                      float64                                  `json:"id"`
	ExternalID              *string                                  `json:"externalId"`
	Title                   string                                   `json:"title"`
	UserID                  float64                                  `json:"userId"`
	TeamID                  float64                                  `json:"teamId"`
	AuthOptions             *TemplateUpdateTemplateAuthOptions       `json:"authOptions"`
	CreatedAt               string                                   `json:"createdAt"`
	UpdatedAt               string                                   `json:"updatedAt"`
	PublicTitle             string                                   `json:"publicTitle"`
	PublicDescription       string                                   `json:"publicDescription"`
	FolderID                *string                                  `json:"folderId"`
	UseLegacyFieldInsertion bool                                     `json:"useLegacyFieldInsertion"`
	EnvelopeID              string                                   `json:"envelopeId"`
	TemplateDocumentDataID  *string                                  `default:"" json:"templateDocumentDataId"`
}

func (t TemplateUpdateTemplateResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateUpdateTemplateResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type", "visibility", "id", "title", "userId", "teamId", "createdAt", "updatedAt", "publicTitle", "publicDescription", "useLegacyFieldInsertion", "envelopeId"}); err != nil {
		return err
	}
	return nil
}

func (t *TemplateUpdateTemplateResponseBody) GetType() TemplateUpdateTemplateTypeResponse {
	if t == nil {
		return TemplateUpdateTemplateTypeResponse("")
	}
	return t.Type
}

func (t *TemplateUpdateTemplateResponseBody) GetVisibility() TemplateUpdateTemplateVisibilityResponse {
	if t == nil {
		return TemplateUpdateTemplateVisibilityResponse("")
	}
	return t.Visibility
}

func (t *TemplateUpdateTemplateResponseBody) GetID() float64 {
	if t == nil {
		return 0.0
	}
	return t.ID
}

func (t *TemplateUpdateTemplateResponseBody) GetExternalID() *string {
	if t == nil {
		return nil
	}
	return t.ExternalID
}

func (t *TemplateUpdateTemplateResponseBody) GetTitle() string {
	if t == nil {
		return ""
	}
	return t.Title
}

func (t *TemplateUpdateTemplateResponseBody) GetUserID() float64 {
	if t == nil {
		return 0.0
	}
	return t.UserID
}

func (t *TemplateUpdateTemplateResponseBody) GetTeamID() float64 {
	if t == nil {
		return 0.0
	}
	return t.TeamID
}

func (t *TemplateUpdateTemplateResponseBody) GetAuthOptions() *TemplateUpdateTemplateAuthOptions {
	if t == nil {
		return nil
	}
	return t.AuthOptions
}

func (t *TemplateUpdateTemplateResponseBody) GetCreatedAt() string {
	if t == nil {
		return ""
	}
	return t.CreatedAt
}

func (t *TemplateUpdateTemplateResponseBody) GetUpdatedAt() string {
	if t == nil {
		return ""
	}
	return t.UpdatedAt
}

func (t *TemplateUpdateTemplateResponseBody) GetPublicTitle() string {
	if t == nil {
		return ""
	}
	return t.PublicTitle
}

func (t *TemplateUpdateTemplateResponseBody) GetPublicDescription() string {
	if t == nil {
		return ""
	}
	return t.PublicDescription
}

func (t *TemplateUpdateTemplateResponseBody) GetFolderID() *string {
	if t == nil {
		return nil
	}
	return t.FolderID
}

func (t *TemplateUpdateTemplateResponseBody) GetUseLegacyFieldInsertion() bool {
	if t == nil {
		return false
	}
	return t.UseLegacyFieldInsertion
}

func (t *TemplateUpdateTemplateResponseBody) GetEnvelopeID() string {
	if t == nil {
		return ""
	}
	return t.EnvelopeID
}

func (t *TemplateUpdateTemplateResponseBody) GetTemplateDocumentDataID() *string {
	if t == nil {
		return nil
	}
	return t.TemplateDocumentDataID
}

type TemplateUpdateTemplateResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *TemplateUpdateTemplateResponseBody
}

func (t *TemplateUpdateTemplateResponse) GetHTTPMeta() components.HTTPMetadata {
	if t == nil {
		return components.HTTPMetadata{}
	}
	return t.HTTPMeta
}

func (t *TemplateUpdateTemplateResponse) GetObject() *TemplateUpdateTemplateResponseBody {
	if t == nil {
		return nil
	}
	return t.Object
}
