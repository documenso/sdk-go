// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldGetDocumentFieldRequest struct {
	FieldID float64 `pathParam:"style=simple,explode=false,name=fieldId"`
}

func (f *FieldGetDocumentFieldRequest) GetFieldID() float64 {
	if f == nil {
		return 0.0
	}
	return f.FieldID
}

type FieldGetDocumentFieldType string

const (
	FieldGetDocumentFieldTypeSignature     FieldGetDocumentFieldType = "SIGNATURE"
	FieldGetDocumentFieldTypeFreeSignature FieldGetDocumentFieldType = "FREE_SIGNATURE"
	FieldGetDocumentFieldTypeInitials      FieldGetDocumentFieldType = "INITIALS"
	FieldGetDocumentFieldTypeName          FieldGetDocumentFieldType = "NAME"
	FieldGetDocumentFieldTypeEmail         FieldGetDocumentFieldType = "EMAIL"
	FieldGetDocumentFieldTypeDate          FieldGetDocumentFieldType = "DATE"
	FieldGetDocumentFieldTypeText          FieldGetDocumentFieldType = "TEXT"
	FieldGetDocumentFieldTypeNumber        FieldGetDocumentFieldType = "NUMBER"
	FieldGetDocumentFieldTypeRadio         FieldGetDocumentFieldType = "RADIO"
	FieldGetDocumentFieldTypeCheckbox      FieldGetDocumentFieldType = "CHECKBOX"
	FieldGetDocumentFieldTypeDropdown      FieldGetDocumentFieldType = "DROPDOWN"
)

func (e FieldGetDocumentFieldType) ToPointer() *FieldGetDocumentFieldType {
	return &e
}
func (e *FieldGetDocumentFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldGetDocumentFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldType: %v", v)
	}
}

type FieldGetDocumentFieldFieldMetaTypeDropdown string

const (
	FieldGetDocumentFieldFieldMetaTypeDropdownDropdown FieldGetDocumentFieldFieldMetaTypeDropdown = "dropdown"
)

func (e FieldGetDocumentFieldFieldMetaTypeDropdown) ToPointer() *FieldGetDocumentFieldFieldMetaTypeDropdown {
	return &e
}
func (e *FieldGetDocumentFieldFieldMetaTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldGetDocumentFieldFieldMetaTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldFieldMetaTypeDropdown: %v", v)
	}
}

type FieldGetDocumentFieldValue3 struct {
	Value string `json:"value"`
}

func (f FieldGetDocumentFieldValue3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetDocumentFieldValue3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetDocumentFieldValue3) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldGetDocumentFieldFieldMetaDropdown struct {
	Label        *string                                    `json:"label,omitempty"`
	Placeholder  *string                                    `json:"placeholder,omitempty"`
	Required     *bool                                      `json:"required,omitempty"`
	ReadOnly     *bool                                      `json:"readOnly,omitempty"`
	Type         FieldGetDocumentFieldFieldMetaTypeDropdown `json:"type"`
	Values       []FieldGetDocumentFieldValue3              `json:"values,omitempty"`
	DefaultValue *string                                    `json:"defaultValue,omitempty"`
}

func (f FieldGetDocumentFieldFieldMetaDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetDocumentFieldFieldMetaDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetDocumentFieldFieldMetaDropdown) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetDocumentFieldFieldMetaDropdown) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetDocumentFieldFieldMetaDropdown) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetDocumentFieldFieldMetaDropdown) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetDocumentFieldFieldMetaDropdown) GetType() FieldGetDocumentFieldFieldMetaTypeDropdown {
	if f == nil {
		return FieldGetDocumentFieldFieldMetaTypeDropdown("")
	}
	return f.Type
}

func (f *FieldGetDocumentFieldFieldMetaDropdown) GetValues() []FieldGetDocumentFieldValue3 {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldGetDocumentFieldFieldMetaDropdown) GetDefaultValue() *string {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

type FieldGetDocumentFieldFieldMetaTypeCheckbox string

const (
	FieldGetDocumentFieldFieldMetaTypeCheckboxCheckbox FieldGetDocumentFieldFieldMetaTypeCheckbox = "checkbox"
)

func (e FieldGetDocumentFieldFieldMetaTypeCheckbox) ToPointer() *FieldGetDocumentFieldFieldMetaTypeCheckbox {
	return &e
}
func (e *FieldGetDocumentFieldFieldMetaTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldGetDocumentFieldFieldMetaTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldFieldMetaTypeCheckbox: %v", v)
	}
}

type FieldGetDocumentFieldValue2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldGetDocumentFieldValue2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetDocumentFieldValue2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetDocumentFieldValue2) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldGetDocumentFieldValue2) GetChecked() bool {
	if f == nil {
		return false
	}
	return f.Checked
}

func (f *FieldGetDocumentFieldValue2) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldGetDocumentFieldDirection string

const (
	FieldGetDocumentFieldDirectionVertical   FieldGetDocumentFieldDirection = "vertical"
	FieldGetDocumentFieldDirectionHorizontal FieldGetDocumentFieldDirection = "horizontal"
)

func (e FieldGetDocumentFieldDirection) ToPointer() *FieldGetDocumentFieldDirection {
	return &e
}
func (e *FieldGetDocumentFieldDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vertical":
		fallthrough
	case "horizontal":
		*e = FieldGetDocumentFieldDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldDirection: %v", v)
	}
}

type FieldGetDocumentFieldFieldMetaCheckbox struct {
	Label            *string                                    `json:"label,omitempty"`
	Placeholder      *string                                    `json:"placeholder,omitempty"`
	Required         *bool                                      `json:"required,omitempty"`
	ReadOnly         *bool                                      `json:"readOnly,omitempty"`
	Type             FieldGetDocumentFieldFieldMetaTypeCheckbox `json:"type"`
	Values           []FieldGetDocumentFieldValue2              `json:"values,omitempty"`
	ValidationRule   *string                                    `json:"validationRule,omitempty"`
	ValidationLength *float64                                   `json:"validationLength,omitempty"`
	Direction        *FieldGetDocumentFieldDirection            `default:"vertical" json:"direction"`
}

func (f FieldGetDocumentFieldFieldMetaCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetDocumentFieldFieldMetaCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetDocumentFieldFieldMetaCheckbox) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetDocumentFieldFieldMetaCheckbox) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetDocumentFieldFieldMetaCheckbox) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetDocumentFieldFieldMetaCheckbox) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetDocumentFieldFieldMetaCheckbox) GetType() FieldGetDocumentFieldFieldMetaTypeCheckbox {
	if f == nil {
		return FieldGetDocumentFieldFieldMetaTypeCheckbox("")
	}
	return f.Type
}

func (f *FieldGetDocumentFieldFieldMetaCheckbox) GetValues() []FieldGetDocumentFieldValue2 {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldGetDocumentFieldFieldMetaCheckbox) GetValidationRule() *string {
	if f == nil {
		return nil
	}
	return f.ValidationRule
}

func (f *FieldGetDocumentFieldFieldMetaCheckbox) GetValidationLength() *float64 {
	if f == nil {
		return nil
	}
	return f.ValidationLength
}

func (f *FieldGetDocumentFieldFieldMetaCheckbox) GetDirection() *FieldGetDocumentFieldDirection {
	if f == nil {
		return nil
	}
	return f.Direction
}

type FieldGetDocumentFieldFieldMetaTypeRadio string

const (
	FieldGetDocumentFieldFieldMetaTypeRadioRadio FieldGetDocumentFieldFieldMetaTypeRadio = "radio"
)

func (e FieldGetDocumentFieldFieldMetaTypeRadio) ToPointer() *FieldGetDocumentFieldFieldMetaTypeRadio {
	return &e
}
func (e *FieldGetDocumentFieldFieldMetaTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldGetDocumentFieldFieldMetaTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldFieldMetaTypeRadio: %v", v)
	}
}

type FieldGetDocumentFieldValue1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldGetDocumentFieldValue1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetDocumentFieldValue1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetDocumentFieldValue1) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldGetDocumentFieldValue1) GetChecked() bool {
	if f == nil {
		return false
	}
	return f.Checked
}

func (f *FieldGetDocumentFieldValue1) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldGetDocumentFieldFieldMetaRadio struct {
	Label       *string                                 `json:"label,omitempty"`
	Placeholder *string                                 `json:"placeholder,omitempty"`
	Required    *bool                                   `json:"required,omitempty"`
	ReadOnly    *bool                                   `json:"readOnly,omitempty"`
	Type        FieldGetDocumentFieldFieldMetaTypeRadio `json:"type"`
	Values      []FieldGetDocumentFieldValue1           `json:"values,omitempty"`
}

func (f FieldGetDocumentFieldFieldMetaRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetDocumentFieldFieldMetaRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetDocumentFieldFieldMetaRadio) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetDocumentFieldFieldMetaRadio) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetDocumentFieldFieldMetaRadio) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetDocumentFieldFieldMetaRadio) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetDocumentFieldFieldMetaRadio) GetType() FieldGetDocumentFieldFieldMetaTypeRadio {
	if f == nil {
		return FieldGetDocumentFieldFieldMetaTypeRadio("")
	}
	return f.Type
}

func (f *FieldGetDocumentFieldFieldMetaRadio) GetValues() []FieldGetDocumentFieldValue1 {
	if f == nil {
		return nil
	}
	return f.Values
}

type FieldGetDocumentFieldFieldMetaTypeNumber string

const (
	FieldGetDocumentFieldFieldMetaTypeNumberNumber FieldGetDocumentFieldFieldMetaTypeNumber = "number"
)

func (e FieldGetDocumentFieldFieldMetaTypeNumber) ToPointer() *FieldGetDocumentFieldFieldMetaTypeNumber {
	return &e
}
func (e *FieldGetDocumentFieldFieldMetaTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldGetDocumentFieldFieldMetaTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldFieldMetaTypeNumber: %v", v)
	}
}

type FieldGetDocumentFieldTextAlign6 string

const (
	FieldGetDocumentFieldTextAlign6Left   FieldGetDocumentFieldTextAlign6 = "left"
	FieldGetDocumentFieldTextAlign6Center FieldGetDocumentFieldTextAlign6 = "center"
	FieldGetDocumentFieldTextAlign6Right  FieldGetDocumentFieldTextAlign6 = "right"
)

func (e FieldGetDocumentFieldTextAlign6) ToPointer() *FieldGetDocumentFieldTextAlign6 {
	return &e
}
func (e *FieldGetDocumentFieldTextAlign6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldGetDocumentFieldTextAlign6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldTextAlign6: %v", v)
	}
}

type FieldGetDocumentFieldFieldMetaNumber struct {
	Label        *string                                  `json:"label,omitempty"`
	Placeholder  *string                                  `json:"placeholder,omitempty"`
	Required     *bool                                    `json:"required,omitempty"`
	ReadOnly     *bool                                    `json:"readOnly,omitempty"`
	Type         FieldGetDocumentFieldFieldMetaTypeNumber `json:"type"`
	NumberFormat *string                                  `json:"numberFormat,omitempty"`
	Value        *string                                  `json:"value,omitempty"`
	MinValue     *float64                                 `json:"minValue,omitempty"`
	MaxValue     *float64                                 `json:"maxValue,omitempty"`
	FontSize     *float64                                 `json:"fontSize,omitempty"`
	TextAlign    *FieldGetDocumentFieldTextAlign6         `json:"textAlign,omitempty"`
}

func (f FieldGetDocumentFieldFieldMetaNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetDocumentFieldFieldMetaNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetDocumentFieldFieldMetaNumber) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetDocumentFieldFieldMetaNumber) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetDocumentFieldFieldMetaNumber) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetDocumentFieldFieldMetaNumber) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetDocumentFieldFieldMetaNumber) GetType() FieldGetDocumentFieldFieldMetaTypeNumber {
	if f == nil {
		return FieldGetDocumentFieldFieldMetaTypeNumber("")
	}
	return f.Type
}

func (f *FieldGetDocumentFieldFieldMetaNumber) GetNumberFormat() *string {
	if f == nil {
		return nil
	}
	return f.NumberFormat
}

func (f *FieldGetDocumentFieldFieldMetaNumber) GetValue() *string {
	if f == nil {
		return nil
	}
	return f.Value
}

func (f *FieldGetDocumentFieldFieldMetaNumber) GetMinValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MinValue
}

func (f *FieldGetDocumentFieldFieldMetaNumber) GetMaxValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MaxValue
}

func (f *FieldGetDocumentFieldFieldMetaNumber) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldGetDocumentFieldFieldMetaNumber) GetTextAlign() *FieldGetDocumentFieldTextAlign6 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldGetDocumentFieldFieldMetaTypeText string

const (
	FieldGetDocumentFieldFieldMetaTypeTextText FieldGetDocumentFieldFieldMetaTypeText = "text"
)

func (e FieldGetDocumentFieldFieldMetaTypeText) ToPointer() *FieldGetDocumentFieldFieldMetaTypeText {
	return &e
}
func (e *FieldGetDocumentFieldFieldMetaTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldGetDocumentFieldFieldMetaTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldFieldMetaTypeText: %v", v)
	}
}

type FieldGetDocumentFieldTextAlign5 string

const (
	FieldGetDocumentFieldTextAlign5Left   FieldGetDocumentFieldTextAlign5 = "left"
	FieldGetDocumentFieldTextAlign5Center FieldGetDocumentFieldTextAlign5 = "center"
	FieldGetDocumentFieldTextAlign5Right  FieldGetDocumentFieldTextAlign5 = "right"
)

func (e FieldGetDocumentFieldTextAlign5) ToPointer() *FieldGetDocumentFieldTextAlign5 {
	return &e
}
func (e *FieldGetDocumentFieldTextAlign5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldGetDocumentFieldTextAlign5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldTextAlign5: %v", v)
	}
}

type FieldGetDocumentFieldFieldMetaText struct {
	Label          *string                                `json:"label,omitempty"`
	Placeholder    *string                                `json:"placeholder,omitempty"`
	Required       *bool                                  `json:"required,omitempty"`
	ReadOnly       *bool                                  `json:"readOnly,omitempty"`
	Type           FieldGetDocumentFieldFieldMetaTypeText `json:"type"`
	Text           *string                                `json:"text,omitempty"`
	CharacterLimit *float64                               `json:"characterLimit,omitempty"`
	FontSize       *float64                               `json:"fontSize,omitempty"`
	TextAlign      *FieldGetDocumentFieldTextAlign5       `json:"textAlign,omitempty"`
}

func (f FieldGetDocumentFieldFieldMetaText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetDocumentFieldFieldMetaText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetDocumentFieldFieldMetaText) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetDocumentFieldFieldMetaText) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetDocumentFieldFieldMetaText) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetDocumentFieldFieldMetaText) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetDocumentFieldFieldMetaText) GetType() FieldGetDocumentFieldFieldMetaTypeText {
	if f == nil {
		return FieldGetDocumentFieldFieldMetaTypeText("")
	}
	return f.Type
}

func (f *FieldGetDocumentFieldFieldMetaText) GetText() *string {
	if f == nil {
		return nil
	}
	return f.Text
}

func (f *FieldGetDocumentFieldFieldMetaText) GetCharacterLimit() *float64 {
	if f == nil {
		return nil
	}
	return f.CharacterLimit
}

func (f *FieldGetDocumentFieldFieldMetaText) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldGetDocumentFieldFieldMetaText) GetTextAlign() *FieldGetDocumentFieldTextAlign5 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldGetDocumentFieldFieldMetaTypeDate string

const (
	FieldGetDocumentFieldFieldMetaTypeDateDate FieldGetDocumentFieldFieldMetaTypeDate = "date"
)

func (e FieldGetDocumentFieldFieldMetaTypeDate) ToPointer() *FieldGetDocumentFieldFieldMetaTypeDate {
	return &e
}
func (e *FieldGetDocumentFieldFieldMetaTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldGetDocumentFieldFieldMetaTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldFieldMetaTypeDate: %v", v)
	}
}

type FieldGetDocumentFieldTextAlign4 string

const (
	FieldGetDocumentFieldTextAlign4Left   FieldGetDocumentFieldTextAlign4 = "left"
	FieldGetDocumentFieldTextAlign4Center FieldGetDocumentFieldTextAlign4 = "center"
	FieldGetDocumentFieldTextAlign4Right  FieldGetDocumentFieldTextAlign4 = "right"
)

func (e FieldGetDocumentFieldTextAlign4) ToPointer() *FieldGetDocumentFieldTextAlign4 {
	return &e
}
func (e *FieldGetDocumentFieldTextAlign4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldGetDocumentFieldTextAlign4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldTextAlign4: %v", v)
	}
}

type FieldGetDocumentFieldFieldMetaDate struct {
	Label       *string                                `json:"label,omitempty"`
	Placeholder *string                                `json:"placeholder,omitempty"`
	Required    *bool                                  `json:"required,omitempty"`
	ReadOnly    *bool                                  `json:"readOnly,omitempty"`
	Type        FieldGetDocumentFieldFieldMetaTypeDate `json:"type"`
	FontSize    *float64                               `json:"fontSize,omitempty"`
	TextAlign   *FieldGetDocumentFieldTextAlign4       `json:"textAlign,omitempty"`
}

func (f FieldGetDocumentFieldFieldMetaDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetDocumentFieldFieldMetaDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetDocumentFieldFieldMetaDate) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetDocumentFieldFieldMetaDate) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetDocumentFieldFieldMetaDate) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetDocumentFieldFieldMetaDate) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetDocumentFieldFieldMetaDate) GetType() FieldGetDocumentFieldFieldMetaTypeDate {
	if f == nil {
		return FieldGetDocumentFieldFieldMetaTypeDate("")
	}
	return f.Type
}

func (f *FieldGetDocumentFieldFieldMetaDate) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldGetDocumentFieldFieldMetaDate) GetTextAlign() *FieldGetDocumentFieldTextAlign4 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldGetDocumentFieldFieldMetaTypeEmail string

const (
	FieldGetDocumentFieldFieldMetaTypeEmailEmail FieldGetDocumentFieldFieldMetaTypeEmail = "email"
)

func (e FieldGetDocumentFieldFieldMetaTypeEmail) ToPointer() *FieldGetDocumentFieldFieldMetaTypeEmail {
	return &e
}
func (e *FieldGetDocumentFieldFieldMetaTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldGetDocumentFieldFieldMetaTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldFieldMetaTypeEmail: %v", v)
	}
}

type FieldGetDocumentFieldTextAlign3 string

const (
	FieldGetDocumentFieldTextAlign3Left   FieldGetDocumentFieldTextAlign3 = "left"
	FieldGetDocumentFieldTextAlign3Center FieldGetDocumentFieldTextAlign3 = "center"
	FieldGetDocumentFieldTextAlign3Right  FieldGetDocumentFieldTextAlign3 = "right"
)

func (e FieldGetDocumentFieldTextAlign3) ToPointer() *FieldGetDocumentFieldTextAlign3 {
	return &e
}
func (e *FieldGetDocumentFieldTextAlign3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldGetDocumentFieldTextAlign3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldTextAlign3: %v", v)
	}
}

type FieldGetDocumentFieldFieldMetaEmail struct {
	Label       *string                                 `json:"label,omitempty"`
	Placeholder *string                                 `json:"placeholder,omitempty"`
	Required    *bool                                   `json:"required,omitempty"`
	ReadOnly    *bool                                   `json:"readOnly,omitempty"`
	Type        FieldGetDocumentFieldFieldMetaTypeEmail `json:"type"`
	FontSize    *float64                                `json:"fontSize,omitempty"`
	TextAlign   *FieldGetDocumentFieldTextAlign3        `json:"textAlign,omitempty"`
}

func (f FieldGetDocumentFieldFieldMetaEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetDocumentFieldFieldMetaEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetDocumentFieldFieldMetaEmail) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetDocumentFieldFieldMetaEmail) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetDocumentFieldFieldMetaEmail) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetDocumentFieldFieldMetaEmail) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetDocumentFieldFieldMetaEmail) GetType() FieldGetDocumentFieldFieldMetaTypeEmail {
	if f == nil {
		return FieldGetDocumentFieldFieldMetaTypeEmail("")
	}
	return f.Type
}

func (f *FieldGetDocumentFieldFieldMetaEmail) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldGetDocumentFieldFieldMetaEmail) GetTextAlign() *FieldGetDocumentFieldTextAlign3 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldGetDocumentFieldFieldMetaTypeName string

const (
	FieldGetDocumentFieldFieldMetaTypeNameName FieldGetDocumentFieldFieldMetaTypeName = "name"
)

func (e FieldGetDocumentFieldFieldMetaTypeName) ToPointer() *FieldGetDocumentFieldFieldMetaTypeName {
	return &e
}
func (e *FieldGetDocumentFieldFieldMetaTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldGetDocumentFieldFieldMetaTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldFieldMetaTypeName: %v", v)
	}
}

type FieldGetDocumentFieldTextAlign2 string

const (
	FieldGetDocumentFieldTextAlign2Left   FieldGetDocumentFieldTextAlign2 = "left"
	FieldGetDocumentFieldTextAlign2Center FieldGetDocumentFieldTextAlign2 = "center"
	FieldGetDocumentFieldTextAlign2Right  FieldGetDocumentFieldTextAlign2 = "right"
)

func (e FieldGetDocumentFieldTextAlign2) ToPointer() *FieldGetDocumentFieldTextAlign2 {
	return &e
}
func (e *FieldGetDocumentFieldTextAlign2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldGetDocumentFieldTextAlign2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldTextAlign2: %v", v)
	}
}

type FieldGetDocumentFieldFieldMetaName struct {
	Label       *string                                `json:"label,omitempty"`
	Placeholder *string                                `json:"placeholder,omitempty"`
	Required    *bool                                  `json:"required,omitempty"`
	ReadOnly    *bool                                  `json:"readOnly,omitempty"`
	Type        FieldGetDocumentFieldFieldMetaTypeName `json:"type"`
	FontSize    *float64                               `json:"fontSize,omitempty"`
	TextAlign   *FieldGetDocumentFieldTextAlign2       `json:"textAlign,omitempty"`
}

func (f FieldGetDocumentFieldFieldMetaName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetDocumentFieldFieldMetaName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetDocumentFieldFieldMetaName) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetDocumentFieldFieldMetaName) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetDocumentFieldFieldMetaName) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetDocumentFieldFieldMetaName) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetDocumentFieldFieldMetaName) GetType() FieldGetDocumentFieldFieldMetaTypeName {
	if f == nil {
		return FieldGetDocumentFieldFieldMetaTypeName("")
	}
	return f.Type
}

func (f *FieldGetDocumentFieldFieldMetaName) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldGetDocumentFieldFieldMetaName) GetTextAlign() *FieldGetDocumentFieldTextAlign2 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldGetDocumentFieldFieldMetaTypeInitials string

const (
	FieldGetDocumentFieldFieldMetaTypeInitialsInitials FieldGetDocumentFieldFieldMetaTypeInitials = "initials"
)

func (e FieldGetDocumentFieldFieldMetaTypeInitials) ToPointer() *FieldGetDocumentFieldFieldMetaTypeInitials {
	return &e
}
func (e *FieldGetDocumentFieldFieldMetaTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldGetDocumentFieldFieldMetaTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldFieldMetaTypeInitials: %v", v)
	}
}

type FieldGetDocumentFieldTextAlign1 string

const (
	FieldGetDocumentFieldTextAlign1Left   FieldGetDocumentFieldTextAlign1 = "left"
	FieldGetDocumentFieldTextAlign1Center FieldGetDocumentFieldTextAlign1 = "center"
	FieldGetDocumentFieldTextAlign1Right  FieldGetDocumentFieldTextAlign1 = "right"
)

func (e FieldGetDocumentFieldTextAlign1) ToPointer() *FieldGetDocumentFieldTextAlign1 {
	return &e
}
func (e *FieldGetDocumentFieldTextAlign1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldGetDocumentFieldTextAlign1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldGetDocumentFieldTextAlign1: %v", v)
	}
}

type FieldGetDocumentFieldFieldMetaInitials struct {
	Label       *string                                    `json:"label,omitempty"`
	Placeholder *string                                    `json:"placeholder,omitempty"`
	Required    *bool                                      `json:"required,omitempty"`
	ReadOnly    *bool                                      `json:"readOnly,omitempty"`
	Type        FieldGetDocumentFieldFieldMetaTypeInitials `json:"type"`
	FontSize    *float64                                   `json:"fontSize,omitempty"`
	TextAlign   *FieldGetDocumentFieldTextAlign1           `json:"textAlign,omitempty"`
}

func (f FieldGetDocumentFieldFieldMetaInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldGetDocumentFieldFieldMetaInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldGetDocumentFieldFieldMetaInitials) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldGetDocumentFieldFieldMetaInitials) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldGetDocumentFieldFieldMetaInitials) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldGetDocumentFieldFieldMetaInitials) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldGetDocumentFieldFieldMetaInitials) GetType() FieldGetDocumentFieldFieldMetaTypeInitials {
	if f == nil {
		return FieldGetDocumentFieldFieldMetaTypeInitials("")
	}
	return f.Type
}

func (f *FieldGetDocumentFieldFieldMetaInitials) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldGetDocumentFieldFieldMetaInitials) GetTextAlign() *FieldGetDocumentFieldTextAlign1 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldGetDocumentFieldFieldMetaUnionType string

const (
	FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaInitials FieldGetDocumentFieldFieldMetaUnionType = "field_getDocumentField_fieldMeta_Initials"
	FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaName     FieldGetDocumentFieldFieldMetaUnionType = "field_getDocumentField_fieldMeta_Name"
	FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaEmail    FieldGetDocumentFieldFieldMetaUnionType = "field_getDocumentField_fieldMeta_Email"
	FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaDate     FieldGetDocumentFieldFieldMetaUnionType = "field_getDocumentField_fieldMeta_Date"
	FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaText     FieldGetDocumentFieldFieldMetaUnionType = "field_getDocumentField_fieldMeta_Text"
	FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaNumber   FieldGetDocumentFieldFieldMetaUnionType = "field_getDocumentField_fieldMeta_Number"
	FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaRadio    FieldGetDocumentFieldFieldMetaUnionType = "field_getDocumentField_fieldMeta_Radio"
	FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaCheckbox FieldGetDocumentFieldFieldMetaUnionType = "field_getDocumentField_fieldMeta_Checkbox"
	FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaDropdown FieldGetDocumentFieldFieldMetaUnionType = "field_getDocumentField_fieldMeta_Dropdown"
)

type FieldGetDocumentFieldFieldMetaUnion struct {
	FieldGetDocumentFieldFieldMetaInitials *FieldGetDocumentFieldFieldMetaInitials `queryParam:"inline,name=fieldMeta"`
	FieldGetDocumentFieldFieldMetaName     *FieldGetDocumentFieldFieldMetaName     `queryParam:"inline,name=fieldMeta"`
	FieldGetDocumentFieldFieldMetaEmail    *FieldGetDocumentFieldFieldMetaEmail    `queryParam:"inline,name=fieldMeta"`
	FieldGetDocumentFieldFieldMetaDate     *FieldGetDocumentFieldFieldMetaDate     `queryParam:"inline,name=fieldMeta"`
	FieldGetDocumentFieldFieldMetaText     *FieldGetDocumentFieldFieldMetaText     `queryParam:"inline,name=fieldMeta"`
	FieldGetDocumentFieldFieldMetaNumber   *FieldGetDocumentFieldFieldMetaNumber   `queryParam:"inline,name=fieldMeta"`
	FieldGetDocumentFieldFieldMetaRadio    *FieldGetDocumentFieldFieldMetaRadio    `queryParam:"inline,name=fieldMeta"`
	FieldGetDocumentFieldFieldMetaCheckbox *FieldGetDocumentFieldFieldMetaCheckbox `queryParam:"inline,name=fieldMeta"`
	FieldGetDocumentFieldFieldMetaDropdown *FieldGetDocumentFieldFieldMetaDropdown `queryParam:"inline,name=fieldMeta"`

	Type FieldGetDocumentFieldFieldMetaUnionType
}

func CreateFieldGetDocumentFieldFieldMetaUnionFieldGetDocumentFieldFieldMetaInitials(fieldGetDocumentFieldFieldMetaInitials FieldGetDocumentFieldFieldMetaInitials) FieldGetDocumentFieldFieldMetaUnion {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaInitials

	return FieldGetDocumentFieldFieldMetaUnion{
		FieldGetDocumentFieldFieldMetaInitials: &fieldGetDocumentFieldFieldMetaInitials,
		Type:                                   typ,
	}
}

func CreateFieldGetDocumentFieldFieldMetaUnionFieldGetDocumentFieldFieldMetaName(fieldGetDocumentFieldFieldMetaName FieldGetDocumentFieldFieldMetaName) FieldGetDocumentFieldFieldMetaUnion {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaName

	return FieldGetDocumentFieldFieldMetaUnion{
		FieldGetDocumentFieldFieldMetaName: &fieldGetDocumentFieldFieldMetaName,
		Type:                               typ,
	}
}

func CreateFieldGetDocumentFieldFieldMetaUnionFieldGetDocumentFieldFieldMetaEmail(fieldGetDocumentFieldFieldMetaEmail FieldGetDocumentFieldFieldMetaEmail) FieldGetDocumentFieldFieldMetaUnion {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaEmail

	return FieldGetDocumentFieldFieldMetaUnion{
		FieldGetDocumentFieldFieldMetaEmail: &fieldGetDocumentFieldFieldMetaEmail,
		Type:                                typ,
	}
}

func CreateFieldGetDocumentFieldFieldMetaUnionFieldGetDocumentFieldFieldMetaDate(fieldGetDocumentFieldFieldMetaDate FieldGetDocumentFieldFieldMetaDate) FieldGetDocumentFieldFieldMetaUnion {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaDate

	return FieldGetDocumentFieldFieldMetaUnion{
		FieldGetDocumentFieldFieldMetaDate: &fieldGetDocumentFieldFieldMetaDate,
		Type:                               typ,
	}
}

func CreateFieldGetDocumentFieldFieldMetaUnionFieldGetDocumentFieldFieldMetaText(fieldGetDocumentFieldFieldMetaText FieldGetDocumentFieldFieldMetaText) FieldGetDocumentFieldFieldMetaUnion {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaText

	return FieldGetDocumentFieldFieldMetaUnion{
		FieldGetDocumentFieldFieldMetaText: &fieldGetDocumentFieldFieldMetaText,
		Type:                               typ,
	}
}

func CreateFieldGetDocumentFieldFieldMetaUnionFieldGetDocumentFieldFieldMetaNumber(fieldGetDocumentFieldFieldMetaNumber FieldGetDocumentFieldFieldMetaNumber) FieldGetDocumentFieldFieldMetaUnion {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaNumber

	return FieldGetDocumentFieldFieldMetaUnion{
		FieldGetDocumentFieldFieldMetaNumber: &fieldGetDocumentFieldFieldMetaNumber,
		Type:                                 typ,
	}
}

func CreateFieldGetDocumentFieldFieldMetaUnionFieldGetDocumentFieldFieldMetaRadio(fieldGetDocumentFieldFieldMetaRadio FieldGetDocumentFieldFieldMetaRadio) FieldGetDocumentFieldFieldMetaUnion {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaRadio

	return FieldGetDocumentFieldFieldMetaUnion{
		FieldGetDocumentFieldFieldMetaRadio: &fieldGetDocumentFieldFieldMetaRadio,
		Type:                                typ,
	}
}

func CreateFieldGetDocumentFieldFieldMetaUnionFieldGetDocumentFieldFieldMetaCheckbox(fieldGetDocumentFieldFieldMetaCheckbox FieldGetDocumentFieldFieldMetaCheckbox) FieldGetDocumentFieldFieldMetaUnion {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaCheckbox

	return FieldGetDocumentFieldFieldMetaUnion{
		FieldGetDocumentFieldFieldMetaCheckbox: &fieldGetDocumentFieldFieldMetaCheckbox,
		Type:                                   typ,
	}
}

func CreateFieldGetDocumentFieldFieldMetaUnionFieldGetDocumentFieldFieldMetaDropdown(fieldGetDocumentFieldFieldMetaDropdown FieldGetDocumentFieldFieldMetaDropdown) FieldGetDocumentFieldFieldMetaUnion {
	typ := FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaDropdown

	return FieldGetDocumentFieldFieldMetaUnion{
		FieldGetDocumentFieldFieldMetaDropdown: &fieldGetDocumentFieldFieldMetaDropdown,
		Type:                                   typ,
	}
}

func (u *FieldGetDocumentFieldFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var fieldGetDocumentFieldFieldMetaInitials FieldGetDocumentFieldFieldMetaInitials = FieldGetDocumentFieldFieldMetaInitials{}
	if err := utils.UnmarshalJSON(data, &fieldGetDocumentFieldFieldMetaInitials, "", true, nil); err == nil {
		u.FieldGetDocumentFieldFieldMetaInitials = &fieldGetDocumentFieldFieldMetaInitials
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaInitials
		return nil
	}

	var fieldGetDocumentFieldFieldMetaName FieldGetDocumentFieldFieldMetaName = FieldGetDocumentFieldFieldMetaName{}
	if err := utils.UnmarshalJSON(data, &fieldGetDocumentFieldFieldMetaName, "", true, nil); err == nil {
		u.FieldGetDocumentFieldFieldMetaName = &fieldGetDocumentFieldFieldMetaName
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaName
		return nil
	}

	var fieldGetDocumentFieldFieldMetaEmail FieldGetDocumentFieldFieldMetaEmail = FieldGetDocumentFieldFieldMetaEmail{}
	if err := utils.UnmarshalJSON(data, &fieldGetDocumentFieldFieldMetaEmail, "", true, nil); err == nil {
		u.FieldGetDocumentFieldFieldMetaEmail = &fieldGetDocumentFieldFieldMetaEmail
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaEmail
		return nil
	}

	var fieldGetDocumentFieldFieldMetaDate FieldGetDocumentFieldFieldMetaDate = FieldGetDocumentFieldFieldMetaDate{}
	if err := utils.UnmarshalJSON(data, &fieldGetDocumentFieldFieldMetaDate, "", true, nil); err == nil {
		u.FieldGetDocumentFieldFieldMetaDate = &fieldGetDocumentFieldFieldMetaDate
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaDate
		return nil
	}

	var fieldGetDocumentFieldFieldMetaText FieldGetDocumentFieldFieldMetaText = FieldGetDocumentFieldFieldMetaText{}
	if err := utils.UnmarshalJSON(data, &fieldGetDocumentFieldFieldMetaText, "", true, nil); err == nil {
		u.FieldGetDocumentFieldFieldMetaText = &fieldGetDocumentFieldFieldMetaText
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaText
		return nil
	}

	var fieldGetDocumentFieldFieldMetaNumber FieldGetDocumentFieldFieldMetaNumber = FieldGetDocumentFieldFieldMetaNumber{}
	if err := utils.UnmarshalJSON(data, &fieldGetDocumentFieldFieldMetaNumber, "", true, nil); err == nil {
		u.FieldGetDocumentFieldFieldMetaNumber = &fieldGetDocumentFieldFieldMetaNumber
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaNumber
		return nil
	}

	var fieldGetDocumentFieldFieldMetaRadio FieldGetDocumentFieldFieldMetaRadio = FieldGetDocumentFieldFieldMetaRadio{}
	if err := utils.UnmarshalJSON(data, &fieldGetDocumentFieldFieldMetaRadio, "", true, nil); err == nil {
		u.FieldGetDocumentFieldFieldMetaRadio = &fieldGetDocumentFieldFieldMetaRadio
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaRadio
		return nil
	}

	var fieldGetDocumentFieldFieldMetaCheckbox FieldGetDocumentFieldFieldMetaCheckbox = FieldGetDocumentFieldFieldMetaCheckbox{}
	if err := utils.UnmarshalJSON(data, &fieldGetDocumentFieldFieldMetaCheckbox, "", true, nil); err == nil {
		u.FieldGetDocumentFieldFieldMetaCheckbox = &fieldGetDocumentFieldFieldMetaCheckbox
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaCheckbox
		return nil
	}

	var fieldGetDocumentFieldFieldMetaDropdown FieldGetDocumentFieldFieldMetaDropdown = FieldGetDocumentFieldFieldMetaDropdown{}
	if err := utils.UnmarshalJSON(data, &fieldGetDocumentFieldFieldMetaDropdown, "", true, nil); err == nil {
		u.FieldGetDocumentFieldFieldMetaDropdown = &fieldGetDocumentFieldFieldMetaDropdown
		u.Type = FieldGetDocumentFieldFieldMetaUnionTypeFieldGetDocumentFieldFieldMetaDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldGetDocumentFieldFieldMetaUnion", string(data))
}

func (u FieldGetDocumentFieldFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.FieldGetDocumentFieldFieldMetaInitials != nil {
		return utils.MarshalJSON(u.FieldGetDocumentFieldFieldMetaInitials, "", true)
	}

	if u.FieldGetDocumentFieldFieldMetaName != nil {
		return utils.MarshalJSON(u.FieldGetDocumentFieldFieldMetaName, "", true)
	}

	if u.FieldGetDocumentFieldFieldMetaEmail != nil {
		return utils.MarshalJSON(u.FieldGetDocumentFieldFieldMetaEmail, "", true)
	}

	if u.FieldGetDocumentFieldFieldMetaDate != nil {
		return utils.MarshalJSON(u.FieldGetDocumentFieldFieldMetaDate, "", true)
	}

	if u.FieldGetDocumentFieldFieldMetaText != nil {
		return utils.MarshalJSON(u.FieldGetDocumentFieldFieldMetaText, "", true)
	}

	if u.FieldGetDocumentFieldFieldMetaNumber != nil {
		return utils.MarshalJSON(u.FieldGetDocumentFieldFieldMetaNumber, "", true)
	}

	if u.FieldGetDocumentFieldFieldMetaRadio != nil {
		return utils.MarshalJSON(u.FieldGetDocumentFieldFieldMetaRadio, "", true)
	}

	if u.FieldGetDocumentFieldFieldMetaCheckbox != nil {
		return utils.MarshalJSON(u.FieldGetDocumentFieldFieldMetaCheckbox, "", true)
	}

	if u.FieldGetDocumentFieldFieldMetaDropdown != nil {
		return utils.MarshalJSON(u.FieldGetDocumentFieldFieldMetaDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type FieldGetDocumentFieldFieldMetaUnion: all fields are null")
}

// FieldGetDocumentFieldResponseBody - Successful response
type FieldGetDocumentFieldResponseBody struct {
	EnvelopeID     string                    `json:"envelopeId"`
	EnvelopeItemID string                    `json:"envelopeItemId"`
	Type           FieldGetDocumentFieldType `json:"type"`
	ID             float64                   `json:"id"`
	SecondaryID    string                    `json:"secondaryId"`
	RecipientID    float64                   `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                              `json:"page"`
	PositionX  any                                  `json:"positionX,omitempty"`
	PositionY  any                                  `json:"positionY,omitempty"`
	Width      any                                  `json:"width,omitempty"`
	Height     any                                  `json:"height,omitempty"`
	CustomText string                               `json:"customText"`
	Inserted   bool                                 `json:"inserted"`
	FieldMeta  *FieldGetDocumentFieldFieldMetaUnion `json:"fieldMeta"`
	DocumentID *float64                             `json:"documentId,omitempty"`
	TemplateID *float64                             `json:"templateId,omitempty"`
}

func (f *FieldGetDocumentFieldResponseBody) GetEnvelopeID() string {
	if f == nil {
		return ""
	}
	return f.EnvelopeID
}

func (f *FieldGetDocumentFieldResponseBody) GetEnvelopeItemID() string {
	if f == nil {
		return ""
	}
	return f.EnvelopeItemID
}

func (f *FieldGetDocumentFieldResponseBody) GetType() FieldGetDocumentFieldType {
	if f == nil {
		return FieldGetDocumentFieldType("")
	}
	return f.Type
}

func (f *FieldGetDocumentFieldResponseBody) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldGetDocumentFieldResponseBody) GetSecondaryID() string {
	if f == nil {
		return ""
	}
	return f.SecondaryID
}

func (f *FieldGetDocumentFieldResponseBody) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldGetDocumentFieldResponseBody) GetPage() float64 {
	if f == nil {
		return 0.0
	}
	return f.Page
}

func (f *FieldGetDocumentFieldResponseBody) GetPositionX() any {
	if f == nil {
		return nil
	}
	return f.PositionX
}

func (f *FieldGetDocumentFieldResponseBody) GetPositionY() any {
	if f == nil {
		return nil
	}
	return f.PositionY
}

func (f *FieldGetDocumentFieldResponseBody) GetWidth() any {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FieldGetDocumentFieldResponseBody) GetHeight() any {
	if f == nil {
		return nil
	}
	return f.Height
}

func (f *FieldGetDocumentFieldResponseBody) GetCustomText() string {
	if f == nil {
		return ""
	}
	return f.CustomText
}

func (f *FieldGetDocumentFieldResponseBody) GetInserted() bool {
	if f == nil {
		return false
	}
	return f.Inserted
}

func (f *FieldGetDocumentFieldResponseBody) GetFieldMeta() *FieldGetDocumentFieldFieldMetaUnion {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldGetDocumentFieldResponseBody) GetDocumentID() *float64 {
	if f == nil {
		return nil
	}
	return f.DocumentID
}

func (f *FieldGetDocumentFieldResponseBody) GetTemplateID() *float64 {
	if f == nil {
		return nil
	}
	return f.TemplateID
}

type FieldGetDocumentFieldResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldGetDocumentFieldResponseBody
}

func (f *FieldGetDocumentFieldResponse) GetHTTPMeta() components.HTTPMetadata {
	if f == nil {
		return components.HTTPMetadata{}
	}
	return f.HTTPMeta
}

func (f *FieldGetDocumentFieldResponse) GetObject() *FieldGetDocumentFieldResponseBody {
	if f == nil {
		return nil
	}
	return f.Object
}
