// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/documenso/sdk-go/models/components"
)

type TemplateDuplicateTemplateRequest struct {
	TemplateID float64 `json:"templateId"`
}

func (o *TemplateDuplicateTemplateRequest) GetTemplateID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TemplateID
}

type TemplateDuplicateTemplateType string

const (
	TemplateDuplicateTemplateTypePublic  TemplateDuplicateTemplateType = "PUBLIC"
	TemplateDuplicateTemplateTypePrivate TemplateDuplicateTemplateType = "PRIVATE"
)

func (e TemplateDuplicateTemplateType) ToPointer() *TemplateDuplicateTemplateType {
	return &e
}
func (e *TemplateDuplicateTemplateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PUBLIC":
		fallthrough
	case "PRIVATE":
		*e = TemplateDuplicateTemplateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateDuplicateTemplateType: %v", v)
	}
}

type TemplateDuplicateTemplateVisibility string

const (
	TemplateDuplicateTemplateVisibilityEveryone        TemplateDuplicateTemplateVisibility = "EVERYONE"
	TemplateDuplicateTemplateVisibilityManagerAndAbove TemplateDuplicateTemplateVisibility = "MANAGER_AND_ABOVE"
	TemplateDuplicateTemplateVisibilityAdmin           TemplateDuplicateTemplateVisibility = "ADMIN"
)

func (e TemplateDuplicateTemplateVisibility) ToPointer() *TemplateDuplicateTemplateVisibility {
	return &e
}
func (e *TemplateDuplicateTemplateVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = TemplateDuplicateTemplateVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateDuplicateTemplateVisibility: %v", v)
	}
}

// TemplateDuplicateTemplateGlobalAccessAuth - The type of authentication required for the recipient to access the document.
type TemplateDuplicateTemplateGlobalAccessAuth string

const (
	TemplateDuplicateTemplateGlobalAccessAuthAccount TemplateDuplicateTemplateGlobalAccessAuth = "ACCOUNT"
)

func (e TemplateDuplicateTemplateGlobalAccessAuth) ToPointer() *TemplateDuplicateTemplateGlobalAccessAuth {
	return &e
}
func (e *TemplateDuplicateTemplateGlobalAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = TemplateDuplicateTemplateGlobalAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateDuplicateTemplateGlobalAccessAuth: %v", v)
	}
}

// TemplateDuplicateTemplateGlobalActionAuth - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type TemplateDuplicateTemplateGlobalActionAuth string

const (
	TemplateDuplicateTemplateGlobalActionAuthAccount       TemplateDuplicateTemplateGlobalActionAuth = "ACCOUNT"
	TemplateDuplicateTemplateGlobalActionAuthPasskey       TemplateDuplicateTemplateGlobalActionAuth = "PASSKEY"
	TemplateDuplicateTemplateGlobalActionAuthTwoFactorAuth TemplateDuplicateTemplateGlobalActionAuth = "TWO_FACTOR_AUTH"
	TemplateDuplicateTemplateGlobalActionAuthPassword      TemplateDuplicateTemplateGlobalActionAuth = "PASSWORD"
)

func (e TemplateDuplicateTemplateGlobalActionAuth) ToPointer() *TemplateDuplicateTemplateGlobalActionAuth {
	return &e
}
func (e *TemplateDuplicateTemplateGlobalActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		*e = TemplateDuplicateTemplateGlobalActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateDuplicateTemplateGlobalActionAuth: %v", v)
	}
}

type TemplateDuplicateTemplateAuthOptions struct {
	GlobalAccessAuth []TemplateDuplicateTemplateGlobalAccessAuth `json:"globalAccessAuth"`
	GlobalActionAuth []TemplateDuplicateTemplateGlobalActionAuth `json:"globalActionAuth"`
}

func (o *TemplateDuplicateTemplateAuthOptions) GetGlobalAccessAuth() []TemplateDuplicateTemplateGlobalAccessAuth {
	if o == nil {
		return []TemplateDuplicateTemplateGlobalAccessAuth{}
	}
	return o.GlobalAccessAuth
}

func (o *TemplateDuplicateTemplateAuthOptions) GetGlobalActionAuth() []TemplateDuplicateTemplateGlobalActionAuth {
	if o == nil {
		return []TemplateDuplicateTemplateGlobalActionAuth{}
	}
	return o.GlobalActionAuth
}

// TemplateDuplicateTemplateResponseBody - Successful response
type TemplateDuplicateTemplateResponseBody struct {
	Type                    TemplateDuplicateTemplateType         `json:"type"`
	Visibility              TemplateDuplicateTemplateVisibility   `json:"visibility"`
	ID                      float64                               `json:"id"`
	ExternalID              *string                               `json:"externalId"`
	Title                   string                                `json:"title"`
	UserID                  float64                               `json:"userId"`
	TeamID                  float64                               `json:"teamId"`
	AuthOptions             *TemplateDuplicateTemplateAuthOptions `json:"authOptions"`
	TemplateDocumentDataID  string                                `json:"templateDocumentDataId"`
	CreatedAt               string                                `json:"createdAt"`
	UpdatedAt               string                                `json:"updatedAt"`
	PublicTitle             string                                `json:"publicTitle"`
	PublicDescription       string                                `json:"publicDescription"`
	FolderID                *string                               `json:"folderId"`
	UseLegacyFieldInsertion bool                                  `json:"useLegacyFieldInsertion"`
}

func (o *TemplateDuplicateTemplateResponseBody) GetType() TemplateDuplicateTemplateType {
	if o == nil {
		return TemplateDuplicateTemplateType("")
	}
	return o.Type
}

func (o *TemplateDuplicateTemplateResponseBody) GetVisibility() TemplateDuplicateTemplateVisibility {
	if o == nil {
		return TemplateDuplicateTemplateVisibility("")
	}
	return o.Visibility
}

func (o *TemplateDuplicateTemplateResponseBody) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateDuplicateTemplateResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *TemplateDuplicateTemplateResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *TemplateDuplicateTemplateResponseBody) GetUserID() float64 {
	if o == nil {
		return 0.0
	}
	return o.UserID
}

func (o *TemplateDuplicateTemplateResponseBody) GetTeamID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TeamID
}

func (o *TemplateDuplicateTemplateResponseBody) GetAuthOptions() *TemplateDuplicateTemplateAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *TemplateDuplicateTemplateResponseBody) GetTemplateDocumentDataID() string {
	if o == nil {
		return ""
	}
	return o.TemplateDocumentDataID
}

func (o *TemplateDuplicateTemplateResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *TemplateDuplicateTemplateResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *TemplateDuplicateTemplateResponseBody) GetPublicTitle() string {
	if o == nil {
		return ""
	}
	return o.PublicTitle
}

func (o *TemplateDuplicateTemplateResponseBody) GetPublicDescription() string {
	if o == nil {
		return ""
	}
	return o.PublicDescription
}

func (o *TemplateDuplicateTemplateResponseBody) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

func (o *TemplateDuplicateTemplateResponseBody) GetUseLegacyFieldInsertion() bool {
	if o == nil {
		return false
	}
	return o.UseLegacyFieldInsertion
}

type TemplateDuplicateTemplateResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *TemplateDuplicateTemplateResponseBody
}

func (o *TemplateDuplicateTemplateResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *TemplateDuplicateTemplateResponse) GetObject() *TemplateDuplicateTemplateResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
