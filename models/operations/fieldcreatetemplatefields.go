// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11TypeDropdown FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type = "DROPDOWN"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaTypeDropdown FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType = "dropdown"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues struct {
	Value string `json:"value"`
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta struct {
	Label        *string                                                                         `json:"label,omitempty"`
	Placeholder  *string                                                                         `json:"placeholder,omitempty"`
	Required     *bool                                                                           `json:"required,omitempty"`
	ReadOnly     *bool                                                                           `json:"readOnly,omitempty"`
	Type         FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType `json:"type"`
	Values       []FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues                   `json:"values,omitempty"`
	DefaultValue *string                                                                         `json:"defaultValue,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta) GetValues() []FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldCreateTemplateFieldsFields11 struct {
	Type      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type       `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldsFields11) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFields11) GetFieldMeta() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFields11) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFields11) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFields11) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFields11) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFields11) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFields11) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10TypeCheckbox FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type = "CHECKBOX"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaTypeCheckbox FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType = "checkbox"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta struct {
	Label            *string                                                                         `json:"label,omitempty"`
	Placeholder      *string                                                                         `json:"placeholder,omitempty"`
	Required         *bool                                                                           `json:"required,omitempty"`
	ReadOnly         *bool                                                                           `json:"readOnly,omitempty"`
	Type             FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType `json:"type"`
	Values           []FieldCreateTemplateFieldsFieldsTemplatesFieldsValues                          `json:"values,omitempty"`
	ValidationRule   *string                                                                         `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                        `json:"validationLength,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta) GetValues() []FieldCreateTemplateFieldsFieldsTemplatesFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldCreateTemplateFieldsFields10 struct {
	Type      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type       `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldsFields10) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFields10) GetFieldMeta() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFields10) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFields10) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFields10) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFields10) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFields10) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFields10) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9TypeRadio FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type = "RADIO"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaTypeRadio FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType = "radio"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateTemplateFieldsFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateTemplateFieldsFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateTemplateFieldsFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta struct {
	Label       *string                                                                        `json:"label,omitempty"`
	Placeholder *string                                                                        `json:"placeholder,omitempty"`
	Required    *bool                                                                          `json:"required,omitempty"`
	ReadOnly    *bool                                                                          `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType `json:"type"`
	Values      []FieldCreateTemplateFieldsFieldsValues                                        `json:"values,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta) GetValues() []FieldCreateTemplateFieldsFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldCreateTemplateFieldsFields9 struct {
	Type      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type       `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldsFields9) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFields9) GetFieldMeta() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFields9) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFields9) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFields9) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFields9) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFields9) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFields9) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8TypeNumber FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type = "NUMBER"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaTypeNumber FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType = "number"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta struct {
	Label        *string                                                                        `json:"label,omitempty"`
	Placeholder  *string                                                                        `json:"placeholder,omitempty"`
	Required     *bool                                                                          `json:"required,omitempty"`
	ReadOnly     *bool                                                                          `json:"readOnly,omitempty"`
	Type         FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType `json:"type"`
	NumberFormat *string                                                                        `json:"numberFormat,omitempty"`
	Value        *string                                                                        `json:"value,omitempty"`
	MinValue     *float64                                                                       `json:"minValue,omitempty"`
	MaxValue     *float64                                                                       `json:"maxValue,omitempty"`
	FontSize     *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldsFields8 struct {
	Type      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type       `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldsFields8) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFields8) GetFieldMeta() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFields8) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFields8) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFields8) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFields8) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFields8) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFields8) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7TypeText FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type = "TEXT"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaTypeText FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType = "text"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta struct {
	Label          *string                                                                        `json:"label,omitempty"`
	Placeholder    *string                                                                        `json:"placeholder,omitempty"`
	Required       *bool                                                                          `json:"required,omitempty"`
	ReadOnly       *bool                                                                          `json:"readOnly,omitempty"`
	Type           FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType `json:"type"`
	Text           *string                                                                        `json:"text,omitempty"`
	CharacterLimit *float64                                                                       `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldsFields7 struct {
	Type      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type       `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldsFields7) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFields7) GetFieldMeta() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFields7) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFields7) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFields7) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFields7) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFields7) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFields7) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6TypeDate FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type = "DATE"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaTypeDate FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType = "date"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta struct {
	Label       *string                                                                        `json:"label,omitempty"`
	Placeholder *string                                                                        `json:"placeholder,omitempty"`
	Required    *bool                                                                          `json:"required,omitempty"`
	ReadOnly    *bool                                                                          `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType `json:"type"`
	FontSize    *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldsFields6 struct {
	Type      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldsFields6) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFields6) GetFieldMeta() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFields6) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFields6) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFields6) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFields6) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFields6) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFields6) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5TypeEmail FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type = "EMAIL"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaTypeEmail FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType = "email"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta struct {
	Label       *string                                                                        `json:"label,omitempty"`
	Placeholder *string                                                                        `json:"placeholder,omitempty"`
	Required    *bool                                                                          `json:"required,omitempty"`
	ReadOnly    *bool                                                                          `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType `json:"type"`
	FontSize    *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldsFields5 struct {
	Type      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta       `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldsFields5) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFields5) GetFieldMeta() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFields5) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFields5) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFields5) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFields5) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFields5) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFields5) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4TypeName FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type = "NAME"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaTypeName FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType = "name"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta struct {
	Label       *string                                                                        `json:"label,omitempty"`
	Placeholder *string                                                                        `json:"placeholder,omitempty"`
	Required    *bool                                                                          `json:"required,omitempty"`
	ReadOnly    *bool                                                                          `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType `json:"type"`
	FontSize    *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldsFields4 struct {
	Type      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta              `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldsFields4) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFields4) GetFieldMeta() *FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFields4) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFields4) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFields4) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFields4) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFields4) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFields4) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestTypeInitials FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType = "INITIALS"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyTypeInitials FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType = "initials"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldsFieldMeta struct {
	Label       *string                                                              `json:"label,omitempty"`
	Placeholder *string                                                              `json:"placeholder,omitempty"`
	Required    *bool                                                                `json:"required,omitempty"`
	ReadOnly    *bool                                                                `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType `json:"type"`
	FontSize    *float64                                                             `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldsFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldsFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldsFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldsFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldsFieldMeta) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldsFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldsFields3 struct {
	Type      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldsFieldMeta                 `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldsFields3) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFields3) GetFieldMeta() *FieldCreateTemplateFieldsFieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFields3) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFields3) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFields3) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFields3) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFields3) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFields3) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsFieldsTemplatesFieldsType string

const (
	FieldCreateTemplateFieldsFieldsTemplatesFieldsTypeFreeSignature FieldCreateTemplateFieldsFieldsTemplatesFieldsType = "FREE_SIGNATURE"
)

func (e FieldCreateTemplateFieldsFieldsTemplatesFieldsType) ToPointer() *FieldCreateTemplateFieldsFieldsTemplatesFieldsType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsTemplatesFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldCreateTemplateFieldsFieldsTemplatesFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsTemplatesFieldsType: %v", v)
	}
}

type FieldCreateTemplateFieldsFields2 struct {
	Type FieldCreateTemplateFieldsFieldsTemplatesFieldsType `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldsFields2) GetType() FieldCreateTemplateFieldsFieldsTemplatesFieldsType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsTemplatesFieldsType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFields2) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFields2) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFields2) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFields2) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFields2) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFields2) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsFieldsType string

const (
	FieldCreateTemplateFieldsFieldsTypeSignature FieldCreateTemplateFieldsFieldsType = "SIGNATURE"
)

func (e FieldCreateTemplateFieldsFieldsType) ToPointer() *FieldCreateTemplateFieldsFieldsType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = FieldCreateTemplateFieldsFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldsType: %v", v)
	}
}

type FieldCreateTemplateFieldsFields1 struct {
	Type FieldCreateTemplateFieldsFieldsType `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *FieldCreateTemplateFieldsFields1) GetType() FieldCreateTemplateFieldsFieldsType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldsType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFields1) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFields1) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFields1) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFields1) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFields1) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFields1) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsFieldsUnionType string

const (
	FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields1  FieldCreateTemplateFieldsFieldsUnionType = "field-createTemplateFields_fields_1"
	FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields2  FieldCreateTemplateFieldsFieldsUnionType = "field-createTemplateFields_fields_2"
	FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields3  FieldCreateTemplateFieldsFieldsUnionType = "field-createTemplateFields_fields_3"
	FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields4  FieldCreateTemplateFieldsFieldsUnionType = "field-createTemplateFields_fields_4"
	FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields5  FieldCreateTemplateFieldsFieldsUnionType = "field-createTemplateFields_fields_5"
	FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields6  FieldCreateTemplateFieldsFieldsUnionType = "field-createTemplateFields_fields_6"
	FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields7  FieldCreateTemplateFieldsFieldsUnionType = "field-createTemplateFields_fields_7"
	FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields8  FieldCreateTemplateFieldsFieldsUnionType = "field-createTemplateFields_fields_8"
	FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields9  FieldCreateTemplateFieldsFieldsUnionType = "field-createTemplateFields_fields_9"
	FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields10 FieldCreateTemplateFieldsFieldsUnionType = "field-createTemplateFields_fields_10"
	FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields11 FieldCreateTemplateFieldsFieldsUnionType = "field-createTemplateFields_fields_11"
)

type FieldCreateTemplateFieldsFields struct {
	FieldCreateTemplateFieldsFields1  *FieldCreateTemplateFieldsFields1  `queryParam:"inline"`
	FieldCreateTemplateFieldsFields2  *FieldCreateTemplateFieldsFields2  `queryParam:"inline"`
	FieldCreateTemplateFieldsFields3  *FieldCreateTemplateFieldsFields3  `queryParam:"inline"`
	FieldCreateTemplateFieldsFields4  *FieldCreateTemplateFieldsFields4  `queryParam:"inline"`
	FieldCreateTemplateFieldsFields5  *FieldCreateTemplateFieldsFields5  `queryParam:"inline"`
	FieldCreateTemplateFieldsFields6  *FieldCreateTemplateFieldsFields6  `queryParam:"inline"`
	FieldCreateTemplateFieldsFields7  *FieldCreateTemplateFieldsFields7  `queryParam:"inline"`
	FieldCreateTemplateFieldsFields8  *FieldCreateTemplateFieldsFields8  `queryParam:"inline"`
	FieldCreateTemplateFieldsFields9  *FieldCreateTemplateFieldsFields9  `queryParam:"inline"`
	FieldCreateTemplateFieldsFields10 *FieldCreateTemplateFieldsFields10 `queryParam:"inline"`
	FieldCreateTemplateFieldsFields11 *FieldCreateTemplateFieldsFields11 `queryParam:"inline"`

	Type FieldCreateTemplateFieldsFieldsUnionType
}

func CreateFieldCreateTemplateFieldsFieldsFieldCreateTemplateFieldsFields1(fieldCreateTemplateFieldsFields1 FieldCreateTemplateFieldsFields1) FieldCreateTemplateFieldsFields {
	typ := FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields1

	return FieldCreateTemplateFieldsFields{
		FieldCreateTemplateFieldsFields1: &fieldCreateTemplateFieldsFields1,
		Type:                             typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldsFieldCreateTemplateFieldsFields2(fieldCreateTemplateFieldsFields2 FieldCreateTemplateFieldsFields2) FieldCreateTemplateFieldsFields {
	typ := FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields2

	return FieldCreateTemplateFieldsFields{
		FieldCreateTemplateFieldsFields2: &fieldCreateTemplateFieldsFields2,
		Type:                             typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldsFieldCreateTemplateFieldsFields3(fieldCreateTemplateFieldsFields3 FieldCreateTemplateFieldsFields3) FieldCreateTemplateFieldsFields {
	typ := FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields3

	return FieldCreateTemplateFieldsFields{
		FieldCreateTemplateFieldsFields3: &fieldCreateTemplateFieldsFields3,
		Type:                             typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldsFieldCreateTemplateFieldsFields4(fieldCreateTemplateFieldsFields4 FieldCreateTemplateFieldsFields4) FieldCreateTemplateFieldsFields {
	typ := FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields4

	return FieldCreateTemplateFieldsFields{
		FieldCreateTemplateFieldsFields4: &fieldCreateTemplateFieldsFields4,
		Type:                             typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldsFieldCreateTemplateFieldsFields5(fieldCreateTemplateFieldsFields5 FieldCreateTemplateFieldsFields5) FieldCreateTemplateFieldsFields {
	typ := FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields5

	return FieldCreateTemplateFieldsFields{
		FieldCreateTemplateFieldsFields5: &fieldCreateTemplateFieldsFields5,
		Type:                             typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldsFieldCreateTemplateFieldsFields6(fieldCreateTemplateFieldsFields6 FieldCreateTemplateFieldsFields6) FieldCreateTemplateFieldsFields {
	typ := FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields6

	return FieldCreateTemplateFieldsFields{
		FieldCreateTemplateFieldsFields6: &fieldCreateTemplateFieldsFields6,
		Type:                             typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldsFieldCreateTemplateFieldsFields7(fieldCreateTemplateFieldsFields7 FieldCreateTemplateFieldsFields7) FieldCreateTemplateFieldsFields {
	typ := FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields7

	return FieldCreateTemplateFieldsFields{
		FieldCreateTemplateFieldsFields7: &fieldCreateTemplateFieldsFields7,
		Type:                             typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldsFieldCreateTemplateFieldsFields8(fieldCreateTemplateFieldsFields8 FieldCreateTemplateFieldsFields8) FieldCreateTemplateFieldsFields {
	typ := FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields8

	return FieldCreateTemplateFieldsFields{
		FieldCreateTemplateFieldsFields8: &fieldCreateTemplateFieldsFields8,
		Type:                             typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldsFieldCreateTemplateFieldsFields9(fieldCreateTemplateFieldsFields9 FieldCreateTemplateFieldsFields9) FieldCreateTemplateFieldsFields {
	typ := FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields9

	return FieldCreateTemplateFieldsFields{
		FieldCreateTemplateFieldsFields9: &fieldCreateTemplateFieldsFields9,
		Type:                             typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldsFieldCreateTemplateFieldsFields10(fieldCreateTemplateFieldsFields10 FieldCreateTemplateFieldsFields10) FieldCreateTemplateFieldsFields {
	typ := FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields10

	return FieldCreateTemplateFieldsFields{
		FieldCreateTemplateFieldsFields10: &fieldCreateTemplateFieldsFields10,
		Type:                              typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldsFieldCreateTemplateFieldsFields11(fieldCreateTemplateFieldsFields11 FieldCreateTemplateFieldsFields11) FieldCreateTemplateFieldsFields {
	typ := FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields11

	return FieldCreateTemplateFieldsFields{
		FieldCreateTemplateFieldsFields11: &fieldCreateTemplateFieldsFields11,
		Type:                              typ,
	}
}

func (u *FieldCreateTemplateFieldsFields) UnmarshalJSON(data []byte) error {

	var fieldCreateTemplateFieldsFields1 FieldCreateTemplateFieldsFields1 = FieldCreateTemplateFieldsFields1{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFields1, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFields1 = &fieldCreateTemplateFieldsFields1
		u.Type = FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields1
		return nil
	}

	var fieldCreateTemplateFieldsFields2 FieldCreateTemplateFieldsFields2 = FieldCreateTemplateFieldsFields2{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFields2, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFields2 = &fieldCreateTemplateFieldsFields2
		u.Type = FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields2
		return nil
	}

	var fieldCreateTemplateFieldsFields3 FieldCreateTemplateFieldsFields3 = FieldCreateTemplateFieldsFields3{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFields3, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFields3 = &fieldCreateTemplateFieldsFields3
		u.Type = FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields3
		return nil
	}

	var fieldCreateTemplateFieldsFields4 FieldCreateTemplateFieldsFields4 = FieldCreateTemplateFieldsFields4{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFields4, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFields4 = &fieldCreateTemplateFieldsFields4
		u.Type = FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields4
		return nil
	}

	var fieldCreateTemplateFieldsFields5 FieldCreateTemplateFieldsFields5 = FieldCreateTemplateFieldsFields5{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFields5, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFields5 = &fieldCreateTemplateFieldsFields5
		u.Type = FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields5
		return nil
	}

	var fieldCreateTemplateFieldsFields6 FieldCreateTemplateFieldsFields6 = FieldCreateTemplateFieldsFields6{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFields6, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFields6 = &fieldCreateTemplateFieldsFields6
		u.Type = FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields6
		return nil
	}

	var fieldCreateTemplateFieldsFields7 FieldCreateTemplateFieldsFields7 = FieldCreateTemplateFieldsFields7{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFields7, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFields7 = &fieldCreateTemplateFieldsFields7
		u.Type = FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields7
		return nil
	}

	var fieldCreateTemplateFieldsFields8 FieldCreateTemplateFieldsFields8 = FieldCreateTemplateFieldsFields8{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFields8, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFields8 = &fieldCreateTemplateFieldsFields8
		u.Type = FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields8
		return nil
	}

	var fieldCreateTemplateFieldsFields9 FieldCreateTemplateFieldsFields9 = FieldCreateTemplateFieldsFields9{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFields9, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFields9 = &fieldCreateTemplateFieldsFields9
		u.Type = FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields9
		return nil
	}

	var fieldCreateTemplateFieldsFields10 FieldCreateTemplateFieldsFields10 = FieldCreateTemplateFieldsFields10{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFields10, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFields10 = &fieldCreateTemplateFieldsFields10
		u.Type = FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields10
		return nil
	}

	var fieldCreateTemplateFieldsFields11 FieldCreateTemplateFieldsFields11 = FieldCreateTemplateFieldsFields11{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFields11, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFields11 = &fieldCreateTemplateFieldsFields11
		u.Type = FieldCreateTemplateFieldsFieldsUnionTypeFieldCreateTemplateFieldsFields11
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldCreateTemplateFieldsFields", string(data))
}

func (u FieldCreateTemplateFieldsFields) MarshalJSON() ([]byte, error) {
	if u.FieldCreateTemplateFieldsFields1 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFields1, "", true)
	}

	if u.FieldCreateTemplateFieldsFields2 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFields2, "", true)
	}

	if u.FieldCreateTemplateFieldsFields3 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFields3, "", true)
	}

	if u.FieldCreateTemplateFieldsFields4 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFields4, "", true)
	}

	if u.FieldCreateTemplateFieldsFields5 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFields5, "", true)
	}

	if u.FieldCreateTemplateFieldsFields6 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFields6, "", true)
	}

	if u.FieldCreateTemplateFieldsFields7 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFields7, "", true)
	}

	if u.FieldCreateTemplateFieldsFields8 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFields8, "", true)
	}

	if u.FieldCreateTemplateFieldsFields9 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFields9, "", true)
	}

	if u.FieldCreateTemplateFieldsFields10 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFields10, "", true)
	}

	if u.FieldCreateTemplateFieldsFields11 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFields11, "", true)
	}

	return nil, errors.New("could not marshal union type FieldCreateTemplateFieldsFields: all fields are null")
}

type FieldCreateTemplateFieldsRequestBody struct {
	TemplateID float64                           `json:"templateId"`
	Fields     []FieldCreateTemplateFieldsFields `json:"fields"`
}

func (o *FieldCreateTemplateFieldsRequestBody) GetTemplateID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TemplateID
}

func (o *FieldCreateTemplateFieldsRequestBody) GetFields() []FieldCreateTemplateFieldsFields {
	if o == nil {
		return []FieldCreateTemplateFieldsFields{}
	}
	return o.Fields
}

type FieldCreateTemplateFieldsType string

const (
	FieldCreateTemplateFieldsTypeSignature     FieldCreateTemplateFieldsType = "SIGNATURE"
	FieldCreateTemplateFieldsTypeFreeSignature FieldCreateTemplateFieldsType = "FREE_SIGNATURE"
	FieldCreateTemplateFieldsTypeInitials      FieldCreateTemplateFieldsType = "INITIALS"
	FieldCreateTemplateFieldsTypeName          FieldCreateTemplateFieldsType = "NAME"
	FieldCreateTemplateFieldsTypeEmail         FieldCreateTemplateFieldsType = "EMAIL"
	FieldCreateTemplateFieldsTypeDate          FieldCreateTemplateFieldsType = "DATE"
	FieldCreateTemplateFieldsTypeText          FieldCreateTemplateFieldsType = "TEXT"
	FieldCreateTemplateFieldsTypeNumber        FieldCreateTemplateFieldsType = "NUMBER"
	FieldCreateTemplateFieldsTypeRadio         FieldCreateTemplateFieldsType = "RADIO"
	FieldCreateTemplateFieldsTypeCheckbox      FieldCreateTemplateFieldsType = "CHECKBOX"
	FieldCreateTemplateFieldsTypeDropdown      FieldCreateTemplateFieldsType = "DROPDOWN"
)

func (e FieldCreateTemplateFieldsType) ToPointer() *FieldCreateTemplateFieldsType {
	return &e
}
func (e *FieldCreateTemplateFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldCreateTemplateFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsType: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type string

const (
	FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9TypeDropdown FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type = "dropdown"
)

func (e FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type) ToPointer() *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues struct {
	Value string `json:"value"`
}

func (o *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldsFieldMeta9 struct {
	Label        *string                                                                                            `json:"label,omitempty"`
	Placeholder  *string                                                                                            `json:"placeholder,omitempty"`
	Required     *bool                                                                                              `json:"required,omitempty"`
	ReadOnly     *bool                                                                                              `json:"readOnly,omitempty"`
	Type         FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type `json:"type"`
	Values       []FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues                                  `json:"values,omitempty"`
	DefaultValue *string                                                                                            `json:"defaultValue,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldMeta9) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMeta9) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMeta9) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMeta9) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMeta9) GetType() FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMeta9) GetValues() []FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateTemplateFieldsFieldMeta9) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type string

const (
	FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8TypeCheckbox FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type = "checkbox"
)

func (e FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type) ToPointer() *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldsFieldMeta8 struct {
	Label            *string                                                                                            `json:"label,omitempty"`
	Placeholder      *string                                                                                            `json:"placeholder,omitempty"`
	Required         *bool                                                                                              `json:"required,omitempty"`
	ReadOnly         *bool                                                                                              `json:"readOnly,omitempty"`
	Type             FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type `json:"type"`
	Values           []FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues                                          `json:"values,omitempty"`
	ValidationRule   *string                                                                                            `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                                           `json:"validationLength,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldMeta8) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMeta8) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMeta8) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMeta8) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMeta8) GetType() FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMeta8) GetValues() []FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateTemplateFieldsFieldMeta8) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldCreateTemplateFieldsFieldMeta8) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType string

const (
	FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsTypeRadio FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType = "radio"
)

func (e FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType) ToPointer() *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMetaValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateTemplateFieldsFieldMetaValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateTemplateFieldsFieldMetaValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateTemplateFieldsFieldMetaValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldsFieldMeta7 struct {
	Label       *string                                                                                           `json:"label,omitempty"`
	Placeholder *string                                                                                           `json:"placeholder,omitempty"`
	Required    *bool                                                                                             `json:"required,omitempty"`
	ReadOnly    *bool                                                                                             `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType `json:"type"`
	Values      []FieldCreateTemplateFieldsFieldMetaValues                                                        `json:"values,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldMeta7) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMeta7) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMeta7) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMeta7) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMeta7) GetType() FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMeta7) GetValues() []FieldCreateTemplateFieldsFieldMetaValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType string

const (
	FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyTypeNumber FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType = "number"
)

func (e FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType) ToPointer() *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMeta6 struct {
	Label        *string                                                                                     `json:"label,omitempty"`
	Placeholder  *string                                                                                     `json:"placeholder,omitempty"`
	Required     *bool                                                                                       `json:"required,omitempty"`
	ReadOnly     *bool                                                                                       `json:"readOnly,omitempty"`
	Type         FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType `json:"type"`
	NumberFormat *string                                                                                     `json:"numberFormat,omitempty"`
	Value        *string                                                                                     `json:"value,omitempty"`
	MinValue     *float64                                                                                    `json:"minValue,omitempty"`
	MaxValue     *float64                                                                                    `json:"maxValue,omitempty"`
	FontSize     *float64                                                                                    `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldMeta6) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMeta6) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMeta6) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMeta6) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMeta6) GetType() FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMeta6) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldCreateTemplateFieldsFieldMeta6) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldCreateTemplateFieldsFieldMeta6) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldCreateTemplateFieldsFieldMeta6) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldCreateTemplateFieldsFieldMeta6) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType string

const (
	FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONTypeText FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType = "text"
)

func (e FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType) ToPointer() *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMeta5 struct {
	Label          *string                                                                         `json:"label,omitempty"`
	Placeholder    *string                                                                         `json:"placeholder,omitempty"`
	Required       *bool                                                                           `json:"required,omitempty"`
	ReadOnly       *bool                                                                           `json:"readOnly,omitempty"`
	Type           FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType `json:"type"`
	Text           *string                                                                         `json:"text,omitempty"`
	CharacterLimit *float64                                                                        `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                        `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldMeta5) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMeta5) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMeta5) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMeta5) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMeta5) GetType() FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMeta5) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldCreateTemplateFieldsFieldMeta5) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldCreateTemplateFieldsFieldMeta5) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type string

const (
	FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200TypeDate FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type = "date"
)

func (e FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type) ToPointer() *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMeta4 struct {
	Label       *string                                                          `json:"label,omitempty"`
	Placeholder *string                                                          `json:"placeholder,omitempty"`
	Required    *bool                                                            `json:"required,omitempty"`
	ReadOnly    *bool                                                            `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type `json:"type"`
	FontSize    *float64                                                         `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldMeta4) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMeta4) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMeta4) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMeta4) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMeta4) GetType() FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMeta4) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType string

const (
	FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseTypeEmail FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType = "email"
)

func (e FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType) ToPointer() *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMeta3 struct {
	Label       *string                                                       `json:"label,omitempty"`
	Placeholder *string                                                       `json:"placeholder,omitempty"`
	Required    *bool                                                         `json:"required,omitempty"`
	ReadOnly    *bool                                                         `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType `json:"type"`
	FontSize    *float64                                                      `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldMeta3) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMeta3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMeta3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMeta3) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMeta3) GetType() FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMeta3) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType string

const (
	FieldCreateTemplateFieldsFieldMetaTemplatesFieldsTypeName FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType = "name"
)

func (e FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType) ToPointer() *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMeta2 struct {
	Label       *string                                               `json:"label,omitempty"`
	Placeholder *string                                               `json:"placeholder,omitempty"`
	Required    *bool                                                 `json:"required,omitempty"`
	ReadOnly    *bool                                                 `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType `json:"type"`
	FontSize    *float64                                              `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldMeta2) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMeta2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMeta2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMeta2) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMeta2) GetType() FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMeta2) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldsFieldMetaType string

const (
	FieldCreateTemplateFieldsFieldMetaTypeInitials FieldCreateTemplateFieldsFieldMetaType = "initials"
)

func (e FieldCreateTemplateFieldsFieldMetaType) ToPointer() *FieldCreateTemplateFieldsFieldMetaType {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateTemplateFieldsFieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaType: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMeta1 struct {
	Label       *string                                `json:"label,omitempty"`
	Placeholder *string                                `json:"placeholder,omitempty"`
	Required    *bool                                  `json:"required,omitempty"`
	ReadOnly    *bool                                  `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsFieldMetaType `json:"type"`
	FontSize    *float64                               `json:"fontSize,omitempty"`
}

func (o *FieldCreateTemplateFieldsFieldMeta1) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMeta1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMeta1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMeta1) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMeta1) GetType() FieldCreateTemplateFieldsFieldMetaType {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMeta1) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateTemplateFieldsFieldMetaUnionType string

const (
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta1 FieldCreateTemplateFieldsFieldMetaUnionType = "field-createTemplateFields_fieldMeta_1"
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta2 FieldCreateTemplateFieldsFieldMetaUnionType = "field-createTemplateFields_fieldMeta_2"
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta3 FieldCreateTemplateFieldsFieldMetaUnionType = "field-createTemplateFields_fieldMeta_3"
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta4 FieldCreateTemplateFieldsFieldMetaUnionType = "field-createTemplateFields_fieldMeta_4"
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta5 FieldCreateTemplateFieldsFieldMetaUnionType = "field-createTemplateFields_fieldMeta_5"
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta6 FieldCreateTemplateFieldsFieldMetaUnionType = "field-createTemplateFields_fieldMeta_6"
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta7 FieldCreateTemplateFieldsFieldMetaUnionType = "field-createTemplateFields_fieldMeta_7"
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta8 FieldCreateTemplateFieldsFieldMetaUnionType = "field-createTemplateFields_fieldMeta_8"
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta9 FieldCreateTemplateFieldsFieldMetaUnionType = "field-createTemplateFields_fieldMeta_9"
)

type FieldCreateTemplateFieldsFieldMeta struct {
	FieldCreateTemplateFieldsFieldMeta1 *FieldCreateTemplateFieldsFieldMeta1 `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldMeta2 *FieldCreateTemplateFieldsFieldMeta2 `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldMeta3 *FieldCreateTemplateFieldsFieldMeta3 `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldMeta4 *FieldCreateTemplateFieldsFieldMeta4 `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldMeta5 *FieldCreateTemplateFieldsFieldMeta5 `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldMeta6 *FieldCreateTemplateFieldsFieldMeta6 `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldMeta7 *FieldCreateTemplateFieldsFieldMeta7 `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldMeta8 *FieldCreateTemplateFieldsFieldMeta8 `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldMeta9 *FieldCreateTemplateFieldsFieldMeta9 `queryParam:"inline"`

	Type FieldCreateTemplateFieldsFieldMetaUnionType
}

func CreateFieldCreateTemplateFieldsFieldMetaFieldCreateTemplateFieldsFieldMeta1(fieldCreateTemplateFieldsFieldMeta1 FieldCreateTemplateFieldsFieldMeta1) FieldCreateTemplateFieldsFieldMeta {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta1

	return FieldCreateTemplateFieldsFieldMeta{
		FieldCreateTemplateFieldsFieldMeta1: &fieldCreateTemplateFieldsFieldMeta1,
		Type:                                typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldMetaFieldCreateTemplateFieldsFieldMeta2(fieldCreateTemplateFieldsFieldMeta2 FieldCreateTemplateFieldsFieldMeta2) FieldCreateTemplateFieldsFieldMeta {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta2

	return FieldCreateTemplateFieldsFieldMeta{
		FieldCreateTemplateFieldsFieldMeta2: &fieldCreateTemplateFieldsFieldMeta2,
		Type:                                typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldMetaFieldCreateTemplateFieldsFieldMeta3(fieldCreateTemplateFieldsFieldMeta3 FieldCreateTemplateFieldsFieldMeta3) FieldCreateTemplateFieldsFieldMeta {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta3

	return FieldCreateTemplateFieldsFieldMeta{
		FieldCreateTemplateFieldsFieldMeta3: &fieldCreateTemplateFieldsFieldMeta3,
		Type:                                typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldMetaFieldCreateTemplateFieldsFieldMeta4(fieldCreateTemplateFieldsFieldMeta4 FieldCreateTemplateFieldsFieldMeta4) FieldCreateTemplateFieldsFieldMeta {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta4

	return FieldCreateTemplateFieldsFieldMeta{
		FieldCreateTemplateFieldsFieldMeta4: &fieldCreateTemplateFieldsFieldMeta4,
		Type:                                typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldMetaFieldCreateTemplateFieldsFieldMeta5(fieldCreateTemplateFieldsFieldMeta5 FieldCreateTemplateFieldsFieldMeta5) FieldCreateTemplateFieldsFieldMeta {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta5

	return FieldCreateTemplateFieldsFieldMeta{
		FieldCreateTemplateFieldsFieldMeta5: &fieldCreateTemplateFieldsFieldMeta5,
		Type:                                typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldMetaFieldCreateTemplateFieldsFieldMeta6(fieldCreateTemplateFieldsFieldMeta6 FieldCreateTemplateFieldsFieldMeta6) FieldCreateTemplateFieldsFieldMeta {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta6

	return FieldCreateTemplateFieldsFieldMeta{
		FieldCreateTemplateFieldsFieldMeta6: &fieldCreateTemplateFieldsFieldMeta6,
		Type:                                typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldMetaFieldCreateTemplateFieldsFieldMeta7(fieldCreateTemplateFieldsFieldMeta7 FieldCreateTemplateFieldsFieldMeta7) FieldCreateTemplateFieldsFieldMeta {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta7

	return FieldCreateTemplateFieldsFieldMeta{
		FieldCreateTemplateFieldsFieldMeta7: &fieldCreateTemplateFieldsFieldMeta7,
		Type:                                typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldMetaFieldCreateTemplateFieldsFieldMeta8(fieldCreateTemplateFieldsFieldMeta8 FieldCreateTemplateFieldsFieldMeta8) FieldCreateTemplateFieldsFieldMeta {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta8

	return FieldCreateTemplateFieldsFieldMeta{
		FieldCreateTemplateFieldsFieldMeta8: &fieldCreateTemplateFieldsFieldMeta8,
		Type:                                typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldMetaFieldCreateTemplateFieldsFieldMeta9(fieldCreateTemplateFieldsFieldMeta9 FieldCreateTemplateFieldsFieldMeta9) FieldCreateTemplateFieldsFieldMeta {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta9

	return FieldCreateTemplateFieldsFieldMeta{
		FieldCreateTemplateFieldsFieldMeta9: &fieldCreateTemplateFieldsFieldMeta9,
		Type:                                typ,
	}
}

func (u *FieldCreateTemplateFieldsFieldMeta) UnmarshalJSON(data []byte) error {

	var fieldCreateTemplateFieldsFieldMeta1 FieldCreateTemplateFieldsFieldMeta1 = FieldCreateTemplateFieldsFieldMeta1{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMeta1, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFieldMeta1 = &fieldCreateTemplateFieldsFieldMeta1
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta1
		return nil
	}

	var fieldCreateTemplateFieldsFieldMeta2 FieldCreateTemplateFieldsFieldMeta2 = FieldCreateTemplateFieldsFieldMeta2{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMeta2, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFieldMeta2 = &fieldCreateTemplateFieldsFieldMeta2
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta2
		return nil
	}

	var fieldCreateTemplateFieldsFieldMeta3 FieldCreateTemplateFieldsFieldMeta3 = FieldCreateTemplateFieldsFieldMeta3{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMeta3, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFieldMeta3 = &fieldCreateTemplateFieldsFieldMeta3
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta3
		return nil
	}

	var fieldCreateTemplateFieldsFieldMeta4 FieldCreateTemplateFieldsFieldMeta4 = FieldCreateTemplateFieldsFieldMeta4{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMeta4, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFieldMeta4 = &fieldCreateTemplateFieldsFieldMeta4
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta4
		return nil
	}

	var fieldCreateTemplateFieldsFieldMeta7 FieldCreateTemplateFieldsFieldMeta7 = FieldCreateTemplateFieldsFieldMeta7{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMeta7, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFieldMeta7 = &fieldCreateTemplateFieldsFieldMeta7
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta7
		return nil
	}

	var fieldCreateTemplateFieldsFieldMeta9 FieldCreateTemplateFieldsFieldMeta9 = FieldCreateTemplateFieldsFieldMeta9{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMeta9, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFieldMeta9 = &fieldCreateTemplateFieldsFieldMeta9
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta9
		return nil
	}

	var fieldCreateTemplateFieldsFieldMeta5 FieldCreateTemplateFieldsFieldMeta5 = FieldCreateTemplateFieldsFieldMeta5{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMeta5, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFieldMeta5 = &fieldCreateTemplateFieldsFieldMeta5
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta5
		return nil
	}

	var fieldCreateTemplateFieldsFieldMeta8 FieldCreateTemplateFieldsFieldMeta8 = FieldCreateTemplateFieldsFieldMeta8{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMeta8, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFieldMeta8 = &fieldCreateTemplateFieldsFieldMeta8
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta8
		return nil
	}

	var fieldCreateTemplateFieldsFieldMeta6 FieldCreateTemplateFieldsFieldMeta6 = FieldCreateTemplateFieldsFieldMeta6{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMeta6, "", true, true); err == nil {
		u.FieldCreateTemplateFieldsFieldMeta6 = &fieldCreateTemplateFieldsFieldMeta6
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMeta6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldCreateTemplateFieldsFieldMeta", string(data))
}

func (u FieldCreateTemplateFieldsFieldMeta) MarshalJSON() ([]byte, error) {
	if u.FieldCreateTemplateFieldsFieldMeta1 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMeta1, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldMeta2 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMeta2, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldMeta3 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMeta3, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldMeta4 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMeta4, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldMeta5 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMeta5, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldMeta6 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMeta6, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldMeta7 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMeta7, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldMeta8 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMeta8, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldMeta9 != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMeta9, "", true)
	}

	return nil, errors.New("could not marshal union type FieldCreateTemplateFieldsFieldMeta: all fields are null")
}

type FieldCreateTemplateFieldsTemplatesFieldsFields struct {
	Type        FieldCreateTemplateFieldsType `json:"type"`
	ID          int64                         `json:"id"`
	SecondaryID string                        `json:"secondaryId"`
	DocumentID  *int64                        `json:"documentId"`
	TemplateID  *int64                        `json:"templateId"`
	RecipientID int64                         `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                             `json:"page"`
	PositionX  any                                 `json:"positionX,omitempty"`
	PositionY  any                                 `json:"positionY,omitempty"`
	Width      any                                 `json:"width,omitempty"`
	Height     any                                 `json:"height,omitempty"`
	CustomText string                              `json:"customText"`
	Inserted   bool                                `json:"inserted"`
	FieldMeta  *FieldCreateTemplateFieldsFieldMeta `json:"fieldMeta"`
}

func (o *FieldCreateTemplateFieldsTemplatesFieldsFields) GetType() FieldCreateTemplateFieldsType {
	if o == nil {
		return FieldCreateTemplateFieldsType("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsTemplatesFieldsFields) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *FieldCreateTemplateFieldsTemplatesFieldsFields) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *FieldCreateTemplateFieldsTemplatesFieldsFields) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *FieldCreateTemplateFieldsTemplatesFieldsFields) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *FieldCreateTemplateFieldsTemplatesFieldsFields) GetRecipientID() int64 {
	if o == nil {
		return 0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsTemplatesFieldsFields) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *FieldCreateTemplateFieldsTemplatesFieldsFields) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *FieldCreateTemplateFieldsTemplatesFieldsFields) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *FieldCreateTemplateFieldsTemplatesFieldsFields) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsTemplatesFieldsFields) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *FieldCreateTemplateFieldsTemplatesFieldsFields) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *FieldCreateTemplateFieldsTemplatesFieldsFields) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *FieldCreateTemplateFieldsTemplatesFieldsFields) GetFieldMeta() *FieldCreateTemplateFieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

// FieldCreateTemplateFieldsResponseBody - Successful response
type FieldCreateTemplateFieldsResponseBody struct {
	Fields []FieldCreateTemplateFieldsTemplatesFieldsFields `json:"fields"`
}

func (o *FieldCreateTemplateFieldsResponseBody) GetFields() []FieldCreateTemplateFieldsTemplatesFieldsFields {
	if o == nil {
		return []FieldCreateTemplateFieldsTemplatesFieldsFields{}
	}
	return o.Fields
}

type FieldCreateTemplateFieldsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldCreateTemplateFieldsResponseBody
}

func (o *FieldCreateTemplateFieldsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FieldCreateTemplateFieldsResponse) GetObject() *FieldCreateTemplateFieldsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
