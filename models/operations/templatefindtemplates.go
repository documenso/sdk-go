// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

// QueryParamType - Filter templates by type.
type QueryParamType string

const (
	QueryParamTypePublic  QueryParamType = "PUBLIC"
	QueryParamTypePrivate QueryParamType = "PRIVATE"
)

func (e QueryParamType) ToPointer() *QueryParamType {
	return &e
}
func (e *QueryParamType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PUBLIC":
		fallthrough
	case "PRIVATE":
		*e = QueryParamType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamType: %v", v)
	}
}

type TemplateFindTemplatesRequest struct {
	// The search query.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// The pagination page number, starts at 1.
	Page *float64 `queryParam:"style=form,explode=true,name=page"`
	// The number of items per page.
	PerPage *float64 `queryParam:"style=form,explode=true,name=perPage"`
	// Filter templates by type.
	Type *QueryParamType `queryParam:"style=form,explode=true,name=type"`
	// The ID of the folder to filter templates by.
	FolderID *string `queryParam:"style=form,explode=true,name=folderId"`
}

func (o *TemplateFindTemplatesRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *TemplateFindTemplatesRequest) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *TemplateFindTemplatesRequest) GetPerPage() *float64 {
	if o == nil {
		return nil
	}
	return o.PerPage
}

func (o *TemplateFindTemplatesRequest) GetType() *QueryParamType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *TemplateFindTemplatesRequest) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

type TemplateFindTemplatesDataType string

const (
	TemplateFindTemplatesDataTypePublic  TemplateFindTemplatesDataType = "PUBLIC"
	TemplateFindTemplatesDataTypePrivate TemplateFindTemplatesDataType = "PRIVATE"
)

func (e TemplateFindTemplatesDataType) ToPointer() *TemplateFindTemplatesDataType {
	return &e
}
func (e *TemplateFindTemplatesDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PUBLIC":
		fallthrough
	case "PRIVATE":
		*e = TemplateFindTemplatesDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesDataType: %v", v)
	}
}

type TemplateFindTemplatesVisibility string

const (
	TemplateFindTemplatesVisibilityEveryone        TemplateFindTemplatesVisibility = "EVERYONE"
	TemplateFindTemplatesVisibilityManagerAndAbove TemplateFindTemplatesVisibility = "MANAGER_AND_ABOVE"
	TemplateFindTemplatesVisibilityAdmin           TemplateFindTemplatesVisibility = "ADMIN"
)

func (e TemplateFindTemplatesVisibility) ToPointer() *TemplateFindTemplatesVisibility {
	return &e
}
func (e *TemplateFindTemplatesVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = TemplateFindTemplatesVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesVisibility: %v", v)
	}
}

// TemplateFindTemplatesGlobalAccessAuth - The type of authentication required for the recipient to access the document.
type TemplateFindTemplatesGlobalAccessAuth string

const (
	TemplateFindTemplatesGlobalAccessAuthAccount TemplateFindTemplatesGlobalAccessAuth = "ACCOUNT"
)

func (e TemplateFindTemplatesGlobalAccessAuth) ToPointer() *TemplateFindTemplatesGlobalAccessAuth {
	return &e
}
func (e *TemplateFindTemplatesGlobalAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = TemplateFindTemplatesGlobalAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesGlobalAccessAuth: %v", v)
	}
}

// TemplateFindTemplatesGlobalActionAuth - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type TemplateFindTemplatesGlobalActionAuth string

const (
	TemplateFindTemplatesGlobalActionAuthAccount       TemplateFindTemplatesGlobalActionAuth = "ACCOUNT"
	TemplateFindTemplatesGlobalActionAuthPasskey       TemplateFindTemplatesGlobalActionAuth = "PASSKEY"
	TemplateFindTemplatesGlobalActionAuthTwoFactorAuth TemplateFindTemplatesGlobalActionAuth = "TWO_FACTOR_AUTH"
	TemplateFindTemplatesGlobalActionAuthPassword      TemplateFindTemplatesGlobalActionAuth = "PASSWORD"
)

func (e TemplateFindTemplatesGlobalActionAuth) ToPointer() *TemplateFindTemplatesGlobalActionAuth {
	return &e
}
func (e *TemplateFindTemplatesGlobalActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		*e = TemplateFindTemplatesGlobalActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesGlobalActionAuth: %v", v)
	}
}

type TemplateFindTemplatesAuthOptions struct {
	GlobalAccessAuth []TemplateFindTemplatesGlobalAccessAuth `json:"globalAccessAuth"`
	GlobalActionAuth []TemplateFindTemplatesGlobalActionAuth `json:"globalActionAuth"`
}

func (o *TemplateFindTemplatesAuthOptions) GetGlobalAccessAuth() []TemplateFindTemplatesGlobalAccessAuth {
	if o == nil {
		return []TemplateFindTemplatesGlobalAccessAuth{}
	}
	return o.GlobalAccessAuth
}

func (o *TemplateFindTemplatesAuthOptions) GetGlobalActionAuth() []TemplateFindTemplatesGlobalActionAuth {
	if o == nil {
		return []TemplateFindTemplatesGlobalActionAuth{}
	}
	return o.GlobalActionAuth
}

type TemplateFindTemplatesTeam struct {
	ID  float64 `json:"id"`
	URL string  `json:"url"`
}

func (o *TemplateFindTemplatesTeam) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateFindTemplatesTeam) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type TemplateFindTemplatesFieldType string

const (
	TemplateFindTemplatesFieldTypeSignature     TemplateFindTemplatesFieldType = "SIGNATURE"
	TemplateFindTemplatesFieldTypeFreeSignature TemplateFindTemplatesFieldType = "FREE_SIGNATURE"
	TemplateFindTemplatesFieldTypeInitials      TemplateFindTemplatesFieldType = "INITIALS"
	TemplateFindTemplatesFieldTypeName          TemplateFindTemplatesFieldType = "NAME"
	TemplateFindTemplatesFieldTypeEmail         TemplateFindTemplatesFieldType = "EMAIL"
	TemplateFindTemplatesFieldTypeDate          TemplateFindTemplatesFieldType = "DATE"
	TemplateFindTemplatesFieldTypeText          TemplateFindTemplatesFieldType = "TEXT"
	TemplateFindTemplatesFieldTypeNumber        TemplateFindTemplatesFieldType = "NUMBER"
	TemplateFindTemplatesFieldTypeRadio         TemplateFindTemplatesFieldType = "RADIO"
	TemplateFindTemplatesFieldTypeCheckbox      TemplateFindTemplatesFieldType = "CHECKBOX"
	TemplateFindTemplatesFieldTypeDropdown      TemplateFindTemplatesFieldType = "DROPDOWN"
)

func (e TemplateFindTemplatesFieldType) ToPointer() *TemplateFindTemplatesFieldType {
	return &e
}
func (e *TemplateFindTemplatesFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = TemplateFindTemplatesFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesFieldType: %v", v)
	}
}

type TemplateFindTemplatesTypeDropdown string

const (
	TemplateFindTemplatesTypeDropdownDropdown TemplateFindTemplatesTypeDropdown = "dropdown"
)

func (e TemplateFindTemplatesTypeDropdown) ToPointer() *TemplateFindTemplatesTypeDropdown {
	return &e
}
func (e *TemplateFindTemplatesTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = TemplateFindTemplatesTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesTypeDropdown: %v", v)
	}
}

type TemplateFindTemplatesValue3 struct {
	Value string `json:"value"`
}

func (t TemplateFindTemplatesValue3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateFindTemplatesValue3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (o *TemplateFindTemplatesValue3) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateFindTemplatesFieldMetaDropdown struct {
	Label        *string                           `json:"label,omitempty"`
	Placeholder  *string                           `json:"placeholder,omitempty"`
	Required     *bool                             `json:"required,omitempty"`
	ReadOnly     *bool                             `json:"readOnly,omitempty"`
	Type         TemplateFindTemplatesTypeDropdown `json:"type"`
	Values       []TemplateFindTemplatesValue3     `json:"values,omitempty"`
	DefaultValue *string                           `json:"defaultValue,omitempty"`
}

func (t TemplateFindTemplatesFieldMetaDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateFindTemplatesFieldMetaDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *TemplateFindTemplatesFieldMetaDropdown) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMetaDropdown) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMetaDropdown) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMetaDropdown) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMetaDropdown) GetType() TemplateFindTemplatesTypeDropdown {
	if o == nil {
		return TemplateFindTemplatesTypeDropdown("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMetaDropdown) GetValues() []TemplateFindTemplatesValue3 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *TemplateFindTemplatesFieldMetaDropdown) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type TemplateFindTemplatesTypeCheckbox string

const (
	TemplateFindTemplatesTypeCheckboxCheckbox TemplateFindTemplatesTypeCheckbox = "checkbox"
)

func (e TemplateFindTemplatesTypeCheckbox) ToPointer() *TemplateFindTemplatesTypeCheckbox {
	return &e
}
func (e *TemplateFindTemplatesTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = TemplateFindTemplatesTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesTypeCheckbox: %v", v)
	}
}

type TemplateFindTemplatesValue2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (t TemplateFindTemplatesValue2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateFindTemplatesValue2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *TemplateFindTemplatesValue2) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateFindTemplatesValue2) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *TemplateFindTemplatesValue2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateFindTemplatesFieldMetaCheckbox struct {
	Label            *string                           `json:"label,omitempty"`
	Placeholder      *string                           `json:"placeholder,omitempty"`
	Required         *bool                             `json:"required,omitempty"`
	ReadOnly         *bool                             `json:"readOnly,omitempty"`
	Type             TemplateFindTemplatesTypeCheckbox `json:"type"`
	Values           []TemplateFindTemplatesValue2     `json:"values,omitempty"`
	ValidationRule   *string                           `json:"validationRule,omitempty"`
	ValidationLength *float64                          `json:"validationLength,omitempty"`
}

func (t TemplateFindTemplatesFieldMetaCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateFindTemplatesFieldMetaCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *TemplateFindTemplatesFieldMetaCheckbox) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMetaCheckbox) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMetaCheckbox) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMetaCheckbox) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMetaCheckbox) GetType() TemplateFindTemplatesTypeCheckbox {
	if o == nil {
		return TemplateFindTemplatesTypeCheckbox("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMetaCheckbox) GetValues() []TemplateFindTemplatesValue2 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *TemplateFindTemplatesFieldMetaCheckbox) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *TemplateFindTemplatesFieldMetaCheckbox) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type TemplateFindTemplatesTypeRadio string

const (
	TemplateFindTemplatesTypeRadioRadio TemplateFindTemplatesTypeRadio = "radio"
)

func (e TemplateFindTemplatesTypeRadio) ToPointer() *TemplateFindTemplatesTypeRadio {
	return &e
}
func (e *TemplateFindTemplatesTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = TemplateFindTemplatesTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesTypeRadio: %v", v)
	}
}

type TemplateFindTemplatesValue1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (t TemplateFindTemplatesValue1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateFindTemplatesValue1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *TemplateFindTemplatesValue1) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateFindTemplatesValue1) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *TemplateFindTemplatesValue1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateFindTemplatesFieldMetaRadio struct {
	Label       *string                        `json:"label,omitempty"`
	Placeholder *string                        `json:"placeholder,omitempty"`
	Required    *bool                          `json:"required,omitempty"`
	ReadOnly    *bool                          `json:"readOnly,omitempty"`
	Type        TemplateFindTemplatesTypeRadio `json:"type"`
	Values      []TemplateFindTemplatesValue1  `json:"values,omitempty"`
}

func (t TemplateFindTemplatesFieldMetaRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateFindTemplatesFieldMetaRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *TemplateFindTemplatesFieldMetaRadio) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMetaRadio) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMetaRadio) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMetaRadio) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMetaRadio) GetType() TemplateFindTemplatesTypeRadio {
	if o == nil {
		return TemplateFindTemplatesTypeRadio("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMetaRadio) GetValues() []TemplateFindTemplatesValue1 {
	if o == nil {
		return nil
	}
	return o.Values
}

type TemplateFindTemplatesTypeNumber string

const (
	TemplateFindTemplatesTypeNumberNumber TemplateFindTemplatesTypeNumber = "number"
)

func (e TemplateFindTemplatesTypeNumber) ToPointer() *TemplateFindTemplatesTypeNumber {
	return &e
}
func (e *TemplateFindTemplatesTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = TemplateFindTemplatesTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesTypeNumber: %v", v)
	}
}

type TemplateFindTemplatesTextAlign6 string

const (
	TemplateFindTemplatesTextAlign6Left   TemplateFindTemplatesTextAlign6 = "left"
	TemplateFindTemplatesTextAlign6Center TemplateFindTemplatesTextAlign6 = "center"
	TemplateFindTemplatesTextAlign6Right  TemplateFindTemplatesTextAlign6 = "right"
)

func (e TemplateFindTemplatesTextAlign6) ToPointer() *TemplateFindTemplatesTextAlign6 {
	return &e
}
func (e *TemplateFindTemplatesTextAlign6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateFindTemplatesTextAlign6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesTextAlign6: %v", v)
	}
}

type TemplateFindTemplatesFieldMetaNumber struct {
	Label        *string                          `json:"label,omitempty"`
	Placeholder  *string                          `json:"placeholder,omitempty"`
	Required     *bool                            `json:"required,omitempty"`
	ReadOnly     *bool                            `json:"readOnly,omitempty"`
	Type         TemplateFindTemplatesTypeNumber  `json:"type"`
	NumberFormat *string                          `json:"numberFormat,omitempty"`
	Value        *string                          `json:"value,omitempty"`
	MinValue     *float64                         `json:"minValue,omitempty"`
	MaxValue     *float64                         `json:"maxValue,omitempty"`
	FontSize     *float64                         `json:"fontSize,omitempty"`
	TextAlign    *TemplateFindTemplatesTextAlign6 `json:"textAlign,omitempty"`
}

func (t TemplateFindTemplatesFieldMetaNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateFindTemplatesFieldMetaNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *TemplateFindTemplatesFieldMetaNumber) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMetaNumber) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMetaNumber) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMetaNumber) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMetaNumber) GetType() TemplateFindTemplatesTypeNumber {
	if o == nil {
		return TemplateFindTemplatesTypeNumber("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMetaNumber) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *TemplateFindTemplatesFieldMetaNumber) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *TemplateFindTemplatesFieldMetaNumber) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *TemplateFindTemplatesFieldMetaNumber) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *TemplateFindTemplatesFieldMetaNumber) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateFindTemplatesFieldMetaNumber) GetTextAlign() *TemplateFindTemplatesTextAlign6 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateFindTemplatesTypeText string

const (
	TemplateFindTemplatesTypeTextText TemplateFindTemplatesTypeText = "text"
)

func (e TemplateFindTemplatesTypeText) ToPointer() *TemplateFindTemplatesTypeText {
	return &e
}
func (e *TemplateFindTemplatesTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = TemplateFindTemplatesTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesTypeText: %v", v)
	}
}

type TemplateFindTemplatesTextAlign5 string

const (
	TemplateFindTemplatesTextAlign5Left   TemplateFindTemplatesTextAlign5 = "left"
	TemplateFindTemplatesTextAlign5Center TemplateFindTemplatesTextAlign5 = "center"
	TemplateFindTemplatesTextAlign5Right  TemplateFindTemplatesTextAlign5 = "right"
)

func (e TemplateFindTemplatesTextAlign5) ToPointer() *TemplateFindTemplatesTextAlign5 {
	return &e
}
func (e *TemplateFindTemplatesTextAlign5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateFindTemplatesTextAlign5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesTextAlign5: %v", v)
	}
}

type TemplateFindTemplatesFieldMetaText struct {
	Label          *string                          `json:"label,omitempty"`
	Placeholder    *string                          `json:"placeholder,omitempty"`
	Required       *bool                            `json:"required,omitempty"`
	ReadOnly       *bool                            `json:"readOnly,omitempty"`
	Type           TemplateFindTemplatesTypeText    `json:"type"`
	Text           *string                          `json:"text,omitempty"`
	CharacterLimit *float64                         `json:"characterLimit,omitempty"`
	FontSize       *float64                         `json:"fontSize,omitempty"`
	TextAlign      *TemplateFindTemplatesTextAlign5 `json:"textAlign,omitempty"`
}

func (t TemplateFindTemplatesFieldMetaText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateFindTemplatesFieldMetaText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *TemplateFindTemplatesFieldMetaText) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMetaText) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMetaText) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMetaText) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMetaText) GetType() TemplateFindTemplatesTypeText {
	if o == nil {
		return TemplateFindTemplatesTypeText("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMetaText) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *TemplateFindTemplatesFieldMetaText) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *TemplateFindTemplatesFieldMetaText) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateFindTemplatesFieldMetaText) GetTextAlign() *TemplateFindTemplatesTextAlign5 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateFindTemplatesTypeDate string

const (
	TemplateFindTemplatesTypeDateDate TemplateFindTemplatesTypeDate = "date"
)

func (e TemplateFindTemplatesTypeDate) ToPointer() *TemplateFindTemplatesTypeDate {
	return &e
}
func (e *TemplateFindTemplatesTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = TemplateFindTemplatesTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesTypeDate: %v", v)
	}
}

type TemplateFindTemplatesTextAlign4 string

const (
	TemplateFindTemplatesTextAlign4Left   TemplateFindTemplatesTextAlign4 = "left"
	TemplateFindTemplatesTextAlign4Center TemplateFindTemplatesTextAlign4 = "center"
	TemplateFindTemplatesTextAlign4Right  TemplateFindTemplatesTextAlign4 = "right"
)

func (e TemplateFindTemplatesTextAlign4) ToPointer() *TemplateFindTemplatesTextAlign4 {
	return &e
}
func (e *TemplateFindTemplatesTextAlign4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateFindTemplatesTextAlign4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesTextAlign4: %v", v)
	}
}

type TemplateFindTemplatesFieldMetaDate struct {
	Label       *string                          `json:"label,omitempty"`
	Placeholder *string                          `json:"placeholder,omitempty"`
	Required    *bool                            `json:"required,omitempty"`
	ReadOnly    *bool                            `json:"readOnly,omitempty"`
	Type        TemplateFindTemplatesTypeDate    `json:"type"`
	FontSize    *float64                         `json:"fontSize,omitempty"`
	TextAlign   *TemplateFindTemplatesTextAlign4 `json:"textAlign,omitempty"`
}

func (t TemplateFindTemplatesFieldMetaDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateFindTemplatesFieldMetaDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *TemplateFindTemplatesFieldMetaDate) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMetaDate) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMetaDate) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMetaDate) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMetaDate) GetType() TemplateFindTemplatesTypeDate {
	if o == nil {
		return TemplateFindTemplatesTypeDate("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMetaDate) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateFindTemplatesFieldMetaDate) GetTextAlign() *TemplateFindTemplatesTextAlign4 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateFindTemplatesTypeEmail string

const (
	TemplateFindTemplatesTypeEmailEmail TemplateFindTemplatesTypeEmail = "email"
)

func (e TemplateFindTemplatesTypeEmail) ToPointer() *TemplateFindTemplatesTypeEmail {
	return &e
}
func (e *TemplateFindTemplatesTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = TemplateFindTemplatesTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesTypeEmail: %v", v)
	}
}

type TemplateFindTemplatesTextAlign3 string

const (
	TemplateFindTemplatesTextAlign3Left   TemplateFindTemplatesTextAlign3 = "left"
	TemplateFindTemplatesTextAlign3Center TemplateFindTemplatesTextAlign3 = "center"
	TemplateFindTemplatesTextAlign3Right  TemplateFindTemplatesTextAlign3 = "right"
)

func (e TemplateFindTemplatesTextAlign3) ToPointer() *TemplateFindTemplatesTextAlign3 {
	return &e
}
func (e *TemplateFindTemplatesTextAlign3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateFindTemplatesTextAlign3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesTextAlign3: %v", v)
	}
}

type TemplateFindTemplatesFieldMetaEmail struct {
	Label       *string                          `json:"label,omitempty"`
	Placeholder *string                          `json:"placeholder,omitempty"`
	Required    *bool                            `json:"required,omitempty"`
	ReadOnly    *bool                            `json:"readOnly,omitempty"`
	Type        TemplateFindTemplatesTypeEmail   `json:"type"`
	FontSize    *float64                         `json:"fontSize,omitempty"`
	TextAlign   *TemplateFindTemplatesTextAlign3 `json:"textAlign,omitempty"`
}

func (t TemplateFindTemplatesFieldMetaEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateFindTemplatesFieldMetaEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *TemplateFindTemplatesFieldMetaEmail) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMetaEmail) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMetaEmail) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMetaEmail) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMetaEmail) GetType() TemplateFindTemplatesTypeEmail {
	if o == nil {
		return TemplateFindTemplatesTypeEmail("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMetaEmail) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateFindTemplatesFieldMetaEmail) GetTextAlign() *TemplateFindTemplatesTextAlign3 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateFindTemplatesTypeName string

const (
	TemplateFindTemplatesTypeNameName TemplateFindTemplatesTypeName = "name"
)

func (e TemplateFindTemplatesTypeName) ToPointer() *TemplateFindTemplatesTypeName {
	return &e
}
func (e *TemplateFindTemplatesTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = TemplateFindTemplatesTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesTypeName: %v", v)
	}
}

type TemplateFindTemplatesTextAlign2 string

const (
	TemplateFindTemplatesTextAlign2Left   TemplateFindTemplatesTextAlign2 = "left"
	TemplateFindTemplatesTextAlign2Center TemplateFindTemplatesTextAlign2 = "center"
	TemplateFindTemplatesTextAlign2Right  TemplateFindTemplatesTextAlign2 = "right"
)

func (e TemplateFindTemplatesTextAlign2) ToPointer() *TemplateFindTemplatesTextAlign2 {
	return &e
}
func (e *TemplateFindTemplatesTextAlign2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateFindTemplatesTextAlign2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesTextAlign2: %v", v)
	}
}

type TemplateFindTemplatesFieldMetaName struct {
	Label       *string                          `json:"label,omitempty"`
	Placeholder *string                          `json:"placeholder,omitempty"`
	Required    *bool                            `json:"required,omitempty"`
	ReadOnly    *bool                            `json:"readOnly,omitempty"`
	Type        TemplateFindTemplatesTypeName    `json:"type"`
	FontSize    *float64                         `json:"fontSize,omitempty"`
	TextAlign   *TemplateFindTemplatesTextAlign2 `json:"textAlign,omitempty"`
}

func (t TemplateFindTemplatesFieldMetaName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateFindTemplatesFieldMetaName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *TemplateFindTemplatesFieldMetaName) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMetaName) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMetaName) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMetaName) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMetaName) GetType() TemplateFindTemplatesTypeName {
	if o == nil {
		return TemplateFindTemplatesTypeName("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMetaName) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateFindTemplatesFieldMetaName) GetTextAlign() *TemplateFindTemplatesTextAlign2 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateFindTemplatesTypeInitials string

const (
	TemplateFindTemplatesTypeInitialsInitials TemplateFindTemplatesTypeInitials = "initials"
)

func (e TemplateFindTemplatesTypeInitials) ToPointer() *TemplateFindTemplatesTypeInitials {
	return &e
}
func (e *TemplateFindTemplatesTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = TemplateFindTemplatesTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesTypeInitials: %v", v)
	}
}

type TemplateFindTemplatesTextAlign1 string

const (
	TemplateFindTemplatesTextAlign1Left   TemplateFindTemplatesTextAlign1 = "left"
	TemplateFindTemplatesTextAlign1Center TemplateFindTemplatesTextAlign1 = "center"
	TemplateFindTemplatesTextAlign1Right  TemplateFindTemplatesTextAlign1 = "right"
)

func (e TemplateFindTemplatesTextAlign1) ToPointer() *TemplateFindTemplatesTextAlign1 {
	return &e
}
func (e *TemplateFindTemplatesTextAlign1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateFindTemplatesTextAlign1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesTextAlign1: %v", v)
	}
}

type TemplateFindTemplatesFieldMetaInitials struct {
	Label       *string                           `json:"label,omitempty"`
	Placeholder *string                           `json:"placeholder,omitempty"`
	Required    *bool                             `json:"required,omitempty"`
	ReadOnly    *bool                             `json:"readOnly,omitempty"`
	Type        TemplateFindTemplatesTypeInitials `json:"type"`
	FontSize    *float64                          `json:"fontSize,omitempty"`
	TextAlign   *TemplateFindTemplatesTextAlign1  `json:"textAlign,omitempty"`
}

func (t TemplateFindTemplatesFieldMetaInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateFindTemplatesFieldMetaInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *TemplateFindTemplatesFieldMetaInitials) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMetaInitials) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMetaInitials) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMetaInitials) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMetaInitials) GetType() TemplateFindTemplatesTypeInitials {
	if o == nil {
		return TemplateFindTemplatesTypeInitials("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMetaInitials) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateFindTemplatesFieldMetaInitials) GetTextAlign() *TemplateFindTemplatesTextAlign1 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateFindTemplatesFieldMetaUnionType string

const (
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaInitials TemplateFindTemplatesFieldMetaUnionType = "template_findTemplates_fieldMeta_Initials"
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaName     TemplateFindTemplatesFieldMetaUnionType = "template_findTemplates_fieldMeta_Name"
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaEmail    TemplateFindTemplatesFieldMetaUnionType = "template_findTemplates_fieldMeta_Email"
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaDate     TemplateFindTemplatesFieldMetaUnionType = "template_findTemplates_fieldMeta_Date"
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaText     TemplateFindTemplatesFieldMetaUnionType = "template_findTemplates_fieldMeta_Text"
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaNumber   TemplateFindTemplatesFieldMetaUnionType = "template_findTemplates_fieldMeta_Number"
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaRadio    TemplateFindTemplatesFieldMetaUnionType = "template_findTemplates_fieldMeta_Radio"
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaCheckbox TemplateFindTemplatesFieldMetaUnionType = "template_findTemplates_fieldMeta_Checkbox"
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaDropdown TemplateFindTemplatesFieldMetaUnionType = "template_findTemplates_fieldMeta_Dropdown"
)

type TemplateFindTemplatesFieldMetaUnion struct {
	TemplateFindTemplatesFieldMetaInitials *TemplateFindTemplatesFieldMetaInitials `queryParam:"inline"`
	TemplateFindTemplatesFieldMetaName     *TemplateFindTemplatesFieldMetaName     `queryParam:"inline"`
	TemplateFindTemplatesFieldMetaEmail    *TemplateFindTemplatesFieldMetaEmail    `queryParam:"inline"`
	TemplateFindTemplatesFieldMetaDate     *TemplateFindTemplatesFieldMetaDate     `queryParam:"inline"`
	TemplateFindTemplatesFieldMetaText     *TemplateFindTemplatesFieldMetaText     `queryParam:"inline"`
	TemplateFindTemplatesFieldMetaNumber   *TemplateFindTemplatesFieldMetaNumber   `queryParam:"inline"`
	TemplateFindTemplatesFieldMetaRadio    *TemplateFindTemplatesFieldMetaRadio    `queryParam:"inline"`
	TemplateFindTemplatesFieldMetaCheckbox *TemplateFindTemplatesFieldMetaCheckbox `queryParam:"inline"`
	TemplateFindTemplatesFieldMetaDropdown *TemplateFindTemplatesFieldMetaDropdown `queryParam:"inline"`

	Type TemplateFindTemplatesFieldMetaUnionType
}

func CreateTemplateFindTemplatesFieldMetaUnionTemplateFindTemplatesFieldMetaInitials(templateFindTemplatesFieldMetaInitials TemplateFindTemplatesFieldMetaInitials) TemplateFindTemplatesFieldMetaUnion {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaInitials

	return TemplateFindTemplatesFieldMetaUnion{
		TemplateFindTemplatesFieldMetaInitials: &templateFindTemplatesFieldMetaInitials,
		Type:                                   typ,
	}
}

func CreateTemplateFindTemplatesFieldMetaUnionTemplateFindTemplatesFieldMetaName(templateFindTemplatesFieldMetaName TemplateFindTemplatesFieldMetaName) TemplateFindTemplatesFieldMetaUnion {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaName

	return TemplateFindTemplatesFieldMetaUnion{
		TemplateFindTemplatesFieldMetaName: &templateFindTemplatesFieldMetaName,
		Type:                               typ,
	}
}

func CreateTemplateFindTemplatesFieldMetaUnionTemplateFindTemplatesFieldMetaEmail(templateFindTemplatesFieldMetaEmail TemplateFindTemplatesFieldMetaEmail) TemplateFindTemplatesFieldMetaUnion {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaEmail

	return TemplateFindTemplatesFieldMetaUnion{
		TemplateFindTemplatesFieldMetaEmail: &templateFindTemplatesFieldMetaEmail,
		Type:                                typ,
	}
}

func CreateTemplateFindTemplatesFieldMetaUnionTemplateFindTemplatesFieldMetaDate(templateFindTemplatesFieldMetaDate TemplateFindTemplatesFieldMetaDate) TemplateFindTemplatesFieldMetaUnion {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaDate

	return TemplateFindTemplatesFieldMetaUnion{
		TemplateFindTemplatesFieldMetaDate: &templateFindTemplatesFieldMetaDate,
		Type:                               typ,
	}
}

func CreateTemplateFindTemplatesFieldMetaUnionTemplateFindTemplatesFieldMetaText(templateFindTemplatesFieldMetaText TemplateFindTemplatesFieldMetaText) TemplateFindTemplatesFieldMetaUnion {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaText

	return TemplateFindTemplatesFieldMetaUnion{
		TemplateFindTemplatesFieldMetaText: &templateFindTemplatesFieldMetaText,
		Type:                               typ,
	}
}

func CreateTemplateFindTemplatesFieldMetaUnionTemplateFindTemplatesFieldMetaNumber(templateFindTemplatesFieldMetaNumber TemplateFindTemplatesFieldMetaNumber) TemplateFindTemplatesFieldMetaUnion {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaNumber

	return TemplateFindTemplatesFieldMetaUnion{
		TemplateFindTemplatesFieldMetaNumber: &templateFindTemplatesFieldMetaNumber,
		Type:                                 typ,
	}
}

func CreateTemplateFindTemplatesFieldMetaUnionTemplateFindTemplatesFieldMetaRadio(templateFindTemplatesFieldMetaRadio TemplateFindTemplatesFieldMetaRadio) TemplateFindTemplatesFieldMetaUnion {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaRadio

	return TemplateFindTemplatesFieldMetaUnion{
		TemplateFindTemplatesFieldMetaRadio: &templateFindTemplatesFieldMetaRadio,
		Type:                                typ,
	}
}

func CreateTemplateFindTemplatesFieldMetaUnionTemplateFindTemplatesFieldMetaCheckbox(templateFindTemplatesFieldMetaCheckbox TemplateFindTemplatesFieldMetaCheckbox) TemplateFindTemplatesFieldMetaUnion {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaCheckbox

	return TemplateFindTemplatesFieldMetaUnion{
		TemplateFindTemplatesFieldMetaCheckbox: &templateFindTemplatesFieldMetaCheckbox,
		Type:                                   typ,
	}
}

func CreateTemplateFindTemplatesFieldMetaUnionTemplateFindTemplatesFieldMetaDropdown(templateFindTemplatesFieldMetaDropdown TemplateFindTemplatesFieldMetaDropdown) TemplateFindTemplatesFieldMetaUnion {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaDropdown

	return TemplateFindTemplatesFieldMetaUnion{
		TemplateFindTemplatesFieldMetaDropdown: &templateFindTemplatesFieldMetaDropdown,
		Type:                                   typ,
	}
}

func (u *TemplateFindTemplatesFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var templateFindTemplatesFieldMetaInitials TemplateFindTemplatesFieldMetaInitials = TemplateFindTemplatesFieldMetaInitials{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMetaInitials, "", true, nil); err == nil {
		u.TemplateFindTemplatesFieldMetaInitials = &templateFindTemplatesFieldMetaInitials
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaInitials
		return nil
	}

	var templateFindTemplatesFieldMetaName TemplateFindTemplatesFieldMetaName = TemplateFindTemplatesFieldMetaName{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMetaName, "", true, nil); err == nil {
		u.TemplateFindTemplatesFieldMetaName = &templateFindTemplatesFieldMetaName
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaName
		return nil
	}

	var templateFindTemplatesFieldMetaEmail TemplateFindTemplatesFieldMetaEmail = TemplateFindTemplatesFieldMetaEmail{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMetaEmail, "", true, nil); err == nil {
		u.TemplateFindTemplatesFieldMetaEmail = &templateFindTemplatesFieldMetaEmail
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaEmail
		return nil
	}

	var templateFindTemplatesFieldMetaDate TemplateFindTemplatesFieldMetaDate = TemplateFindTemplatesFieldMetaDate{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMetaDate, "", true, nil); err == nil {
		u.TemplateFindTemplatesFieldMetaDate = &templateFindTemplatesFieldMetaDate
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaDate
		return nil
	}

	var templateFindTemplatesFieldMetaText TemplateFindTemplatesFieldMetaText = TemplateFindTemplatesFieldMetaText{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMetaText, "", true, nil); err == nil {
		u.TemplateFindTemplatesFieldMetaText = &templateFindTemplatesFieldMetaText
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaText
		return nil
	}

	var templateFindTemplatesFieldMetaNumber TemplateFindTemplatesFieldMetaNumber = TemplateFindTemplatesFieldMetaNumber{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMetaNumber, "", true, nil); err == nil {
		u.TemplateFindTemplatesFieldMetaNumber = &templateFindTemplatesFieldMetaNumber
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaNumber
		return nil
	}

	var templateFindTemplatesFieldMetaRadio TemplateFindTemplatesFieldMetaRadio = TemplateFindTemplatesFieldMetaRadio{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMetaRadio, "", true, nil); err == nil {
		u.TemplateFindTemplatesFieldMetaRadio = &templateFindTemplatesFieldMetaRadio
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaRadio
		return nil
	}

	var templateFindTemplatesFieldMetaCheckbox TemplateFindTemplatesFieldMetaCheckbox = TemplateFindTemplatesFieldMetaCheckbox{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMetaCheckbox, "", true, nil); err == nil {
		u.TemplateFindTemplatesFieldMetaCheckbox = &templateFindTemplatesFieldMetaCheckbox
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaCheckbox
		return nil
	}

	var templateFindTemplatesFieldMetaDropdown TemplateFindTemplatesFieldMetaDropdown = TemplateFindTemplatesFieldMetaDropdown{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMetaDropdown, "", true, nil); err == nil {
		u.TemplateFindTemplatesFieldMetaDropdown = &templateFindTemplatesFieldMetaDropdown
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMetaDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TemplateFindTemplatesFieldMetaUnion", string(data))
}

func (u TemplateFindTemplatesFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.TemplateFindTemplatesFieldMetaInitials != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMetaInitials, "", true)
	}

	if u.TemplateFindTemplatesFieldMetaName != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMetaName, "", true)
	}

	if u.TemplateFindTemplatesFieldMetaEmail != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMetaEmail, "", true)
	}

	if u.TemplateFindTemplatesFieldMetaDate != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMetaDate, "", true)
	}

	if u.TemplateFindTemplatesFieldMetaText != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMetaText, "", true)
	}

	if u.TemplateFindTemplatesFieldMetaNumber != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMetaNumber, "", true)
	}

	if u.TemplateFindTemplatesFieldMetaRadio != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMetaRadio, "", true)
	}

	if u.TemplateFindTemplatesFieldMetaCheckbox != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMetaCheckbox, "", true)
	}

	if u.TemplateFindTemplatesFieldMetaDropdown != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMetaDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type TemplateFindTemplatesFieldMetaUnion: all fields are null")
}

type TemplateFindTemplatesField struct {
	Type        TemplateFindTemplatesFieldType `json:"type"`
	ID          float64                        `json:"id"`
	SecondaryID string                         `json:"secondaryId"`
	DocumentID  *float64                       `json:"documentId"`
	TemplateID  *float64                       `json:"templateId"`
	RecipientID float64                        `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                              `json:"page"`
	PositionX  any                                  `json:"positionX,omitempty"`
	PositionY  any                                  `json:"positionY,omitempty"`
	Width      any                                  `json:"width,omitempty"`
	Height     any                                  `json:"height,omitempty"`
	CustomText string                               `json:"customText"`
	Inserted   bool                                 `json:"inserted"`
	FieldMeta  *TemplateFindTemplatesFieldMetaUnion `json:"fieldMeta"`
}

func (o *TemplateFindTemplatesField) GetType() TemplateFindTemplatesFieldType {
	if o == nil {
		return TemplateFindTemplatesFieldType("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesField) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateFindTemplatesField) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *TemplateFindTemplatesField) GetDocumentID() *float64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *TemplateFindTemplatesField) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *TemplateFindTemplatesField) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *TemplateFindTemplatesField) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *TemplateFindTemplatesField) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *TemplateFindTemplatesField) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *TemplateFindTemplatesField) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *TemplateFindTemplatesField) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *TemplateFindTemplatesField) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *TemplateFindTemplatesField) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *TemplateFindTemplatesField) GetFieldMeta() *TemplateFindTemplatesFieldMetaUnion {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

type TemplateFindTemplatesRole string

const (
	TemplateFindTemplatesRoleCc        TemplateFindTemplatesRole = "CC"
	TemplateFindTemplatesRoleSigner    TemplateFindTemplatesRole = "SIGNER"
	TemplateFindTemplatesRoleViewer    TemplateFindTemplatesRole = "VIEWER"
	TemplateFindTemplatesRoleApprover  TemplateFindTemplatesRole = "APPROVER"
	TemplateFindTemplatesRoleAssistant TemplateFindTemplatesRole = "ASSISTANT"
)

func (e TemplateFindTemplatesRole) ToPointer() *TemplateFindTemplatesRole {
	return &e
}
func (e *TemplateFindTemplatesRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = TemplateFindTemplatesRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesRole: %v", v)
	}
}

type TemplateFindTemplatesReadStatus string

const (
	TemplateFindTemplatesReadStatusNotOpened TemplateFindTemplatesReadStatus = "NOT_OPENED"
	TemplateFindTemplatesReadStatusOpened    TemplateFindTemplatesReadStatus = "OPENED"
)

func (e TemplateFindTemplatesReadStatus) ToPointer() *TemplateFindTemplatesReadStatus {
	return &e
}
func (e *TemplateFindTemplatesReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = TemplateFindTemplatesReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesReadStatus: %v", v)
	}
}

type TemplateFindTemplatesSigningStatus string

const (
	TemplateFindTemplatesSigningStatusNotSigned TemplateFindTemplatesSigningStatus = "NOT_SIGNED"
	TemplateFindTemplatesSigningStatusSigned    TemplateFindTemplatesSigningStatus = "SIGNED"
	TemplateFindTemplatesSigningStatusRejected  TemplateFindTemplatesSigningStatus = "REJECTED"
)

func (e TemplateFindTemplatesSigningStatus) ToPointer() *TemplateFindTemplatesSigningStatus {
	return &e
}
func (e *TemplateFindTemplatesSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = TemplateFindTemplatesSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesSigningStatus: %v", v)
	}
}

type TemplateFindTemplatesSendStatus string

const (
	TemplateFindTemplatesSendStatusNotSent TemplateFindTemplatesSendStatus = "NOT_SENT"
	TemplateFindTemplatesSendStatusSent    TemplateFindTemplatesSendStatus = "SENT"
)

func (e TemplateFindTemplatesSendStatus) ToPointer() *TemplateFindTemplatesSendStatus {
	return &e
}
func (e *TemplateFindTemplatesSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = TemplateFindTemplatesSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesSendStatus: %v", v)
	}
}

// TemplateFindTemplatesAccessAuth - The type of authentication required for the recipient to access the document.
type TemplateFindTemplatesAccessAuth string

const (
	TemplateFindTemplatesAccessAuthAccount TemplateFindTemplatesAccessAuth = "ACCOUNT"
)

func (e TemplateFindTemplatesAccessAuth) ToPointer() *TemplateFindTemplatesAccessAuth {
	return &e
}
func (e *TemplateFindTemplatesAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = TemplateFindTemplatesAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesAccessAuth: %v", v)
	}
}

// TemplateFindTemplatesActionAuth - The type of authentication required for the recipient to sign the document.
type TemplateFindTemplatesActionAuth string

const (
	TemplateFindTemplatesActionAuthAccount       TemplateFindTemplatesActionAuth = "ACCOUNT"
	TemplateFindTemplatesActionAuthPasskey       TemplateFindTemplatesActionAuth = "PASSKEY"
	TemplateFindTemplatesActionAuthTwoFactorAuth TemplateFindTemplatesActionAuth = "TWO_FACTOR_AUTH"
	TemplateFindTemplatesActionAuthPassword      TemplateFindTemplatesActionAuth = "PASSWORD"
	TemplateFindTemplatesActionAuthExplicitNone  TemplateFindTemplatesActionAuth = "EXPLICIT_NONE"
)

func (e TemplateFindTemplatesActionAuth) ToPointer() *TemplateFindTemplatesActionAuth {
	return &e
}
func (e *TemplateFindTemplatesActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		fallthrough
	case "EXPLICIT_NONE":
		*e = TemplateFindTemplatesActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesActionAuth: %v", v)
	}
}

type TemplateFindTemplatesRecipientAuthOptions struct {
	AccessAuth []TemplateFindTemplatesAccessAuth `json:"accessAuth"`
	ActionAuth []TemplateFindTemplatesActionAuth `json:"actionAuth"`
}

func (o *TemplateFindTemplatesRecipientAuthOptions) GetAccessAuth() []TemplateFindTemplatesAccessAuth {
	if o == nil {
		return []TemplateFindTemplatesAccessAuth{}
	}
	return o.AccessAuth
}

func (o *TemplateFindTemplatesRecipientAuthOptions) GetActionAuth() []TemplateFindTemplatesActionAuth {
	if o == nil {
		return []TemplateFindTemplatesActionAuth{}
	}
	return o.ActionAuth
}

type TemplateFindTemplatesRecipient struct {
	Role              TemplateFindTemplatesRole                  `json:"role"`
	ReadStatus        TemplateFindTemplatesReadStatus            `json:"readStatus"`
	SigningStatus     TemplateFindTemplatesSigningStatus         `json:"signingStatus"`
	SendStatus        TemplateFindTemplatesSendStatus            `json:"sendStatus"`
	ID                float64                                    `json:"id"`
	DocumentID        *float64                                   `json:"documentId"`
	TemplateID        *float64                                   `json:"templateId"`
	Email             string                                     `json:"email"`
	Name              string                                     `json:"name"`
	Token             string                                     `json:"token"`
	DocumentDeletedAt *string                                    `json:"documentDeletedAt"`
	Expired           *string                                    `json:"expired"`
	SignedAt          *string                                    `json:"signedAt"`
	AuthOptions       *TemplateFindTemplatesRecipientAuthOptions `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
}

func (o *TemplateFindTemplatesRecipient) GetRole() TemplateFindTemplatesRole {
	if o == nil {
		return TemplateFindTemplatesRole("")
	}
	return o.Role
}

func (o *TemplateFindTemplatesRecipient) GetReadStatus() TemplateFindTemplatesReadStatus {
	if o == nil {
		return TemplateFindTemplatesReadStatus("")
	}
	return o.ReadStatus
}

func (o *TemplateFindTemplatesRecipient) GetSigningStatus() TemplateFindTemplatesSigningStatus {
	if o == nil {
		return TemplateFindTemplatesSigningStatus("")
	}
	return o.SigningStatus
}

func (o *TemplateFindTemplatesRecipient) GetSendStatus() TemplateFindTemplatesSendStatus {
	if o == nil {
		return TemplateFindTemplatesSendStatus("")
	}
	return o.SendStatus
}

func (o *TemplateFindTemplatesRecipient) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateFindTemplatesRecipient) GetDocumentID() *float64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *TemplateFindTemplatesRecipient) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *TemplateFindTemplatesRecipient) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *TemplateFindTemplatesRecipient) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TemplateFindTemplatesRecipient) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *TemplateFindTemplatesRecipient) GetDocumentDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DocumentDeletedAt
}

func (o *TemplateFindTemplatesRecipient) GetExpired() *string {
	if o == nil {
		return nil
	}
	return o.Expired
}

func (o *TemplateFindTemplatesRecipient) GetSignedAt() *string {
	if o == nil {
		return nil
	}
	return o.SignedAt
}

func (o *TemplateFindTemplatesRecipient) GetAuthOptions() *TemplateFindTemplatesRecipientAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *TemplateFindTemplatesRecipient) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *TemplateFindTemplatesRecipient) GetRejectionReason() *string {
	if o == nil {
		return nil
	}
	return o.RejectionReason
}

type TemplateFindTemplatesSigningOrder string

const (
	TemplateFindTemplatesSigningOrderParallel   TemplateFindTemplatesSigningOrder = "PARALLEL"
	TemplateFindTemplatesSigningOrderSequential TemplateFindTemplatesSigningOrder = "SEQUENTIAL"
)

func (e TemplateFindTemplatesSigningOrder) ToPointer() *TemplateFindTemplatesSigningOrder {
	return &e
}
func (e *TemplateFindTemplatesSigningOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARALLEL":
		fallthrough
	case "SEQUENTIAL":
		*e = TemplateFindTemplatesSigningOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesSigningOrder: %v", v)
	}
}

type TemplateFindTemplatesDistributionMethod string

const (
	TemplateFindTemplatesDistributionMethodEmail TemplateFindTemplatesDistributionMethod = "EMAIL"
	TemplateFindTemplatesDistributionMethodNone  TemplateFindTemplatesDistributionMethod = "NONE"
)

func (e TemplateFindTemplatesDistributionMethod) ToPointer() *TemplateFindTemplatesDistributionMethod {
	return &e
}
func (e *TemplateFindTemplatesDistributionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = TemplateFindTemplatesDistributionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesDistributionMethod: %v", v)
	}
}

type TemplateFindTemplatesTemplateMeta struct {
	SigningOrder       *TemplateFindTemplatesSigningOrder      `json:"signingOrder"`
	DistributionMethod TemplateFindTemplatesDistributionMethod `json:"distributionMethod"`
}

func (o *TemplateFindTemplatesTemplateMeta) GetSigningOrder() *TemplateFindTemplatesSigningOrder {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *TemplateFindTemplatesTemplateMeta) GetDistributionMethod() TemplateFindTemplatesDistributionMethod {
	if o == nil {
		return TemplateFindTemplatesDistributionMethod("")
	}
	return o.DistributionMethod
}

type TemplateFindTemplatesDirectLink struct {
	Token   string `json:"token"`
	Enabled bool   `json:"enabled"`
}

func (o *TemplateFindTemplatesDirectLink) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *TemplateFindTemplatesDirectLink) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

type TemplateFindTemplatesData struct {
	Type                    TemplateFindTemplatesDataType      `json:"type"`
	Visibility              TemplateFindTemplatesVisibility    `json:"visibility"`
	ID                      float64                            `json:"id"`
	ExternalID              *string                            `json:"externalId"`
	Title                   string                             `json:"title"`
	UserID                  float64                            `json:"userId"`
	TeamID                  float64                            `json:"teamId"`
	AuthOptions             *TemplateFindTemplatesAuthOptions  `json:"authOptions"`
	TemplateDocumentDataID  string                             `json:"templateDocumentDataId"`
	CreatedAt               string                             `json:"createdAt"`
	UpdatedAt               string                             `json:"updatedAt"`
	PublicTitle             string                             `json:"publicTitle"`
	PublicDescription       string                             `json:"publicDescription"`
	FolderID                *string                            `json:"folderId"`
	UseLegacyFieldInsertion bool                               `json:"useLegacyFieldInsertion"`
	Team                    *TemplateFindTemplatesTeam         `json:"team"`
	Fields                  []TemplateFindTemplatesField       `json:"fields"`
	Recipients              []TemplateFindTemplatesRecipient   `json:"recipients"`
	TemplateMeta            *TemplateFindTemplatesTemplateMeta `json:"templateMeta"`
	DirectLink              *TemplateFindTemplatesDirectLink   `json:"directLink"`
}

func (o *TemplateFindTemplatesData) GetType() TemplateFindTemplatesDataType {
	if o == nil {
		return TemplateFindTemplatesDataType("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesData) GetVisibility() TemplateFindTemplatesVisibility {
	if o == nil {
		return TemplateFindTemplatesVisibility("")
	}
	return o.Visibility
}

func (o *TemplateFindTemplatesData) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateFindTemplatesData) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *TemplateFindTemplatesData) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *TemplateFindTemplatesData) GetUserID() float64 {
	if o == nil {
		return 0.0
	}
	return o.UserID
}

func (o *TemplateFindTemplatesData) GetTeamID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TeamID
}

func (o *TemplateFindTemplatesData) GetAuthOptions() *TemplateFindTemplatesAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *TemplateFindTemplatesData) GetTemplateDocumentDataID() string {
	if o == nil {
		return ""
	}
	return o.TemplateDocumentDataID
}

func (o *TemplateFindTemplatesData) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *TemplateFindTemplatesData) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *TemplateFindTemplatesData) GetPublicTitle() string {
	if o == nil {
		return ""
	}
	return o.PublicTitle
}

func (o *TemplateFindTemplatesData) GetPublicDescription() string {
	if o == nil {
		return ""
	}
	return o.PublicDescription
}

func (o *TemplateFindTemplatesData) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

func (o *TemplateFindTemplatesData) GetUseLegacyFieldInsertion() bool {
	if o == nil {
		return false
	}
	return o.UseLegacyFieldInsertion
}

func (o *TemplateFindTemplatesData) GetTeam() *TemplateFindTemplatesTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *TemplateFindTemplatesData) GetFields() []TemplateFindTemplatesField {
	if o == nil {
		return []TemplateFindTemplatesField{}
	}
	return o.Fields
}

func (o *TemplateFindTemplatesData) GetRecipients() []TemplateFindTemplatesRecipient {
	if o == nil {
		return []TemplateFindTemplatesRecipient{}
	}
	return o.Recipients
}

func (o *TemplateFindTemplatesData) GetTemplateMeta() *TemplateFindTemplatesTemplateMeta {
	if o == nil {
		return nil
	}
	return o.TemplateMeta
}

func (o *TemplateFindTemplatesData) GetDirectLink() *TemplateFindTemplatesDirectLink {
	if o == nil {
		return nil
	}
	return o.DirectLink
}

// TemplateFindTemplatesResponseBody - Successful response
type TemplateFindTemplatesResponseBody struct {
	Data []TemplateFindTemplatesData `json:"data"`
	// The total number of items.
	Count float64 `json:"count"`
	// The current page number, starts at 1.
	CurrentPage float64 `json:"currentPage"`
	// The number of items per page.
	PerPage float64 `json:"perPage"`
	// The total number of pages.
	TotalPages float64 `json:"totalPages"`
}

func (o *TemplateFindTemplatesResponseBody) GetData() []TemplateFindTemplatesData {
	if o == nil {
		return []TemplateFindTemplatesData{}
	}
	return o.Data
}

func (o *TemplateFindTemplatesResponseBody) GetCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Count
}

func (o *TemplateFindTemplatesResponseBody) GetCurrentPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentPage
}

func (o *TemplateFindTemplatesResponseBody) GetPerPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.PerPage
}

func (o *TemplateFindTemplatesResponseBody) GetTotalPages() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalPages
}

type TemplateFindTemplatesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *TemplateFindTemplatesResponseBody
}

func (o *TemplateFindTemplatesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *TemplateFindTemplatesResponse) GetObject() *TemplateFindTemplatesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
