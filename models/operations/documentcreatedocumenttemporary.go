// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

// DocumentCreateDocumentTemporaryVisibilityRequest - The visibility of the document.
type DocumentCreateDocumentTemporaryVisibilityRequest string

const (
	DocumentCreateDocumentTemporaryVisibilityRequestEveryone        DocumentCreateDocumentTemporaryVisibilityRequest = "EVERYONE"
	DocumentCreateDocumentTemporaryVisibilityRequestManagerAndAbove DocumentCreateDocumentTemporaryVisibilityRequest = "MANAGER_AND_ABOVE"
	DocumentCreateDocumentTemporaryVisibilityRequestAdmin           DocumentCreateDocumentTemporaryVisibilityRequest = "ADMIN"
)

func (e DocumentCreateDocumentTemporaryVisibilityRequest) ToPointer() *DocumentCreateDocumentTemporaryVisibilityRequest {
	return &e
}
func (e *DocumentCreateDocumentTemporaryVisibilityRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = DocumentCreateDocumentTemporaryVisibilityRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryVisibilityRequest: %v", v)
	}
}

// DocumentCreateDocumentTemporaryGlobalAccessAuthRequest - The type of authentication required for the recipient to access the document.
type DocumentCreateDocumentTemporaryGlobalAccessAuthRequest string

const (
	DocumentCreateDocumentTemporaryGlobalAccessAuthRequestAccount       DocumentCreateDocumentTemporaryGlobalAccessAuthRequest = "ACCOUNT"
	DocumentCreateDocumentTemporaryGlobalAccessAuthRequestTwoFactorAuth DocumentCreateDocumentTemporaryGlobalAccessAuthRequest = "TWO_FACTOR_AUTH"
)

func (e DocumentCreateDocumentTemporaryGlobalAccessAuthRequest) ToPointer() *DocumentCreateDocumentTemporaryGlobalAccessAuthRequest {
	return &e
}
func (e *DocumentCreateDocumentTemporaryGlobalAccessAuthRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = DocumentCreateDocumentTemporaryGlobalAccessAuthRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryGlobalAccessAuthRequest: %v", v)
	}
}

// DocumentCreateDocumentTemporaryGlobalActionAuthRequest - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type DocumentCreateDocumentTemporaryGlobalActionAuthRequest string

const (
	DocumentCreateDocumentTemporaryGlobalActionAuthRequestAccount       DocumentCreateDocumentTemporaryGlobalActionAuthRequest = "ACCOUNT"
	DocumentCreateDocumentTemporaryGlobalActionAuthRequestPasskey       DocumentCreateDocumentTemporaryGlobalActionAuthRequest = "PASSKEY"
	DocumentCreateDocumentTemporaryGlobalActionAuthRequestTwoFactorAuth DocumentCreateDocumentTemporaryGlobalActionAuthRequest = "TWO_FACTOR_AUTH"
	DocumentCreateDocumentTemporaryGlobalActionAuthRequestPassword      DocumentCreateDocumentTemporaryGlobalActionAuthRequest = "PASSWORD"
)

func (e DocumentCreateDocumentTemporaryGlobalActionAuthRequest) ToPointer() *DocumentCreateDocumentTemporaryGlobalActionAuthRequest {
	return &e
}
func (e *DocumentCreateDocumentTemporaryGlobalActionAuthRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		*e = DocumentCreateDocumentTemporaryGlobalActionAuthRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryGlobalActionAuthRequest: %v", v)
	}
}

type FormValuesRequestType string

const (
	FormValuesRequestTypeStr     FormValuesRequestType = "str"
	FormValuesRequestTypeBoolean FormValuesRequestType = "boolean"
	FormValuesRequestTypeNumber  FormValuesRequestType = "number"
)

type FormValuesRequest struct {
	Str     *string  `queryParam:"inline,name=formValues"`
	Boolean *bool    `queryParam:"inline,name=formValues"`
	Number  *float64 `queryParam:"inline,name=formValues"`

	Type FormValuesRequestType
}

func CreateFormValuesRequestStr(str string) FormValuesRequest {
	typ := FormValuesRequestTypeStr

	return FormValuesRequest{
		Str:  &str,
		Type: typ,
	}
}

func CreateFormValuesRequestBoolean(boolean bool) FormValuesRequest {
	typ := FormValuesRequestTypeBoolean

	return FormValuesRequest{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateFormValuesRequestNumber(number float64) FormValuesRequest {
	typ := FormValuesRequestTypeNumber

	return FormValuesRequest{
		Number: &number,
		Type:   typ,
	}
}

func (u *FormValuesRequest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = FormValuesRequestTypeStr
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = FormValuesRequestTypeBoolean
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = FormValuesRequestTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FormValuesRequest", string(data))
}

func (u FormValuesRequest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type FormValuesRequest: all fields are null")
}

type DocumentCreateDocumentTemporaryRoleRequest string

const (
	DocumentCreateDocumentTemporaryRoleRequestCc        DocumentCreateDocumentTemporaryRoleRequest = "CC"
	DocumentCreateDocumentTemporaryRoleRequestSigner    DocumentCreateDocumentTemporaryRoleRequest = "SIGNER"
	DocumentCreateDocumentTemporaryRoleRequestViewer    DocumentCreateDocumentTemporaryRoleRequest = "VIEWER"
	DocumentCreateDocumentTemporaryRoleRequestApprover  DocumentCreateDocumentTemporaryRoleRequest = "APPROVER"
	DocumentCreateDocumentTemporaryRoleRequestAssistant DocumentCreateDocumentTemporaryRoleRequest = "ASSISTANT"
)

func (e DocumentCreateDocumentTemporaryRoleRequest) ToPointer() *DocumentCreateDocumentTemporaryRoleRequest {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRoleRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = DocumentCreateDocumentTemporaryRoleRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRoleRequest: %v", v)
	}
}

// DocumentCreateDocumentTemporaryAccessAuthRequest - The type of authentication required for the recipient to access the document.
type DocumentCreateDocumentTemporaryAccessAuthRequest string

const (
	DocumentCreateDocumentTemporaryAccessAuthRequestAccount       DocumentCreateDocumentTemporaryAccessAuthRequest = "ACCOUNT"
	DocumentCreateDocumentTemporaryAccessAuthRequestTwoFactorAuth DocumentCreateDocumentTemporaryAccessAuthRequest = "TWO_FACTOR_AUTH"
)

func (e DocumentCreateDocumentTemporaryAccessAuthRequest) ToPointer() *DocumentCreateDocumentTemporaryAccessAuthRequest {
	return &e
}
func (e *DocumentCreateDocumentTemporaryAccessAuthRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = DocumentCreateDocumentTemporaryAccessAuthRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryAccessAuthRequest: %v", v)
	}
}

// DocumentCreateDocumentTemporaryActionAuthRequest - The type of authentication required for the recipient to sign the document.
type DocumentCreateDocumentTemporaryActionAuthRequest string

const (
	DocumentCreateDocumentTemporaryActionAuthRequestAccount       DocumentCreateDocumentTemporaryActionAuthRequest = "ACCOUNT"
	DocumentCreateDocumentTemporaryActionAuthRequestPasskey       DocumentCreateDocumentTemporaryActionAuthRequest = "PASSKEY"
	DocumentCreateDocumentTemporaryActionAuthRequestTwoFactorAuth DocumentCreateDocumentTemporaryActionAuthRequest = "TWO_FACTOR_AUTH"
	DocumentCreateDocumentTemporaryActionAuthRequestPassword      DocumentCreateDocumentTemporaryActionAuthRequest = "PASSWORD"
	DocumentCreateDocumentTemporaryActionAuthRequestExplicitNone  DocumentCreateDocumentTemporaryActionAuthRequest = "EXPLICIT_NONE"
)

func (e DocumentCreateDocumentTemporaryActionAuthRequest) ToPointer() *DocumentCreateDocumentTemporaryActionAuthRequest {
	return &e
}
func (e *DocumentCreateDocumentTemporaryActionAuthRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		fallthrough
	case "EXPLICIT_NONE":
		*e = DocumentCreateDocumentTemporaryActionAuthRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryActionAuthRequest: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientTypeDropdown1 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeDropdown1Dropdown DocumentCreateDocumentTemporaryRecipientTypeDropdown1 = "DROPDOWN"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeDropdown1) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeDropdown1 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeDropdown1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = DocumentCreateDocumentTemporaryRecipientTypeDropdown1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeDropdown1: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientTypeDropdown2 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeDropdown2Dropdown DocumentCreateDocumentTemporaryRecipientTypeDropdown2 = "dropdown"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeDropdown2) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeDropdown2 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeDropdown2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = DocumentCreateDocumentTemporaryRecipientTypeDropdown2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeDropdown2: %v", v)
	}
}

type DocumentCreateDocumentTemporaryValueDropdown struct {
	Value string `json:"value"`
}

func (d DocumentCreateDocumentTemporaryValueDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryValueDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryValueDropdown) GetValue() string {
	if d == nil {
		return ""
	}
	return d.Value
}

type DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown struct {
	Label        *string                                               `json:"label,omitempty"`
	Placeholder  *string                                               `json:"placeholder,omitempty"`
	Required     *bool                                                 `json:"required,omitempty"`
	ReadOnly     *bool                                                 `json:"readOnly,omitempty"`
	Type         DocumentCreateDocumentTemporaryRecipientTypeDropdown2 `json:"type"`
	Values       []DocumentCreateDocumentTemporaryValueDropdown        `json:"values,omitempty"`
	DefaultValue *string                                               `json:"defaultValue,omitempty"`
}

func (d DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown) GetType() DocumentCreateDocumentTemporaryRecipientTypeDropdown2 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeDropdown2("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown) GetValues() []DocumentCreateDocumentTemporaryValueDropdown {
	if d == nil {
		return nil
	}
	return d.Values
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown) GetDefaultValue() *string {
	if d == nil {
		return nil
	}
	return d.DefaultValue
}

type DocumentCreateDocumentTemporaryFieldDropdown struct {
	Type      DocumentCreateDocumentTemporaryRecipientTypeDropdown1      `json:"type"`
	FieldMeta *DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (d DocumentCreateDocumentTemporaryFieldDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryFieldDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryFieldDropdown) GetType() DocumentCreateDocumentTemporaryRecipientTypeDropdown1 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeDropdown1("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryFieldDropdown) GetFieldMeta() *DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown {
	if d == nil {
		return nil
	}
	return d.FieldMeta
}

func (d *DocumentCreateDocumentTemporaryFieldDropdown) GetPageNumber() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageNumber
}

func (d *DocumentCreateDocumentTemporaryFieldDropdown) GetPageX() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageX
}

func (d *DocumentCreateDocumentTemporaryFieldDropdown) GetPageY() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageY
}

func (d *DocumentCreateDocumentTemporaryFieldDropdown) GetWidth() float64 {
	if d == nil {
		return 0.0
	}
	return d.Width
}

func (d *DocumentCreateDocumentTemporaryFieldDropdown) GetHeight() float64 {
	if d == nil {
		return 0.0
	}
	return d.Height
}

type DocumentCreateDocumentTemporaryRecipientTypeCheckbox1 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeCheckbox1Checkbox DocumentCreateDocumentTemporaryRecipientTypeCheckbox1 = "CHECKBOX"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeCheckbox1) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeCheckbox1 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeCheckbox1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = DocumentCreateDocumentTemporaryRecipientTypeCheckbox1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeCheckbox1: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientTypeCheckbox2 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeCheckbox2Checkbox DocumentCreateDocumentTemporaryRecipientTypeCheckbox2 = "checkbox"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeCheckbox2) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeCheckbox2 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeCheckbox2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = DocumentCreateDocumentTemporaryRecipientTypeCheckbox2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeCheckbox2: %v", v)
	}
}

type DocumentCreateDocumentTemporaryValueCheckbox struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (d DocumentCreateDocumentTemporaryValueCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryValueCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryValueCheckbox) GetID() float64 {
	if d == nil {
		return 0.0
	}
	return d.ID
}

func (d *DocumentCreateDocumentTemporaryValueCheckbox) GetChecked() bool {
	if d == nil {
		return false
	}
	return d.Checked
}

func (d *DocumentCreateDocumentTemporaryValueCheckbox) GetValue() string {
	if d == nil {
		return ""
	}
	return d.Value
}

type DocumentCreateDocumentTemporaryRecipientDirection string

const (
	DocumentCreateDocumentTemporaryRecipientDirectionVertical   DocumentCreateDocumentTemporaryRecipientDirection = "vertical"
	DocumentCreateDocumentTemporaryRecipientDirectionHorizontal DocumentCreateDocumentTemporaryRecipientDirection = "horizontal"
)

func (e DocumentCreateDocumentTemporaryRecipientDirection) ToPointer() *DocumentCreateDocumentTemporaryRecipientDirection {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vertical":
		fallthrough
	case "horizontal":
		*e = DocumentCreateDocumentTemporaryRecipientDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientDirection: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox struct {
	Label            *string                                               `json:"label,omitempty"`
	Placeholder      *string                                               `json:"placeholder,omitempty"`
	Required         *bool                                                 `json:"required,omitempty"`
	ReadOnly         *bool                                                 `json:"readOnly,omitempty"`
	Type             DocumentCreateDocumentTemporaryRecipientTypeCheckbox2 `json:"type"`
	Values           []DocumentCreateDocumentTemporaryValueCheckbox        `json:"values,omitempty"`
	ValidationRule   *string                                               `json:"validationRule,omitempty"`
	ValidationLength *float64                                              `json:"validationLength,omitempty"`
	Direction        *DocumentCreateDocumentTemporaryRecipientDirection    `default:"vertical" json:"direction"`
}

func (d DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox) GetType() DocumentCreateDocumentTemporaryRecipientTypeCheckbox2 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeCheckbox2("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox) GetValues() []DocumentCreateDocumentTemporaryValueCheckbox {
	if d == nil {
		return nil
	}
	return d.Values
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox) GetValidationRule() *string {
	if d == nil {
		return nil
	}
	return d.ValidationRule
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox) GetValidationLength() *float64 {
	if d == nil {
		return nil
	}
	return d.ValidationLength
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox) GetDirection() *DocumentCreateDocumentTemporaryRecipientDirection {
	if d == nil {
		return nil
	}
	return d.Direction
}

type DocumentCreateDocumentTemporaryFieldCheckbox struct {
	Type      DocumentCreateDocumentTemporaryRecipientTypeCheckbox1      `json:"type"`
	FieldMeta *DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (d DocumentCreateDocumentTemporaryFieldCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryFieldCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryFieldCheckbox) GetType() DocumentCreateDocumentTemporaryRecipientTypeCheckbox1 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeCheckbox1("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryFieldCheckbox) GetFieldMeta() *DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox {
	if d == nil {
		return nil
	}
	return d.FieldMeta
}

func (d *DocumentCreateDocumentTemporaryFieldCheckbox) GetPageNumber() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageNumber
}

func (d *DocumentCreateDocumentTemporaryFieldCheckbox) GetPageX() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageX
}

func (d *DocumentCreateDocumentTemporaryFieldCheckbox) GetPageY() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageY
}

func (d *DocumentCreateDocumentTemporaryFieldCheckbox) GetWidth() float64 {
	if d == nil {
		return 0.0
	}
	return d.Width
}

func (d *DocumentCreateDocumentTemporaryFieldCheckbox) GetHeight() float64 {
	if d == nil {
		return 0.0
	}
	return d.Height
}

type DocumentCreateDocumentTemporaryRecipientTypeRadio1 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeRadio1Radio DocumentCreateDocumentTemporaryRecipientTypeRadio1 = "RADIO"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeRadio1) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeRadio1 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeRadio1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = DocumentCreateDocumentTemporaryRecipientTypeRadio1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeRadio1: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientTypeRadio2 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeRadio2Radio DocumentCreateDocumentTemporaryRecipientTypeRadio2 = "radio"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeRadio2) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeRadio2 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeRadio2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = DocumentCreateDocumentTemporaryRecipientTypeRadio2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeRadio2: %v", v)
	}
}

type DocumentCreateDocumentTemporaryValueRadio struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (d DocumentCreateDocumentTemporaryValueRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryValueRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryValueRadio) GetID() float64 {
	if d == nil {
		return 0.0
	}
	return d.ID
}

func (d *DocumentCreateDocumentTemporaryValueRadio) GetChecked() bool {
	if d == nil {
		return false
	}
	return d.Checked
}

func (d *DocumentCreateDocumentTemporaryValueRadio) GetValue() string {
	if d == nil {
		return ""
	}
	return d.Value
}

type DocumentCreateDocumentTemporaryRecipientFieldMetaRadio struct {
	Label       *string                                            `json:"label,omitempty"`
	Placeholder *string                                            `json:"placeholder,omitempty"`
	Required    *bool                                              `json:"required,omitempty"`
	ReadOnly    *bool                                              `json:"readOnly,omitempty"`
	Type        DocumentCreateDocumentTemporaryRecipientTypeRadio2 `json:"type"`
	Values      []DocumentCreateDocumentTemporaryValueRadio        `json:"values,omitempty"`
}

func (d DocumentCreateDocumentTemporaryRecipientFieldMetaRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaRadio) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaRadio) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaRadio) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaRadio) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaRadio) GetType() DocumentCreateDocumentTemporaryRecipientTypeRadio2 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeRadio2("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaRadio) GetValues() []DocumentCreateDocumentTemporaryValueRadio {
	if d == nil {
		return nil
	}
	return d.Values
}

type DocumentCreateDocumentTemporaryFieldRadio struct {
	Type      DocumentCreateDocumentTemporaryRecipientTypeRadio1      `json:"type"`
	FieldMeta *DocumentCreateDocumentTemporaryRecipientFieldMetaRadio `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (d DocumentCreateDocumentTemporaryFieldRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryFieldRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryFieldRadio) GetType() DocumentCreateDocumentTemporaryRecipientTypeRadio1 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeRadio1("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryFieldRadio) GetFieldMeta() *DocumentCreateDocumentTemporaryRecipientFieldMetaRadio {
	if d == nil {
		return nil
	}
	return d.FieldMeta
}

func (d *DocumentCreateDocumentTemporaryFieldRadio) GetPageNumber() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageNumber
}

func (d *DocumentCreateDocumentTemporaryFieldRadio) GetPageX() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageX
}

func (d *DocumentCreateDocumentTemporaryFieldRadio) GetPageY() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageY
}

func (d *DocumentCreateDocumentTemporaryFieldRadio) GetWidth() float64 {
	if d == nil {
		return 0.0
	}
	return d.Width
}

func (d *DocumentCreateDocumentTemporaryFieldRadio) GetHeight() float64 {
	if d == nil {
		return 0.0
	}
	return d.Height
}

type DocumentCreateDocumentTemporaryRecipientTypeNumber1 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeNumber1Number DocumentCreateDocumentTemporaryRecipientTypeNumber1 = "NUMBER"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeNumber1) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeNumber1 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeNumber1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = DocumentCreateDocumentTemporaryRecipientTypeNumber1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeNumber1: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientTypeNumber2 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeNumber2Number DocumentCreateDocumentTemporaryRecipientTypeNumber2 = "number"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeNumber2) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeNumber2 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeNumber2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = DocumentCreateDocumentTemporaryRecipientTypeNumber2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeNumber2: %v", v)
	}
}

type DocumentCreateDocumentTemporaryTextAlignNumber string

const (
	DocumentCreateDocumentTemporaryTextAlignNumberLeft   DocumentCreateDocumentTemporaryTextAlignNumber = "left"
	DocumentCreateDocumentTemporaryTextAlignNumberCenter DocumentCreateDocumentTemporaryTextAlignNumber = "center"
	DocumentCreateDocumentTemporaryTextAlignNumberRight  DocumentCreateDocumentTemporaryTextAlignNumber = "right"
)

func (e DocumentCreateDocumentTemporaryTextAlignNumber) ToPointer() *DocumentCreateDocumentTemporaryTextAlignNumber {
	return &e
}
func (e *DocumentCreateDocumentTemporaryTextAlignNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentCreateDocumentTemporaryTextAlignNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryTextAlignNumber: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientFieldMetaNumber struct {
	Label        *string                                             `json:"label,omitempty"`
	Placeholder  *string                                             `json:"placeholder,omitempty"`
	Required     *bool                                               `json:"required,omitempty"`
	ReadOnly     *bool                                               `json:"readOnly,omitempty"`
	Type         DocumentCreateDocumentTemporaryRecipientTypeNumber2 `json:"type"`
	NumberFormat *string                                             `json:"numberFormat,omitempty"`
	Value        *string                                             `json:"value,omitempty"`
	MinValue     *float64                                            `json:"minValue,omitempty"`
	MaxValue     *float64                                            `json:"maxValue,omitempty"`
	FontSize     *float64                                            `json:"fontSize,omitempty"`
	TextAlign    *DocumentCreateDocumentTemporaryTextAlignNumber     `json:"textAlign,omitempty"`
}

func (d DocumentCreateDocumentTemporaryRecipientFieldMetaNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaNumber) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaNumber) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaNumber) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaNumber) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaNumber) GetType() DocumentCreateDocumentTemporaryRecipientTypeNumber2 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeNumber2("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaNumber) GetNumberFormat() *string {
	if d == nil {
		return nil
	}
	return d.NumberFormat
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaNumber) GetValue() *string {
	if d == nil {
		return nil
	}
	return d.Value
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaNumber) GetMinValue() *float64 {
	if d == nil {
		return nil
	}
	return d.MinValue
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaNumber) GetMaxValue() *float64 {
	if d == nil {
		return nil
	}
	return d.MaxValue
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaNumber) GetFontSize() *float64 {
	if d == nil {
		return nil
	}
	return d.FontSize
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaNumber) GetTextAlign() *DocumentCreateDocumentTemporaryTextAlignNumber {
	if d == nil {
		return nil
	}
	return d.TextAlign
}

type DocumentCreateDocumentTemporaryFieldNumber struct {
	Type      DocumentCreateDocumentTemporaryRecipientTypeNumber1      `json:"type"`
	FieldMeta *DocumentCreateDocumentTemporaryRecipientFieldMetaNumber `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (d DocumentCreateDocumentTemporaryFieldNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryFieldNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryFieldNumber) GetType() DocumentCreateDocumentTemporaryRecipientTypeNumber1 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeNumber1("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryFieldNumber) GetFieldMeta() *DocumentCreateDocumentTemporaryRecipientFieldMetaNumber {
	if d == nil {
		return nil
	}
	return d.FieldMeta
}

func (d *DocumentCreateDocumentTemporaryFieldNumber) GetPageNumber() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageNumber
}

func (d *DocumentCreateDocumentTemporaryFieldNumber) GetPageX() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageX
}

func (d *DocumentCreateDocumentTemporaryFieldNumber) GetPageY() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageY
}

func (d *DocumentCreateDocumentTemporaryFieldNumber) GetWidth() float64 {
	if d == nil {
		return 0.0
	}
	return d.Width
}

func (d *DocumentCreateDocumentTemporaryFieldNumber) GetHeight() float64 {
	if d == nil {
		return 0.0
	}
	return d.Height
}

type DocumentCreateDocumentTemporaryRecipientTypeText1 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeText1Text DocumentCreateDocumentTemporaryRecipientTypeText1 = "TEXT"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeText1) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeText1 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeText1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = DocumentCreateDocumentTemporaryRecipientTypeText1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeText1: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientTypeText2 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeText2Text DocumentCreateDocumentTemporaryRecipientTypeText2 = "text"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeText2) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeText2 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeText2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = DocumentCreateDocumentTemporaryRecipientTypeText2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeText2: %v", v)
	}
}

type DocumentCreateDocumentTemporaryTextAlignText string

const (
	DocumentCreateDocumentTemporaryTextAlignTextLeft   DocumentCreateDocumentTemporaryTextAlignText = "left"
	DocumentCreateDocumentTemporaryTextAlignTextCenter DocumentCreateDocumentTemporaryTextAlignText = "center"
	DocumentCreateDocumentTemporaryTextAlignTextRight  DocumentCreateDocumentTemporaryTextAlignText = "right"
)

func (e DocumentCreateDocumentTemporaryTextAlignText) ToPointer() *DocumentCreateDocumentTemporaryTextAlignText {
	return &e
}
func (e *DocumentCreateDocumentTemporaryTextAlignText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentCreateDocumentTemporaryTextAlignText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryTextAlignText: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientFieldMetaText struct {
	Label          *string                                           `json:"label,omitempty"`
	Placeholder    *string                                           `json:"placeholder,omitempty"`
	Required       *bool                                             `json:"required,omitempty"`
	ReadOnly       *bool                                             `json:"readOnly,omitempty"`
	Type           DocumentCreateDocumentTemporaryRecipientTypeText2 `json:"type"`
	Text           *string                                           `json:"text,omitempty"`
	CharacterLimit *float64                                          `json:"characterLimit,omitempty"`
	FontSize       *float64                                          `json:"fontSize,omitempty"`
	TextAlign      *DocumentCreateDocumentTemporaryTextAlignText     `json:"textAlign,omitempty"`
}

func (d DocumentCreateDocumentTemporaryRecipientFieldMetaText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaText) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaText) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaText) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaText) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaText) GetType() DocumentCreateDocumentTemporaryRecipientTypeText2 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeText2("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaText) GetText() *string {
	if d == nil {
		return nil
	}
	return d.Text
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaText) GetCharacterLimit() *float64 {
	if d == nil {
		return nil
	}
	return d.CharacterLimit
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaText) GetFontSize() *float64 {
	if d == nil {
		return nil
	}
	return d.FontSize
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaText) GetTextAlign() *DocumentCreateDocumentTemporaryTextAlignText {
	if d == nil {
		return nil
	}
	return d.TextAlign
}

type DocumentCreateDocumentTemporaryFieldText struct {
	Type      DocumentCreateDocumentTemporaryRecipientTypeText1      `json:"type"`
	FieldMeta *DocumentCreateDocumentTemporaryRecipientFieldMetaText `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (d DocumentCreateDocumentTemporaryFieldText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryFieldText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryFieldText) GetType() DocumentCreateDocumentTemporaryRecipientTypeText1 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeText1("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryFieldText) GetFieldMeta() *DocumentCreateDocumentTemporaryRecipientFieldMetaText {
	if d == nil {
		return nil
	}
	return d.FieldMeta
}

func (d *DocumentCreateDocumentTemporaryFieldText) GetPageNumber() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageNumber
}

func (d *DocumentCreateDocumentTemporaryFieldText) GetPageX() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageX
}

func (d *DocumentCreateDocumentTemporaryFieldText) GetPageY() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageY
}

func (d *DocumentCreateDocumentTemporaryFieldText) GetWidth() float64 {
	if d == nil {
		return 0.0
	}
	return d.Width
}

func (d *DocumentCreateDocumentTemporaryFieldText) GetHeight() float64 {
	if d == nil {
		return 0.0
	}
	return d.Height
}

type DocumentCreateDocumentTemporaryRecipientTypeDate1 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeDate1Date DocumentCreateDocumentTemporaryRecipientTypeDate1 = "DATE"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeDate1) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeDate1 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeDate1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = DocumentCreateDocumentTemporaryRecipientTypeDate1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeDate1: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientTypeDate2 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeDate2Date DocumentCreateDocumentTemporaryRecipientTypeDate2 = "date"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeDate2) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeDate2 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeDate2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = DocumentCreateDocumentTemporaryRecipientTypeDate2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeDate2: %v", v)
	}
}

type DocumentCreateDocumentTemporaryTextAlignDate string

const (
	DocumentCreateDocumentTemporaryTextAlignDateLeft   DocumentCreateDocumentTemporaryTextAlignDate = "left"
	DocumentCreateDocumentTemporaryTextAlignDateCenter DocumentCreateDocumentTemporaryTextAlignDate = "center"
	DocumentCreateDocumentTemporaryTextAlignDateRight  DocumentCreateDocumentTemporaryTextAlignDate = "right"
)

func (e DocumentCreateDocumentTemporaryTextAlignDate) ToPointer() *DocumentCreateDocumentTemporaryTextAlignDate {
	return &e
}
func (e *DocumentCreateDocumentTemporaryTextAlignDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentCreateDocumentTemporaryTextAlignDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryTextAlignDate: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientFieldMetaDate struct {
	Label       *string                                           `json:"label,omitempty"`
	Placeholder *string                                           `json:"placeholder,omitempty"`
	Required    *bool                                             `json:"required,omitempty"`
	ReadOnly    *bool                                             `json:"readOnly,omitempty"`
	Type        DocumentCreateDocumentTemporaryRecipientTypeDate2 `json:"type"`
	FontSize    *float64                                          `json:"fontSize,omitempty"`
	TextAlign   *DocumentCreateDocumentTemporaryTextAlignDate     `json:"textAlign,omitempty"`
}

func (d DocumentCreateDocumentTemporaryRecipientFieldMetaDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaDate) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaDate) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaDate) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaDate) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaDate) GetType() DocumentCreateDocumentTemporaryRecipientTypeDate2 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeDate2("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaDate) GetFontSize() *float64 {
	if d == nil {
		return nil
	}
	return d.FontSize
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaDate) GetTextAlign() *DocumentCreateDocumentTemporaryTextAlignDate {
	if d == nil {
		return nil
	}
	return d.TextAlign
}

type DocumentCreateDocumentTemporaryFieldDate struct {
	Type      DocumentCreateDocumentTemporaryRecipientTypeDate1      `json:"type"`
	FieldMeta *DocumentCreateDocumentTemporaryRecipientFieldMetaDate `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (d DocumentCreateDocumentTemporaryFieldDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryFieldDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryFieldDate) GetType() DocumentCreateDocumentTemporaryRecipientTypeDate1 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeDate1("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryFieldDate) GetFieldMeta() *DocumentCreateDocumentTemporaryRecipientFieldMetaDate {
	if d == nil {
		return nil
	}
	return d.FieldMeta
}

func (d *DocumentCreateDocumentTemporaryFieldDate) GetPageNumber() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageNumber
}

func (d *DocumentCreateDocumentTemporaryFieldDate) GetPageX() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageX
}

func (d *DocumentCreateDocumentTemporaryFieldDate) GetPageY() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageY
}

func (d *DocumentCreateDocumentTemporaryFieldDate) GetWidth() float64 {
	if d == nil {
		return 0.0
	}
	return d.Width
}

func (d *DocumentCreateDocumentTemporaryFieldDate) GetHeight() float64 {
	if d == nil {
		return 0.0
	}
	return d.Height
}

type DocumentCreateDocumentTemporaryRecipientTypeEmail1 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeEmail1Email DocumentCreateDocumentTemporaryRecipientTypeEmail1 = "EMAIL"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeEmail1) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeEmail1 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeEmail1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = DocumentCreateDocumentTemporaryRecipientTypeEmail1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeEmail1: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientTypeEmail2 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeEmail2Email DocumentCreateDocumentTemporaryRecipientTypeEmail2 = "email"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeEmail2) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeEmail2 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeEmail2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = DocumentCreateDocumentTemporaryRecipientTypeEmail2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeEmail2: %v", v)
	}
}

type DocumentCreateDocumentTemporaryTextAlignEmail string

const (
	DocumentCreateDocumentTemporaryTextAlignEmailLeft   DocumentCreateDocumentTemporaryTextAlignEmail = "left"
	DocumentCreateDocumentTemporaryTextAlignEmailCenter DocumentCreateDocumentTemporaryTextAlignEmail = "center"
	DocumentCreateDocumentTemporaryTextAlignEmailRight  DocumentCreateDocumentTemporaryTextAlignEmail = "right"
)

func (e DocumentCreateDocumentTemporaryTextAlignEmail) ToPointer() *DocumentCreateDocumentTemporaryTextAlignEmail {
	return &e
}
func (e *DocumentCreateDocumentTemporaryTextAlignEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentCreateDocumentTemporaryTextAlignEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryTextAlignEmail: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientFieldMetaEmail struct {
	Label       *string                                            `json:"label,omitempty"`
	Placeholder *string                                            `json:"placeholder,omitempty"`
	Required    *bool                                              `json:"required,omitempty"`
	ReadOnly    *bool                                              `json:"readOnly,omitempty"`
	Type        DocumentCreateDocumentTemporaryRecipientTypeEmail2 `json:"type"`
	FontSize    *float64                                           `json:"fontSize,omitempty"`
	TextAlign   *DocumentCreateDocumentTemporaryTextAlignEmail     `json:"textAlign,omitempty"`
}

func (d DocumentCreateDocumentTemporaryRecipientFieldMetaEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaEmail) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaEmail) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaEmail) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaEmail) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaEmail) GetType() DocumentCreateDocumentTemporaryRecipientTypeEmail2 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeEmail2("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaEmail) GetFontSize() *float64 {
	if d == nil {
		return nil
	}
	return d.FontSize
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaEmail) GetTextAlign() *DocumentCreateDocumentTemporaryTextAlignEmail {
	if d == nil {
		return nil
	}
	return d.TextAlign
}

type DocumentCreateDocumentTemporaryFieldEmail struct {
	Type      DocumentCreateDocumentTemporaryRecipientTypeEmail1      `json:"type"`
	FieldMeta *DocumentCreateDocumentTemporaryRecipientFieldMetaEmail `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (d DocumentCreateDocumentTemporaryFieldEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryFieldEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryFieldEmail) GetType() DocumentCreateDocumentTemporaryRecipientTypeEmail1 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeEmail1("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryFieldEmail) GetFieldMeta() *DocumentCreateDocumentTemporaryRecipientFieldMetaEmail {
	if d == nil {
		return nil
	}
	return d.FieldMeta
}

func (d *DocumentCreateDocumentTemporaryFieldEmail) GetPageNumber() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageNumber
}

func (d *DocumentCreateDocumentTemporaryFieldEmail) GetPageX() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageX
}

func (d *DocumentCreateDocumentTemporaryFieldEmail) GetPageY() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageY
}

func (d *DocumentCreateDocumentTemporaryFieldEmail) GetWidth() float64 {
	if d == nil {
		return 0.0
	}
	return d.Width
}

func (d *DocumentCreateDocumentTemporaryFieldEmail) GetHeight() float64 {
	if d == nil {
		return 0.0
	}
	return d.Height
}

type DocumentCreateDocumentTemporaryRecipientTypeName1 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeName1Name DocumentCreateDocumentTemporaryRecipientTypeName1 = "NAME"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeName1) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeName1 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeName1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = DocumentCreateDocumentTemporaryRecipientTypeName1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeName1: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientTypeName2 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeName2Name DocumentCreateDocumentTemporaryRecipientTypeName2 = "name"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeName2) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeName2 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeName2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = DocumentCreateDocumentTemporaryRecipientTypeName2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeName2: %v", v)
	}
}

type DocumentCreateDocumentTemporaryTextAlignName string

const (
	DocumentCreateDocumentTemporaryTextAlignNameLeft   DocumentCreateDocumentTemporaryTextAlignName = "left"
	DocumentCreateDocumentTemporaryTextAlignNameCenter DocumentCreateDocumentTemporaryTextAlignName = "center"
	DocumentCreateDocumentTemporaryTextAlignNameRight  DocumentCreateDocumentTemporaryTextAlignName = "right"
)

func (e DocumentCreateDocumentTemporaryTextAlignName) ToPointer() *DocumentCreateDocumentTemporaryTextAlignName {
	return &e
}
func (e *DocumentCreateDocumentTemporaryTextAlignName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentCreateDocumentTemporaryTextAlignName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryTextAlignName: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientFieldMetaName struct {
	Label       *string                                           `json:"label,omitempty"`
	Placeholder *string                                           `json:"placeholder,omitempty"`
	Required    *bool                                             `json:"required,omitempty"`
	ReadOnly    *bool                                             `json:"readOnly,omitempty"`
	Type        DocumentCreateDocumentTemporaryRecipientTypeName2 `json:"type"`
	FontSize    *float64                                          `json:"fontSize,omitempty"`
	TextAlign   *DocumentCreateDocumentTemporaryTextAlignName     `json:"textAlign,omitempty"`
}

func (d DocumentCreateDocumentTemporaryRecipientFieldMetaName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaName) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaName) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaName) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaName) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaName) GetType() DocumentCreateDocumentTemporaryRecipientTypeName2 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeName2("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaName) GetFontSize() *float64 {
	if d == nil {
		return nil
	}
	return d.FontSize
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaName) GetTextAlign() *DocumentCreateDocumentTemporaryTextAlignName {
	if d == nil {
		return nil
	}
	return d.TextAlign
}

type DocumentCreateDocumentTemporaryFieldName struct {
	Type      DocumentCreateDocumentTemporaryRecipientTypeName1      `json:"type"`
	FieldMeta *DocumentCreateDocumentTemporaryRecipientFieldMetaName `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (d DocumentCreateDocumentTemporaryFieldName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryFieldName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryFieldName) GetType() DocumentCreateDocumentTemporaryRecipientTypeName1 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeName1("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryFieldName) GetFieldMeta() *DocumentCreateDocumentTemporaryRecipientFieldMetaName {
	if d == nil {
		return nil
	}
	return d.FieldMeta
}

func (d *DocumentCreateDocumentTemporaryFieldName) GetPageNumber() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageNumber
}

func (d *DocumentCreateDocumentTemporaryFieldName) GetPageX() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageX
}

func (d *DocumentCreateDocumentTemporaryFieldName) GetPageY() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageY
}

func (d *DocumentCreateDocumentTemporaryFieldName) GetWidth() float64 {
	if d == nil {
		return 0.0
	}
	return d.Width
}

func (d *DocumentCreateDocumentTemporaryFieldName) GetHeight() float64 {
	if d == nil {
		return 0.0
	}
	return d.Height
}

type DocumentCreateDocumentTemporaryRecipientTypeInitials1 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeInitials1Initials DocumentCreateDocumentTemporaryRecipientTypeInitials1 = "INITIALS"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeInitials1) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeInitials1 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeInitials1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = DocumentCreateDocumentTemporaryRecipientTypeInitials1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeInitials1: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientTypeInitials2 string

const (
	DocumentCreateDocumentTemporaryRecipientTypeInitials2Initials DocumentCreateDocumentTemporaryRecipientTypeInitials2 = "initials"
)

func (e DocumentCreateDocumentTemporaryRecipientTypeInitials2) ToPointer() *DocumentCreateDocumentTemporaryRecipientTypeInitials2 {
	return &e
}
func (e *DocumentCreateDocumentTemporaryRecipientTypeInitials2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = DocumentCreateDocumentTemporaryRecipientTypeInitials2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryRecipientTypeInitials2: %v", v)
	}
}

type DocumentCreateDocumentTemporaryTextAlignInitials string

const (
	DocumentCreateDocumentTemporaryTextAlignInitialsLeft   DocumentCreateDocumentTemporaryTextAlignInitials = "left"
	DocumentCreateDocumentTemporaryTextAlignInitialsCenter DocumentCreateDocumentTemporaryTextAlignInitials = "center"
	DocumentCreateDocumentTemporaryTextAlignInitialsRight  DocumentCreateDocumentTemporaryTextAlignInitials = "right"
)

func (e DocumentCreateDocumentTemporaryTextAlignInitials) ToPointer() *DocumentCreateDocumentTemporaryTextAlignInitials {
	return &e
}
func (e *DocumentCreateDocumentTemporaryTextAlignInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentCreateDocumentTemporaryTextAlignInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryTextAlignInitials: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientFieldMetaInitials struct {
	Label       *string                                               `json:"label,omitempty"`
	Placeholder *string                                               `json:"placeholder,omitempty"`
	Required    *bool                                                 `json:"required,omitempty"`
	ReadOnly    *bool                                                 `json:"readOnly,omitempty"`
	Type        DocumentCreateDocumentTemporaryRecipientTypeInitials2 `json:"type"`
	FontSize    *float64                                              `json:"fontSize,omitempty"`
	TextAlign   *DocumentCreateDocumentTemporaryTextAlignInitials     `json:"textAlign,omitempty"`
}

func (d DocumentCreateDocumentTemporaryRecipientFieldMetaInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaInitials) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaInitials) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaInitials) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaInitials) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaInitials) GetType() DocumentCreateDocumentTemporaryRecipientTypeInitials2 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeInitials2("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaInitials) GetFontSize() *float64 {
	if d == nil {
		return nil
	}
	return d.FontSize
}

func (d *DocumentCreateDocumentTemporaryRecipientFieldMetaInitials) GetTextAlign() *DocumentCreateDocumentTemporaryTextAlignInitials {
	if d == nil {
		return nil
	}
	return d.TextAlign
}

type DocumentCreateDocumentTemporaryFieldInitials struct {
	Type      DocumentCreateDocumentTemporaryRecipientTypeInitials1      `json:"type"`
	FieldMeta *DocumentCreateDocumentTemporaryRecipientFieldMetaInitials `json:"fieldMeta,omitempty"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (d DocumentCreateDocumentTemporaryFieldInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryFieldInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryFieldInitials) GetType() DocumentCreateDocumentTemporaryRecipientTypeInitials1 {
	if d == nil {
		return DocumentCreateDocumentTemporaryRecipientTypeInitials1("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryFieldInitials) GetFieldMeta() *DocumentCreateDocumentTemporaryRecipientFieldMetaInitials {
	if d == nil {
		return nil
	}
	return d.FieldMeta
}

func (d *DocumentCreateDocumentTemporaryFieldInitials) GetPageNumber() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageNumber
}

func (d *DocumentCreateDocumentTemporaryFieldInitials) GetPageX() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageX
}

func (d *DocumentCreateDocumentTemporaryFieldInitials) GetPageY() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageY
}

func (d *DocumentCreateDocumentTemporaryFieldInitials) GetWidth() float64 {
	if d == nil {
		return 0.0
	}
	return d.Width
}

func (d *DocumentCreateDocumentTemporaryFieldInitials) GetHeight() float64 {
	if d == nil {
		return 0.0
	}
	return d.Height
}

type DocumentCreateDocumentTemporaryTypeFreeSignature string

const (
	DocumentCreateDocumentTemporaryTypeFreeSignatureFreeSignature DocumentCreateDocumentTemporaryTypeFreeSignature = "FREE_SIGNATURE"
)

func (e DocumentCreateDocumentTemporaryTypeFreeSignature) ToPointer() *DocumentCreateDocumentTemporaryTypeFreeSignature {
	return &e
}
func (e *DocumentCreateDocumentTemporaryTypeFreeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = DocumentCreateDocumentTemporaryTypeFreeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryTypeFreeSignature: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldFreeSignature struct {
	Type DocumentCreateDocumentTemporaryTypeFreeSignature `json:"type"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (d DocumentCreateDocumentTemporaryFieldFreeSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryFieldFreeSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryFieldFreeSignature) GetType() DocumentCreateDocumentTemporaryTypeFreeSignature {
	if d == nil {
		return DocumentCreateDocumentTemporaryTypeFreeSignature("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryFieldFreeSignature) GetPageNumber() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageNumber
}

func (d *DocumentCreateDocumentTemporaryFieldFreeSignature) GetPageX() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageX
}

func (d *DocumentCreateDocumentTemporaryFieldFreeSignature) GetPageY() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageY
}

func (d *DocumentCreateDocumentTemporaryFieldFreeSignature) GetWidth() float64 {
	if d == nil {
		return 0.0
	}
	return d.Width
}

func (d *DocumentCreateDocumentTemporaryFieldFreeSignature) GetHeight() float64 {
	if d == nil {
		return 0.0
	}
	return d.Height
}

type DocumentCreateDocumentTemporaryTypeSignature string

const (
	DocumentCreateDocumentTemporaryTypeSignatureSignature DocumentCreateDocumentTemporaryTypeSignature = "SIGNATURE"
)

func (e DocumentCreateDocumentTemporaryTypeSignature) ToPointer() *DocumentCreateDocumentTemporaryTypeSignature {
	return &e
}
func (e *DocumentCreateDocumentTemporaryTypeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = DocumentCreateDocumentTemporaryTypeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryTypeSignature: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFieldSignature struct {
	Type DocumentCreateDocumentTemporaryTypeSignature `json:"type"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (d DocumentCreateDocumentTemporaryFieldSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryFieldSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryFieldSignature) GetType() DocumentCreateDocumentTemporaryTypeSignature {
	if d == nil {
		return DocumentCreateDocumentTemporaryTypeSignature("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryFieldSignature) GetPageNumber() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageNumber
}

func (d *DocumentCreateDocumentTemporaryFieldSignature) GetPageX() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageX
}

func (d *DocumentCreateDocumentTemporaryFieldSignature) GetPageY() float64 {
	if d == nil {
		return 0.0
	}
	return d.PageY
}

func (d *DocumentCreateDocumentTemporaryFieldSignature) GetWidth() float64 {
	if d == nil {
		return 0.0
	}
	return d.Width
}

func (d *DocumentCreateDocumentTemporaryFieldSignature) GetHeight() float64 {
	if d == nil {
		return 0.0
	}
	return d.Height
}

type DocumentCreateDocumentTemporaryFieldUnionType string

const (
	DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldSignature     DocumentCreateDocumentTemporaryFieldUnionType = "document_createDocumentTemporary_field_Signature"
	DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldFreeSignature DocumentCreateDocumentTemporaryFieldUnionType = "document_createDocumentTemporary_field_FreeSignature"
	DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldInitials      DocumentCreateDocumentTemporaryFieldUnionType = "document_createDocumentTemporary_field_Initials"
	DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldName          DocumentCreateDocumentTemporaryFieldUnionType = "document_createDocumentTemporary_field_Name"
	DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldEmail         DocumentCreateDocumentTemporaryFieldUnionType = "document_createDocumentTemporary_field_Email"
	DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldDate          DocumentCreateDocumentTemporaryFieldUnionType = "document_createDocumentTemporary_field_Date"
	DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldText          DocumentCreateDocumentTemporaryFieldUnionType = "document_createDocumentTemporary_field_Text"
	DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldNumber        DocumentCreateDocumentTemporaryFieldUnionType = "document_createDocumentTemporary_field_Number"
	DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldRadio         DocumentCreateDocumentTemporaryFieldUnionType = "document_createDocumentTemporary_field_Radio"
	DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldCheckbox      DocumentCreateDocumentTemporaryFieldUnionType = "document_createDocumentTemporary_field_Checkbox"
	DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldDropdown      DocumentCreateDocumentTemporaryFieldUnionType = "document_createDocumentTemporary_field_Dropdown"
)

type DocumentCreateDocumentTemporaryFieldUnion struct {
	DocumentCreateDocumentTemporaryFieldSignature     *DocumentCreateDocumentTemporaryFieldSignature     `queryParam:"inline,name=field"`
	DocumentCreateDocumentTemporaryFieldFreeSignature *DocumentCreateDocumentTemporaryFieldFreeSignature `queryParam:"inline,name=field"`
	DocumentCreateDocumentTemporaryFieldInitials      *DocumentCreateDocumentTemporaryFieldInitials      `queryParam:"inline,name=field"`
	DocumentCreateDocumentTemporaryFieldName          *DocumentCreateDocumentTemporaryFieldName          `queryParam:"inline,name=field"`
	DocumentCreateDocumentTemporaryFieldEmail         *DocumentCreateDocumentTemporaryFieldEmail         `queryParam:"inline,name=field"`
	DocumentCreateDocumentTemporaryFieldDate          *DocumentCreateDocumentTemporaryFieldDate          `queryParam:"inline,name=field"`
	DocumentCreateDocumentTemporaryFieldText          *DocumentCreateDocumentTemporaryFieldText          `queryParam:"inline,name=field"`
	DocumentCreateDocumentTemporaryFieldNumber        *DocumentCreateDocumentTemporaryFieldNumber        `queryParam:"inline,name=field"`
	DocumentCreateDocumentTemporaryFieldRadio         *DocumentCreateDocumentTemporaryFieldRadio         `queryParam:"inline,name=field"`
	DocumentCreateDocumentTemporaryFieldCheckbox      *DocumentCreateDocumentTemporaryFieldCheckbox      `queryParam:"inline,name=field"`
	DocumentCreateDocumentTemporaryFieldDropdown      *DocumentCreateDocumentTemporaryFieldDropdown      `queryParam:"inline,name=field"`

	Type DocumentCreateDocumentTemporaryFieldUnionType
}

func CreateDocumentCreateDocumentTemporaryFieldUnionDocumentCreateDocumentTemporaryFieldSignature(documentCreateDocumentTemporaryFieldSignature DocumentCreateDocumentTemporaryFieldSignature) DocumentCreateDocumentTemporaryFieldUnion {
	typ := DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldSignature

	return DocumentCreateDocumentTemporaryFieldUnion{
		DocumentCreateDocumentTemporaryFieldSignature: &documentCreateDocumentTemporaryFieldSignature,
		Type: typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldUnionDocumentCreateDocumentTemporaryFieldFreeSignature(documentCreateDocumentTemporaryFieldFreeSignature DocumentCreateDocumentTemporaryFieldFreeSignature) DocumentCreateDocumentTemporaryFieldUnion {
	typ := DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldFreeSignature

	return DocumentCreateDocumentTemporaryFieldUnion{
		DocumentCreateDocumentTemporaryFieldFreeSignature: &documentCreateDocumentTemporaryFieldFreeSignature,
		Type: typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldUnionDocumentCreateDocumentTemporaryFieldInitials(documentCreateDocumentTemporaryFieldInitials DocumentCreateDocumentTemporaryFieldInitials) DocumentCreateDocumentTemporaryFieldUnion {
	typ := DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldInitials

	return DocumentCreateDocumentTemporaryFieldUnion{
		DocumentCreateDocumentTemporaryFieldInitials: &documentCreateDocumentTemporaryFieldInitials,
		Type: typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldUnionDocumentCreateDocumentTemporaryFieldName(documentCreateDocumentTemporaryFieldName DocumentCreateDocumentTemporaryFieldName) DocumentCreateDocumentTemporaryFieldUnion {
	typ := DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldName

	return DocumentCreateDocumentTemporaryFieldUnion{
		DocumentCreateDocumentTemporaryFieldName: &documentCreateDocumentTemporaryFieldName,
		Type:                                     typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldUnionDocumentCreateDocumentTemporaryFieldEmail(documentCreateDocumentTemporaryFieldEmail DocumentCreateDocumentTemporaryFieldEmail) DocumentCreateDocumentTemporaryFieldUnion {
	typ := DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldEmail

	return DocumentCreateDocumentTemporaryFieldUnion{
		DocumentCreateDocumentTemporaryFieldEmail: &documentCreateDocumentTemporaryFieldEmail,
		Type: typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldUnionDocumentCreateDocumentTemporaryFieldDate(documentCreateDocumentTemporaryFieldDate DocumentCreateDocumentTemporaryFieldDate) DocumentCreateDocumentTemporaryFieldUnion {
	typ := DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldDate

	return DocumentCreateDocumentTemporaryFieldUnion{
		DocumentCreateDocumentTemporaryFieldDate: &documentCreateDocumentTemporaryFieldDate,
		Type:                                     typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldUnionDocumentCreateDocumentTemporaryFieldText(documentCreateDocumentTemporaryFieldText DocumentCreateDocumentTemporaryFieldText) DocumentCreateDocumentTemporaryFieldUnion {
	typ := DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldText

	return DocumentCreateDocumentTemporaryFieldUnion{
		DocumentCreateDocumentTemporaryFieldText: &documentCreateDocumentTemporaryFieldText,
		Type:                                     typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldUnionDocumentCreateDocumentTemporaryFieldNumber(documentCreateDocumentTemporaryFieldNumber DocumentCreateDocumentTemporaryFieldNumber) DocumentCreateDocumentTemporaryFieldUnion {
	typ := DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldNumber

	return DocumentCreateDocumentTemporaryFieldUnion{
		DocumentCreateDocumentTemporaryFieldNumber: &documentCreateDocumentTemporaryFieldNumber,
		Type: typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldUnionDocumentCreateDocumentTemporaryFieldRadio(documentCreateDocumentTemporaryFieldRadio DocumentCreateDocumentTemporaryFieldRadio) DocumentCreateDocumentTemporaryFieldUnion {
	typ := DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldRadio

	return DocumentCreateDocumentTemporaryFieldUnion{
		DocumentCreateDocumentTemporaryFieldRadio: &documentCreateDocumentTemporaryFieldRadio,
		Type: typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldUnionDocumentCreateDocumentTemporaryFieldCheckbox(documentCreateDocumentTemporaryFieldCheckbox DocumentCreateDocumentTemporaryFieldCheckbox) DocumentCreateDocumentTemporaryFieldUnion {
	typ := DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldCheckbox

	return DocumentCreateDocumentTemporaryFieldUnion{
		DocumentCreateDocumentTemporaryFieldCheckbox: &documentCreateDocumentTemporaryFieldCheckbox,
		Type: typ,
	}
}

func CreateDocumentCreateDocumentTemporaryFieldUnionDocumentCreateDocumentTemporaryFieldDropdown(documentCreateDocumentTemporaryFieldDropdown DocumentCreateDocumentTemporaryFieldDropdown) DocumentCreateDocumentTemporaryFieldUnion {
	typ := DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldDropdown

	return DocumentCreateDocumentTemporaryFieldUnion{
		DocumentCreateDocumentTemporaryFieldDropdown: &documentCreateDocumentTemporaryFieldDropdown,
		Type: typ,
	}
}

func (u *DocumentCreateDocumentTemporaryFieldUnion) UnmarshalJSON(data []byte) error {

	var documentCreateDocumentTemporaryFieldSignature DocumentCreateDocumentTemporaryFieldSignature = DocumentCreateDocumentTemporaryFieldSignature{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldSignature, "", true, nil); err == nil {
		u.DocumentCreateDocumentTemporaryFieldSignature = &documentCreateDocumentTemporaryFieldSignature
		u.Type = DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldSignature
		return nil
	}

	var documentCreateDocumentTemporaryFieldFreeSignature DocumentCreateDocumentTemporaryFieldFreeSignature = DocumentCreateDocumentTemporaryFieldFreeSignature{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldFreeSignature, "", true, nil); err == nil {
		u.DocumentCreateDocumentTemporaryFieldFreeSignature = &documentCreateDocumentTemporaryFieldFreeSignature
		u.Type = DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldFreeSignature
		return nil
	}

	var documentCreateDocumentTemporaryFieldInitials DocumentCreateDocumentTemporaryFieldInitials = DocumentCreateDocumentTemporaryFieldInitials{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldInitials, "", true, nil); err == nil {
		u.DocumentCreateDocumentTemporaryFieldInitials = &documentCreateDocumentTemporaryFieldInitials
		u.Type = DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldInitials
		return nil
	}

	var documentCreateDocumentTemporaryFieldName DocumentCreateDocumentTemporaryFieldName = DocumentCreateDocumentTemporaryFieldName{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldName, "", true, nil); err == nil {
		u.DocumentCreateDocumentTemporaryFieldName = &documentCreateDocumentTemporaryFieldName
		u.Type = DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldName
		return nil
	}

	var documentCreateDocumentTemporaryFieldEmail DocumentCreateDocumentTemporaryFieldEmail = DocumentCreateDocumentTemporaryFieldEmail{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldEmail, "", true, nil); err == nil {
		u.DocumentCreateDocumentTemporaryFieldEmail = &documentCreateDocumentTemporaryFieldEmail
		u.Type = DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldEmail
		return nil
	}

	var documentCreateDocumentTemporaryFieldDate DocumentCreateDocumentTemporaryFieldDate = DocumentCreateDocumentTemporaryFieldDate{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldDate, "", true, nil); err == nil {
		u.DocumentCreateDocumentTemporaryFieldDate = &documentCreateDocumentTemporaryFieldDate
		u.Type = DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldDate
		return nil
	}

	var documentCreateDocumentTemporaryFieldText DocumentCreateDocumentTemporaryFieldText = DocumentCreateDocumentTemporaryFieldText{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldText, "", true, nil); err == nil {
		u.DocumentCreateDocumentTemporaryFieldText = &documentCreateDocumentTemporaryFieldText
		u.Type = DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldText
		return nil
	}

	var documentCreateDocumentTemporaryFieldNumber DocumentCreateDocumentTemporaryFieldNumber = DocumentCreateDocumentTemporaryFieldNumber{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldNumber, "", true, nil); err == nil {
		u.DocumentCreateDocumentTemporaryFieldNumber = &documentCreateDocumentTemporaryFieldNumber
		u.Type = DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldNumber
		return nil
	}

	var documentCreateDocumentTemporaryFieldRadio DocumentCreateDocumentTemporaryFieldRadio = DocumentCreateDocumentTemporaryFieldRadio{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldRadio, "", true, nil); err == nil {
		u.DocumentCreateDocumentTemporaryFieldRadio = &documentCreateDocumentTemporaryFieldRadio
		u.Type = DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldRadio
		return nil
	}

	var documentCreateDocumentTemporaryFieldCheckbox DocumentCreateDocumentTemporaryFieldCheckbox = DocumentCreateDocumentTemporaryFieldCheckbox{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldCheckbox, "", true, nil); err == nil {
		u.DocumentCreateDocumentTemporaryFieldCheckbox = &documentCreateDocumentTemporaryFieldCheckbox
		u.Type = DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldCheckbox
		return nil
	}

	var documentCreateDocumentTemporaryFieldDropdown DocumentCreateDocumentTemporaryFieldDropdown = DocumentCreateDocumentTemporaryFieldDropdown{}
	if err := utils.UnmarshalJSON(data, &documentCreateDocumentTemporaryFieldDropdown, "", true, nil); err == nil {
		u.DocumentCreateDocumentTemporaryFieldDropdown = &documentCreateDocumentTemporaryFieldDropdown
		u.Type = DocumentCreateDocumentTemporaryFieldUnionTypeDocumentCreateDocumentTemporaryFieldDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DocumentCreateDocumentTemporaryFieldUnion", string(data))
}

func (u DocumentCreateDocumentTemporaryFieldUnion) MarshalJSON() ([]byte, error) {
	if u.DocumentCreateDocumentTemporaryFieldSignature != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldSignature, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldFreeSignature != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldFreeSignature, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldInitials != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldInitials, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldName != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldName, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldEmail != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldEmail, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldDate != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldDate, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldText != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldText, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldNumber != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldNumber, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldRadio != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldRadio, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldCheckbox != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldCheckbox, "", true)
	}

	if u.DocumentCreateDocumentTemporaryFieldDropdown != nil {
		return utils.MarshalJSON(u.DocumentCreateDocumentTemporaryFieldDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type DocumentCreateDocumentTemporaryFieldUnion: all fields are null")
}

type DocumentCreateDocumentTemporaryRecipientRequest struct {
	Email        string                                             `json:"email"`
	Name         string                                             `json:"name"`
	Role         DocumentCreateDocumentTemporaryRoleRequest         `json:"role"`
	SigningOrder *float64                                           `json:"signingOrder,omitempty"`
	AccessAuth   []DocumentCreateDocumentTemporaryAccessAuthRequest `json:"accessAuth,omitempty"`
	ActionAuth   []DocumentCreateDocumentTemporaryActionAuthRequest `json:"actionAuth,omitempty"`
	Fields       []DocumentCreateDocumentTemporaryFieldUnion        `json:"fields,omitempty"`
}

func (d *DocumentCreateDocumentTemporaryRecipientRequest) GetEmail() string {
	if d == nil {
		return ""
	}
	return d.Email
}

func (d *DocumentCreateDocumentTemporaryRecipientRequest) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DocumentCreateDocumentTemporaryRecipientRequest) GetRole() DocumentCreateDocumentTemporaryRoleRequest {
	if d == nil {
		return DocumentCreateDocumentTemporaryRoleRequest("")
	}
	return d.Role
}

func (d *DocumentCreateDocumentTemporaryRecipientRequest) GetSigningOrder() *float64 {
	if d == nil {
		return nil
	}
	return d.SigningOrder
}

func (d *DocumentCreateDocumentTemporaryRecipientRequest) GetAccessAuth() []DocumentCreateDocumentTemporaryAccessAuthRequest {
	if d == nil {
		return nil
	}
	return d.AccessAuth
}

func (d *DocumentCreateDocumentTemporaryRecipientRequest) GetActionAuth() []DocumentCreateDocumentTemporaryActionAuthRequest {
	if d == nil {
		return nil
	}
	return d.ActionAuth
}

func (d *DocumentCreateDocumentTemporaryRecipientRequest) GetFields() []DocumentCreateDocumentTemporaryFieldUnion {
	if d == nil {
		return nil
	}
	return d.Fields
}

// DocumentCreateDocumentTemporaryDateFormat - The date format to use for date fields and signing the document.
type DocumentCreateDocumentTemporaryDateFormat string

const (
	DocumentCreateDocumentTemporaryDateFormatYyyyMMddHhMmA            DocumentCreateDocumentTemporaryDateFormat = "yyyy-MM-dd hh:mm a"
	DocumentCreateDocumentTemporaryDateFormatYyyyMMdd                 DocumentCreateDocumentTemporaryDateFormat = "yyyy-MM-dd"
	DocumentCreateDocumentTemporaryDateFormatDdMmSlashYyyy            DocumentCreateDocumentTemporaryDateFormat = "dd/MM/yyyy"
	DocumentCreateDocumentTemporaryDateFormatMmDdSlashYyyy            DocumentCreateDocumentTemporaryDateFormat = "MM/dd/yyyy"
	DocumentCreateDocumentTemporaryDateFormatYyMMdd                   DocumentCreateDocumentTemporaryDateFormat = "yy-MM-dd"
	DocumentCreateDocumentTemporaryDateFormatMmmmDdCommaYyyy          DocumentCreateDocumentTemporaryDateFormat = "MMMM dd, yyyy"
	DocumentCreateDocumentTemporaryDateFormatEeeeMmmmDdCommaYyyy      DocumentCreateDocumentTemporaryDateFormat = "EEEE, MMMM dd, yyyy"
	DocumentCreateDocumentTemporaryDateFormatDdMmSlashYyyyHhMmA       DocumentCreateDocumentTemporaryDateFormat = "dd/MM/yyyy hh:mm a"
	DocumentCreateDocumentTemporaryDateFormatDdMmSlashYyyyHHmm        DocumentCreateDocumentTemporaryDateFormat = "dd/MM/yyyy HH:mm"
	DocumentCreateDocumentTemporaryDateFormatMmDdSlashYyyyHhMmA       DocumentCreateDocumentTemporaryDateFormat = "MM/dd/yyyy hh:mm a"
	DocumentCreateDocumentTemporaryDateFormatMmDdSlashYyyyHHmm        DocumentCreateDocumentTemporaryDateFormat = "MM/dd/yyyy HH:mm"
	DocumentCreateDocumentTemporaryDateFormatDdDotMmDotYyyy           DocumentCreateDocumentTemporaryDateFormat = "dd.MM.yyyy"
	DocumentCreateDocumentTemporaryDateFormatDdDotMmDotYyyyHHmm       DocumentCreateDocumentTemporaryDateFormat = "dd.MM.yyyy HH:mm"
	DocumentCreateDocumentTemporaryDateFormatYyyyMMddHHmm             DocumentCreateDocumentTemporaryDateFormat = "yyyy-MM-dd HH:mm"
	DocumentCreateDocumentTemporaryDateFormatYyMMddHhMmA              DocumentCreateDocumentTemporaryDateFormat = "yy-MM-dd hh:mm a"
	DocumentCreateDocumentTemporaryDateFormatYyMMddHHmm               DocumentCreateDocumentTemporaryDateFormat = "yy-MM-dd HH:mm"
	DocumentCreateDocumentTemporaryDateFormatYyyyMMddHHmmss           DocumentCreateDocumentTemporaryDateFormat = "yyyy-MM-dd HH:mm:ss"
	DocumentCreateDocumentTemporaryDateFormatMmmmDdCommaYyyyHhMmA     DocumentCreateDocumentTemporaryDateFormat = "MMMM dd, yyyy hh:mm a"
	DocumentCreateDocumentTemporaryDateFormatMmmmDdCommaYyyyHHmm      DocumentCreateDocumentTemporaryDateFormat = "MMMM dd, yyyy HH:mm"
	DocumentCreateDocumentTemporaryDateFormatEeeeMmmmDdCommaYyyyHhMmA DocumentCreateDocumentTemporaryDateFormat = "EEEE, MMMM dd, yyyy hh:mm a"
	DocumentCreateDocumentTemporaryDateFormatEeeeMmmmDdCommaYyyyHHmm  DocumentCreateDocumentTemporaryDateFormat = "EEEE, MMMM dd, yyyy HH:mm"
	DocumentCreateDocumentTemporaryDateFormatIso8601Full              DocumentCreateDocumentTemporaryDateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSXXX"
)

func (e DocumentCreateDocumentTemporaryDateFormat) ToPointer() *DocumentCreateDocumentTemporaryDateFormat {
	return &e
}
func (e *DocumentCreateDocumentTemporaryDateFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "yyyy-MM-dd hh:mm a":
		fallthrough
	case "yyyy-MM-dd":
		fallthrough
	case "dd/MM/yyyy":
		fallthrough
	case "MM/dd/yyyy":
		fallthrough
	case "yy-MM-dd":
		fallthrough
	case "MMMM dd, yyyy":
		fallthrough
	case "EEEE, MMMM dd, yyyy":
		fallthrough
	case "dd/MM/yyyy hh:mm a":
		fallthrough
	case "dd/MM/yyyy HH:mm":
		fallthrough
	case "MM/dd/yyyy hh:mm a":
		fallthrough
	case "MM/dd/yyyy HH:mm":
		fallthrough
	case "dd.MM.yyyy":
		fallthrough
	case "dd.MM.yyyy HH:mm":
		fallthrough
	case "yyyy-MM-dd HH:mm":
		fallthrough
	case "yy-MM-dd hh:mm a":
		fallthrough
	case "yy-MM-dd HH:mm":
		fallthrough
	case "yyyy-MM-dd HH:mm:ss":
		fallthrough
	case "MMMM dd, yyyy hh:mm a":
		fallthrough
	case "MMMM dd, yyyy HH:mm":
		fallthrough
	case "EEEE, MMMM dd, yyyy hh:mm a":
		fallthrough
	case "EEEE, MMMM dd, yyyy HH:mm":
		fallthrough
	case "yyyy-MM-dd'T'HH:mm:ss.SSSXXX":
		*e = DocumentCreateDocumentTemporaryDateFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryDateFormat: %v", v)
	}
}

// DocumentCreateDocumentTemporaryDistributionMethodRequest - The distribution method to use when sending the document to the recipients.
type DocumentCreateDocumentTemporaryDistributionMethodRequest string

const (
	DocumentCreateDocumentTemporaryDistributionMethodRequestEmail DocumentCreateDocumentTemporaryDistributionMethodRequest = "EMAIL"
	DocumentCreateDocumentTemporaryDistributionMethodRequestNone  DocumentCreateDocumentTemporaryDistributionMethodRequest = "NONE"
)

func (e DocumentCreateDocumentTemporaryDistributionMethodRequest) ToPointer() *DocumentCreateDocumentTemporaryDistributionMethodRequest {
	return &e
}
func (e *DocumentCreateDocumentTemporaryDistributionMethodRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = DocumentCreateDocumentTemporaryDistributionMethodRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryDistributionMethodRequest: %v", v)
	}
}

type DocumentCreateDocumentTemporarySigningOrderRequest string

const (
	DocumentCreateDocumentTemporarySigningOrderRequestParallel   DocumentCreateDocumentTemporarySigningOrderRequest = "PARALLEL"
	DocumentCreateDocumentTemporarySigningOrderRequestSequential DocumentCreateDocumentTemporarySigningOrderRequest = "SEQUENTIAL"
)

func (e DocumentCreateDocumentTemporarySigningOrderRequest) ToPointer() *DocumentCreateDocumentTemporarySigningOrderRequest {
	return &e
}
func (e *DocumentCreateDocumentTemporarySigningOrderRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARALLEL":
		fallthrough
	case "SEQUENTIAL":
		*e = DocumentCreateDocumentTemporarySigningOrderRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporarySigningOrderRequest: %v", v)
	}
}

// DocumentCreateDocumentTemporaryLanguage - The language to use for email communications with recipients.
type DocumentCreateDocumentTemporaryLanguage string

const (
	DocumentCreateDocumentTemporaryLanguageDe DocumentCreateDocumentTemporaryLanguage = "de"
	DocumentCreateDocumentTemporaryLanguageEn DocumentCreateDocumentTemporaryLanguage = "en"
	DocumentCreateDocumentTemporaryLanguageFr DocumentCreateDocumentTemporaryLanguage = "fr"
	DocumentCreateDocumentTemporaryLanguageEs DocumentCreateDocumentTemporaryLanguage = "es"
	DocumentCreateDocumentTemporaryLanguageIt DocumentCreateDocumentTemporaryLanguage = "it"
	DocumentCreateDocumentTemporaryLanguagePl DocumentCreateDocumentTemporaryLanguage = "pl"
)

func (e DocumentCreateDocumentTemporaryLanguage) ToPointer() *DocumentCreateDocumentTemporaryLanguage {
	return &e
}
func (e *DocumentCreateDocumentTemporaryLanguage) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "de":
		fallthrough
	case "en":
		fallthrough
	case "fr":
		fallthrough
	case "es":
		fallthrough
	case "it":
		fallthrough
	case "pl":
		*e = DocumentCreateDocumentTemporaryLanguage(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryLanguage: %v", v)
	}
}

type DocumentCreateDocumentTemporaryEmailSettingsRequest struct {
	// Whether to send an email to all recipients that the document is ready for them to sign.
	RecipientSigningRequest *bool `default:"true" json:"recipientSigningRequest"`
	// Whether to send an email to the recipient who was removed from a pending document.
	RecipientRemoved *bool `default:"true" json:"recipientRemoved"`
	// Whether to send an email to the document owner when a recipient has signed the document.
	RecipientSigned *bool `default:"true" json:"recipientSigned"`
	// Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
	DocumentPending *bool `default:"true" json:"documentPending"`
	// Whether to send an email to all recipients when the document is complete.
	DocumentCompleted *bool `default:"true" json:"documentCompleted"`
	// Whether to send an email to all recipients if a pending document has been deleted.
	DocumentDeleted *bool `default:"true" json:"documentDeleted"`
	// Whether to send an email to the document owner when the document is complete.
	OwnerDocumentCompleted *bool `default:"true" json:"ownerDocumentCompleted"`
}

func (d DocumentCreateDocumentTemporaryEmailSettingsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryEmailSettingsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryEmailSettingsRequest) GetRecipientSigningRequest() *bool {
	if d == nil {
		return nil
	}
	return d.RecipientSigningRequest
}

func (d *DocumentCreateDocumentTemporaryEmailSettingsRequest) GetRecipientRemoved() *bool {
	if d == nil {
		return nil
	}
	return d.RecipientRemoved
}

func (d *DocumentCreateDocumentTemporaryEmailSettingsRequest) GetRecipientSigned() *bool {
	if d == nil {
		return nil
	}
	return d.RecipientSigned
}

func (d *DocumentCreateDocumentTemporaryEmailSettingsRequest) GetDocumentPending() *bool {
	if d == nil {
		return nil
	}
	return d.DocumentPending
}

func (d *DocumentCreateDocumentTemporaryEmailSettingsRequest) GetDocumentCompleted() *bool {
	if d == nil {
		return nil
	}
	return d.DocumentCompleted
}

func (d *DocumentCreateDocumentTemporaryEmailSettingsRequest) GetDocumentDeleted() *bool {
	if d == nil {
		return nil
	}
	return d.DocumentDeleted
}

func (d *DocumentCreateDocumentTemporaryEmailSettingsRequest) GetOwnerDocumentCompleted() *bool {
	if d == nil {
		return nil
	}
	return d.OwnerDocumentCompleted
}

type DocumentCreateDocumentTemporaryMeta struct {
	// The subject of the email that will be sent to the recipients.
	Subject *string `json:"subject,omitempty"`
	// The message of the email that will be sent to the recipients.
	Message *string `json:"message,omitempty"`
	// The timezone to use for date fields and signing the document. Example Etc/UTC, Australia/Melbourne
	Timezone *string `json:"timezone,omitempty"`
	// The date format to use for date fields and signing the document.
	DateFormat *DocumentCreateDocumentTemporaryDateFormat `json:"dateFormat,omitempty"`
	// The distribution method to use when sending the document to the recipients.
	DistributionMethod     *DocumentCreateDocumentTemporaryDistributionMethodRequest `json:"distributionMethod,omitempty"`
	SigningOrder           *DocumentCreateDocumentTemporarySigningOrderRequest       `json:"signingOrder,omitempty"`
	AllowDictateNextSigner *bool                                                     `json:"allowDictateNextSigner,omitempty"`
	// The URL to which the recipient should be redirected after signing the document.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The language to use for email communications with recipients.
	Language *DocumentCreateDocumentTemporaryLanguage `json:"language,omitempty"`
	// Whether to allow recipients to sign using a typed signature.
	TypedSignatureEnabled *bool `json:"typedSignatureEnabled,omitempty"`
	// Whether to allow recipients to sign using an uploaded signature.
	UploadSignatureEnabled *bool `json:"uploadSignatureEnabled,omitempty"`
	// Whether to allow recipients to sign using a draw signature.
	DrawSignatureEnabled *bool                                                `json:"drawSignatureEnabled,omitempty"`
	EmailID              *string                                              `json:"emailId,omitempty"`
	EmailReplyTo         *string                                              `json:"emailReplyTo,omitempty"`
	EmailSettings        *DocumentCreateDocumentTemporaryEmailSettingsRequest `json:"emailSettings,omitempty"`
}

func (d *DocumentCreateDocumentTemporaryMeta) GetSubject() *string {
	if d == nil {
		return nil
	}
	return d.Subject
}

func (d *DocumentCreateDocumentTemporaryMeta) GetMessage() *string {
	if d == nil {
		return nil
	}
	return d.Message
}

func (d *DocumentCreateDocumentTemporaryMeta) GetTimezone() *string {
	if d == nil {
		return nil
	}
	return d.Timezone
}

func (d *DocumentCreateDocumentTemporaryMeta) GetDateFormat() *DocumentCreateDocumentTemporaryDateFormat {
	if d == nil {
		return nil
	}
	return d.DateFormat
}

func (d *DocumentCreateDocumentTemporaryMeta) GetDistributionMethod() *DocumentCreateDocumentTemporaryDistributionMethodRequest {
	if d == nil {
		return nil
	}
	return d.DistributionMethod
}

func (d *DocumentCreateDocumentTemporaryMeta) GetSigningOrder() *DocumentCreateDocumentTemporarySigningOrderRequest {
	if d == nil {
		return nil
	}
	return d.SigningOrder
}

func (d *DocumentCreateDocumentTemporaryMeta) GetAllowDictateNextSigner() *bool {
	if d == nil {
		return nil
	}
	return d.AllowDictateNextSigner
}

func (d *DocumentCreateDocumentTemporaryMeta) GetRedirectURL() *string {
	if d == nil {
		return nil
	}
	return d.RedirectURL
}

func (d *DocumentCreateDocumentTemporaryMeta) GetLanguage() *DocumentCreateDocumentTemporaryLanguage {
	if d == nil {
		return nil
	}
	return d.Language
}

func (d *DocumentCreateDocumentTemporaryMeta) GetTypedSignatureEnabled() *bool {
	if d == nil {
		return nil
	}
	return d.TypedSignatureEnabled
}

func (d *DocumentCreateDocumentTemporaryMeta) GetUploadSignatureEnabled() *bool {
	if d == nil {
		return nil
	}
	return d.UploadSignatureEnabled
}

func (d *DocumentCreateDocumentTemporaryMeta) GetDrawSignatureEnabled() *bool {
	if d == nil {
		return nil
	}
	return d.DrawSignatureEnabled
}

func (d *DocumentCreateDocumentTemporaryMeta) GetEmailID() *string {
	if d == nil {
		return nil
	}
	return d.EmailID
}

func (d *DocumentCreateDocumentTemporaryMeta) GetEmailReplyTo() *string {
	if d == nil {
		return nil
	}
	return d.EmailReplyTo
}

func (d *DocumentCreateDocumentTemporaryMeta) GetEmailSettings() *DocumentCreateDocumentTemporaryEmailSettingsRequest {
	if d == nil {
		return nil
	}
	return d.EmailSettings
}

type DocumentCreateDocumentTemporaryRequest struct {
	// The title of the document.
	Title string `json:"title"`
	// The external ID of the document.
	ExternalID *string `json:"externalId,omitempty"`
	// The visibility of the document.
	Visibility       *DocumentCreateDocumentTemporaryVisibilityRequest        `json:"visibility,omitempty"`
	GlobalAccessAuth []DocumentCreateDocumentTemporaryGlobalAccessAuthRequest `json:"globalAccessAuth,omitempty"`
	GlobalActionAuth []DocumentCreateDocumentTemporaryGlobalActionAuthRequest `json:"globalActionAuth,omitempty"`
	FormValues       map[string]FormValuesRequest                             `json:"formValues,omitempty"`
	// The ID of the folder to create the document in. If not provided, the document will be created in the root folder.
	FolderID   *string                                           `json:"folderId,omitempty"`
	Recipients []DocumentCreateDocumentTemporaryRecipientRequest `json:"recipients,omitempty"`
	Meta       *DocumentCreateDocumentTemporaryMeta              `json:"meta,omitempty"`
}

func (d *DocumentCreateDocumentTemporaryRequest) GetTitle() string {
	if d == nil {
		return ""
	}
	return d.Title
}

func (d *DocumentCreateDocumentTemporaryRequest) GetExternalID() *string {
	if d == nil {
		return nil
	}
	return d.ExternalID
}

func (d *DocumentCreateDocumentTemporaryRequest) GetVisibility() *DocumentCreateDocumentTemporaryVisibilityRequest {
	if d == nil {
		return nil
	}
	return d.Visibility
}

func (d *DocumentCreateDocumentTemporaryRequest) GetGlobalAccessAuth() []DocumentCreateDocumentTemporaryGlobalAccessAuthRequest {
	if d == nil {
		return nil
	}
	return d.GlobalAccessAuth
}

func (d *DocumentCreateDocumentTemporaryRequest) GetGlobalActionAuth() []DocumentCreateDocumentTemporaryGlobalActionAuthRequest {
	if d == nil {
		return nil
	}
	return d.GlobalActionAuth
}

func (d *DocumentCreateDocumentTemporaryRequest) GetFormValues() map[string]FormValuesRequest {
	if d == nil {
		return nil
	}
	return d.FormValues
}

func (d *DocumentCreateDocumentTemporaryRequest) GetFolderID() *string {
	if d == nil {
		return nil
	}
	return d.FolderID
}

func (d *DocumentCreateDocumentTemporaryRequest) GetRecipients() []DocumentCreateDocumentTemporaryRecipientRequest {
	if d == nil {
		return nil
	}
	return d.Recipients
}

func (d *DocumentCreateDocumentTemporaryRequest) GetMeta() *DocumentCreateDocumentTemporaryMeta {
	if d == nil {
		return nil
	}
	return d.Meta
}

type DocumentVisibility string

const (
	DocumentVisibilityEveryone        DocumentVisibility = "EVERYONE"
	DocumentVisibilityManagerAndAbove DocumentVisibility = "MANAGER_AND_ABOVE"
	DocumentVisibilityAdmin           DocumentVisibility = "ADMIN"
)

func (e DocumentVisibility) ToPointer() *DocumentVisibility {
	return &e
}
func (e *DocumentVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = DocumentVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentVisibility: %v", v)
	}
}

type DocumentCreateDocumentTemporaryStatus string

const (
	DocumentCreateDocumentTemporaryStatusDraft     DocumentCreateDocumentTemporaryStatus = "DRAFT"
	DocumentCreateDocumentTemporaryStatusPending   DocumentCreateDocumentTemporaryStatus = "PENDING"
	DocumentCreateDocumentTemporaryStatusCompleted DocumentCreateDocumentTemporaryStatus = "COMPLETED"
	DocumentCreateDocumentTemporaryStatusRejected  DocumentCreateDocumentTemporaryStatus = "REJECTED"
)

func (e DocumentCreateDocumentTemporaryStatus) ToPointer() *DocumentCreateDocumentTemporaryStatus {
	return &e
}
func (e *DocumentCreateDocumentTemporaryStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "PENDING":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "REJECTED":
		*e = DocumentCreateDocumentTemporaryStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryStatus: %v", v)
	}
}

type DocumentCreateDocumentTemporarySource string

const (
	DocumentCreateDocumentTemporarySourceDocument           DocumentCreateDocumentTemporarySource = "DOCUMENT"
	DocumentCreateDocumentTemporarySourceTemplate           DocumentCreateDocumentTemporarySource = "TEMPLATE"
	DocumentCreateDocumentTemporarySourceTemplateDirectLink DocumentCreateDocumentTemporarySource = "TEMPLATE_DIRECT_LINK"
)

func (e DocumentCreateDocumentTemporarySource) ToPointer() *DocumentCreateDocumentTemporarySource {
	return &e
}
func (e *DocumentCreateDocumentTemporarySource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		fallthrough
	case "TEMPLATE_DIRECT_LINK":
		*e = DocumentCreateDocumentTemporarySource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporarySource: %v", v)
	}
}

// DocumentGlobalAccessAuth - The type of authentication required for the recipient to access the document.
type DocumentGlobalAccessAuth string

const (
	DocumentGlobalAccessAuthAccount       DocumentGlobalAccessAuth = "ACCOUNT"
	DocumentGlobalAccessAuthTwoFactorAuth DocumentGlobalAccessAuth = "TWO_FACTOR_AUTH"
)

func (e DocumentGlobalAccessAuth) ToPointer() *DocumentGlobalAccessAuth {
	return &e
}
func (e *DocumentGlobalAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = DocumentGlobalAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGlobalAccessAuth: %v", v)
	}
}

// DocumentGlobalActionAuth - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type DocumentGlobalActionAuth string

const (
	DocumentGlobalActionAuthAccount       DocumentGlobalActionAuth = "ACCOUNT"
	DocumentGlobalActionAuthPasskey       DocumentGlobalActionAuth = "PASSKEY"
	DocumentGlobalActionAuthTwoFactorAuth DocumentGlobalActionAuth = "TWO_FACTOR_AUTH"
	DocumentGlobalActionAuthPassword      DocumentGlobalActionAuth = "PASSWORD"
)

func (e DocumentGlobalActionAuth) ToPointer() *DocumentGlobalActionAuth {
	return &e
}
func (e *DocumentGlobalActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		*e = DocumentGlobalActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGlobalActionAuth: %v", v)
	}
}

type DocumentCreateDocumentTemporaryAuthOptions struct {
	GlobalAccessAuth []DocumentGlobalAccessAuth `json:"globalAccessAuth"`
	GlobalActionAuth []DocumentGlobalActionAuth `json:"globalActionAuth"`
}

func (d *DocumentCreateDocumentTemporaryAuthOptions) GetGlobalAccessAuth() []DocumentGlobalAccessAuth {
	if d == nil {
		return []DocumentGlobalAccessAuth{}
	}
	return d.GlobalAccessAuth
}

func (d *DocumentCreateDocumentTemporaryAuthOptions) GetGlobalActionAuth() []DocumentGlobalActionAuth {
	if d == nil {
		return []DocumentGlobalActionAuth{}
	}
	return d.GlobalActionAuth
}

type DocumentFormValuesType string

const (
	DocumentFormValuesTypeStr     DocumentFormValuesType = "str"
	DocumentFormValuesTypeBoolean DocumentFormValuesType = "boolean"
	DocumentFormValuesTypeNumber  DocumentFormValuesType = "number"
)

type DocumentFormValues struct {
	Str     *string  `queryParam:"inline,name=formValues"`
	Boolean *bool    `queryParam:"inline,name=formValues"`
	Number  *float64 `queryParam:"inline,name=formValues"`

	Type DocumentFormValuesType
}

func CreateDocumentFormValuesStr(str string) DocumentFormValues {
	typ := DocumentFormValuesTypeStr

	return DocumentFormValues{
		Str:  &str,
		Type: typ,
	}
}

func CreateDocumentFormValuesBoolean(boolean bool) DocumentFormValues {
	typ := DocumentFormValuesTypeBoolean

	return DocumentFormValues{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateDocumentFormValuesNumber(number float64) DocumentFormValues {
	typ := DocumentFormValuesTypeNumber

	return DocumentFormValues{
		Number: &number,
		Type:   typ,
	}
}

func (u *DocumentFormValues) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = DocumentFormValuesTypeStr
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = DocumentFormValuesTypeBoolean
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = DocumentFormValuesTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DocumentFormValues", string(data))
}

func (u DocumentFormValues) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type DocumentFormValues: all fields are null")
}

type DocumentDocumentDataType string

const (
	DocumentDocumentDataTypeS3Path  DocumentDocumentDataType = "S3_PATH"
	DocumentDocumentDataTypeBytes   DocumentDocumentDataType = "BYTES"
	DocumentDocumentDataTypeBytes64 DocumentDocumentDataType = "BYTES_64"
)

func (e DocumentDocumentDataType) ToPointer() *DocumentDocumentDataType {
	return &e
}
func (e *DocumentDocumentDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3_PATH":
		fallthrough
	case "BYTES":
		fallthrough
	case "BYTES_64":
		*e = DocumentDocumentDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentDocumentDataType: %v", v)
	}
}

type DocumentCreateDocumentTemporaryDocumentData struct {
	Type           DocumentDocumentDataType `json:"type"`
	ID             string                   `json:"id"`
	Data           string                   `json:"data"`
	InitialData    string                   `json:"initialData"`
	EnvelopeItemID string                   `json:"envelopeItemId"`
}

func (d *DocumentCreateDocumentTemporaryDocumentData) GetType() DocumentDocumentDataType {
	if d == nil {
		return DocumentDocumentDataType("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryDocumentData) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DocumentCreateDocumentTemporaryDocumentData) GetData() string {
	if d == nil {
		return ""
	}
	return d.Data
}

func (d *DocumentCreateDocumentTemporaryDocumentData) GetInitialData() string {
	if d == nil {
		return ""
	}
	return d.InitialData
}

func (d *DocumentCreateDocumentTemporaryDocumentData) GetEnvelopeItemID() string {
	if d == nil {
		return ""
	}
	return d.EnvelopeItemID
}

type DocumentSigningOrder string

const (
	DocumentSigningOrderParallel   DocumentSigningOrder = "PARALLEL"
	DocumentSigningOrderSequential DocumentSigningOrder = "SEQUENTIAL"
)

func (e DocumentSigningOrder) ToPointer() *DocumentSigningOrder {
	return &e
}
func (e *DocumentSigningOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARALLEL":
		fallthrough
	case "SEQUENTIAL":
		*e = DocumentSigningOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentSigningOrder: %v", v)
	}
}

type DocumentDistributionMethod string

const (
	DocumentDistributionMethodEmail DocumentDistributionMethod = "EMAIL"
	DocumentDistributionMethodNone  DocumentDistributionMethod = "NONE"
)

func (e DocumentDistributionMethod) ToPointer() *DocumentDistributionMethod {
	return &e
}
func (e *DocumentDistributionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = DocumentDistributionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentDistributionMethod: %v", v)
	}
}

type DocumentEmailSettings struct {
	// Whether to send an email to all recipients that the document is ready for them to sign.
	RecipientSigningRequest *bool `default:"true" json:"recipientSigningRequest"`
	// Whether to send an email to the recipient who was removed from a pending document.
	RecipientRemoved *bool `default:"true" json:"recipientRemoved"`
	// Whether to send an email to the document owner when a recipient has signed the document.
	RecipientSigned *bool `default:"true" json:"recipientSigned"`
	// Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
	DocumentPending *bool `default:"true" json:"documentPending"`
	// Whether to send an email to all recipients when the document is complete.
	DocumentCompleted *bool `default:"true" json:"documentCompleted"`
	// Whether to send an email to all recipients if a pending document has been deleted.
	DocumentDeleted *bool `default:"true" json:"documentDeleted"`
	// Whether to send an email to the document owner when the document is complete.
	OwnerDocumentCompleted *bool `default:"true" json:"ownerDocumentCompleted"`
}

func (d DocumentEmailSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentEmailSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (d *DocumentEmailSettings) GetRecipientSigningRequest() *bool {
	if d == nil {
		return nil
	}
	return d.RecipientSigningRequest
}

func (d *DocumentEmailSettings) GetRecipientRemoved() *bool {
	if d == nil {
		return nil
	}
	return d.RecipientRemoved
}

func (d *DocumentEmailSettings) GetRecipientSigned() *bool {
	if d == nil {
		return nil
	}
	return d.RecipientSigned
}

func (d *DocumentEmailSettings) GetDocumentPending() *bool {
	if d == nil {
		return nil
	}
	return d.DocumentPending
}

func (d *DocumentEmailSettings) GetDocumentCompleted() *bool {
	if d == nil {
		return nil
	}
	return d.DocumentCompleted
}

func (d *DocumentEmailSettings) GetDocumentDeleted() *bool {
	if d == nil {
		return nil
	}
	return d.DocumentDeleted
}

func (d *DocumentEmailSettings) GetOwnerDocumentCompleted() *bool {
	if d == nil {
		return nil
	}
	return d.OwnerDocumentCompleted
}

type DocumentCreateDocumentTemporaryDocumentMeta struct {
	SigningOrder           DocumentSigningOrder       `json:"signingOrder"`
	DistributionMethod     DocumentDistributionMethod `json:"distributionMethod"`
	ID                     string                     `json:"id"`
	Subject                *string                    `json:"subject"`
	Message                *string                    `json:"message"`
	Timezone               *string                    `json:"timezone"`
	DateFormat             *string                    `json:"dateFormat"`
	RedirectURL            *string                    `json:"redirectUrl"`
	TypedSignatureEnabled  bool                       `json:"typedSignatureEnabled"`
	UploadSignatureEnabled bool                       `json:"uploadSignatureEnabled"`
	DrawSignatureEnabled   bool                       `json:"drawSignatureEnabled"`
	AllowDictateNextSigner bool                       `json:"allowDictateNextSigner"`
	Language               string                     `json:"language"`
	EmailSettings          *DocumentEmailSettings     `json:"emailSettings"`
	EmailID                *string                    `json:"emailId"`
	EmailReplyTo           *string                    `json:"emailReplyTo"`
	Password               *string                    `default:"null" json:"password"`
	DocumentID             *float64                   `default:"-1" json:"documentId"`
}

func (d DocumentCreateDocumentTemporaryDocumentMeta) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"signingOrder", "distributionMethod", "id", "typedSignatureEnabled", "uploadSignatureEnabled", "drawSignatureEnabled", "allowDictateNextSigner", "language"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetSigningOrder() DocumentSigningOrder {
	if d == nil {
		return DocumentSigningOrder("")
	}
	return d.SigningOrder
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetDistributionMethod() DocumentDistributionMethod {
	if d == nil {
		return DocumentDistributionMethod("")
	}
	return d.DistributionMethod
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetSubject() *string {
	if d == nil {
		return nil
	}
	return d.Subject
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetMessage() *string {
	if d == nil {
		return nil
	}
	return d.Message
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetTimezone() *string {
	if d == nil {
		return nil
	}
	return d.Timezone
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetDateFormat() *string {
	if d == nil {
		return nil
	}
	return d.DateFormat
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetRedirectURL() *string {
	if d == nil {
		return nil
	}
	return d.RedirectURL
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetTypedSignatureEnabled() bool {
	if d == nil {
		return false
	}
	return d.TypedSignatureEnabled
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetUploadSignatureEnabled() bool {
	if d == nil {
		return false
	}
	return d.UploadSignatureEnabled
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetDrawSignatureEnabled() bool {
	if d == nil {
		return false
	}
	return d.DrawSignatureEnabled
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetAllowDictateNextSigner() bool {
	if d == nil {
		return false
	}
	return d.AllowDictateNextSigner
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetLanguage() string {
	if d == nil {
		return ""
	}
	return d.Language
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetEmailSettings() *DocumentEmailSettings {
	if d == nil {
		return nil
	}
	return d.EmailSettings
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetEmailID() *string {
	if d == nil {
		return nil
	}
	return d.EmailID
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetEmailReplyTo() *string {
	if d == nil {
		return nil
	}
	return d.EmailReplyTo
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetPassword() *string {
	if d == nil {
		return nil
	}
	return d.Password
}

func (d *DocumentCreateDocumentTemporaryDocumentMeta) GetDocumentID() *float64 {
	if d == nil {
		return nil
	}
	return d.DocumentID
}

type DocumentFolderType string

const (
	DocumentFolderTypeDocument DocumentFolderType = "DOCUMENT"
	DocumentFolderTypeTemplate DocumentFolderType = "TEMPLATE"
)

func (e DocumentFolderType) ToPointer() *DocumentFolderType {
	return &e
}
func (e *DocumentFolderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		*e = DocumentFolderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFolderType: %v", v)
	}
}

type DocumentFolderVisibility string

const (
	DocumentFolderVisibilityEveryone        DocumentFolderVisibility = "EVERYONE"
	DocumentFolderVisibilityManagerAndAbove DocumentFolderVisibility = "MANAGER_AND_ABOVE"
	DocumentFolderVisibilityAdmin           DocumentFolderVisibility = "ADMIN"
)

func (e DocumentFolderVisibility) ToPointer() *DocumentFolderVisibility {
	return &e
}
func (e *DocumentFolderVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = DocumentFolderVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFolderVisibility: %v", v)
	}
}

type DocumentCreateDocumentTemporaryFolder struct {
	ID         string                   `json:"id"`
	Name       string                   `json:"name"`
	Type       DocumentFolderType       `json:"type"`
	Visibility DocumentFolderVisibility `json:"visibility"`
	UserID     float64                  `json:"userId"`
	TeamID     float64                  `json:"teamId"`
	Pinned     bool                     `json:"pinned"`
	ParentID   *string                  `json:"parentId"`
	CreatedAt  string                   `json:"createdAt"`
	UpdatedAt  string                   `json:"updatedAt"`
}

func (d *DocumentCreateDocumentTemporaryFolder) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DocumentCreateDocumentTemporaryFolder) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DocumentCreateDocumentTemporaryFolder) GetType() DocumentFolderType {
	if d == nil {
		return DocumentFolderType("")
	}
	return d.Type
}

func (d *DocumentCreateDocumentTemporaryFolder) GetVisibility() DocumentFolderVisibility {
	if d == nil {
		return DocumentFolderVisibility("")
	}
	return d.Visibility
}

func (d *DocumentCreateDocumentTemporaryFolder) GetUserID() float64 {
	if d == nil {
		return 0.0
	}
	return d.UserID
}

func (d *DocumentCreateDocumentTemporaryFolder) GetTeamID() float64 {
	if d == nil {
		return 0.0
	}
	return d.TeamID
}

func (d *DocumentCreateDocumentTemporaryFolder) GetPinned() bool {
	if d == nil {
		return false
	}
	return d.Pinned
}

func (d *DocumentCreateDocumentTemporaryFolder) GetParentID() *string {
	if d == nil {
		return nil
	}
	return d.ParentID
}

func (d *DocumentCreateDocumentTemporaryFolder) GetCreatedAt() string {
	if d == nil {
		return ""
	}
	return d.CreatedAt
}

func (d *DocumentCreateDocumentTemporaryFolder) GetUpdatedAt() string {
	if d == nil {
		return ""
	}
	return d.UpdatedAt
}

type DocumentRole string

const (
	DocumentRoleCc        DocumentRole = "CC"
	DocumentRoleSigner    DocumentRole = "SIGNER"
	DocumentRoleViewer    DocumentRole = "VIEWER"
	DocumentRoleApprover  DocumentRole = "APPROVER"
	DocumentRoleAssistant DocumentRole = "ASSISTANT"
)

func (e DocumentRole) ToPointer() *DocumentRole {
	return &e
}
func (e *DocumentRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = DocumentRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentRole: %v", v)
	}
}

type DocumentCreateDocumentTemporaryReadStatus string

const (
	DocumentCreateDocumentTemporaryReadStatusNotOpened DocumentCreateDocumentTemporaryReadStatus = "NOT_OPENED"
	DocumentCreateDocumentTemporaryReadStatusOpened    DocumentCreateDocumentTemporaryReadStatus = "OPENED"
)

func (e DocumentCreateDocumentTemporaryReadStatus) ToPointer() *DocumentCreateDocumentTemporaryReadStatus {
	return &e
}
func (e *DocumentCreateDocumentTemporaryReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = DocumentCreateDocumentTemporaryReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporaryReadStatus: %v", v)
	}
}

type DocumentCreateDocumentTemporarySigningStatus string

const (
	DocumentCreateDocumentTemporarySigningStatusNotSigned DocumentCreateDocumentTemporarySigningStatus = "NOT_SIGNED"
	DocumentCreateDocumentTemporarySigningStatusSigned    DocumentCreateDocumentTemporarySigningStatus = "SIGNED"
	DocumentCreateDocumentTemporarySigningStatusRejected  DocumentCreateDocumentTemporarySigningStatus = "REJECTED"
)

func (e DocumentCreateDocumentTemporarySigningStatus) ToPointer() *DocumentCreateDocumentTemporarySigningStatus {
	return &e
}
func (e *DocumentCreateDocumentTemporarySigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = DocumentCreateDocumentTemporarySigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporarySigningStatus: %v", v)
	}
}

type DocumentCreateDocumentTemporarySendStatus string

const (
	DocumentCreateDocumentTemporarySendStatusNotSent DocumentCreateDocumentTemporarySendStatus = "NOT_SENT"
	DocumentCreateDocumentTemporarySendStatusSent    DocumentCreateDocumentTemporarySendStatus = "SENT"
)

func (e DocumentCreateDocumentTemporarySendStatus) ToPointer() *DocumentCreateDocumentTemporarySendStatus {
	return &e
}
func (e *DocumentCreateDocumentTemporarySendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = DocumentCreateDocumentTemporarySendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentCreateDocumentTemporarySendStatus: %v", v)
	}
}

// DocumentAccessAuth - The type of authentication required for the recipient to access the document.
type DocumentAccessAuth string

const (
	DocumentAccessAuthAccount       DocumentAccessAuth = "ACCOUNT"
	DocumentAccessAuthTwoFactorAuth DocumentAccessAuth = "TWO_FACTOR_AUTH"
)

func (e DocumentAccessAuth) ToPointer() *DocumentAccessAuth {
	return &e
}
func (e *DocumentAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = DocumentAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentAccessAuth: %v", v)
	}
}

// DocumentActionAuth - The type of authentication required for the recipient to sign the document.
type DocumentActionAuth string

const (
	DocumentActionAuthAccount       DocumentActionAuth = "ACCOUNT"
	DocumentActionAuthPasskey       DocumentActionAuth = "PASSKEY"
	DocumentActionAuthTwoFactorAuth DocumentActionAuth = "TWO_FACTOR_AUTH"
	DocumentActionAuthPassword      DocumentActionAuth = "PASSWORD"
	DocumentActionAuthExplicitNone  DocumentActionAuth = "EXPLICIT_NONE"
)

func (e DocumentActionAuth) ToPointer() *DocumentActionAuth {
	return &e
}
func (e *DocumentActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		fallthrough
	case "EXPLICIT_NONE":
		*e = DocumentActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentActionAuth: %v", v)
	}
}

type DocumentCreateDocumentTemporaryRecipientAuthOptions struct {
	AccessAuth []DocumentAccessAuth `json:"accessAuth"`
	ActionAuth []DocumentActionAuth `json:"actionAuth"`
}

func (d *DocumentCreateDocumentTemporaryRecipientAuthOptions) GetAccessAuth() []DocumentAccessAuth {
	if d == nil {
		return []DocumentAccessAuth{}
	}
	return d.AccessAuth
}

func (d *DocumentCreateDocumentTemporaryRecipientAuthOptions) GetActionAuth() []DocumentActionAuth {
	if d == nil {
		return []DocumentActionAuth{}
	}
	return d.ActionAuth
}

type DocumentRecipient struct {
	EnvelopeID        string                                               `json:"envelopeId"`
	Role              DocumentRole                                         `json:"role"`
	ReadStatus        DocumentCreateDocumentTemporaryReadStatus            `json:"readStatus"`
	SigningStatus     DocumentCreateDocumentTemporarySigningStatus         `json:"signingStatus"`
	SendStatus        DocumentCreateDocumentTemporarySendStatus            `json:"sendStatus"`
	ID                float64                                              `json:"id"`
	Email             string                                               `json:"email"`
	Name              string                                               `json:"name"`
	Token             string                                               `json:"token"`
	DocumentDeletedAt *string                                              `json:"documentDeletedAt"`
	Expired           *string                                              `json:"expired"`
	SignedAt          *string                                              `json:"signedAt"`
	AuthOptions       *DocumentCreateDocumentTemporaryRecipientAuthOptions `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
	DocumentID      *float64 `json:"documentId,omitempty"`
	TemplateID      *float64 `json:"templateId,omitempty"`
}

func (d *DocumentRecipient) GetEnvelopeID() string {
	if d == nil {
		return ""
	}
	return d.EnvelopeID
}

func (d *DocumentRecipient) GetRole() DocumentRole {
	if d == nil {
		return DocumentRole("")
	}
	return d.Role
}

func (d *DocumentRecipient) GetReadStatus() DocumentCreateDocumentTemporaryReadStatus {
	if d == nil {
		return DocumentCreateDocumentTemporaryReadStatus("")
	}
	return d.ReadStatus
}

func (d *DocumentRecipient) GetSigningStatus() DocumentCreateDocumentTemporarySigningStatus {
	if d == nil {
		return DocumentCreateDocumentTemporarySigningStatus("")
	}
	return d.SigningStatus
}

func (d *DocumentRecipient) GetSendStatus() DocumentCreateDocumentTemporarySendStatus {
	if d == nil {
		return DocumentCreateDocumentTemporarySendStatus("")
	}
	return d.SendStatus
}

func (d *DocumentRecipient) GetID() float64 {
	if d == nil {
		return 0.0
	}
	return d.ID
}

func (d *DocumentRecipient) GetEmail() string {
	if d == nil {
		return ""
	}
	return d.Email
}

func (d *DocumentRecipient) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DocumentRecipient) GetToken() string {
	if d == nil {
		return ""
	}
	return d.Token
}

func (d *DocumentRecipient) GetDocumentDeletedAt() *string {
	if d == nil {
		return nil
	}
	return d.DocumentDeletedAt
}

func (d *DocumentRecipient) GetExpired() *string {
	if d == nil {
		return nil
	}
	return d.Expired
}

func (d *DocumentRecipient) GetSignedAt() *string {
	if d == nil {
		return nil
	}
	return d.SignedAt
}

func (d *DocumentRecipient) GetAuthOptions() *DocumentCreateDocumentTemporaryRecipientAuthOptions {
	if d == nil {
		return nil
	}
	return d.AuthOptions
}

func (d *DocumentRecipient) GetSigningOrder() *float64 {
	if d == nil {
		return nil
	}
	return d.SigningOrder
}

func (d *DocumentRecipient) GetRejectionReason() *string {
	if d == nil {
		return nil
	}
	return d.RejectionReason
}

func (d *DocumentRecipient) GetDocumentID() *float64 {
	if d == nil {
		return nil
	}
	return d.DocumentID
}

func (d *DocumentRecipient) GetTemplateID() *float64 {
	if d == nil {
		return nil
	}
	return d.TemplateID
}

type DocumentFieldType string

const (
	DocumentFieldTypeSignature     DocumentFieldType = "SIGNATURE"
	DocumentFieldTypeFreeSignature DocumentFieldType = "FREE_SIGNATURE"
	DocumentFieldTypeInitials      DocumentFieldType = "INITIALS"
	DocumentFieldTypeName          DocumentFieldType = "NAME"
	DocumentFieldTypeEmail         DocumentFieldType = "EMAIL"
	DocumentFieldTypeDate          DocumentFieldType = "DATE"
	DocumentFieldTypeText          DocumentFieldType = "TEXT"
	DocumentFieldTypeNumber        DocumentFieldType = "NUMBER"
	DocumentFieldTypeRadio         DocumentFieldType = "RADIO"
	DocumentFieldTypeCheckbox      DocumentFieldType = "CHECKBOX"
	DocumentFieldTypeDropdown      DocumentFieldType = "DROPDOWN"
)

func (e DocumentFieldType) ToPointer() *DocumentFieldType {
	return &e
}
func (e *DocumentFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = DocumentFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentFieldType: %v", v)
	}
}

type DocumentTypeDropdown string

const (
	DocumentTypeDropdownDropdown DocumentTypeDropdown = "dropdown"
)

func (e DocumentTypeDropdown) ToPointer() *DocumentTypeDropdown {
	return &e
}
func (e *DocumentTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = DocumentTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentTypeDropdown: %v", v)
	}
}

type DocumentValue3 struct {
	Value string `json:"value"`
}

func (d DocumentValue3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentValue3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentValue3) GetValue() string {
	if d == nil {
		return ""
	}
	return d.Value
}

type FieldMetaDocumentDropdown struct {
	Label        *string              `json:"label,omitempty"`
	Placeholder  *string              `json:"placeholder,omitempty"`
	Required     *bool                `json:"required,omitempty"`
	ReadOnly     *bool                `json:"readOnly,omitempty"`
	Type         DocumentTypeDropdown `json:"type"`
	Values       []DocumentValue3     `json:"values,omitempty"`
	DefaultValue *string              `json:"defaultValue,omitempty"`
}

func (f FieldMetaDocumentDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldMetaDocumentDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldMetaDocumentDropdown) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldMetaDocumentDropdown) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldMetaDocumentDropdown) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldMetaDocumentDropdown) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldMetaDocumentDropdown) GetType() DocumentTypeDropdown {
	if f == nil {
		return DocumentTypeDropdown("")
	}
	return f.Type
}

func (f *FieldMetaDocumentDropdown) GetValues() []DocumentValue3 {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldMetaDocumentDropdown) GetDefaultValue() *string {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

type DocumentTypeCheckbox string

const (
	DocumentTypeCheckboxCheckbox DocumentTypeCheckbox = "checkbox"
)

func (e DocumentTypeCheckbox) ToPointer() *DocumentTypeCheckbox {
	return &e
}
func (e *DocumentTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = DocumentTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentTypeCheckbox: %v", v)
	}
}

type DocumentValue2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (d DocumentValue2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentValue2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentValue2) GetID() float64 {
	if d == nil {
		return 0.0
	}
	return d.ID
}

func (d *DocumentValue2) GetChecked() bool {
	if d == nil {
		return false
	}
	return d.Checked
}

func (d *DocumentValue2) GetValue() string {
	if d == nil {
		return ""
	}
	return d.Value
}

type DocumentDirection string

const (
	DocumentDirectionVertical   DocumentDirection = "vertical"
	DocumentDirectionHorizontal DocumentDirection = "horizontal"
)

func (e DocumentDirection) ToPointer() *DocumentDirection {
	return &e
}
func (e *DocumentDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vertical":
		fallthrough
	case "horizontal":
		*e = DocumentDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentDirection: %v", v)
	}
}

type FieldMetaDocumentCheckbox struct {
	Label            *string              `json:"label,omitempty"`
	Placeholder      *string              `json:"placeholder,omitempty"`
	Required         *bool                `json:"required,omitempty"`
	ReadOnly         *bool                `json:"readOnly,omitempty"`
	Type             DocumentTypeCheckbox `json:"type"`
	Values           []DocumentValue2     `json:"values,omitempty"`
	ValidationRule   *string              `json:"validationRule,omitempty"`
	ValidationLength *float64             `json:"validationLength,omitempty"`
	Direction        *DocumentDirection   `default:"vertical" json:"direction"`
}

func (f FieldMetaDocumentCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldMetaDocumentCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldMetaDocumentCheckbox) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldMetaDocumentCheckbox) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldMetaDocumentCheckbox) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldMetaDocumentCheckbox) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldMetaDocumentCheckbox) GetType() DocumentTypeCheckbox {
	if f == nil {
		return DocumentTypeCheckbox("")
	}
	return f.Type
}

func (f *FieldMetaDocumentCheckbox) GetValues() []DocumentValue2 {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldMetaDocumentCheckbox) GetValidationRule() *string {
	if f == nil {
		return nil
	}
	return f.ValidationRule
}

func (f *FieldMetaDocumentCheckbox) GetValidationLength() *float64 {
	if f == nil {
		return nil
	}
	return f.ValidationLength
}

func (f *FieldMetaDocumentCheckbox) GetDirection() *DocumentDirection {
	if f == nil {
		return nil
	}
	return f.Direction
}

type DocumentTypeRadio string

const (
	DocumentTypeRadioRadio DocumentTypeRadio = "radio"
)

func (e DocumentTypeRadio) ToPointer() *DocumentTypeRadio {
	return &e
}
func (e *DocumentTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = DocumentTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentTypeRadio: %v", v)
	}
}

type DocumentValue1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (d DocumentValue1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentValue1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentValue1) GetID() float64 {
	if d == nil {
		return 0.0
	}
	return d.ID
}

func (d *DocumentValue1) GetChecked() bool {
	if d == nil {
		return false
	}
	return d.Checked
}

func (d *DocumentValue1) GetValue() string {
	if d == nil {
		return ""
	}
	return d.Value
}

type FieldMetaDocumentRadio struct {
	Label       *string           `json:"label,omitempty"`
	Placeholder *string           `json:"placeholder,omitempty"`
	Required    *bool             `json:"required,omitempty"`
	ReadOnly    *bool             `json:"readOnly,omitempty"`
	Type        DocumentTypeRadio `json:"type"`
	Values      []DocumentValue1  `json:"values,omitempty"`
}

func (f FieldMetaDocumentRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldMetaDocumentRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldMetaDocumentRadio) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldMetaDocumentRadio) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldMetaDocumentRadio) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldMetaDocumentRadio) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldMetaDocumentRadio) GetType() DocumentTypeRadio {
	if f == nil {
		return DocumentTypeRadio("")
	}
	return f.Type
}

func (f *FieldMetaDocumentRadio) GetValues() []DocumentValue1 {
	if f == nil {
		return nil
	}
	return f.Values
}

type DocumentTypeNumber string

const (
	DocumentTypeNumberNumber DocumentTypeNumber = "number"
)

func (e DocumentTypeNumber) ToPointer() *DocumentTypeNumber {
	return &e
}
func (e *DocumentTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = DocumentTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentTypeNumber: %v", v)
	}
}

type DocumentTextAlign6 string

const (
	DocumentTextAlign6Left   DocumentTextAlign6 = "left"
	DocumentTextAlign6Center DocumentTextAlign6 = "center"
	DocumentTextAlign6Right  DocumentTextAlign6 = "right"
)

func (e DocumentTextAlign6) ToPointer() *DocumentTextAlign6 {
	return &e
}
func (e *DocumentTextAlign6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentTextAlign6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentTextAlign6: %v", v)
	}
}

type FieldMetaDocumentNumber struct {
	Label        *string             `json:"label,omitempty"`
	Placeholder  *string             `json:"placeholder,omitempty"`
	Required     *bool               `json:"required,omitempty"`
	ReadOnly     *bool               `json:"readOnly,omitempty"`
	Type         DocumentTypeNumber  `json:"type"`
	NumberFormat *string             `json:"numberFormat,omitempty"`
	Value        *string             `json:"value,omitempty"`
	MinValue     *float64            `json:"minValue,omitempty"`
	MaxValue     *float64            `json:"maxValue,omitempty"`
	FontSize     *float64            `json:"fontSize,omitempty"`
	TextAlign    *DocumentTextAlign6 `json:"textAlign,omitempty"`
}

func (f FieldMetaDocumentNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldMetaDocumentNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldMetaDocumentNumber) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldMetaDocumentNumber) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldMetaDocumentNumber) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldMetaDocumentNumber) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldMetaDocumentNumber) GetType() DocumentTypeNumber {
	if f == nil {
		return DocumentTypeNumber("")
	}
	return f.Type
}

func (f *FieldMetaDocumentNumber) GetNumberFormat() *string {
	if f == nil {
		return nil
	}
	return f.NumberFormat
}

func (f *FieldMetaDocumentNumber) GetValue() *string {
	if f == nil {
		return nil
	}
	return f.Value
}

func (f *FieldMetaDocumentNumber) GetMinValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MinValue
}

func (f *FieldMetaDocumentNumber) GetMaxValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MaxValue
}

func (f *FieldMetaDocumentNumber) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldMetaDocumentNumber) GetTextAlign() *DocumentTextAlign6 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type DocumentTypeText string

const (
	DocumentTypeTextText DocumentTypeText = "text"
)

func (e DocumentTypeText) ToPointer() *DocumentTypeText {
	return &e
}
func (e *DocumentTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = DocumentTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentTypeText: %v", v)
	}
}

type DocumentTextAlign5 string

const (
	DocumentTextAlign5Left   DocumentTextAlign5 = "left"
	DocumentTextAlign5Center DocumentTextAlign5 = "center"
	DocumentTextAlign5Right  DocumentTextAlign5 = "right"
)

func (e DocumentTextAlign5) ToPointer() *DocumentTextAlign5 {
	return &e
}
func (e *DocumentTextAlign5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentTextAlign5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentTextAlign5: %v", v)
	}
}

type FieldMetaDocumentText struct {
	Label          *string             `json:"label,omitempty"`
	Placeholder    *string             `json:"placeholder,omitempty"`
	Required       *bool               `json:"required,omitempty"`
	ReadOnly       *bool               `json:"readOnly,omitempty"`
	Type           DocumentTypeText    `json:"type"`
	Text           *string             `json:"text,omitempty"`
	CharacterLimit *float64            `json:"characterLimit,omitempty"`
	FontSize       *float64            `json:"fontSize,omitempty"`
	TextAlign      *DocumentTextAlign5 `json:"textAlign,omitempty"`
}

func (f FieldMetaDocumentText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldMetaDocumentText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldMetaDocumentText) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldMetaDocumentText) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldMetaDocumentText) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldMetaDocumentText) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldMetaDocumentText) GetType() DocumentTypeText {
	if f == nil {
		return DocumentTypeText("")
	}
	return f.Type
}

func (f *FieldMetaDocumentText) GetText() *string {
	if f == nil {
		return nil
	}
	return f.Text
}

func (f *FieldMetaDocumentText) GetCharacterLimit() *float64 {
	if f == nil {
		return nil
	}
	return f.CharacterLimit
}

func (f *FieldMetaDocumentText) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldMetaDocumentText) GetTextAlign() *DocumentTextAlign5 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type DocumentTypeDate string

const (
	DocumentTypeDateDate DocumentTypeDate = "date"
)

func (e DocumentTypeDate) ToPointer() *DocumentTypeDate {
	return &e
}
func (e *DocumentTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = DocumentTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentTypeDate: %v", v)
	}
}

type DocumentTextAlign4 string

const (
	DocumentTextAlign4Left   DocumentTextAlign4 = "left"
	DocumentTextAlign4Center DocumentTextAlign4 = "center"
	DocumentTextAlign4Right  DocumentTextAlign4 = "right"
)

func (e DocumentTextAlign4) ToPointer() *DocumentTextAlign4 {
	return &e
}
func (e *DocumentTextAlign4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentTextAlign4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentTextAlign4: %v", v)
	}
}

type FieldMetaDocumentDate struct {
	Label       *string             `json:"label,omitempty"`
	Placeholder *string             `json:"placeholder,omitempty"`
	Required    *bool               `json:"required,omitempty"`
	ReadOnly    *bool               `json:"readOnly,omitempty"`
	Type        DocumentTypeDate    `json:"type"`
	FontSize    *float64            `json:"fontSize,omitempty"`
	TextAlign   *DocumentTextAlign4 `json:"textAlign,omitempty"`
}

func (f FieldMetaDocumentDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldMetaDocumentDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldMetaDocumentDate) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldMetaDocumentDate) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldMetaDocumentDate) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldMetaDocumentDate) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldMetaDocumentDate) GetType() DocumentTypeDate {
	if f == nil {
		return DocumentTypeDate("")
	}
	return f.Type
}

func (f *FieldMetaDocumentDate) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldMetaDocumentDate) GetTextAlign() *DocumentTextAlign4 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type DocumentTypeEmail string

const (
	DocumentTypeEmailEmail DocumentTypeEmail = "email"
)

func (e DocumentTypeEmail) ToPointer() *DocumentTypeEmail {
	return &e
}
func (e *DocumentTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = DocumentTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentTypeEmail: %v", v)
	}
}

type DocumentTextAlign3 string

const (
	DocumentTextAlign3Left   DocumentTextAlign3 = "left"
	DocumentTextAlign3Center DocumentTextAlign3 = "center"
	DocumentTextAlign3Right  DocumentTextAlign3 = "right"
)

func (e DocumentTextAlign3) ToPointer() *DocumentTextAlign3 {
	return &e
}
func (e *DocumentTextAlign3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentTextAlign3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentTextAlign3: %v", v)
	}
}

type FieldMetaDocumentEmail struct {
	Label       *string             `json:"label,omitempty"`
	Placeholder *string             `json:"placeholder,omitempty"`
	Required    *bool               `json:"required,omitempty"`
	ReadOnly    *bool               `json:"readOnly,omitempty"`
	Type        DocumentTypeEmail   `json:"type"`
	FontSize    *float64            `json:"fontSize,omitempty"`
	TextAlign   *DocumentTextAlign3 `json:"textAlign,omitempty"`
}

func (f FieldMetaDocumentEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldMetaDocumentEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldMetaDocumentEmail) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldMetaDocumentEmail) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldMetaDocumentEmail) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldMetaDocumentEmail) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldMetaDocumentEmail) GetType() DocumentTypeEmail {
	if f == nil {
		return DocumentTypeEmail("")
	}
	return f.Type
}

func (f *FieldMetaDocumentEmail) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldMetaDocumentEmail) GetTextAlign() *DocumentTextAlign3 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type DocumentTypeName string

const (
	DocumentTypeNameName DocumentTypeName = "name"
)

func (e DocumentTypeName) ToPointer() *DocumentTypeName {
	return &e
}
func (e *DocumentTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = DocumentTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentTypeName: %v", v)
	}
}

type DocumentTextAlign2 string

const (
	DocumentTextAlign2Left   DocumentTextAlign2 = "left"
	DocumentTextAlign2Center DocumentTextAlign2 = "center"
	DocumentTextAlign2Right  DocumentTextAlign2 = "right"
)

func (e DocumentTextAlign2) ToPointer() *DocumentTextAlign2 {
	return &e
}
func (e *DocumentTextAlign2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentTextAlign2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentTextAlign2: %v", v)
	}
}

type FieldMetaDocumentName struct {
	Label       *string             `json:"label,omitempty"`
	Placeholder *string             `json:"placeholder,omitempty"`
	Required    *bool               `json:"required,omitempty"`
	ReadOnly    *bool               `json:"readOnly,omitempty"`
	Type        DocumentTypeName    `json:"type"`
	FontSize    *float64            `json:"fontSize,omitempty"`
	TextAlign   *DocumentTextAlign2 `json:"textAlign,omitempty"`
}

func (f FieldMetaDocumentName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldMetaDocumentName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldMetaDocumentName) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldMetaDocumentName) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldMetaDocumentName) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldMetaDocumentName) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldMetaDocumentName) GetType() DocumentTypeName {
	if f == nil {
		return DocumentTypeName("")
	}
	return f.Type
}

func (f *FieldMetaDocumentName) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldMetaDocumentName) GetTextAlign() *DocumentTextAlign2 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type DocumentTypeInitials string

const (
	DocumentTypeInitialsInitials DocumentTypeInitials = "initials"
)

func (e DocumentTypeInitials) ToPointer() *DocumentTypeInitials {
	return &e
}
func (e *DocumentTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = DocumentTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentTypeInitials: %v", v)
	}
}

type DocumentTextAlign1 string

const (
	DocumentTextAlign1Left   DocumentTextAlign1 = "left"
	DocumentTextAlign1Center DocumentTextAlign1 = "center"
	DocumentTextAlign1Right  DocumentTextAlign1 = "right"
)

func (e DocumentTextAlign1) ToPointer() *DocumentTextAlign1 {
	return &e
}
func (e *DocumentTextAlign1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentTextAlign1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentTextAlign1: %v", v)
	}
}

type FieldMetaDocumentInitials struct {
	Label       *string              `json:"label,omitempty"`
	Placeholder *string              `json:"placeholder,omitempty"`
	Required    *bool                `json:"required,omitempty"`
	ReadOnly    *bool                `json:"readOnly,omitempty"`
	Type        DocumentTypeInitials `json:"type"`
	FontSize    *float64             `json:"fontSize,omitempty"`
	TextAlign   *DocumentTextAlign1  `json:"textAlign,omitempty"`
}

func (f FieldMetaDocumentInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldMetaDocumentInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldMetaDocumentInitials) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldMetaDocumentInitials) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldMetaDocumentInitials) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldMetaDocumentInitials) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldMetaDocumentInitials) GetType() DocumentTypeInitials {
	if f == nil {
		return DocumentTypeInitials("")
	}
	return f.Type
}

func (f *FieldMetaDocumentInitials) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldMetaDocumentInitials) GetTextAlign() *DocumentTextAlign1 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type DocumentFieldMetaUnionType string

const (
	DocumentFieldMetaUnionTypeFieldMetaDocumentInitials DocumentFieldMetaUnionType = "fieldMeta_document_Initials"
	DocumentFieldMetaUnionTypeFieldMetaDocumentName     DocumentFieldMetaUnionType = "fieldMeta_document_Name"
	DocumentFieldMetaUnionTypeFieldMetaDocumentEmail    DocumentFieldMetaUnionType = "fieldMeta_document_Email"
	DocumentFieldMetaUnionTypeFieldMetaDocumentDate     DocumentFieldMetaUnionType = "fieldMeta_document_Date"
	DocumentFieldMetaUnionTypeFieldMetaDocumentText     DocumentFieldMetaUnionType = "fieldMeta_document_Text"
	DocumentFieldMetaUnionTypeFieldMetaDocumentNumber   DocumentFieldMetaUnionType = "fieldMeta_document_Number"
	DocumentFieldMetaUnionTypeFieldMetaDocumentRadio    DocumentFieldMetaUnionType = "fieldMeta_document_Radio"
	DocumentFieldMetaUnionTypeFieldMetaDocumentCheckbox DocumentFieldMetaUnionType = "fieldMeta_document_Checkbox"
	DocumentFieldMetaUnionTypeFieldMetaDocumentDropdown DocumentFieldMetaUnionType = "fieldMeta_document_Dropdown"
)

type DocumentFieldMetaUnion struct {
	FieldMetaDocumentInitials *FieldMetaDocumentInitials `queryParam:"inline,name=fieldMeta"`
	FieldMetaDocumentName     *FieldMetaDocumentName     `queryParam:"inline,name=fieldMeta"`
	FieldMetaDocumentEmail    *FieldMetaDocumentEmail    `queryParam:"inline,name=fieldMeta"`
	FieldMetaDocumentDate     *FieldMetaDocumentDate     `queryParam:"inline,name=fieldMeta"`
	FieldMetaDocumentText     *FieldMetaDocumentText     `queryParam:"inline,name=fieldMeta"`
	FieldMetaDocumentNumber   *FieldMetaDocumentNumber   `queryParam:"inline,name=fieldMeta"`
	FieldMetaDocumentRadio    *FieldMetaDocumentRadio    `queryParam:"inline,name=fieldMeta"`
	FieldMetaDocumentCheckbox *FieldMetaDocumentCheckbox `queryParam:"inline,name=fieldMeta"`
	FieldMetaDocumentDropdown *FieldMetaDocumentDropdown `queryParam:"inline,name=fieldMeta"`

	Type DocumentFieldMetaUnionType
}

func CreateDocumentFieldMetaUnionFieldMetaDocumentInitials(fieldMetaDocumentInitials FieldMetaDocumentInitials) DocumentFieldMetaUnion {
	typ := DocumentFieldMetaUnionTypeFieldMetaDocumentInitials

	return DocumentFieldMetaUnion{
		FieldMetaDocumentInitials: &fieldMetaDocumentInitials,
		Type:                      typ,
	}
}

func CreateDocumentFieldMetaUnionFieldMetaDocumentName(fieldMetaDocumentName FieldMetaDocumentName) DocumentFieldMetaUnion {
	typ := DocumentFieldMetaUnionTypeFieldMetaDocumentName

	return DocumentFieldMetaUnion{
		FieldMetaDocumentName: &fieldMetaDocumentName,
		Type:                  typ,
	}
}

func CreateDocumentFieldMetaUnionFieldMetaDocumentEmail(fieldMetaDocumentEmail FieldMetaDocumentEmail) DocumentFieldMetaUnion {
	typ := DocumentFieldMetaUnionTypeFieldMetaDocumentEmail

	return DocumentFieldMetaUnion{
		FieldMetaDocumentEmail: &fieldMetaDocumentEmail,
		Type:                   typ,
	}
}

func CreateDocumentFieldMetaUnionFieldMetaDocumentDate(fieldMetaDocumentDate FieldMetaDocumentDate) DocumentFieldMetaUnion {
	typ := DocumentFieldMetaUnionTypeFieldMetaDocumentDate

	return DocumentFieldMetaUnion{
		FieldMetaDocumentDate: &fieldMetaDocumentDate,
		Type:                  typ,
	}
}

func CreateDocumentFieldMetaUnionFieldMetaDocumentText(fieldMetaDocumentText FieldMetaDocumentText) DocumentFieldMetaUnion {
	typ := DocumentFieldMetaUnionTypeFieldMetaDocumentText

	return DocumentFieldMetaUnion{
		FieldMetaDocumentText: &fieldMetaDocumentText,
		Type:                  typ,
	}
}

func CreateDocumentFieldMetaUnionFieldMetaDocumentNumber(fieldMetaDocumentNumber FieldMetaDocumentNumber) DocumentFieldMetaUnion {
	typ := DocumentFieldMetaUnionTypeFieldMetaDocumentNumber

	return DocumentFieldMetaUnion{
		FieldMetaDocumentNumber: &fieldMetaDocumentNumber,
		Type:                    typ,
	}
}

func CreateDocumentFieldMetaUnionFieldMetaDocumentRadio(fieldMetaDocumentRadio FieldMetaDocumentRadio) DocumentFieldMetaUnion {
	typ := DocumentFieldMetaUnionTypeFieldMetaDocumentRadio

	return DocumentFieldMetaUnion{
		FieldMetaDocumentRadio: &fieldMetaDocumentRadio,
		Type:                   typ,
	}
}

func CreateDocumentFieldMetaUnionFieldMetaDocumentCheckbox(fieldMetaDocumentCheckbox FieldMetaDocumentCheckbox) DocumentFieldMetaUnion {
	typ := DocumentFieldMetaUnionTypeFieldMetaDocumentCheckbox

	return DocumentFieldMetaUnion{
		FieldMetaDocumentCheckbox: &fieldMetaDocumentCheckbox,
		Type:                      typ,
	}
}

func CreateDocumentFieldMetaUnionFieldMetaDocumentDropdown(fieldMetaDocumentDropdown FieldMetaDocumentDropdown) DocumentFieldMetaUnion {
	typ := DocumentFieldMetaUnionTypeFieldMetaDocumentDropdown

	return DocumentFieldMetaUnion{
		FieldMetaDocumentDropdown: &fieldMetaDocumentDropdown,
		Type:                      typ,
	}
}

func (u *DocumentFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var fieldMetaDocumentInitials FieldMetaDocumentInitials = FieldMetaDocumentInitials{}
	if err := utils.UnmarshalJSON(data, &fieldMetaDocumentInitials, "", true, nil); err == nil {
		u.FieldMetaDocumentInitials = &fieldMetaDocumentInitials
		u.Type = DocumentFieldMetaUnionTypeFieldMetaDocumentInitials
		return nil
	}

	var fieldMetaDocumentName FieldMetaDocumentName = FieldMetaDocumentName{}
	if err := utils.UnmarshalJSON(data, &fieldMetaDocumentName, "", true, nil); err == nil {
		u.FieldMetaDocumentName = &fieldMetaDocumentName
		u.Type = DocumentFieldMetaUnionTypeFieldMetaDocumentName
		return nil
	}

	var fieldMetaDocumentEmail FieldMetaDocumentEmail = FieldMetaDocumentEmail{}
	if err := utils.UnmarshalJSON(data, &fieldMetaDocumentEmail, "", true, nil); err == nil {
		u.FieldMetaDocumentEmail = &fieldMetaDocumentEmail
		u.Type = DocumentFieldMetaUnionTypeFieldMetaDocumentEmail
		return nil
	}

	var fieldMetaDocumentDate FieldMetaDocumentDate = FieldMetaDocumentDate{}
	if err := utils.UnmarshalJSON(data, &fieldMetaDocumentDate, "", true, nil); err == nil {
		u.FieldMetaDocumentDate = &fieldMetaDocumentDate
		u.Type = DocumentFieldMetaUnionTypeFieldMetaDocumentDate
		return nil
	}

	var fieldMetaDocumentText FieldMetaDocumentText = FieldMetaDocumentText{}
	if err := utils.UnmarshalJSON(data, &fieldMetaDocumentText, "", true, nil); err == nil {
		u.FieldMetaDocumentText = &fieldMetaDocumentText
		u.Type = DocumentFieldMetaUnionTypeFieldMetaDocumentText
		return nil
	}

	var fieldMetaDocumentNumber FieldMetaDocumentNumber = FieldMetaDocumentNumber{}
	if err := utils.UnmarshalJSON(data, &fieldMetaDocumentNumber, "", true, nil); err == nil {
		u.FieldMetaDocumentNumber = &fieldMetaDocumentNumber
		u.Type = DocumentFieldMetaUnionTypeFieldMetaDocumentNumber
		return nil
	}

	var fieldMetaDocumentRadio FieldMetaDocumentRadio = FieldMetaDocumentRadio{}
	if err := utils.UnmarshalJSON(data, &fieldMetaDocumentRadio, "", true, nil); err == nil {
		u.FieldMetaDocumentRadio = &fieldMetaDocumentRadio
		u.Type = DocumentFieldMetaUnionTypeFieldMetaDocumentRadio
		return nil
	}

	var fieldMetaDocumentCheckbox FieldMetaDocumentCheckbox = FieldMetaDocumentCheckbox{}
	if err := utils.UnmarshalJSON(data, &fieldMetaDocumentCheckbox, "", true, nil); err == nil {
		u.FieldMetaDocumentCheckbox = &fieldMetaDocumentCheckbox
		u.Type = DocumentFieldMetaUnionTypeFieldMetaDocumentCheckbox
		return nil
	}

	var fieldMetaDocumentDropdown FieldMetaDocumentDropdown = FieldMetaDocumentDropdown{}
	if err := utils.UnmarshalJSON(data, &fieldMetaDocumentDropdown, "", true, nil); err == nil {
		u.FieldMetaDocumentDropdown = &fieldMetaDocumentDropdown
		u.Type = DocumentFieldMetaUnionTypeFieldMetaDocumentDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DocumentFieldMetaUnion", string(data))
}

func (u DocumentFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.FieldMetaDocumentInitials != nil {
		return utils.MarshalJSON(u.FieldMetaDocumentInitials, "", true)
	}

	if u.FieldMetaDocumentName != nil {
		return utils.MarshalJSON(u.FieldMetaDocumentName, "", true)
	}

	if u.FieldMetaDocumentEmail != nil {
		return utils.MarshalJSON(u.FieldMetaDocumentEmail, "", true)
	}

	if u.FieldMetaDocumentDate != nil {
		return utils.MarshalJSON(u.FieldMetaDocumentDate, "", true)
	}

	if u.FieldMetaDocumentText != nil {
		return utils.MarshalJSON(u.FieldMetaDocumentText, "", true)
	}

	if u.FieldMetaDocumentNumber != nil {
		return utils.MarshalJSON(u.FieldMetaDocumentNumber, "", true)
	}

	if u.FieldMetaDocumentRadio != nil {
		return utils.MarshalJSON(u.FieldMetaDocumentRadio, "", true)
	}

	if u.FieldMetaDocumentCheckbox != nil {
		return utils.MarshalJSON(u.FieldMetaDocumentCheckbox, "", true)
	}

	if u.FieldMetaDocumentDropdown != nil {
		return utils.MarshalJSON(u.FieldMetaDocumentDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type DocumentFieldMetaUnion: all fields are null")
}

type DocumentField struct {
	EnvelopeID     string            `json:"envelopeId"`
	EnvelopeItemID string            `json:"envelopeItemId"`
	Type           DocumentFieldType `json:"type"`
	ID             float64           `json:"id"`
	SecondaryID    string            `json:"secondaryId"`
	RecipientID    float64           `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                 `json:"page"`
	PositionX  any                     `json:"positionX,omitempty"`
	PositionY  any                     `json:"positionY,omitempty"`
	Width      any                     `json:"width,omitempty"`
	Height     any                     `json:"height,omitempty"`
	CustomText string                  `json:"customText"`
	Inserted   bool                    `json:"inserted"`
	FieldMeta  *DocumentFieldMetaUnion `json:"fieldMeta"`
	DocumentID *float64                `json:"documentId,omitempty"`
	TemplateID *float64                `json:"templateId,omitempty"`
}

func (d *DocumentField) GetEnvelopeID() string {
	if d == nil {
		return ""
	}
	return d.EnvelopeID
}

func (d *DocumentField) GetEnvelopeItemID() string {
	if d == nil {
		return ""
	}
	return d.EnvelopeItemID
}

func (d *DocumentField) GetType() DocumentFieldType {
	if d == nil {
		return DocumentFieldType("")
	}
	return d.Type
}

func (d *DocumentField) GetID() float64 {
	if d == nil {
		return 0.0
	}
	return d.ID
}

func (d *DocumentField) GetSecondaryID() string {
	if d == nil {
		return ""
	}
	return d.SecondaryID
}

func (d *DocumentField) GetRecipientID() float64 {
	if d == nil {
		return 0.0
	}
	return d.RecipientID
}

func (d *DocumentField) GetPage() float64 {
	if d == nil {
		return 0.0
	}
	return d.Page
}

func (d *DocumentField) GetPositionX() any {
	if d == nil {
		return nil
	}
	return d.PositionX
}

func (d *DocumentField) GetPositionY() any {
	if d == nil {
		return nil
	}
	return d.PositionY
}

func (d *DocumentField) GetWidth() any {
	if d == nil {
		return nil
	}
	return d.Width
}

func (d *DocumentField) GetHeight() any {
	if d == nil {
		return nil
	}
	return d.Height
}

func (d *DocumentField) GetCustomText() string {
	if d == nil {
		return ""
	}
	return d.CustomText
}

func (d *DocumentField) GetInserted() bool {
	if d == nil {
		return false
	}
	return d.Inserted
}

func (d *DocumentField) GetFieldMeta() *DocumentFieldMetaUnion {
	if d == nil {
		return nil
	}
	return d.FieldMeta
}

func (d *DocumentField) GetDocumentID() *float64 {
	if d == nil {
		return nil
	}
	return d.DocumentID
}

func (d *DocumentField) GetTemplateID() *float64 {
	if d == nil {
		return nil
	}
	return d.TemplateID
}

type Document struct {
	Visibility DocumentVisibility                    `json:"visibility"`
	Status     DocumentCreateDocumentTemporaryStatus `json:"status"`
	Source     DocumentCreateDocumentTemporarySource `json:"source"`
	ID         float64                               `json:"id"`
	// A custom external ID you can use to identify the document.
	ExternalID *string `json:"externalId"`
	// The ID of the user that created this document.
	UserID      float64                                     `json:"userId"`
	AuthOptions *DocumentCreateDocumentTemporaryAuthOptions `json:"authOptions"`
	FormValues  map[string]DocumentFormValues               `json:"formValues"`
	Title       string                                      `json:"title"`
	CreatedAt   string                                      `json:"createdAt"`
	UpdatedAt   string                                      `json:"updatedAt"`
	CompletedAt *string                                     `json:"completedAt"`
	DeletedAt   *string                                     `json:"deletedAt"`
	TeamID      float64                                     `json:"teamId"`
	FolderID    *string                                     `json:"folderId"`
	EnvelopeID  string                                      `json:"envelopeId"`
	// The ID of the template that the document was created from, if any.
	TemplateID     *float64                                    `json:"templateId,omitempty"`
	DocumentDataID *string                                     `default:"" json:"documentDataId"`
	DocumentData   DocumentCreateDocumentTemporaryDocumentData `json:"documentData"`
	DocumentMeta   DocumentCreateDocumentTemporaryDocumentMeta `json:"documentMeta"`
	Folder         *DocumentCreateDocumentTemporaryFolder      `json:"folder"`
	Recipients     []DocumentRecipient                         `json:"recipients"`
	Fields         []DocumentField                             `json:"fields"`
}

func (d Document) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *Document) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"visibility", "status", "source", "id", "userId", "title", "createdAt", "updatedAt", "teamId", "envelopeId", "documentData", "documentMeta", "recipients", "fields"}); err != nil {
		return err
	}
	return nil
}

func (d *Document) GetVisibility() DocumentVisibility {
	if d == nil {
		return DocumentVisibility("")
	}
	return d.Visibility
}

func (d *Document) GetStatus() DocumentCreateDocumentTemporaryStatus {
	if d == nil {
		return DocumentCreateDocumentTemporaryStatus("")
	}
	return d.Status
}

func (d *Document) GetSource() DocumentCreateDocumentTemporarySource {
	if d == nil {
		return DocumentCreateDocumentTemporarySource("")
	}
	return d.Source
}

func (d *Document) GetID() float64 {
	if d == nil {
		return 0.0
	}
	return d.ID
}

func (d *Document) GetExternalID() *string {
	if d == nil {
		return nil
	}
	return d.ExternalID
}

func (d *Document) GetUserID() float64 {
	if d == nil {
		return 0.0
	}
	return d.UserID
}

func (d *Document) GetAuthOptions() *DocumentCreateDocumentTemporaryAuthOptions {
	if d == nil {
		return nil
	}
	return d.AuthOptions
}

func (d *Document) GetFormValues() map[string]DocumentFormValues {
	if d == nil {
		return nil
	}
	return d.FormValues
}

func (d *Document) GetTitle() string {
	if d == nil {
		return ""
	}
	return d.Title
}

func (d *Document) GetCreatedAt() string {
	if d == nil {
		return ""
	}
	return d.CreatedAt
}

func (d *Document) GetUpdatedAt() string {
	if d == nil {
		return ""
	}
	return d.UpdatedAt
}

func (d *Document) GetCompletedAt() *string {
	if d == nil {
		return nil
	}
	return d.CompletedAt
}

func (d *Document) GetDeletedAt() *string {
	if d == nil {
		return nil
	}
	return d.DeletedAt
}

func (d *Document) GetTeamID() float64 {
	if d == nil {
		return 0.0
	}
	return d.TeamID
}

func (d *Document) GetFolderID() *string {
	if d == nil {
		return nil
	}
	return d.FolderID
}

func (d *Document) GetEnvelopeID() string {
	if d == nil {
		return ""
	}
	return d.EnvelopeID
}

func (d *Document) GetTemplateID() *float64 {
	if d == nil {
		return nil
	}
	return d.TemplateID
}

func (d *Document) GetDocumentDataID() *string {
	if d == nil {
		return nil
	}
	return d.DocumentDataID
}

func (d *Document) GetDocumentData() DocumentCreateDocumentTemporaryDocumentData {
	if d == nil {
		return DocumentCreateDocumentTemporaryDocumentData{}
	}
	return d.DocumentData
}

func (d *Document) GetDocumentMeta() DocumentCreateDocumentTemporaryDocumentMeta {
	if d == nil {
		return DocumentCreateDocumentTemporaryDocumentMeta{}
	}
	return d.DocumentMeta
}

func (d *Document) GetFolder() *DocumentCreateDocumentTemporaryFolder {
	if d == nil {
		return nil
	}
	return d.Folder
}

func (d *Document) GetRecipients() []DocumentRecipient {
	if d == nil {
		return []DocumentRecipient{}
	}
	return d.Recipients
}

func (d *Document) GetFields() []DocumentField {
	if d == nil {
		return []DocumentField{}
	}
	return d.Fields
}

// DocumentCreateDocumentTemporaryResponseBody - Successful response
type DocumentCreateDocumentTemporaryResponseBody struct {
	Document Document `json:"document"`
	// The URL to upload the document PDF to. Use a PUT request with the file via form-data
	UploadURL string `json:"uploadUrl"`
}

func (d *DocumentCreateDocumentTemporaryResponseBody) GetDocument() Document {
	if d == nil {
		return Document{}
	}
	return d.Document
}

func (d *DocumentCreateDocumentTemporaryResponseBody) GetUploadURL() string {
	if d == nil {
		return ""
	}
	return d.UploadURL
}

type DocumentCreateDocumentTemporaryResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *DocumentCreateDocumentTemporaryResponseBody
}

func (d *DocumentCreateDocumentTemporaryResponse) GetHTTPMeta() components.HTTPMetadata {
	if d == nil {
		return components.HTTPMetadata{}
	}
	return d.HTTPMeta
}

func (d *DocumentCreateDocumentTemporaryResponse) GetObject() *DocumentCreateDocumentTemporaryResponseBody {
	if d == nil {
		return nil
	}
	return d.Object
}
