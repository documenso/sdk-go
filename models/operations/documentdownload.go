// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

// Version - The version of the document to download. "signed" returns the completed document with signatures, "original" returns the original uploaded document.
type Version string

const (
	VersionOriginal Version = "original"
	VersionSigned   Version = "signed"
)

func (e Version) ToPointer() *Version {
	return &e
}
func (e *Version) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "original":
		fallthrough
	case "signed":
		*e = Version(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Version: %v", v)
	}
}

type DocumentDownloadRequest struct {
	// The ID of the document to download.
	DocumentID float64 `pathParam:"style=simple,explode=false,name=documentId"`
	// The version of the document to download. "signed" returns the completed document with signatures, "original" returns the original uploaded document.
	Version *Version `default:"signed" queryParam:"style=form,explode=true,name=version"`
}

func (d DocumentDownloadRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentDownloadRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"documentId"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentDownloadRequest) GetDocumentID() float64 {
	if d == nil {
		return 0.0
	}
	return d.DocumentID
}

func (d *DocumentDownloadRequest) GetVersion() *Version {
	if d == nil {
		return nil
	}
	return d.Version
}

// DocumentDownloadResponseBody - Successful response
type DocumentDownloadResponseBody struct {
	// Pre-signed URL for downloading the PDF file
	DownloadURL string `json:"downloadUrl"`
	// The filename of the PDF file
	Filename string `json:"filename"`
	// MIME type of the file
	ContentType string `json:"contentType"`
}

func (d *DocumentDownloadResponseBody) GetDownloadURL() string {
	if d == nil {
		return ""
	}
	return d.DownloadURL
}

func (d *DocumentDownloadResponseBody) GetFilename() string {
	if d == nil {
		return ""
	}
	return d.Filename
}

func (d *DocumentDownloadResponseBody) GetContentType() string {
	if d == nil {
		return ""
	}
	return d.ContentType
}

type DocumentDownloadResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *DocumentDownloadResponseBody
}

func (d *DocumentDownloadResponse) GetHTTPMeta() components.HTTPMetadata {
	if d == nil {
		return components.HTTPMetadata{}
	}
	return d.HTTPMeta
}

func (d *DocumentDownloadResponse) GetObject() *DocumentDownloadResponseBody {
	if d == nil {
		return nil
	}
	return d.Object
}
