// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type DocumentGetRequest struct {
	DocumentID float64 `pathParam:"style=simple,explode=false,name=documentId"`
}

func (d *DocumentGetRequest) GetDocumentID() float64 {
	if d == nil {
		return 0.0
	}
	return d.DocumentID
}

type DocumentGetVisibility string

const (
	DocumentGetVisibilityEveryone        DocumentGetVisibility = "EVERYONE"
	DocumentGetVisibilityManagerAndAbove DocumentGetVisibility = "MANAGER_AND_ABOVE"
	DocumentGetVisibilityAdmin           DocumentGetVisibility = "ADMIN"
)

func (e DocumentGetVisibility) ToPointer() *DocumentGetVisibility {
	return &e
}
func (e *DocumentGetVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = DocumentGetVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetVisibility: %v", v)
	}
}

type DocumentGetStatus string

const (
	DocumentGetStatusDraft     DocumentGetStatus = "DRAFT"
	DocumentGetStatusPending   DocumentGetStatus = "PENDING"
	DocumentGetStatusCompleted DocumentGetStatus = "COMPLETED"
	DocumentGetStatusRejected  DocumentGetStatus = "REJECTED"
)

func (e DocumentGetStatus) ToPointer() *DocumentGetStatus {
	return &e
}
func (e *DocumentGetStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "PENDING":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "REJECTED":
		*e = DocumentGetStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetStatus: %v", v)
	}
}

type DocumentGetSource string

const (
	DocumentGetSourceDocument           DocumentGetSource = "DOCUMENT"
	DocumentGetSourceTemplate           DocumentGetSource = "TEMPLATE"
	DocumentGetSourceTemplateDirectLink DocumentGetSource = "TEMPLATE_DIRECT_LINK"
)

func (e DocumentGetSource) ToPointer() *DocumentGetSource {
	return &e
}
func (e *DocumentGetSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		fallthrough
	case "TEMPLATE_DIRECT_LINK":
		*e = DocumentGetSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetSource: %v", v)
	}
}

// DocumentGetGlobalAccessAuth - The type of authentication required for the recipient to access the document.
type DocumentGetGlobalAccessAuth string

const (
	DocumentGetGlobalAccessAuthAccount       DocumentGetGlobalAccessAuth = "ACCOUNT"
	DocumentGetGlobalAccessAuthTwoFactorAuth DocumentGetGlobalAccessAuth = "TWO_FACTOR_AUTH"
)

func (e DocumentGetGlobalAccessAuth) ToPointer() *DocumentGetGlobalAccessAuth {
	return &e
}
func (e *DocumentGetGlobalAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = DocumentGetGlobalAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetGlobalAccessAuth: %v", v)
	}
}

// DocumentGetGlobalActionAuth - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type DocumentGetGlobalActionAuth string

const (
	DocumentGetGlobalActionAuthAccount       DocumentGetGlobalActionAuth = "ACCOUNT"
	DocumentGetGlobalActionAuthPasskey       DocumentGetGlobalActionAuth = "PASSKEY"
	DocumentGetGlobalActionAuthTwoFactorAuth DocumentGetGlobalActionAuth = "TWO_FACTOR_AUTH"
	DocumentGetGlobalActionAuthPassword      DocumentGetGlobalActionAuth = "PASSWORD"
)

func (e DocumentGetGlobalActionAuth) ToPointer() *DocumentGetGlobalActionAuth {
	return &e
}
func (e *DocumentGetGlobalActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		*e = DocumentGetGlobalActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetGlobalActionAuth: %v", v)
	}
}

type DocumentGetAuthOptions struct {
	GlobalAccessAuth []DocumentGetGlobalAccessAuth `json:"globalAccessAuth"`
	GlobalActionAuth []DocumentGetGlobalActionAuth `json:"globalActionAuth"`
}

func (d *DocumentGetAuthOptions) GetGlobalAccessAuth() []DocumentGetGlobalAccessAuth {
	if d == nil {
		return []DocumentGetGlobalAccessAuth{}
	}
	return d.GlobalAccessAuth
}

func (d *DocumentGetAuthOptions) GetGlobalActionAuth() []DocumentGetGlobalActionAuth {
	if d == nil {
		return []DocumentGetGlobalActionAuth{}
	}
	return d.GlobalActionAuth
}

type DocumentGetFormValuesType string

const (
	DocumentGetFormValuesTypeStr     DocumentGetFormValuesType = "str"
	DocumentGetFormValuesTypeBoolean DocumentGetFormValuesType = "boolean"
	DocumentGetFormValuesTypeNumber  DocumentGetFormValuesType = "number"
)

type DocumentGetFormValues struct {
	Str     *string  `queryParam:"inline,name=formValues"`
	Boolean *bool    `queryParam:"inline,name=formValues"`
	Number  *float64 `queryParam:"inline,name=formValues"`

	Type DocumentGetFormValuesType
}

func CreateDocumentGetFormValuesStr(str string) DocumentGetFormValues {
	typ := DocumentGetFormValuesTypeStr

	return DocumentGetFormValues{
		Str:  &str,
		Type: typ,
	}
}

func CreateDocumentGetFormValuesBoolean(boolean bool) DocumentGetFormValues {
	typ := DocumentGetFormValuesTypeBoolean

	return DocumentGetFormValues{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateDocumentGetFormValuesNumber(number float64) DocumentGetFormValues {
	typ := DocumentGetFormValuesTypeNumber

	return DocumentGetFormValues{
		Number: &number,
		Type:   typ,
	}
}

func (u *DocumentGetFormValues) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = DocumentGetFormValuesTypeStr
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = DocumentGetFormValuesTypeBoolean
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = DocumentGetFormValuesTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DocumentGetFormValues", string(data))
}

func (u DocumentGetFormValues) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type DocumentGetFormValues: all fields are null")
}

type DocumentGetDocumentDataType string

const (
	DocumentGetDocumentDataTypeS3Path  DocumentGetDocumentDataType = "S3_PATH"
	DocumentGetDocumentDataTypeBytes   DocumentGetDocumentDataType = "BYTES"
	DocumentGetDocumentDataTypeBytes64 DocumentGetDocumentDataType = "BYTES_64"
)

func (e DocumentGetDocumentDataType) ToPointer() *DocumentGetDocumentDataType {
	return &e
}
func (e *DocumentGetDocumentDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3_PATH":
		fallthrough
	case "BYTES":
		fallthrough
	case "BYTES_64":
		*e = DocumentGetDocumentDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentDataType: %v", v)
	}
}

type DocumentGetDocumentData struct {
	Type           DocumentGetDocumentDataType `json:"type"`
	ID             string                      `json:"id"`
	Data           string                      `json:"data"`
	InitialData    string                      `json:"initialData"`
	EnvelopeItemID string                      `json:"envelopeItemId"`
}

func (d *DocumentGetDocumentData) GetType() DocumentGetDocumentDataType {
	if d == nil {
		return DocumentGetDocumentDataType("")
	}
	return d.Type
}

func (d *DocumentGetDocumentData) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DocumentGetDocumentData) GetData() string {
	if d == nil {
		return ""
	}
	return d.Data
}

func (d *DocumentGetDocumentData) GetInitialData() string {
	if d == nil {
		return ""
	}
	return d.InitialData
}

func (d *DocumentGetDocumentData) GetEnvelopeItemID() string {
	if d == nil {
		return ""
	}
	return d.EnvelopeItemID
}

type DocumentGetSigningOrder string

const (
	DocumentGetSigningOrderParallel   DocumentGetSigningOrder = "PARALLEL"
	DocumentGetSigningOrderSequential DocumentGetSigningOrder = "SEQUENTIAL"
)

func (e DocumentGetSigningOrder) ToPointer() *DocumentGetSigningOrder {
	return &e
}
func (e *DocumentGetSigningOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARALLEL":
		fallthrough
	case "SEQUENTIAL":
		*e = DocumentGetSigningOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetSigningOrder: %v", v)
	}
}

type DocumentGetDistributionMethod string

const (
	DocumentGetDistributionMethodEmail DocumentGetDistributionMethod = "EMAIL"
	DocumentGetDistributionMethodNone  DocumentGetDistributionMethod = "NONE"
)

func (e DocumentGetDistributionMethod) ToPointer() *DocumentGetDistributionMethod {
	return &e
}
func (e *DocumentGetDistributionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = DocumentGetDistributionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDistributionMethod: %v", v)
	}
}

type DocumentGetEmailSettings struct {
	// Whether to send an email to all recipients that the document is ready for them to sign.
	RecipientSigningRequest *bool `default:"true" json:"recipientSigningRequest"`
	// Whether to send an email to the recipient who was removed from a pending document.
	RecipientRemoved *bool `default:"true" json:"recipientRemoved"`
	// Whether to send an email to the document owner when a recipient has signed the document.
	RecipientSigned *bool `default:"true" json:"recipientSigned"`
	// Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
	DocumentPending *bool `default:"true" json:"documentPending"`
	// Whether to send an email to all recipients when the document is complete.
	DocumentCompleted *bool `default:"true" json:"documentCompleted"`
	// Whether to send an email to all recipients if a pending document has been deleted.
	DocumentDeleted *bool `default:"true" json:"documentDeleted"`
	// Whether to send an email to the document owner when the document is complete.
	OwnerDocumentCompleted *bool `default:"true" json:"ownerDocumentCompleted"`
}

func (d DocumentGetEmailSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetEmailSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (d *DocumentGetEmailSettings) GetRecipientSigningRequest() *bool {
	if d == nil {
		return nil
	}
	return d.RecipientSigningRequest
}

func (d *DocumentGetEmailSettings) GetRecipientRemoved() *bool {
	if d == nil {
		return nil
	}
	return d.RecipientRemoved
}

func (d *DocumentGetEmailSettings) GetRecipientSigned() *bool {
	if d == nil {
		return nil
	}
	return d.RecipientSigned
}

func (d *DocumentGetEmailSettings) GetDocumentPending() *bool {
	if d == nil {
		return nil
	}
	return d.DocumentPending
}

func (d *DocumentGetEmailSettings) GetDocumentCompleted() *bool {
	if d == nil {
		return nil
	}
	return d.DocumentCompleted
}

func (d *DocumentGetEmailSettings) GetDocumentDeleted() *bool {
	if d == nil {
		return nil
	}
	return d.DocumentDeleted
}

func (d *DocumentGetEmailSettings) GetOwnerDocumentCompleted() *bool {
	if d == nil {
		return nil
	}
	return d.OwnerDocumentCompleted
}

type DocumentGetDocumentMeta struct {
	SigningOrder           DocumentGetSigningOrder       `json:"signingOrder"`
	DistributionMethod     DocumentGetDistributionMethod `json:"distributionMethod"`
	ID                     string                        `json:"id"`
	Subject                *string                       `json:"subject"`
	Message                *string                       `json:"message"`
	Timezone               *string                       `json:"timezone"`
	DateFormat             *string                       `json:"dateFormat"`
	RedirectURL            *string                       `json:"redirectUrl"`
	TypedSignatureEnabled  bool                          `json:"typedSignatureEnabled"`
	UploadSignatureEnabled bool                          `json:"uploadSignatureEnabled"`
	DrawSignatureEnabled   bool                          `json:"drawSignatureEnabled"`
	AllowDictateNextSigner bool                          `json:"allowDictateNextSigner"`
	Language               string                        `json:"language"`
	EmailSettings          *DocumentGetEmailSettings     `json:"emailSettings"`
	EmailID                *string                       `json:"emailId"`
	EmailReplyTo           *string                       `json:"emailReplyTo"`
	Password               *string                       `default:"null" json:"password"`
	DocumentID             *float64                      `default:"-1" json:"documentId"`
}

func (d DocumentGetDocumentMeta) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetDocumentMeta) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"signingOrder", "distributionMethod", "id", "typedSignatureEnabled", "uploadSignatureEnabled", "drawSignatureEnabled", "allowDictateNextSigner", "language"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentGetDocumentMeta) GetSigningOrder() DocumentGetSigningOrder {
	if d == nil {
		return DocumentGetSigningOrder("")
	}
	return d.SigningOrder
}

func (d *DocumentGetDocumentMeta) GetDistributionMethod() DocumentGetDistributionMethod {
	if d == nil {
		return DocumentGetDistributionMethod("")
	}
	return d.DistributionMethod
}

func (d *DocumentGetDocumentMeta) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DocumentGetDocumentMeta) GetSubject() *string {
	if d == nil {
		return nil
	}
	return d.Subject
}

func (d *DocumentGetDocumentMeta) GetMessage() *string {
	if d == nil {
		return nil
	}
	return d.Message
}

func (d *DocumentGetDocumentMeta) GetTimezone() *string {
	if d == nil {
		return nil
	}
	return d.Timezone
}

func (d *DocumentGetDocumentMeta) GetDateFormat() *string {
	if d == nil {
		return nil
	}
	return d.DateFormat
}

func (d *DocumentGetDocumentMeta) GetRedirectURL() *string {
	if d == nil {
		return nil
	}
	return d.RedirectURL
}

func (d *DocumentGetDocumentMeta) GetTypedSignatureEnabled() bool {
	if d == nil {
		return false
	}
	return d.TypedSignatureEnabled
}

func (d *DocumentGetDocumentMeta) GetUploadSignatureEnabled() bool {
	if d == nil {
		return false
	}
	return d.UploadSignatureEnabled
}

func (d *DocumentGetDocumentMeta) GetDrawSignatureEnabled() bool {
	if d == nil {
		return false
	}
	return d.DrawSignatureEnabled
}

func (d *DocumentGetDocumentMeta) GetAllowDictateNextSigner() bool {
	if d == nil {
		return false
	}
	return d.AllowDictateNextSigner
}

func (d *DocumentGetDocumentMeta) GetLanguage() string {
	if d == nil {
		return ""
	}
	return d.Language
}

func (d *DocumentGetDocumentMeta) GetEmailSettings() *DocumentGetEmailSettings {
	if d == nil {
		return nil
	}
	return d.EmailSettings
}

func (d *DocumentGetDocumentMeta) GetEmailID() *string {
	if d == nil {
		return nil
	}
	return d.EmailID
}

func (d *DocumentGetDocumentMeta) GetEmailReplyTo() *string {
	if d == nil {
		return nil
	}
	return d.EmailReplyTo
}

func (d *DocumentGetDocumentMeta) GetPassword() *string {
	if d == nil {
		return nil
	}
	return d.Password
}

func (d *DocumentGetDocumentMeta) GetDocumentID() *float64 {
	if d == nil {
		return nil
	}
	return d.DocumentID
}

type DocumentGetFolderType string

const (
	DocumentGetFolderTypeDocument DocumentGetFolderType = "DOCUMENT"
	DocumentGetFolderTypeTemplate DocumentGetFolderType = "TEMPLATE"
)

func (e DocumentGetFolderType) ToPointer() *DocumentGetFolderType {
	return &e
}
func (e *DocumentGetFolderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		*e = DocumentGetFolderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetFolderType: %v", v)
	}
}

type DocumentGetFolderVisibility string

const (
	DocumentGetFolderVisibilityEveryone        DocumentGetFolderVisibility = "EVERYONE"
	DocumentGetFolderVisibilityManagerAndAbove DocumentGetFolderVisibility = "MANAGER_AND_ABOVE"
	DocumentGetFolderVisibilityAdmin           DocumentGetFolderVisibility = "ADMIN"
)

func (e DocumentGetFolderVisibility) ToPointer() *DocumentGetFolderVisibility {
	return &e
}
func (e *DocumentGetFolderVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = DocumentGetFolderVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetFolderVisibility: %v", v)
	}
}

type DocumentGetFolder struct {
	ID         string                      `json:"id"`
	Name       string                      `json:"name"`
	Type       DocumentGetFolderType       `json:"type"`
	Visibility DocumentGetFolderVisibility `json:"visibility"`
	UserID     float64                     `json:"userId"`
	TeamID     float64                     `json:"teamId"`
	Pinned     bool                        `json:"pinned"`
	ParentID   *string                     `json:"parentId"`
	CreatedAt  string                      `json:"createdAt"`
	UpdatedAt  string                      `json:"updatedAt"`
}

func (d *DocumentGetFolder) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DocumentGetFolder) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DocumentGetFolder) GetType() DocumentGetFolderType {
	if d == nil {
		return DocumentGetFolderType("")
	}
	return d.Type
}

func (d *DocumentGetFolder) GetVisibility() DocumentGetFolderVisibility {
	if d == nil {
		return DocumentGetFolderVisibility("")
	}
	return d.Visibility
}

func (d *DocumentGetFolder) GetUserID() float64 {
	if d == nil {
		return 0.0
	}
	return d.UserID
}

func (d *DocumentGetFolder) GetTeamID() float64 {
	if d == nil {
		return 0.0
	}
	return d.TeamID
}

func (d *DocumentGetFolder) GetPinned() bool {
	if d == nil {
		return false
	}
	return d.Pinned
}

func (d *DocumentGetFolder) GetParentID() *string {
	if d == nil {
		return nil
	}
	return d.ParentID
}

func (d *DocumentGetFolder) GetCreatedAt() string {
	if d == nil {
		return ""
	}
	return d.CreatedAt
}

func (d *DocumentGetFolder) GetUpdatedAt() string {
	if d == nil {
		return ""
	}
	return d.UpdatedAt
}

type DocumentGetRole string

const (
	DocumentGetRoleCc        DocumentGetRole = "CC"
	DocumentGetRoleSigner    DocumentGetRole = "SIGNER"
	DocumentGetRoleViewer    DocumentGetRole = "VIEWER"
	DocumentGetRoleApprover  DocumentGetRole = "APPROVER"
	DocumentGetRoleAssistant DocumentGetRole = "ASSISTANT"
)

func (e DocumentGetRole) ToPointer() *DocumentGetRole {
	return &e
}
func (e *DocumentGetRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = DocumentGetRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetRole: %v", v)
	}
}

type DocumentGetReadStatus string

const (
	DocumentGetReadStatusNotOpened DocumentGetReadStatus = "NOT_OPENED"
	DocumentGetReadStatusOpened    DocumentGetReadStatus = "OPENED"
)

func (e DocumentGetReadStatus) ToPointer() *DocumentGetReadStatus {
	return &e
}
func (e *DocumentGetReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = DocumentGetReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetReadStatus: %v", v)
	}
}

type DocumentGetSigningStatus string

const (
	DocumentGetSigningStatusNotSigned DocumentGetSigningStatus = "NOT_SIGNED"
	DocumentGetSigningStatusSigned    DocumentGetSigningStatus = "SIGNED"
	DocumentGetSigningStatusRejected  DocumentGetSigningStatus = "REJECTED"
)

func (e DocumentGetSigningStatus) ToPointer() *DocumentGetSigningStatus {
	return &e
}
func (e *DocumentGetSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = DocumentGetSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetSigningStatus: %v", v)
	}
}

type DocumentGetSendStatus string

const (
	DocumentGetSendStatusNotSent DocumentGetSendStatus = "NOT_SENT"
	DocumentGetSendStatusSent    DocumentGetSendStatus = "SENT"
)

func (e DocumentGetSendStatus) ToPointer() *DocumentGetSendStatus {
	return &e
}
func (e *DocumentGetSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = DocumentGetSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetSendStatus: %v", v)
	}
}

// DocumentGetAccessAuth - The type of authentication required for the recipient to access the document.
type DocumentGetAccessAuth string

const (
	DocumentGetAccessAuthAccount       DocumentGetAccessAuth = "ACCOUNT"
	DocumentGetAccessAuthTwoFactorAuth DocumentGetAccessAuth = "TWO_FACTOR_AUTH"
)

func (e DocumentGetAccessAuth) ToPointer() *DocumentGetAccessAuth {
	return &e
}
func (e *DocumentGetAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = DocumentGetAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetAccessAuth: %v", v)
	}
}

// DocumentGetActionAuth - The type of authentication required for the recipient to sign the document.
type DocumentGetActionAuth string

const (
	DocumentGetActionAuthAccount       DocumentGetActionAuth = "ACCOUNT"
	DocumentGetActionAuthPasskey       DocumentGetActionAuth = "PASSKEY"
	DocumentGetActionAuthTwoFactorAuth DocumentGetActionAuth = "TWO_FACTOR_AUTH"
	DocumentGetActionAuthPassword      DocumentGetActionAuth = "PASSWORD"
	DocumentGetActionAuthExplicitNone  DocumentGetActionAuth = "EXPLICIT_NONE"
)

func (e DocumentGetActionAuth) ToPointer() *DocumentGetActionAuth {
	return &e
}
func (e *DocumentGetActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		fallthrough
	case "EXPLICIT_NONE":
		*e = DocumentGetActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetActionAuth: %v", v)
	}
}

type DocumentGetRecipientAuthOptions struct {
	AccessAuth []DocumentGetAccessAuth `json:"accessAuth"`
	ActionAuth []DocumentGetActionAuth `json:"actionAuth"`
}

func (d *DocumentGetRecipientAuthOptions) GetAccessAuth() []DocumentGetAccessAuth {
	if d == nil {
		return []DocumentGetAccessAuth{}
	}
	return d.AccessAuth
}

func (d *DocumentGetRecipientAuthOptions) GetActionAuth() []DocumentGetActionAuth {
	if d == nil {
		return []DocumentGetActionAuth{}
	}
	return d.ActionAuth
}

type DocumentGetRecipient struct {
	EnvelopeID        string                           `json:"envelopeId"`
	Role              DocumentGetRole                  `json:"role"`
	ReadStatus        DocumentGetReadStatus            `json:"readStatus"`
	SigningStatus     DocumentGetSigningStatus         `json:"signingStatus"`
	SendStatus        DocumentGetSendStatus            `json:"sendStatus"`
	ID                float64                          `json:"id"`
	Email             string                           `json:"email"`
	Name              string                           `json:"name"`
	Token             string                           `json:"token"`
	DocumentDeletedAt *string                          `json:"documentDeletedAt"`
	Expired           *string                          `json:"expired"`
	SignedAt          *string                          `json:"signedAt"`
	AuthOptions       *DocumentGetRecipientAuthOptions `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
	DocumentID      *float64 `json:"documentId,omitempty"`
	TemplateID      *float64 `json:"templateId,omitempty"`
}

func (d *DocumentGetRecipient) GetEnvelopeID() string {
	if d == nil {
		return ""
	}
	return d.EnvelopeID
}

func (d *DocumentGetRecipient) GetRole() DocumentGetRole {
	if d == nil {
		return DocumentGetRole("")
	}
	return d.Role
}

func (d *DocumentGetRecipient) GetReadStatus() DocumentGetReadStatus {
	if d == nil {
		return DocumentGetReadStatus("")
	}
	return d.ReadStatus
}

func (d *DocumentGetRecipient) GetSigningStatus() DocumentGetSigningStatus {
	if d == nil {
		return DocumentGetSigningStatus("")
	}
	return d.SigningStatus
}

func (d *DocumentGetRecipient) GetSendStatus() DocumentGetSendStatus {
	if d == nil {
		return DocumentGetSendStatus("")
	}
	return d.SendStatus
}

func (d *DocumentGetRecipient) GetID() float64 {
	if d == nil {
		return 0.0
	}
	return d.ID
}

func (d *DocumentGetRecipient) GetEmail() string {
	if d == nil {
		return ""
	}
	return d.Email
}

func (d *DocumentGetRecipient) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DocumentGetRecipient) GetToken() string {
	if d == nil {
		return ""
	}
	return d.Token
}

func (d *DocumentGetRecipient) GetDocumentDeletedAt() *string {
	if d == nil {
		return nil
	}
	return d.DocumentDeletedAt
}

func (d *DocumentGetRecipient) GetExpired() *string {
	if d == nil {
		return nil
	}
	return d.Expired
}

func (d *DocumentGetRecipient) GetSignedAt() *string {
	if d == nil {
		return nil
	}
	return d.SignedAt
}

func (d *DocumentGetRecipient) GetAuthOptions() *DocumentGetRecipientAuthOptions {
	if d == nil {
		return nil
	}
	return d.AuthOptions
}

func (d *DocumentGetRecipient) GetSigningOrder() *float64 {
	if d == nil {
		return nil
	}
	return d.SigningOrder
}

func (d *DocumentGetRecipient) GetRejectionReason() *string {
	if d == nil {
		return nil
	}
	return d.RejectionReason
}

func (d *DocumentGetRecipient) GetDocumentID() *float64 {
	if d == nil {
		return nil
	}
	return d.DocumentID
}

func (d *DocumentGetRecipient) GetTemplateID() *float64 {
	if d == nil {
		return nil
	}
	return d.TemplateID
}

type DocumentGetFieldType string

const (
	DocumentGetFieldTypeSignature     DocumentGetFieldType = "SIGNATURE"
	DocumentGetFieldTypeFreeSignature DocumentGetFieldType = "FREE_SIGNATURE"
	DocumentGetFieldTypeInitials      DocumentGetFieldType = "INITIALS"
	DocumentGetFieldTypeName          DocumentGetFieldType = "NAME"
	DocumentGetFieldTypeEmail         DocumentGetFieldType = "EMAIL"
	DocumentGetFieldTypeDate          DocumentGetFieldType = "DATE"
	DocumentGetFieldTypeText          DocumentGetFieldType = "TEXT"
	DocumentGetFieldTypeNumber        DocumentGetFieldType = "NUMBER"
	DocumentGetFieldTypeRadio         DocumentGetFieldType = "RADIO"
	DocumentGetFieldTypeCheckbox      DocumentGetFieldType = "CHECKBOX"
	DocumentGetFieldTypeDropdown      DocumentGetFieldType = "DROPDOWN"
)

func (e DocumentGetFieldType) ToPointer() *DocumentGetFieldType {
	return &e
}
func (e *DocumentGetFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = DocumentGetFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetFieldType: %v", v)
	}
}

type DocumentGetTypeDropdown string

const (
	DocumentGetTypeDropdownDropdown DocumentGetTypeDropdown = "dropdown"
)

func (e DocumentGetTypeDropdown) ToPointer() *DocumentGetTypeDropdown {
	return &e
}
func (e *DocumentGetTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = DocumentGetTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetTypeDropdown: %v", v)
	}
}

type DocumentGetValue3 struct {
	Value string `json:"value"`
}

func (d DocumentGetValue3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetValue3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentGetValue3) GetValue() string {
	if d == nil {
		return ""
	}
	return d.Value
}

type DocumentGetFieldMetaDropdown struct {
	Label        *string                 `json:"label,omitempty"`
	Placeholder  *string                 `json:"placeholder,omitempty"`
	Required     *bool                   `json:"required,omitempty"`
	ReadOnly     *bool                   `json:"readOnly,omitempty"`
	Type         DocumentGetTypeDropdown `json:"type"`
	Values       []DocumentGetValue3     `json:"values,omitempty"`
	DefaultValue *string                 `json:"defaultValue,omitempty"`
}

func (d DocumentGetFieldMetaDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetFieldMetaDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentGetFieldMetaDropdown) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentGetFieldMetaDropdown) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentGetFieldMetaDropdown) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentGetFieldMetaDropdown) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentGetFieldMetaDropdown) GetType() DocumentGetTypeDropdown {
	if d == nil {
		return DocumentGetTypeDropdown("")
	}
	return d.Type
}

func (d *DocumentGetFieldMetaDropdown) GetValues() []DocumentGetValue3 {
	if d == nil {
		return nil
	}
	return d.Values
}

func (d *DocumentGetFieldMetaDropdown) GetDefaultValue() *string {
	if d == nil {
		return nil
	}
	return d.DefaultValue
}

type DocumentGetTypeCheckbox string

const (
	DocumentGetTypeCheckboxCheckbox DocumentGetTypeCheckbox = "checkbox"
)

func (e DocumentGetTypeCheckbox) ToPointer() *DocumentGetTypeCheckbox {
	return &e
}
func (e *DocumentGetTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = DocumentGetTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetTypeCheckbox: %v", v)
	}
}

type DocumentGetValue2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (d DocumentGetValue2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetValue2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentGetValue2) GetID() float64 {
	if d == nil {
		return 0.0
	}
	return d.ID
}

func (d *DocumentGetValue2) GetChecked() bool {
	if d == nil {
		return false
	}
	return d.Checked
}

func (d *DocumentGetValue2) GetValue() string {
	if d == nil {
		return ""
	}
	return d.Value
}

type DocumentGetDirection string

const (
	DocumentGetDirectionVertical   DocumentGetDirection = "vertical"
	DocumentGetDirectionHorizontal DocumentGetDirection = "horizontal"
)

func (e DocumentGetDirection) ToPointer() *DocumentGetDirection {
	return &e
}
func (e *DocumentGetDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vertical":
		fallthrough
	case "horizontal":
		*e = DocumentGetDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDirection: %v", v)
	}
}

type DocumentGetFieldMetaCheckbox struct {
	Label            *string                 `json:"label,omitempty"`
	Placeholder      *string                 `json:"placeholder,omitempty"`
	Required         *bool                   `json:"required,omitempty"`
	ReadOnly         *bool                   `json:"readOnly,omitempty"`
	Type             DocumentGetTypeCheckbox `json:"type"`
	Values           []DocumentGetValue2     `json:"values,omitempty"`
	ValidationRule   *string                 `json:"validationRule,omitempty"`
	ValidationLength *float64                `json:"validationLength,omitempty"`
	Direction        *DocumentGetDirection   `default:"vertical" json:"direction"`
}

func (d DocumentGetFieldMetaCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetFieldMetaCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentGetFieldMetaCheckbox) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentGetFieldMetaCheckbox) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentGetFieldMetaCheckbox) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentGetFieldMetaCheckbox) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentGetFieldMetaCheckbox) GetType() DocumentGetTypeCheckbox {
	if d == nil {
		return DocumentGetTypeCheckbox("")
	}
	return d.Type
}

func (d *DocumentGetFieldMetaCheckbox) GetValues() []DocumentGetValue2 {
	if d == nil {
		return nil
	}
	return d.Values
}

func (d *DocumentGetFieldMetaCheckbox) GetValidationRule() *string {
	if d == nil {
		return nil
	}
	return d.ValidationRule
}

func (d *DocumentGetFieldMetaCheckbox) GetValidationLength() *float64 {
	if d == nil {
		return nil
	}
	return d.ValidationLength
}

func (d *DocumentGetFieldMetaCheckbox) GetDirection() *DocumentGetDirection {
	if d == nil {
		return nil
	}
	return d.Direction
}

type DocumentGetTypeRadio string

const (
	DocumentGetTypeRadioRadio DocumentGetTypeRadio = "radio"
)

func (e DocumentGetTypeRadio) ToPointer() *DocumentGetTypeRadio {
	return &e
}
func (e *DocumentGetTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = DocumentGetTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetTypeRadio: %v", v)
	}
}

type DocumentGetValue1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (d DocumentGetValue1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetValue1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentGetValue1) GetID() float64 {
	if d == nil {
		return 0.0
	}
	return d.ID
}

func (d *DocumentGetValue1) GetChecked() bool {
	if d == nil {
		return false
	}
	return d.Checked
}

func (d *DocumentGetValue1) GetValue() string {
	if d == nil {
		return ""
	}
	return d.Value
}

type DocumentGetFieldMetaRadio struct {
	Label       *string              `json:"label,omitempty"`
	Placeholder *string              `json:"placeholder,omitempty"`
	Required    *bool                `json:"required,omitempty"`
	ReadOnly    *bool                `json:"readOnly,omitempty"`
	Type        DocumentGetTypeRadio `json:"type"`
	Values      []DocumentGetValue1  `json:"values,omitempty"`
}

func (d DocumentGetFieldMetaRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetFieldMetaRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentGetFieldMetaRadio) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentGetFieldMetaRadio) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentGetFieldMetaRadio) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentGetFieldMetaRadio) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentGetFieldMetaRadio) GetType() DocumentGetTypeRadio {
	if d == nil {
		return DocumentGetTypeRadio("")
	}
	return d.Type
}

func (d *DocumentGetFieldMetaRadio) GetValues() []DocumentGetValue1 {
	if d == nil {
		return nil
	}
	return d.Values
}

type DocumentGetTypeNumber string

const (
	DocumentGetTypeNumberNumber DocumentGetTypeNumber = "number"
)

func (e DocumentGetTypeNumber) ToPointer() *DocumentGetTypeNumber {
	return &e
}
func (e *DocumentGetTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = DocumentGetTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetTypeNumber: %v", v)
	}
}

type DocumentGetTextAlign6 string

const (
	DocumentGetTextAlign6Left   DocumentGetTextAlign6 = "left"
	DocumentGetTextAlign6Center DocumentGetTextAlign6 = "center"
	DocumentGetTextAlign6Right  DocumentGetTextAlign6 = "right"
)

func (e DocumentGetTextAlign6) ToPointer() *DocumentGetTextAlign6 {
	return &e
}
func (e *DocumentGetTextAlign6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentGetTextAlign6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetTextAlign6: %v", v)
	}
}

type DocumentGetFieldMetaNumber struct {
	Label        *string                `json:"label,omitempty"`
	Placeholder  *string                `json:"placeholder,omitempty"`
	Required     *bool                  `json:"required,omitempty"`
	ReadOnly     *bool                  `json:"readOnly,omitempty"`
	Type         DocumentGetTypeNumber  `json:"type"`
	NumberFormat *string                `json:"numberFormat,omitempty"`
	Value        *string                `json:"value,omitempty"`
	MinValue     *float64               `json:"minValue,omitempty"`
	MaxValue     *float64               `json:"maxValue,omitempty"`
	FontSize     *float64               `json:"fontSize,omitempty"`
	TextAlign    *DocumentGetTextAlign6 `json:"textAlign,omitempty"`
}

func (d DocumentGetFieldMetaNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetFieldMetaNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentGetFieldMetaNumber) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentGetFieldMetaNumber) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentGetFieldMetaNumber) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentGetFieldMetaNumber) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentGetFieldMetaNumber) GetType() DocumentGetTypeNumber {
	if d == nil {
		return DocumentGetTypeNumber("")
	}
	return d.Type
}

func (d *DocumentGetFieldMetaNumber) GetNumberFormat() *string {
	if d == nil {
		return nil
	}
	return d.NumberFormat
}

func (d *DocumentGetFieldMetaNumber) GetValue() *string {
	if d == nil {
		return nil
	}
	return d.Value
}

func (d *DocumentGetFieldMetaNumber) GetMinValue() *float64 {
	if d == nil {
		return nil
	}
	return d.MinValue
}

func (d *DocumentGetFieldMetaNumber) GetMaxValue() *float64 {
	if d == nil {
		return nil
	}
	return d.MaxValue
}

func (d *DocumentGetFieldMetaNumber) GetFontSize() *float64 {
	if d == nil {
		return nil
	}
	return d.FontSize
}

func (d *DocumentGetFieldMetaNumber) GetTextAlign() *DocumentGetTextAlign6 {
	if d == nil {
		return nil
	}
	return d.TextAlign
}

type DocumentGetTypeText string

const (
	DocumentGetTypeTextText DocumentGetTypeText = "text"
)

func (e DocumentGetTypeText) ToPointer() *DocumentGetTypeText {
	return &e
}
func (e *DocumentGetTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = DocumentGetTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetTypeText: %v", v)
	}
}

type DocumentGetTextAlign5 string

const (
	DocumentGetTextAlign5Left   DocumentGetTextAlign5 = "left"
	DocumentGetTextAlign5Center DocumentGetTextAlign5 = "center"
	DocumentGetTextAlign5Right  DocumentGetTextAlign5 = "right"
)

func (e DocumentGetTextAlign5) ToPointer() *DocumentGetTextAlign5 {
	return &e
}
func (e *DocumentGetTextAlign5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentGetTextAlign5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetTextAlign5: %v", v)
	}
}

type DocumentGetFieldMetaText struct {
	Label          *string                `json:"label,omitempty"`
	Placeholder    *string                `json:"placeholder,omitempty"`
	Required       *bool                  `json:"required,omitempty"`
	ReadOnly       *bool                  `json:"readOnly,omitempty"`
	Type           DocumentGetTypeText    `json:"type"`
	Text           *string                `json:"text,omitempty"`
	CharacterLimit *float64               `json:"characterLimit,omitempty"`
	FontSize       *float64               `json:"fontSize,omitempty"`
	TextAlign      *DocumentGetTextAlign5 `json:"textAlign,omitempty"`
}

func (d DocumentGetFieldMetaText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetFieldMetaText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentGetFieldMetaText) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentGetFieldMetaText) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentGetFieldMetaText) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentGetFieldMetaText) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentGetFieldMetaText) GetType() DocumentGetTypeText {
	if d == nil {
		return DocumentGetTypeText("")
	}
	return d.Type
}

func (d *DocumentGetFieldMetaText) GetText() *string {
	if d == nil {
		return nil
	}
	return d.Text
}

func (d *DocumentGetFieldMetaText) GetCharacterLimit() *float64 {
	if d == nil {
		return nil
	}
	return d.CharacterLimit
}

func (d *DocumentGetFieldMetaText) GetFontSize() *float64 {
	if d == nil {
		return nil
	}
	return d.FontSize
}

func (d *DocumentGetFieldMetaText) GetTextAlign() *DocumentGetTextAlign5 {
	if d == nil {
		return nil
	}
	return d.TextAlign
}

type DocumentGetTypeDate string

const (
	DocumentGetTypeDateDate DocumentGetTypeDate = "date"
)

func (e DocumentGetTypeDate) ToPointer() *DocumentGetTypeDate {
	return &e
}
func (e *DocumentGetTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = DocumentGetTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetTypeDate: %v", v)
	}
}

type DocumentGetTextAlign4 string

const (
	DocumentGetTextAlign4Left   DocumentGetTextAlign4 = "left"
	DocumentGetTextAlign4Center DocumentGetTextAlign4 = "center"
	DocumentGetTextAlign4Right  DocumentGetTextAlign4 = "right"
)

func (e DocumentGetTextAlign4) ToPointer() *DocumentGetTextAlign4 {
	return &e
}
func (e *DocumentGetTextAlign4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentGetTextAlign4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetTextAlign4: %v", v)
	}
}

type DocumentGetFieldMetaDate struct {
	Label       *string                `json:"label,omitempty"`
	Placeholder *string                `json:"placeholder,omitempty"`
	Required    *bool                  `json:"required,omitempty"`
	ReadOnly    *bool                  `json:"readOnly,omitempty"`
	Type        DocumentGetTypeDate    `json:"type"`
	FontSize    *float64               `json:"fontSize,omitempty"`
	TextAlign   *DocumentGetTextAlign4 `json:"textAlign,omitempty"`
}

func (d DocumentGetFieldMetaDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetFieldMetaDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentGetFieldMetaDate) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentGetFieldMetaDate) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentGetFieldMetaDate) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentGetFieldMetaDate) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentGetFieldMetaDate) GetType() DocumentGetTypeDate {
	if d == nil {
		return DocumentGetTypeDate("")
	}
	return d.Type
}

func (d *DocumentGetFieldMetaDate) GetFontSize() *float64 {
	if d == nil {
		return nil
	}
	return d.FontSize
}

func (d *DocumentGetFieldMetaDate) GetTextAlign() *DocumentGetTextAlign4 {
	if d == nil {
		return nil
	}
	return d.TextAlign
}

type DocumentGetTypeEmail string

const (
	DocumentGetTypeEmailEmail DocumentGetTypeEmail = "email"
)

func (e DocumentGetTypeEmail) ToPointer() *DocumentGetTypeEmail {
	return &e
}
func (e *DocumentGetTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = DocumentGetTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetTypeEmail: %v", v)
	}
}

type DocumentGetTextAlign3 string

const (
	DocumentGetTextAlign3Left   DocumentGetTextAlign3 = "left"
	DocumentGetTextAlign3Center DocumentGetTextAlign3 = "center"
	DocumentGetTextAlign3Right  DocumentGetTextAlign3 = "right"
)

func (e DocumentGetTextAlign3) ToPointer() *DocumentGetTextAlign3 {
	return &e
}
func (e *DocumentGetTextAlign3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentGetTextAlign3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetTextAlign3: %v", v)
	}
}

type DocumentGetFieldMetaEmail struct {
	Label       *string                `json:"label,omitempty"`
	Placeholder *string                `json:"placeholder,omitempty"`
	Required    *bool                  `json:"required,omitempty"`
	ReadOnly    *bool                  `json:"readOnly,omitempty"`
	Type        DocumentGetTypeEmail   `json:"type"`
	FontSize    *float64               `json:"fontSize,omitempty"`
	TextAlign   *DocumentGetTextAlign3 `json:"textAlign,omitempty"`
}

func (d DocumentGetFieldMetaEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetFieldMetaEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentGetFieldMetaEmail) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentGetFieldMetaEmail) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentGetFieldMetaEmail) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentGetFieldMetaEmail) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentGetFieldMetaEmail) GetType() DocumentGetTypeEmail {
	if d == nil {
		return DocumentGetTypeEmail("")
	}
	return d.Type
}

func (d *DocumentGetFieldMetaEmail) GetFontSize() *float64 {
	if d == nil {
		return nil
	}
	return d.FontSize
}

func (d *DocumentGetFieldMetaEmail) GetTextAlign() *DocumentGetTextAlign3 {
	if d == nil {
		return nil
	}
	return d.TextAlign
}

type DocumentGetTypeName string

const (
	DocumentGetTypeNameName DocumentGetTypeName = "name"
)

func (e DocumentGetTypeName) ToPointer() *DocumentGetTypeName {
	return &e
}
func (e *DocumentGetTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = DocumentGetTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetTypeName: %v", v)
	}
}

type DocumentGetTextAlign2 string

const (
	DocumentGetTextAlign2Left   DocumentGetTextAlign2 = "left"
	DocumentGetTextAlign2Center DocumentGetTextAlign2 = "center"
	DocumentGetTextAlign2Right  DocumentGetTextAlign2 = "right"
)

func (e DocumentGetTextAlign2) ToPointer() *DocumentGetTextAlign2 {
	return &e
}
func (e *DocumentGetTextAlign2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentGetTextAlign2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetTextAlign2: %v", v)
	}
}

type DocumentGetFieldMetaName struct {
	Label       *string                `json:"label,omitempty"`
	Placeholder *string                `json:"placeholder,omitempty"`
	Required    *bool                  `json:"required,omitempty"`
	ReadOnly    *bool                  `json:"readOnly,omitempty"`
	Type        DocumentGetTypeName    `json:"type"`
	FontSize    *float64               `json:"fontSize,omitempty"`
	TextAlign   *DocumentGetTextAlign2 `json:"textAlign,omitempty"`
}

func (d DocumentGetFieldMetaName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetFieldMetaName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentGetFieldMetaName) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentGetFieldMetaName) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentGetFieldMetaName) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentGetFieldMetaName) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentGetFieldMetaName) GetType() DocumentGetTypeName {
	if d == nil {
		return DocumentGetTypeName("")
	}
	return d.Type
}

func (d *DocumentGetFieldMetaName) GetFontSize() *float64 {
	if d == nil {
		return nil
	}
	return d.FontSize
}

func (d *DocumentGetFieldMetaName) GetTextAlign() *DocumentGetTextAlign2 {
	if d == nil {
		return nil
	}
	return d.TextAlign
}

type DocumentGetTypeInitials string

const (
	DocumentGetTypeInitialsInitials DocumentGetTypeInitials = "initials"
)

func (e DocumentGetTypeInitials) ToPointer() *DocumentGetTypeInitials {
	return &e
}
func (e *DocumentGetTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = DocumentGetTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetTypeInitials: %v", v)
	}
}

type DocumentGetTextAlign1 string

const (
	DocumentGetTextAlign1Left   DocumentGetTextAlign1 = "left"
	DocumentGetTextAlign1Center DocumentGetTextAlign1 = "center"
	DocumentGetTextAlign1Right  DocumentGetTextAlign1 = "right"
)

func (e DocumentGetTextAlign1) ToPointer() *DocumentGetTextAlign1 {
	return &e
}
func (e *DocumentGetTextAlign1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = DocumentGetTextAlign1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetTextAlign1: %v", v)
	}
}

type DocumentGetFieldMetaInitials struct {
	Label       *string                 `json:"label,omitempty"`
	Placeholder *string                 `json:"placeholder,omitempty"`
	Required    *bool                   `json:"required,omitempty"`
	ReadOnly    *bool                   `json:"readOnly,omitempty"`
	Type        DocumentGetTypeInitials `json:"type"`
	FontSize    *float64                `json:"fontSize,omitempty"`
	TextAlign   *DocumentGetTextAlign1  `json:"textAlign,omitempty"`
}

func (d DocumentGetFieldMetaInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetFieldMetaInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentGetFieldMetaInitials) GetLabel() *string {
	if d == nil {
		return nil
	}
	return d.Label
}

func (d *DocumentGetFieldMetaInitials) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DocumentGetFieldMetaInitials) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DocumentGetFieldMetaInitials) GetReadOnly() *bool {
	if d == nil {
		return nil
	}
	return d.ReadOnly
}

func (d *DocumentGetFieldMetaInitials) GetType() DocumentGetTypeInitials {
	if d == nil {
		return DocumentGetTypeInitials("")
	}
	return d.Type
}

func (d *DocumentGetFieldMetaInitials) GetFontSize() *float64 {
	if d == nil {
		return nil
	}
	return d.FontSize
}

func (d *DocumentGetFieldMetaInitials) GetTextAlign() *DocumentGetTextAlign1 {
	if d == nil {
		return nil
	}
	return d.TextAlign
}

type DocumentGetFieldMetaUnionType string

const (
	DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaInitials DocumentGetFieldMetaUnionType = "document_get_fieldMeta_Initials"
	DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaName     DocumentGetFieldMetaUnionType = "document_get_fieldMeta_Name"
	DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaEmail    DocumentGetFieldMetaUnionType = "document_get_fieldMeta_Email"
	DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaDate     DocumentGetFieldMetaUnionType = "document_get_fieldMeta_Date"
	DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaText     DocumentGetFieldMetaUnionType = "document_get_fieldMeta_Text"
	DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaNumber   DocumentGetFieldMetaUnionType = "document_get_fieldMeta_Number"
	DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaRadio    DocumentGetFieldMetaUnionType = "document_get_fieldMeta_Radio"
	DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaCheckbox DocumentGetFieldMetaUnionType = "document_get_fieldMeta_Checkbox"
	DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaDropdown DocumentGetFieldMetaUnionType = "document_get_fieldMeta_Dropdown"
)

type DocumentGetFieldMetaUnion struct {
	DocumentGetFieldMetaInitials *DocumentGetFieldMetaInitials `queryParam:"inline,name=fieldMeta"`
	DocumentGetFieldMetaName     *DocumentGetFieldMetaName     `queryParam:"inline,name=fieldMeta"`
	DocumentGetFieldMetaEmail    *DocumentGetFieldMetaEmail    `queryParam:"inline,name=fieldMeta"`
	DocumentGetFieldMetaDate     *DocumentGetFieldMetaDate     `queryParam:"inline,name=fieldMeta"`
	DocumentGetFieldMetaText     *DocumentGetFieldMetaText     `queryParam:"inline,name=fieldMeta"`
	DocumentGetFieldMetaNumber   *DocumentGetFieldMetaNumber   `queryParam:"inline,name=fieldMeta"`
	DocumentGetFieldMetaRadio    *DocumentGetFieldMetaRadio    `queryParam:"inline,name=fieldMeta"`
	DocumentGetFieldMetaCheckbox *DocumentGetFieldMetaCheckbox `queryParam:"inline,name=fieldMeta"`
	DocumentGetFieldMetaDropdown *DocumentGetFieldMetaDropdown `queryParam:"inline,name=fieldMeta"`

	Type DocumentGetFieldMetaUnionType
}

func CreateDocumentGetFieldMetaUnionDocumentGetFieldMetaInitials(documentGetFieldMetaInitials DocumentGetFieldMetaInitials) DocumentGetFieldMetaUnion {
	typ := DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaInitials

	return DocumentGetFieldMetaUnion{
		DocumentGetFieldMetaInitials: &documentGetFieldMetaInitials,
		Type:                         typ,
	}
}

func CreateDocumentGetFieldMetaUnionDocumentGetFieldMetaName(documentGetFieldMetaName DocumentGetFieldMetaName) DocumentGetFieldMetaUnion {
	typ := DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaName

	return DocumentGetFieldMetaUnion{
		DocumentGetFieldMetaName: &documentGetFieldMetaName,
		Type:                     typ,
	}
}

func CreateDocumentGetFieldMetaUnionDocumentGetFieldMetaEmail(documentGetFieldMetaEmail DocumentGetFieldMetaEmail) DocumentGetFieldMetaUnion {
	typ := DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaEmail

	return DocumentGetFieldMetaUnion{
		DocumentGetFieldMetaEmail: &documentGetFieldMetaEmail,
		Type:                      typ,
	}
}

func CreateDocumentGetFieldMetaUnionDocumentGetFieldMetaDate(documentGetFieldMetaDate DocumentGetFieldMetaDate) DocumentGetFieldMetaUnion {
	typ := DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaDate

	return DocumentGetFieldMetaUnion{
		DocumentGetFieldMetaDate: &documentGetFieldMetaDate,
		Type:                     typ,
	}
}

func CreateDocumentGetFieldMetaUnionDocumentGetFieldMetaText(documentGetFieldMetaText DocumentGetFieldMetaText) DocumentGetFieldMetaUnion {
	typ := DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaText

	return DocumentGetFieldMetaUnion{
		DocumentGetFieldMetaText: &documentGetFieldMetaText,
		Type:                     typ,
	}
}

func CreateDocumentGetFieldMetaUnionDocumentGetFieldMetaNumber(documentGetFieldMetaNumber DocumentGetFieldMetaNumber) DocumentGetFieldMetaUnion {
	typ := DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaNumber

	return DocumentGetFieldMetaUnion{
		DocumentGetFieldMetaNumber: &documentGetFieldMetaNumber,
		Type:                       typ,
	}
}

func CreateDocumentGetFieldMetaUnionDocumentGetFieldMetaRadio(documentGetFieldMetaRadio DocumentGetFieldMetaRadio) DocumentGetFieldMetaUnion {
	typ := DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaRadio

	return DocumentGetFieldMetaUnion{
		DocumentGetFieldMetaRadio: &documentGetFieldMetaRadio,
		Type:                      typ,
	}
}

func CreateDocumentGetFieldMetaUnionDocumentGetFieldMetaCheckbox(documentGetFieldMetaCheckbox DocumentGetFieldMetaCheckbox) DocumentGetFieldMetaUnion {
	typ := DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaCheckbox

	return DocumentGetFieldMetaUnion{
		DocumentGetFieldMetaCheckbox: &documentGetFieldMetaCheckbox,
		Type:                         typ,
	}
}

func CreateDocumentGetFieldMetaUnionDocumentGetFieldMetaDropdown(documentGetFieldMetaDropdown DocumentGetFieldMetaDropdown) DocumentGetFieldMetaUnion {
	typ := DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaDropdown

	return DocumentGetFieldMetaUnion{
		DocumentGetFieldMetaDropdown: &documentGetFieldMetaDropdown,
		Type:                         typ,
	}
}

func (u *DocumentGetFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var documentGetFieldMetaInitials DocumentGetFieldMetaInitials = DocumentGetFieldMetaInitials{}
	if err := utils.UnmarshalJSON(data, &documentGetFieldMetaInitials, "", true, nil); err == nil {
		u.DocumentGetFieldMetaInitials = &documentGetFieldMetaInitials
		u.Type = DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaInitials
		return nil
	}

	var documentGetFieldMetaName DocumentGetFieldMetaName = DocumentGetFieldMetaName{}
	if err := utils.UnmarshalJSON(data, &documentGetFieldMetaName, "", true, nil); err == nil {
		u.DocumentGetFieldMetaName = &documentGetFieldMetaName
		u.Type = DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaName
		return nil
	}

	var documentGetFieldMetaEmail DocumentGetFieldMetaEmail = DocumentGetFieldMetaEmail{}
	if err := utils.UnmarshalJSON(data, &documentGetFieldMetaEmail, "", true, nil); err == nil {
		u.DocumentGetFieldMetaEmail = &documentGetFieldMetaEmail
		u.Type = DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaEmail
		return nil
	}

	var documentGetFieldMetaDate DocumentGetFieldMetaDate = DocumentGetFieldMetaDate{}
	if err := utils.UnmarshalJSON(data, &documentGetFieldMetaDate, "", true, nil); err == nil {
		u.DocumentGetFieldMetaDate = &documentGetFieldMetaDate
		u.Type = DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaDate
		return nil
	}

	var documentGetFieldMetaText DocumentGetFieldMetaText = DocumentGetFieldMetaText{}
	if err := utils.UnmarshalJSON(data, &documentGetFieldMetaText, "", true, nil); err == nil {
		u.DocumentGetFieldMetaText = &documentGetFieldMetaText
		u.Type = DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaText
		return nil
	}

	var documentGetFieldMetaNumber DocumentGetFieldMetaNumber = DocumentGetFieldMetaNumber{}
	if err := utils.UnmarshalJSON(data, &documentGetFieldMetaNumber, "", true, nil); err == nil {
		u.DocumentGetFieldMetaNumber = &documentGetFieldMetaNumber
		u.Type = DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaNumber
		return nil
	}

	var documentGetFieldMetaRadio DocumentGetFieldMetaRadio = DocumentGetFieldMetaRadio{}
	if err := utils.UnmarshalJSON(data, &documentGetFieldMetaRadio, "", true, nil); err == nil {
		u.DocumentGetFieldMetaRadio = &documentGetFieldMetaRadio
		u.Type = DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaRadio
		return nil
	}

	var documentGetFieldMetaCheckbox DocumentGetFieldMetaCheckbox = DocumentGetFieldMetaCheckbox{}
	if err := utils.UnmarshalJSON(data, &documentGetFieldMetaCheckbox, "", true, nil); err == nil {
		u.DocumentGetFieldMetaCheckbox = &documentGetFieldMetaCheckbox
		u.Type = DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaCheckbox
		return nil
	}

	var documentGetFieldMetaDropdown DocumentGetFieldMetaDropdown = DocumentGetFieldMetaDropdown{}
	if err := utils.UnmarshalJSON(data, &documentGetFieldMetaDropdown, "", true, nil); err == nil {
		u.DocumentGetFieldMetaDropdown = &documentGetFieldMetaDropdown
		u.Type = DocumentGetFieldMetaUnionTypeDocumentGetFieldMetaDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DocumentGetFieldMetaUnion", string(data))
}

func (u DocumentGetFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.DocumentGetFieldMetaInitials != nil {
		return utils.MarshalJSON(u.DocumentGetFieldMetaInitials, "", true)
	}

	if u.DocumentGetFieldMetaName != nil {
		return utils.MarshalJSON(u.DocumentGetFieldMetaName, "", true)
	}

	if u.DocumentGetFieldMetaEmail != nil {
		return utils.MarshalJSON(u.DocumentGetFieldMetaEmail, "", true)
	}

	if u.DocumentGetFieldMetaDate != nil {
		return utils.MarshalJSON(u.DocumentGetFieldMetaDate, "", true)
	}

	if u.DocumentGetFieldMetaText != nil {
		return utils.MarshalJSON(u.DocumentGetFieldMetaText, "", true)
	}

	if u.DocumentGetFieldMetaNumber != nil {
		return utils.MarshalJSON(u.DocumentGetFieldMetaNumber, "", true)
	}

	if u.DocumentGetFieldMetaRadio != nil {
		return utils.MarshalJSON(u.DocumentGetFieldMetaRadio, "", true)
	}

	if u.DocumentGetFieldMetaCheckbox != nil {
		return utils.MarshalJSON(u.DocumentGetFieldMetaCheckbox, "", true)
	}

	if u.DocumentGetFieldMetaDropdown != nil {
		return utils.MarshalJSON(u.DocumentGetFieldMetaDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type DocumentGetFieldMetaUnion: all fields are null")
}

type DocumentGetField struct {
	EnvelopeID     string               `json:"envelopeId"`
	EnvelopeItemID string               `json:"envelopeItemId"`
	Type           DocumentGetFieldType `json:"type"`
	ID             float64              `json:"id"`
	SecondaryID    string               `json:"secondaryId"`
	RecipientID    float64              `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                    `json:"page"`
	PositionX  any                        `json:"positionX,omitempty"`
	PositionY  any                        `json:"positionY,omitempty"`
	Width      any                        `json:"width,omitempty"`
	Height     any                        `json:"height,omitempty"`
	CustomText string                     `json:"customText"`
	Inserted   bool                       `json:"inserted"`
	FieldMeta  *DocumentGetFieldMetaUnion `json:"fieldMeta"`
	DocumentID *float64                   `json:"documentId,omitempty"`
	TemplateID *float64                   `json:"templateId,omitempty"`
}

func (d *DocumentGetField) GetEnvelopeID() string {
	if d == nil {
		return ""
	}
	return d.EnvelopeID
}

func (d *DocumentGetField) GetEnvelopeItemID() string {
	if d == nil {
		return ""
	}
	return d.EnvelopeItemID
}

func (d *DocumentGetField) GetType() DocumentGetFieldType {
	if d == nil {
		return DocumentGetFieldType("")
	}
	return d.Type
}

func (d *DocumentGetField) GetID() float64 {
	if d == nil {
		return 0.0
	}
	return d.ID
}

func (d *DocumentGetField) GetSecondaryID() string {
	if d == nil {
		return ""
	}
	return d.SecondaryID
}

func (d *DocumentGetField) GetRecipientID() float64 {
	if d == nil {
		return 0.0
	}
	return d.RecipientID
}

func (d *DocumentGetField) GetPage() float64 {
	if d == nil {
		return 0.0
	}
	return d.Page
}

func (d *DocumentGetField) GetPositionX() any {
	if d == nil {
		return nil
	}
	return d.PositionX
}

func (d *DocumentGetField) GetPositionY() any {
	if d == nil {
		return nil
	}
	return d.PositionY
}

func (d *DocumentGetField) GetWidth() any {
	if d == nil {
		return nil
	}
	return d.Width
}

func (d *DocumentGetField) GetHeight() any {
	if d == nil {
		return nil
	}
	return d.Height
}

func (d *DocumentGetField) GetCustomText() string {
	if d == nil {
		return ""
	}
	return d.CustomText
}

func (d *DocumentGetField) GetInserted() bool {
	if d == nil {
		return false
	}
	return d.Inserted
}

func (d *DocumentGetField) GetFieldMeta() *DocumentGetFieldMetaUnion {
	if d == nil {
		return nil
	}
	return d.FieldMeta
}

func (d *DocumentGetField) GetDocumentID() *float64 {
	if d == nil {
		return nil
	}
	return d.DocumentID
}

func (d *DocumentGetField) GetTemplateID() *float64 {
	if d == nil {
		return nil
	}
	return d.TemplateID
}

// DocumentGetResponseBody - Successful response
type DocumentGetResponseBody struct {
	Visibility DocumentGetVisibility `json:"visibility"`
	Status     DocumentGetStatus     `json:"status"`
	Source     DocumentGetSource     `json:"source"`
	ID         float64               `json:"id"`
	// A custom external ID you can use to identify the document.
	ExternalID *string `json:"externalId"`
	// The ID of the user that created this document.
	UserID      float64                          `json:"userId"`
	AuthOptions *DocumentGetAuthOptions          `json:"authOptions"`
	FormValues  map[string]DocumentGetFormValues `json:"formValues"`
	Title       string                           `json:"title"`
	CreatedAt   string                           `json:"createdAt"`
	UpdatedAt   string                           `json:"updatedAt"`
	CompletedAt *string                          `json:"completedAt"`
	DeletedAt   *string                          `json:"deletedAt"`
	TeamID      float64                          `json:"teamId"`
	FolderID    *string                          `json:"folderId"`
	EnvelopeID  string                           `json:"envelopeId"`
	// The ID of the template that the document was created from, if any.
	TemplateID     *float64                `json:"templateId,omitempty"`
	DocumentDataID *string                 `default:"" json:"documentDataId"`
	DocumentData   DocumentGetDocumentData `json:"documentData"`
	DocumentMeta   DocumentGetDocumentMeta `json:"documentMeta"`
	Folder         *DocumentGetFolder      `json:"folder"`
	Recipients     []DocumentGetRecipient  `json:"recipients"`
	Fields         []DocumentGetField      `json:"fields"`
}

func (d DocumentGetResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"visibility", "status", "source", "id", "userId", "title", "createdAt", "updatedAt", "teamId", "envelopeId", "documentData", "documentMeta", "recipients", "fields"}); err != nil {
		return err
	}
	return nil
}

func (d *DocumentGetResponseBody) GetVisibility() DocumentGetVisibility {
	if d == nil {
		return DocumentGetVisibility("")
	}
	return d.Visibility
}

func (d *DocumentGetResponseBody) GetStatus() DocumentGetStatus {
	if d == nil {
		return DocumentGetStatus("")
	}
	return d.Status
}

func (d *DocumentGetResponseBody) GetSource() DocumentGetSource {
	if d == nil {
		return DocumentGetSource("")
	}
	return d.Source
}

func (d *DocumentGetResponseBody) GetID() float64 {
	if d == nil {
		return 0.0
	}
	return d.ID
}

func (d *DocumentGetResponseBody) GetExternalID() *string {
	if d == nil {
		return nil
	}
	return d.ExternalID
}

func (d *DocumentGetResponseBody) GetUserID() float64 {
	if d == nil {
		return 0.0
	}
	return d.UserID
}

func (d *DocumentGetResponseBody) GetAuthOptions() *DocumentGetAuthOptions {
	if d == nil {
		return nil
	}
	return d.AuthOptions
}

func (d *DocumentGetResponseBody) GetFormValues() map[string]DocumentGetFormValues {
	if d == nil {
		return nil
	}
	return d.FormValues
}

func (d *DocumentGetResponseBody) GetTitle() string {
	if d == nil {
		return ""
	}
	return d.Title
}

func (d *DocumentGetResponseBody) GetCreatedAt() string {
	if d == nil {
		return ""
	}
	return d.CreatedAt
}

func (d *DocumentGetResponseBody) GetUpdatedAt() string {
	if d == nil {
		return ""
	}
	return d.UpdatedAt
}

func (d *DocumentGetResponseBody) GetCompletedAt() *string {
	if d == nil {
		return nil
	}
	return d.CompletedAt
}

func (d *DocumentGetResponseBody) GetDeletedAt() *string {
	if d == nil {
		return nil
	}
	return d.DeletedAt
}

func (d *DocumentGetResponseBody) GetTeamID() float64 {
	if d == nil {
		return 0.0
	}
	return d.TeamID
}

func (d *DocumentGetResponseBody) GetFolderID() *string {
	if d == nil {
		return nil
	}
	return d.FolderID
}

func (d *DocumentGetResponseBody) GetEnvelopeID() string {
	if d == nil {
		return ""
	}
	return d.EnvelopeID
}

func (d *DocumentGetResponseBody) GetTemplateID() *float64 {
	if d == nil {
		return nil
	}
	return d.TemplateID
}

func (d *DocumentGetResponseBody) GetDocumentDataID() *string {
	if d == nil {
		return nil
	}
	return d.DocumentDataID
}

func (d *DocumentGetResponseBody) GetDocumentData() DocumentGetDocumentData {
	if d == nil {
		return DocumentGetDocumentData{}
	}
	return d.DocumentData
}

func (d *DocumentGetResponseBody) GetDocumentMeta() DocumentGetDocumentMeta {
	if d == nil {
		return DocumentGetDocumentMeta{}
	}
	return d.DocumentMeta
}

func (d *DocumentGetResponseBody) GetFolder() *DocumentGetFolder {
	if d == nil {
		return nil
	}
	return d.Folder
}

func (d *DocumentGetResponseBody) GetRecipients() []DocumentGetRecipient {
	if d == nil {
		return []DocumentGetRecipient{}
	}
	return d.Recipients
}

func (d *DocumentGetResponseBody) GetFields() []DocumentGetField {
	if d == nil {
		return []DocumentGetField{}
	}
	return d.Fields
}

type DocumentGetResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *DocumentGetResponseBody
}

func (d *DocumentGetResponse) GetHTTPMeta() components.HTTPMetadata {
	if d == nil {
		return components.HTTPMetadata{}
	}
	return d.HTTPMeta
}

func (d *DocumentGetResponse) GetObject() *DocumentGetResponseBody {
	if d == nil {
		return nil
	}
	return d.Object
}
