// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11TypeDropdown FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type = "DROPDOWN"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaTypeDropdown FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType = "dropdown"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues struct {
	Value string `json:"value"`
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta struct {
	Label        *string                                                                         `json:"label,omitempty"`
	Placeholder  *string                                                                         `json:"placeholder,omitempty"`
	Required     *bool                                                                           `json:"required,omitempty"`
	ReadOnly     *bool                                                                           `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType `json:"type"`
	Values       []FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues                   `json:"values,omitempty"`
	DefaultValue *string                                                                         `json:"defaultValue,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta) GetValues() []FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type Fields11 struct {
	Type      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type       `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Fields11) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type("")
	}
	return o.Type
}

func (o *Fields11) GetFieldMeta() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Fields11) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Fields11) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Fields11) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Fields11) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Fields11) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Fields11) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10TypeCheckbox FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type = "CHECKBOX"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaTypeCheckbox FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType = "checkbox"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta struct {
	Label            *string                                                                         `json:"label,omitempty"`
	Placeholder      *string                                                                         `json:"placeholder,omitempty"`
	Required         *bool                                                                           `json:"required,omitempty"`
	ReadOnly         *bool                                                                           `json:"readOnly,omitempty"`
	Type             FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType `json:"type"`
	Values           []FieldCreateDocumentFieldsFieldsDocumentsFieldsValues                          `json:"values,omitempty"`
	ValidationRule   *string                                                                         `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                        `json:"validationLength,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta) GetValues() []FieldCreateDocumentFieldsFieldsDocumentsFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type Fields10 struct {
	Type      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type       `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Fields10) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type("")
	}
	return o.Type
}

func (o *Fields10) GetFieldMeta() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Fields10) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Fields10) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Fields10) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Fields10) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Fields10) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Fields10) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9TypeRadio FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type = "RADIO"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaTypeRadio FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType = "radio"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateDocumentFieldsFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldsFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateDocumentFieldsFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta struct {
	Label       *string                                                                        `json:"label,omitempty"`
	Placeholder *string                                                                        `json:"placeholder,omitempty"`
	Required    *bool                                                                          `json:"required,omitempty"`
	ReadOnly    *bool                                                                          `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType `json:"type"`
	Values      []FieldCreateDocumentFieldsFieldsValues                                        `json:"values,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta) GetValues() []FieldCreateDocumentFieldsFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type Fields9 struct {
	Type      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type       `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Fields9) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type("")
	}
	return o.Type
}

func (o *Fields9) GetFieldMeta() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Fields9) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Fields9) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Fields9) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Fields9) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Fields9) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Fields9) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8TypeNumber FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type = "NUMBER"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaTypeNumber FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType = "number"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta struct {
	Label        *string                                                                        `json:"label,omitempty"`
	Placeholder  *string                                                                        `json:"placeholder,omitempty"`
	Required     *bool                                                                          `json:"required,omitempty"`
	ReadOnly     *bool                                                                          `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType `json:"type"`
	NumberFormat *string                                                                        `json:"numberFormat,omitempty"`
	Value        *string                                                                        `json:"value,omitempty"`
	MinValue     *float64                                                                       `json:"minValue,omitempty"`
	MaxValue     *float64                                                                       `json:"maxValue,omitempty"`
	FontSize     *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Fields8 struct {
	Type      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type       `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Fields8) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type("")
	}
	return o.Type
}

func (o *Fields8) GetFieldMeta() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Fields8) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Fields8) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Fields8) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Fields8) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Fields8) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Fields8) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7TypeText FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type = "TEXT"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaTypeText FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType = "text"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta struct {
	Label          *string                                                                        `json:"label,omitempty"`
	Placeholder    *string                                                                        `json:"placeholder,omitempty"`
	Required       *bool                                                                          `json:"required,omitempty"`
	ReadOnly       *bool                                                                          `json:"readOnly,omitempty"`
	Type           FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType `json:"type"`
	Text           *string                                                                        `json:"text,omitempty"`
	CharacterLimit *float64                                                                       `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Fields7 struct {
	Type      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type       `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Fields7) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type("")
	}
	return o.Type
}

func (o *Fields7) GetFieldMeta() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Fields7) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Fields7) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Fields7) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Fields7) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Fields7) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Fields7) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6TypeDate FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type = "DATE"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaTypeDate FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType = "date"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta struct {
	Label       *string                                                                        `json:"label,omitempty"`
	Placeholder *string                                                                        `json:"placeholder,omitempty"`
	Required    *bool                                                                          `json:"required,omitempty"`
	ReadOnly    *bool                                                                          `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType `json:"type"`
	FontSize    *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Fields6 struct {
	Type      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type      `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Fields6) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type("")
	}
	return o.Type
}

func (o *Fields6) GetFieldMeta() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Fields6) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Fields6) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Fields6) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Fields6) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Fields6) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Fields6) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5TypeEmail FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type = "EMAIL"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaTypeEmail FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType = "email"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta struct {
	Label       *string                                                                        `json:"label,omitempty"`
	Placeholder *string                                                                        `json:"placeholder,omitempty"`
	Required    *bool                                                                          `json:"required,omitempty"`
	ReadOnly    *bool                                                                          `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType `json:"type"`
	FontSize    *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Fields5 struct {
	Type      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta       `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Fields5) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type("")
	}
	return o.Type
}

func (o *Fields5) GetFieldMeta() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Fields5) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Fields5) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Fields5) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Fields5) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Fields5) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Fields5) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4TypeName FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type = "NAME"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaTypeName FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType = "name"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta struct {
	Label       *string                                                                        `json:"label,omitempty"`
	Placeholder *string                                                                        `json:"placeholder,omitempty"`
	Required    *bool                                                                          `json:"required,omitempty"`
	ReadOnly    *bool                                                                          `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType `json:"type"`
	FontSize    *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Fields4 struct {
	Type      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta              `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Fields4) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type("")
	}
	return o.Type
}

func (o *Fields4) GetFieldMeta() *FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Fields4) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Fields4) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Fields4) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Fields4) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Fields4) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Fields4) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestTypeInitials FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType = "INITIALS"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyTypeInitials FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType = "initials"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldsFieldMeta struct {
	Label       *string                                                              `json:"label,omitempty"`
	Placeholder *string                                                              `json:"placeholder,omitempty"`
	Required    *bool                                                                `json:"required,omitempty"`
	ReadOnly    *bool                                                                `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType `json:"type"`
	FontSize    *float64                                                             `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldsFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldsFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldsFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldsFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldsFieldMeta) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldsFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type Fields3 struct {
	Type      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType `json:"type"`
	FieldMeta *FieldCreateDocumentFieldsFieldsFieldMeta                 `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Fields3) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType("")
	}
	return o.Type
}

func (o *Fields3) GetFieldMeta() *FieldCreateDocumentFieldsFieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *Fields3) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Fields3) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Fields3) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Fields3) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Fields3) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Fields3) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsFieldsDocumentsFieldsType string

const (
	FieldCreateDocumentFieldsFieldsDocumentsFieldsTypeFreeSignature FieldCreateDocumentFieldsFieldsDocumentsFieldsType = "FREE_SIGNATURE"
)

func (e FieldCreateDocumentFieldsFieldsDocumentsFieldsType) ToPointer() *FieldCreateDocumentFieldsFieldsDocumentsFieldsType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsDocumentsFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldCreateDocumentFieldsFieldsDocumentsFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsDocumentsFieldsType: %v", v)
	}
}

type Fields2 struct {
	Type FieldCreateDocumentFieldsFieldsDocumentsFieldsType `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Fields2) GetType() FieldCreateDocumentFieldsFieldsDocumentsFieldsType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsDocumentsFieldsType("")
	}
	return o.Type
}

func (o *Fields2) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Fields2) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Fields2) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Fields2) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Fields2) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Fields2) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsFieldsType string

const (
	FieldCreateDocumentFieldsFieldsTypeSignature FieldCreateDocumentFieldsFieldsType = "SIGNATURE"
)

func (e FieldCreateDocumentFieldsFieldsType) ToPointer() *FieldCreateDocumentFieldsFieldsType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = FieldCreateDocumentFieldsFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldsType: %v", v)
	}
}

type Fields1 struct {
	Type FieldCreateDocumentFieldsFieldsType `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (o *Fields1) GetType() FieldCreateDocumentFieldsFieldsType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldsType("")
	}
	return o.Type
}

func (o *Fields1) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *Fields1) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *Fields1) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *Fields1) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *Fields1) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *Fields1) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateDocumentFieldsFieldsUnionType string

const (
	FieldCreateDocumentFieldsFieldsUnionTypeFields1  FieldCreateDocumentFieldsFieldsUnionType = "fields_1"
	FieldCreateDocumentFieldsFieldsUnionTypeFields2  FieldCreateDocumentFieldsFieldsUnionType = "fields_2"
	FieldCreateDocumentFieldsFieldsUnionTypeFields3  FieldCreateDocumentFieldsFieldsUnionType = "fields_3"
	FieldCreateDocumentFieldsFieldsUnionTypeFields4  FieldCreateDocumentFieldsFieldsUnionType = "fields_4"
	FieldCreateDocumentFieldsFieldsUnionTypeFields5  FieldCreateDocumentFieldsFieldsUnionType = "fields_5"
	FieldCreateDocumentFieldsFieldsUnionTypeFields6  FieldCreateDocumentFieldsFieldsUnionType = "fields_6"
	FieldCreateDocumentFieldsFieldsUnionTypeFields7  FieldCreateDocumentFieldsFieldsUnionType = "fields_7"
	FieldCreateDocumentFieldsFieldsUnionTypeFields8  FieldCreateDocumentFieldsFieldsUnionType = "fields_8"
	FieldCreateDocumentFieldsFieldsUnionTypeFields9  FieldCreateDocumentFieldsFieldsUnionType = "fields_9"
	FieldCreateDocumentFieldsFieldsUnionTypeFields10 FieldCreateDocumentFieldsFieldsUnionType = "fields_10"
	FieldCreateDocumentFieldsFieldsUnionTypeFields11 FieldCreateDocumentFieldsFieldsUnionType = "fields_11"
)

type FieldCreateDocumentFieldsFields struct {
	Fields1  *Fields1  `queryParam:"inline"`
	Fields2  *Fields2  `queryParam:"inline"`
	Fields3  *Fields3  `queryParam:"inline"`
	Fields4  *Fields4  `queryParam:"inline"`
	Fields5  *Fields5  `queryParam:"inline"`
	Fields6  *Fields6  `queryParam:"inline"`
	Fields7  *Fields7  `queryParam:"inline"`
	Fields8  *Fields8  `queryParam:"inline"`
	Fields9  *Fields9  `queryParam:"inline"`
	Fields10 *Fields10 `queryParam:"inline"`
	Fields11 *Fields11 `queryParam:"inline"`

	Type FieldCreateDocumentFieldsFieldsUnionType
}

func CreateFieldCreateDocumentFieldsFieldsFields1(fields1 Fields1) FieldCreateDocumentFieldsFields {
	typ := FieldCreateDocumentFieldsFieldsUnionTypeFields1

	return FieldCreateDocumentFieldsFields{
		Fields1: &fields1,
		Type:    typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldsFields2(fields2 Fields2) FieldCreateDocumentFieldsFields {
	typ := FieldCreateDocumentFieldsFieldsUnionTypeFields2

	return FieldCreateDocumentFieldsFields{
		Fields2: &fields2,
		Type:    typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldsFields3(fields3 Fields3) FieldCreateDocumentFieldsFields {
	typ := FieldCreateDocumentFieldsFieldsUnionTypeFields3

	return FieldCreateDocumentFieldsFields{
		Fields3: &fields3,
		Type:    typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldsFields4(fields4 Fields4) FieldCreateDocumentFieldsFields {
	typ := FieldCreateDocumentFieldsFieldsUnionTypeFields4

	return FieldCreateDocumentFieldsFields{
		Fields4: &fields4,
		Type:    typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldsFields5(fields5 Fields5) FieldCreateDocumentFieldsFields {
	typ := FieldCreateDocumentFieldsFieldsUnionTypeFields5

	return FieldCreateDocumentFieldsFields{
		Fields5: &fields5,
		Type:    typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldsFields6(fields6 Fields6) FieldCreateDocumentFieldsFields {
	typ := FieldCreateDocumentFieldsFieldsUnionTypeFields6

	return FieldCreateDocumentFieldsFields{
		Fields6: &fields6,
		Type:    typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldsFields7(fields7 Fields7) FieldCreateDocumentFieldsFields {
	typ := FieldCreateDocumentFieldsFieldsUnionTypeFields7

	return FieldCreateDocumentFieldsFields{
		Fields7: &fields7,
		Type:    typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldsFields8(fields8 Fields8) FieldCreateDocumentFieldsFields {
	typ := FieldCreateDocumentFieldsFieldsUnionTypeFields8

	return FieldCreateDocumentFieldsFields{
		Fields8: &fields8,
		Type:    typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldsFields9(fields9 Fields9) FieldCreateDocumentFieldsFields {
	typ := FieldCreateDocumentFieldsFieldsUnionTypeFields9

	return FieldCreateDocumentFieldsFields{
		Fields9: &fields9,
		Type:    typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldsFields10(fields10 Fields10) FieldCreateDocumentFieldsFields {
	typ := FieldCreateDocumentFieldsFieldsUnionTypeFields10

	return FieldCreateDocumentFieldsFields{
		Fields10: &fields10,
		Type:     typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldsFields11(fields11 Fields11) FieldCreateDocumentFieldsFields {
	typ := FieldCreateDocumentFieldsFieldsUnionTypeFields11

	return FieldCreateDocumentFieldsFields{
		Fields11: &fields11,
		Type:     typ,
	}
}

func (u *FieldCreateDocumentFieldsFields) UnmarshalJSON(data []byte) error {

	var fields1 Fields1 = Fields1{}
	if err := utils.UnmarshalJSON(data, &fields1, "", true, true); err == nil {
		u.Fields1 = &fields1
		u.Type = FieldCreateDocumentFieldsFieldsUnionTypeFields1
		return nil
	}

	var fields2 Fields2 = Fields2{}
	if err := utils.UnmarshalJSON(data, &fields2, "", true, true); err == nil {
		u.Fields2 = &fields2
		u.Type = FieldCreateDocumentFieldsFieldsUnionTypeFields2
		return nil
	}

	var fields3 Fields3 = Fields3{}
	if err := utils.UnmarshalJSON(data, &fields3, "", true, true); err == nil {
		u.Fields3 = &fields3
		u.Type = FieldCreateDocumentFieldsFieldsUnionTypeFields3
		return nil
	}

	var fields4 Fields4 = Fields4{}
	if err := utils.UnmarshalJSON(data, &fields4, "", true, true); err == nil {
		u.Fields4 = &fields4
		u.Type = FieldCreateDocumentFieldsFieldsUnionTypeFields4
		return nil
	}

	var fields5 Fields5 = Fields5{}
	if err := utils.UnmarshalJSON(data, &fields5, "", true, true); err == nil {
		u.Fields5 = &fields5
		u.Type = FieldCreateDocumentFieldsFieldsUnionTypeFields5
		return nil
	}

	var fields6 Fields6 = Fields6{}
	if err := utils.UnmarshalJSON(data, &fields6, "", true, true); err == nil {
		u.Fields6 = &fields6
		u.Type = FieldCreateDocumentFieldsFieldsUnionTypeFields6
		return nil
	}

	var fields7 Fields7 = Fields7{}
	if err := utils.UnmarshalJSON(data, &fields7, "", true, true); err == nil {
		u.Fields7 = &fields7
		u.Type = FieldCreateDocumentFieldsFieldsUnionTypeFields7
		return nil
	}

	var fields8 Fields8 = Fields8{}
	if err := utils.UnmarshalJSON(data, &fields8, "", true, true); err == nil {
		u.Fields8 = &fields8
		u.Type = FieldCreateDocumentFieldsFieldsUnionTypeFields8
		return nil
	}

	var fields9 Fields9 = Fields9{}
	if err := utils.UnmarshalJSON(data, &fields9, "", true, true); err == nil {
		u.Fields9 = &fields9
		u.Type = FieldCreateDocumentFieldsFieldsUnionTypeFields9
		return nil
	}

	var fields10 Fields10 = Fields10{}
	if err := utils.UnmarshalJSON(data, &fields10, "", true, true); err == nil {
		u.Fields10 = &fields10
		u.Type = FieldCreateDocumentFieldsFieldsUnionTypeFields10
		return nil
	}

	var fields11 Fields11 = Fields11{}
	if err := utils.UnmarshalJSON(data, &fields11, "", true, true); err == nil {
		u.Fields11 = &fields11
		u.Type = FieldCreateDocumentFieldsFieldsUnionTypeFields11
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldCreateDocumentFieldsFields", string(data))
}

func (u FieldCreateDocumentFieldsFields) MarshalJSON() ([]byte, error) {
	if u.Fields1 != nil {
		return utils.MarshalJSON(u.Fields1, "", true)
	}

	if u.Fields2 != nil {
		return utils.MarshalJSON(u.Fields2, "", true)
	}

	if u.Fields3 != nil {
		return utils.MarshalJSON(u.Fields3, "", true)
	}

	if u.Fields4 != nil {
		return utils.MarshalJSON(u.Fields4, "", true)
	}

	if u.Fields5 != nil {
		return utils.MarshalJSON(u.Fields5, "", true)
	}

	if u.Fields6 != nil {
		return utils.MarshalJSON(u.Fields6, "", true)
	}

	if u.Fields7 != nil {
		return utils.MarshalJSON(u.Fields7, "", true)
	}

	if u.Fields8 != nil {
		return utils.MarshalJSON(u.Fields8, "", true)
	}

	if u.Fields9 != nil {
		return utils.MarshalJSON(u.Fields9, "", true)
	}

	if u.Fields10 != nil {
		return utils.MarshalJSON(u.Fields10, "", true)
	}

	if u.Fields11 != nil {
		return utils.MarshalJSON(u.Fields11, "", true)
	}

	return nil, errors.New("could not marshal union type FieldCreateDocumentFieldsFields: all fields are null")
}

type FieldCreateDocumentFieldsRequestBody struct {
	DocumentID float64                           `json:"documentId"`
	Fields     []FieldCreateDocumentFieldsFields `json:"fields"`
}

func (o *FieldCreateDocumentFieldsRequestBody) GetDocumentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DocumentID
}

func (o *FieldCreateDocumentFieldsRequestBody) GetFields() []FieldCreateDocumentFieldsFields {
	if o == nil {
		return []FieldCreateDocumentFieldsFields{}
	}
	return o.Fields
}

type FieldCreateDocumentFieldsType string

const (
	FieldCreateDocumentFieldsTypeSignature     FieldCreateDocumentFieldsType = "SIGNATURE"
	FieldCreateDocumentFieldsTypeFreeSignature FieldCreateDocumentFieldsType = "FREE_SIGNATURE"
	FieldCreateDocumentFieldsTypeInitials      FieldCreateDocumentFieldsType = "INITIALS"
	FieldCreateDocumentFieldsTypeName          FieldCreateDocumentFieldsType = "NAME"
	FieldCreateDocumentFieldsTypeEmail         FieldCreateDocumentFieldsType = "EMAIL"
	FieldCreateDocumentFieldsTypeDate          FieldCreateDocumentFieldsType = "DATE"
	FieldCreateDocumentFieldsTypeText          FieldCreateDocumentFieldsType = "TEXT"
	FieldCreateDocumentFieldsTypeNumber        FieldCreateDocumentFieldsType = "NUMBER"
	FieldCreateDocumentFieldsTypeRadio         FieldCreateDocumentFieldsType = "RADIO"
	FieldCreateDocumentFieldsTypeCheckbox      FieldCreateDocumentFieldsType = "CHECKBOX"
	FieldCreateDocumentFieldsTypeDropdown      FieldCreateDocumentFieldsType = "DROPDOWN"
)

func (e FieldCreateDocumentFieldsType) ToPointer() *FieldCreateDocumentFieldsType {
	return &e
}
func (e *FieldCreateDocumentFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldCreateDocumentFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsType: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type string

const (
	FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9TypeDropdown FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type = "dropdown"
)

func (e FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type) ToPointer() *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues struct {
	Value string `json:"value"`
}

func (o *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldsFieldMeta9 struct {
	Label        *string                                                                                            `json:"label,omitempty"`
	Placeholder  *string                                                                                            `json:"placeholder,omitempty"`
	Required     *bool                                                                                              `json:"required,omitempty"`
	ReadOnly     *bool                                                                                              `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type `json:"type"`
	Values       []FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues                                  `json:"values,omitempty"`
	DefaultValue *string                                                                                            `json:"defaultValue,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMeta9) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMeta9) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMeta9) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMeta9) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMeta9) GetType() FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMeta9) GetValues() []FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateDocumentFieldsFieldMeta9) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type string

const (
	FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8TypeCheckbox FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type = "checkbox"
)

func (e FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type) ToPointer() *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldsFieldMeta8 struct {
	Label            *string                                                                                            `json:"label,omitempty"`
	Placeholder      *string                                                                                            `json:"placeholder,omitempty"`
	Required         *bool                                                                                              `json:"required,omitempty"`
	ReadOnly         *bool                                                                                              `json:"readOnly,omitempty"`
	Type             FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type `json:"type"`
	Values           []FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues                                          `json:"values,omitempty"`
	ValidationRule   *string                                                                                            `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                                           `json:"validationLength,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMeta8) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMeta8) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMeta8) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMeta8) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMeta8) GetType() FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMeta8) GetValues() []FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateDocumentFieldsFieldMeta8) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldCreateDocumentFieldsFieldMeta8) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType string

const (
	FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsTypeRadio FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType = "radio"
)

func (e FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType) ToPointer() *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMetaValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldCreateDocumentFieldsFieldMetaValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldsFieldMetaValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateDocumentFieldsFieldMetaValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateDocumentFieldsFieldMeta7 struct {
	Label       *string                                                                                           `json:"label,omitempty"`
	Placeholder *string                                                                                           `json:"placeholder,omitempty"`
	Required    *bool                                                                                             `json:"required,omitempty"`
	ReadOnly    *bool                                                                                             `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType `json:"type"`
	Values      []FieldCreateDocumentFieldsFieldMetaValues                                                        `json:"values,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMeta7) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMeta7) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMeta7) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMeta7) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMeta7) GetType() FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMeta7) GetValues() []FieldCreateDocumentFieldsFieldMetaValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType string

const (
	FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyTypeNumber FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType = "number"
)

func (e FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType) ToPointer() *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMeta6 struct {
	Label        *string                                                                                     `json:"label,omitempty"`
	Placeholder  *string                                                                                     `json:"placeholder,omitempty"`
	Required     *bool                                                                                       `json:"required,omitempty"`
	ReadOnly     *bool                                                                                       `json:"readOnly,omitempty"`
	Type         FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType `json:"type"`
	NumberFormat *string                                                                                     `json:"numberFormat,omitempty"`
	Value        *string                                                                                     `json:"value,omitempty"`
	MinValue     *float64                                                                                    `json:"minValue,omitempty"`
	MaxValue     *float64                                                                                    `json:"maxValue,omitempty"`
	FontSize     *float64                                                                                    `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMeta6) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMeta6) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMeta6) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMeta6) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMeta6) GetType() FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMeta6) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldCreateDocumentFieldsFieldMeta6) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldCreateDocumentFieldsFieldMeta6) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldCreateDocumentFieldsFieldMeta6) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldCreateDocumentFieldsFieldMeta6) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType string

const (
	FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONTypeText FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType = "text"
)

func (e FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType) ToPointer() *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMeta5 struct {
	Label          *string                                                                         `json:"label,omitempty"`
	Placeholder    *string                                                                         `json:"placeholder,omitempty"`
	Required       *bool                                                                           `json:"required,omitempty"`
	ReadOnly       *bool                                                                           `json:"readOnly,omitempty"`
	Type           FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType `json:"type"`
	Text           *string                                                                         `json:"text,omitempty"`
	CharacterLimit *float64                                                                        `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                        `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMeta5) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMeta5) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMeta5) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMeta5) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMeta5) GetType() FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMeta5) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldCreateDocumentFieldsFieldMeta5) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldCreateDocumentFieldsFieldMeta5) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type string

const (
	FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200TypeDate FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type = "date"
)

func (e FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type) ToPointer() *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMeta4 struct {
	Label       *string                                                          `json:"label,omitempty"`
	Placeholder *string                                                          `json:"placeholder,omitempty"`
	Required    *bool                                                            `json:"required,omitempty"`
	ReadOnly    *bool                                                            `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type `json:"type"`
	FontSize    *float64                                                         `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMeta4) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMeta4) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMeta4) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMeta4) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMeta4) GetType() FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMeta4) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType string

const (
	FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseTypeEmail FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType = "email"
)

func (e FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType) ToPointer() *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMeta3 struct {
	Label       *string                                                       `json:"label,omitempty"`
	Placeholder *string                                                       `json:"placeholder,omitempty"`
	Required    *bool                                                         `json:"required,omitempty"`
	ReadOnly    *bool                                                         `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType `json:"type"`
	FontSize    *float64                                                      `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMeta3) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMeta3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMeta3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMeta3) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMeta3) GetType() FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMeta3) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType string

const (
	FieldCreateDocumentFieldsFieldMetaDocumentsFieldsTypeName FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType = "name"
)

func (e FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType) ToPointer() *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMeta2 struct {
	Label       *string                                               `json:"label,omitempty"`
	Placeholder *string                                               `json:"placeholder,omitempty"`
	Required    *bool                                                 `json:"required,omitempty"`
	ReadOnly    *bool                                                 `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType `json:"type"`
	FontSize    *float64                                              `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMeta2) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMeta2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMeta2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMeta2) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMeta2) GetType() FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMeta2) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateDocumentFieldsFieldMetaType string

const (
	FieldCreateDocumentFieldsFieldMetaTypeInitials FieldCreateDocumentFieldsFieldMetaType = "initials"
)

func (e FieldCreateDocumentFieldsFieldMetaType) ToPointer() *FieldCreateDocumentFieldsFieldMetaType {
	return &e
}
func (e *FieldCreateDocumentFieldsFieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateDocumentFieldsFieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateDocumentFieldsFieldMetaType: %v", v)
	}
}

type FieldCreateDocumentFieldsFieldMeta1 struct {
	Label       *string                                `json:"label,omitempty"`
	Placeholder *string                                `json:"placeholder,omitempty"`
	Required    *bool                                  `json:"required,omitempty"`
	ReadOnly    *bool                                  `json:"readOnly,omitempty"`
	Type        FieldCreateDocumentFieldsFieldMetaType `json:"type"`
	FontSize    *float64                               `json:"fontSize,omitempty"`
}

func (o *FieldCreateDocumentFieldsFieldMeta1) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateDocumentFieldsFieldMeta1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateDocumentFieldsFieldMeta1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateDocumentFieldsFieldMeta1) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateDocumentFieldsFieldMeta1) GetType() FieldCreateDocumentFieldsFieldMetaType {
	if o == nil {
		return FieldCreateDocumentFieldsFieldMetaType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsFieldMeta1) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldCreateDocumentFieldsFieldMetaUnionType string

const (
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta1 FieldCreateDocumentFieldsFieldMetaUnionType = "field-createDocumentFields_fieldMeta_1"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta2 FieldCreateDocumentFieldsFieldMetaUnionType = "field-createDocumentFields_fieldMeta_2"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta3 FieldCreateDocumentFieldsFieldMetaUnionType = "field-createDocumentFields_fieldMeta_3"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta4 FieldCreateDocumentFieldsFieldMetaUnionType = "field-createDocumentFields_fieldMeta_4"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta5 FieldCreateDocumentFieldsFieldMetaUnionType = "field-createDocumentFields_fieldMeta_5"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta6 FieldCreateDocumentFieldsFieldMetaUnionType = "field-createDocumentFields_fieldMeta_6"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta7 FieldCreateDocumentFieldsFieldMetaUnionType = "field-createDocumentFields_fieldMeta_7"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta8 FieldCreateDocumentFieldsFieldMetaUnionType = "field-createDocumentFields_fieldMeta_8"
	FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta9 FieldCreateDocumentFieldsFieldMetaUnionType = "field-createDocumentFields_fieldMeta_9"
)

type FieldCreateDocumentFieldsFieldMeta struct {
	FieldCreateDocumentFieldsFieldMeta1 *FieldCreateDocumentFieldsFieldMeta1 `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldMeta2 *FieldCreateDocumentFieldsFieldMeta2 `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldMeta3 *FieldCreateDocumentFieldsFieldMeta3 `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldMeta4 *FieldCreateDocumentFieldsFieldMeta4 `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldMeta5 *FieldCreateDocumentFieldsFieldMeta5 `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldMeta6 *FieldCreateDocumentFieldsFieldMeta6 `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldMeta7 *FieldCreateDocumentFieldsFieldMeta7 `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldMeta8 *FieldCreateDocumentFieldsFieldMeta8 `queryParam:"inline"`
	FieldCreateDocumentFieldsFieldMeta9 *FieldCreateDocumentFieldsFieldMeta9 `queryParam:"inline"`

	Type FieldCreateDocumentFieldsFieldMetaUnionType
}

func CreateFieldCreateDocumentFieldsFieldMetaFieldCreateDocumentFieldsFieldMeta1(fieldCreateDocumentFieldsFieldMeta1 FieldCreateDocumentFieldsFieldMeta1) FieldCreateDocumentFieldsFieldMeta {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta1

	return FieldCreateDocumentFieldsFieldMeta{
		FieldCreateDocumentFieldsFieldMeta1: &fieldCreateDocumentFieldsFieldMeta1,
		Type:                                typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaFieldCreateDocumentFieldsFieldMeta2(fieldCreateDocumentFieldsFieldMeta2 FieldCreateDocumentFieldsFieldMeta2) FieldCreateDocumentFieldsFieldMeta {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta2

	return FieldCreateDocumentFieldsFieldMeta{
		FieldCreateDocumentFieldsFieldMeta2: &fieldCreateDocumentFieldsFieldMeta2,
		Type:                                typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaFieldCreateDocumentFieldsFieldMeta3(fieldCreateDocumentFieldsFieldMeta3 FieldCreateDocumentFieldsFieldMeta3) FieldCreateDocumentFieldsFieldMeta {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta3

	return FieldCreateDocumentFieldsFieldMeta{
		FieldCreateDocumentFieldsFieldMeta3: &fieldCreateDocumentFieldsFieldMeta3,
		Type:                                typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaFieldCreateDocumentFieldsFieldMeta4(fieldCreateDocumentFieldsFieldMeta4 FieldCreateDocumentFieldsFieldMeta4) FieldCreateDocumentFieldsFieldMeta {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta4

	return FieldCreateDocumentFieldsFieldMeta{
		FieldCreateDocumentFieldsFieldMeta4: &fieldCreateDocumentFieldsFieldMeta4,
		Type:                                typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaFieldCreateDocumentFieldsFieldMeta5(fieldCreateDocumentFieldsFieldMeta5 FieldCreateDocumentFieldsFieldMeta5) FieldCreateDocumentFieldsFieldMeta {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta5

	return FieldCreateDocumentFieldsFieldMeta{
		FieldCreateDocumentFieldsFieldMeta5: &fieldCreateDocumentFieldsFieldMeta5,
		Type:                                typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaFieldCreateDocumentFieldsFieldMeta6(fieldCreateDocumentFieldsFieldMeta6 FieldCreateDocumentFieldsFieldMeta6) FieldCreateDocumentFieldsFieldMeta {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta6

	return FieldCreateDocumentFieldsFieldMeta{
		FieldCreateDocumentFieldsFieldMeta6: &fieldCreateDocumentFieldsFieldMeta6,
		Type:                                typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaFieldCreateDocumentFieldsFieldMeta7(fieldCreateDocumentFieldsFieldMeta7 FieldCreateDocumentFieldsFieldMeta7) FieldCreateDocumentFieldsFieldMeta {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta7

	return FieldCreateDocumentFieldsFieldMeta{
		FieldCreateDocumentFieldsFieldMeta7: &fieldCreateDocumentFieldsFieldMeta7,
		Type:                                typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaFieldCreateDocumentFieldsFieldMeta8(fieldCreateDocumentFieldsFieldMeta8 FieldCreateDocumentFieldsFieldMeta8) FieldCreateDocumentFieldsFieldMeta {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta8

	return FieldCreateDocumentFieldsFieldMeta{
		FieldCreateDocumentFieldsFieldMeta8: &fieldCreateDocumentFieldsFieldMeta8,
		Type:                                typ,
	}
}

func CreateFieldCreateDocumentFieldsFieldMetaFieldCreateDocumentFieldsFieldMeta9(fieldCreateDocumentFieldsFieldMeta9 FieldCreateDocumentFieldsFieldMeta9) FieldCreateDocumentFieldsFieldMeta {
	typ := FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta9

	return FieldCreateDocumentFieldsFieldMeta{
		FieldCreateDocumentFieldsFieldMeta9: &fieldCreateDocumentFieldsFieldMeta9,
		Type:                                typ,
	}
}

func (u *FieldCreateDocumentFieldsFieldMeta) UnmarshalJSON(data []byte) error {

	var fieldCreateDocumentFieldsFieldMeta1 FieldCreateDocumentFieldsFieldMeta1 = FieldCreateDocumentFieldsFieldMeta1{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMeta1, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMeta1 = &fieldCreateDocumentFieldsFieldMeta1
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta1
		return nil
	}

	var fieldCreateDocumentFieldsFieldMeta2 FieldCreateDocumentFieldsFieldMeta2 = FieldCreateDocumentFieldsFieldMeta2{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMeta2, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMeta2 = &fieldCreateDocumentFieldsFieldMeta2
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta2
		return nil
	}

	var fieldCreateDocumentFieldsFieldMeta3 FieldCreateDocumentFieldsFieldMeta3 = FieldCreateDocumentFieldsFieldMeta3{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMeta3, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMeta3 = &fieldCreateDocumentFieldsFieldMeta3
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta3
		return nil
	}

	var fieldCreateDocumentFieldsFieldMeta4 FieldCreateDocumentFieldsFieldMeta4 = FieldCreateDocumentFieldsFieldMeta4{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMeta4, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMeta4 = &fieldCreateDocumentFieldsFieldMeta4
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta4
		return nil
	}

	var fieldCreateDocumentFieldsFieldMeta7 FieldCreateDocumentFieldsFieldMeta7 = FieldCreateDocumentFieldsFieldMeta7{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMeta7, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMeta7 = &fieldCreateDocumentFieldsFieldMeta7
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta7
		return nil
	}

	var fieldCreateDocumentFieldsFieldMeta9 FieldCreateDocumentFieldsFieldMeta9 = FieldCreateDocumentFieldsFieldMeta9{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMeta9, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMeta9 = &fieldCreateDocumentFieldsFieldMeta9
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta9
		return nil
	}

	var fieldCreateDocumentFieldsFieldMeta5 FieldCreateDocumentFieldsFieldMeta5 = FieldCreateDocumentFieldsFieldMeta5{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMeta5, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMeta5 = &fieldCreateDocumentFieldsFieldMeta5
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta5
		return nil
	}

	var fieldCreateDocumentFieldsFieldMeta8 FieldCreateDocumentFieldsFieldMeta8 = FieldCreateDocumentFieldsFieldMeta8{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMeta8, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMeta8 = &fieldCreateDocumentFieldsFieldMeta8
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta8
		return nil
	}

	var fieldCreateDocumentFieldsFieldMeta6 FieldCreateDocumentFieldsFieldMeta6 = FieldCreateDocumentFieldsFieldMeta6{}
	if err := utils.UnmarshalJSON(data, &fieldCreateDocumentFieldsFieldMeta6, "", true, true); err == nil {
		u.FieldCreateDocumentFieldsFieldMeta6 = &fieldCreateDocumentFieldsFieldMeta6
		u.Type = FieldCreateDocumentFieldsFieldMetaUnionTypeFieldCreateDocumentFieldsFieldMeta6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldCreateDocumentFieldsFieldMeta", string(data))
}

func (u FieldCreateDocumentFieldsFieldMeta) MarshalJSON() ([]byte, error) {
	if u.FieldCreateDocumentFieldsFieldMeta1 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMeta1, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMeta2 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMeta2, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMeta3 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMeta3, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMeta4 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMeta4, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMeta5 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMeta5, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMeta6 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMeta6, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMeta7 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMeta7, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMeta8 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMeta8, "", true)
	}

	if u.FieldCreateDocumentFieldsFieldMeta9 != nil {
		return utils.MarshalJSON(u.FieldCreateDocumentFieldsFieldMeta9, "", true)
	}

	return nil, errors.New("could not marshal union type FieldCreateDocumentFieldsFieldMeta: all fields are null")
}

type FieldCreateDocumentFieldsDocumentsFieldsFields struct {
	Type        FieldCreateDocumentFieldsType `json:"type"`
	ID          int64                         `json:"id"`
	SecondaryID string                        `json:"secondaryId"`
	DocumentID  *int64                        `json:"documentId"`
	TemplateID  *int64                        `json:"templateId"`
	RecipientID int64                         `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                             `json:"page"`
	PositionX  any                                 `json:"positionX,omitempty"`
	PositionY  any                                 `json:"positionY,omitempty"`
	Width      any                                 `json:"width,omitempty"`
	Height     any                                 `json:"height,omitempty"`
	CustomText string                              `json:"customText"`
	Inserted   bool                                `json:"inserted"`
	FieldMeta  *FieldCreateDocumentFieldsFieldMeta `json:"fieldMeta"`
}

func (o *FieldCreateDocumentFieldsDocumentsFieldsFields) GetType() FieldCreateDocumentFieldsType {
	if o == nil {
		return FieldCreateDocumentFieldsType("")
	}
	return o.Type
}

func (o *FieldCreateDocumentFieldsDocumentsFieldsFields) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *FieldCreateDocumentFieldsDocumentsFieldsFields) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *FieldCreateDocumentFieldsDocumentsFieldsFields) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *FieldCreateDocumentFieldsDocumentsFieldsFields) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *FieldCreateDocumentFieldsDocumentsFieldsFields) GetRecipientID() int64 {
	if o == nil {
		return 0
	}
	return o.RecipientID
}

func (o *FieldCreateDocumentFieldsDocumentsFieldsFields) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *FieldCreateDocumentFieldsDocumentsFieldsFields) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *FieldCreateDocumentFieldsDocumentsFieldsFields) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *FieldCreateDocumentFieldsDocumentsFieldsFields) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldCreateDocumentFieldsDocumentsFieldsFields) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *FieldCreateDocumentFieldsDocumentsFieldsFields) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *FieldCreateDocumentFieldsDocumentsFieldsFields) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *FieldCreateDocumentFieldsDocumentsFieldsFields) GetFieldMeta() *FieldCreateDocumentFieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

// FieldCreateDocumentFieldsResponseBody - Successful response
type FieldCreateDocumentFieldsResponseBody struct {
	Fields []FieldCreateDocumentFieldsDocumentsFieldsFields `json:"fields"`
}

func (o *FieldCreateDocumentFieldsResponseBody) GetFields() []FieldCreateDocumentFieldsDocumentsFieldsFields {
	if o == nil {
		return []FieldCreateDocumentFieldsDocumentsFieldsFields{}
	}
	return o.Fields
}

type FieldCreateDocumentFieldsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldCreateDocumentFieldsResponseBody
}

func (o *FieldCreateDocumentFieldsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FieldCreateDocumentFieldsResponse) GetObject() *FieldCreateDocumentFieldsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
