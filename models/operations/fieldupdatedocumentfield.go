// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldUpdateDocumentFieldTypeDropdownRequest1 string

const (
	FieldUpdateDocumentFieldTypeDropdownRequest1Dropdown FieldUpdateDocumentFieldTypeDropdownRequest1 = "DROPDOWN"
)

func (e FieldUpdateDocumentFieldTypeDropdownRequest1) ToPointer() *FieldUpdateDocumentFieldTypeDropdownRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeDropdownRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = FieldUpdateDocumentFieldTypeDropdownRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeDropdownRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldTypeDropdownRequest2 string

const (
	FieldUpdateDocumentFieldTypeDropdownRequest2Dropdown FieldUpdateDocumentFieldTypeDropdownRequest2 = "dropdown"
)

func (e FieldUpdateDocumentFieldTypeDropdownRequest2) ToPointer() *FieldUpdateDocumentFieldTypeDropdownRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeDropdownRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldUpdateDocumentFieldTypeDropdownRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeDropdownRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldValueDropdown struct {
	Value string `json:"value"`
}

func (f FieldUpdateDocumentFieldValueDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldValueDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldValueDropdown) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldFieldMetaDropdownRequest struct {
	Label        *string                                      `json:"label,omitempty"`
	Placeholder  *string                                      `json:"placeholder,omitempty"`
	Required     *bool                                        `json:"required,omitempty"`
	ReadOnly     *bool                                        `json:"readOnly,omitempty"`
	Type         FieldUpdateDocumentFieldTypeDropdownRequest2 `json:"type"`
	Values       []FieldUpdateDocumentFieldValueDropdown      `json:"values,omitempty"`
	DefaultValue *string                                      `json:"defaultValue,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaDropdownRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaDropdownRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaDropdownRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaDropdownRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaDropdownRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaDropdownRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaDropdownRequest) GetType() FieldUpdateDocumentFieldTypeDropdownRequest2 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeDropdownRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaDropdownRequest) GetValues() []FieldUpdateDocumentFieldValueDropdown {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateDocumentFieldFieldMetaDropdownRequest) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldUpdateDocumentFieldFieldDropdown struct {
	Type      FieldUpdateDocumentFieldTypeDropdownRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldMetaDropdownRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldDropdown) GetType() FieldUpdateDocumentFieldTypeDropdownRequest1 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeDropdownRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldDropdown) GetFieldMeta() *FieldUpdateDocumentFieldFieldMetaDropdownRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldFieldDropdown) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldFieldDropdown) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldFieldDropdown) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldFieldDropdown) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldFieldDropdown) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldFieldDropdown) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldTypeCheckboxRequest1 string

const (
	FieldUpdateDocumentFieldTypeCheckboxRequest1Checkbox FieldUpdateDocumentFieldTypeCheckboxRequest1 = "CHECKBOX"
)

func (e FieldUpdateDocumentFieldTypeCheckboxRequest1) ToPointer() *FieldUpdateDocumentFieldTypeCheckboxRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeCheckboxRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = FieldUpdateDocumentFieldTypeCheckboxRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeCheckboxRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldTypeCheckboxRequest2 string

const (
	FieldUpdateDocumentFieldTypeCheckboxRequest2Checkbox FieldUpdateDocumentFieldTypeCheckboxRequest2 = "checkbox"
)

func (e FieldUpdateDocumentFieldTypeCheckboxRequest2) ToPointer() *FieldUpdateDocumentFieldTypeCheckboxRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeCheckboxRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldUpdateDocumentFieldTypeCheckboxRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeCheckboxRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldValueCheckbox struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldUpdateDocumentFieldValueCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldValueCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldValueCheckbox) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldValueCheckbox) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateDocumentFieldValueCheckbox) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldFieldMetaCheckboxRequest struct {
	Label            *string                                      `json:"label,omitempty"`
	Placeholder      *string                                      `json:"placeholder,omitempty"`
	Required         *bool                                        `json:"required,omitempty"`
	ReadOnly         *bool                                        `json:"readOnly,omitempty"`
	Type             FieldUpdateDocumentFieldTypeCheckboxRequest2 `json:"type"`
	Values           []FieldUpdateDocumentFieldValueCheckbox      `json:"values,omitempty"`
	ValidationRule   *string                                      `json:"validationRule,omitempty"`
	ValidationLength *float64                                     `json:"validationLength,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaCheckboxRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaCheckboxRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaCheckboxRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaCheckboxRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaCheckboxRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaCheckboxRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaCheckboxRequest) GetType() FieldUpdateDocumentFieldTypeCheckboxRequest2 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeCheckboxRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaCheckboxRequest) GetValues() []FieldUpdateDocumentFieldValueCheckbox {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateDocumentFieldFieldMetaCheckboxRequest) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldUpdateDocumentFieldFieldMetaCheckboxRequest) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldUpdateDocumentFieldFieldCheckbox struct {
	Type      FieldUpdateDocumentFieldTypeCheckboxRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldMetaCheckboxRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldCheckbox) GetType() FieldUpdateDocumentFieldTypeCheckboxRequest1 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeCheckboxRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldCheckbox) GetFieldMeta() *FieldUpdateDocumentFieldFieldMetaCheckboxRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldFieldCheckbox) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldFieldCheckbox) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldFieldCheckbox) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldFieldCheckbox) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldFieldCheckbox) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldFieldCheckbox) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldTypeRadioRequest1 string

const (
	FieldUpdateDocumentFieldTypeRadioRequest1Radio FieldUpdateDocumentFieldTypeRadioRequest1 = "RADIO"
)

func (e FieldUpdateDocumentFieldTypeRadioRequest1) ToPointer() *FieldUpdateDocumentFieldTypeRadioRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeRadioRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = FieldUpdateDocumentFieldTypeRadioRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeRadioRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldTypeRadioRequest2 string

const (
	FieldUpdateDocumentFieldTypeRadioRequest2Radio FieldUpdateDocumentFieldTypeRadioRequest2 = "radio"
)

func (e FieldUpdateDocumentFieldTypeRadioRequest2) ToPointer() *FieldUpdateDocumentFieldTypeRadioRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeRadioRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldUpdateDocumentFieldTypeRadioRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeRadioRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldValueRadio struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldUpdateDocumentFieldValueRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldValueRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldValueRadio) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldValueRadio) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateDocumentFieldValueRadio) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldFieldMetaRadioRequest struct {
	Label       *string                                   `json:"label,omitempty"`
	Placeholder *string                                   `json:"placeholder,omitempty"`
	Required    *bool                                     `json:"required,omitempty"`
	ReadOnly    *bool                                     `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldTypeRadioRequest2 `json:"type"`
	Values      []FieldUpdateDocumentFieldValueRadio      `json:"values,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaRadioRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaRadioRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaRadioRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaRadioRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaRadioRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaRadioRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaRadioRequest) GetType() FieldUpdateDocumentFieldTypeRadioRequest2 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeRadioRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaRadioRequest) GetValues() []FieldUpdateDocumentFieldValueRadio {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldUpdateDocumentFieldFieldRadio struct {
	Type      FieldUpdateDocumentFieldTypeRadioRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldMetaRadioRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldRadio) GetType() FieldUpdateDocumentFieldTypeRadioRequest1 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeRadioRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldRadio) GetFieldMeta() *FieldUpdateDocumentFieldFieldMetaRadioRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldFieldRadio) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldFieldRadio) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldFieldRadio) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldFieldRadio) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldFieldRadio) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldFieldRadio) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldTypeNumberRequest1 string

const (
	FieldUpdateDocumentFieldTypeNumberRequest1Number FieldUpdateDocumentFieldTypeNumberRequest1 = "NUMBER"
)

func (e FieldUpdateDocumentFieldTypeNumberRequest1) ToPointer() *FieldUpdateDocumentFieldTypeNumberRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeNumberRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = FieldUpdateDocumentFieldTypeNumberRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeNumberRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldTypeNumberRequest2 string

const (
	FieldUpdateDocumentFieldTypeNumberRequest2Number FieldUpdateDocumentFieldTypeNumberRequest2 = "number"
)

func (e FieldUpdateDocumentFieldTypeNumberRequest2) ToPointer() *FieldUpdateDocumentFieldTypeNumberRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeNumberRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldUpdateDocumentFieldTypeNumberRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeNumberRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldTextAlignNumber string

const (
	FieldUpdateDocumentFieldTextAlignNumberLeft   FieldUpdateDocumentFieldTextAlignNumber = "left"
	FieldUpdateDocumentFieldTextAlignNumberCenter FieldUpdateDocumentFieldTextAlignNumber = "center"
	FieldUpdateDocumentFieldTextAlignNumberRight  FieldUpdateDocumentFieldTextAlignNumber = "right"
)

func (e FieldUpdateDocumentFieldTextAlignNumber) ToPointer() *FieldUpdateDocumentFieldTextAlignNumber {
	return &e
}
func (e *FieldUpdateDocumentFieldTextAlignNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldTextAlignNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTextAlignNumber: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMetaNumberRequest struct {
	Label        *string                                    `json:"label,omitempty"`
	Placeholder  *string                                    `json:"placeholder,omitempty"`
	Required     *bool                                      `json:"required,omitempty"`
	ReadOnly     *bool                                      `json:"readOnly,omitempty"`
	Type         FieldUpdateDocumentFieldTypeNumberRequest2 `json:"type"`
	NumberFormat *string                                    `json:"numberFormat,omitempty"`
	Value        *string                                    `json:"value,omitempty"`
	MinValue     *float64                                   `json:"minValue,omitempty"`
	MaxValue     *float64                                   `json:"maxValue,omitempty"`
	FontSize     *float64                                   `json:"fontSize,omitempty"`
	TextAlign    *FieldUpdateDocumentFieldTextAlignNumber   `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaNumberRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaNumberRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberRequest) GetType() FieldUpdateDocumentFieldTypeNumberRequest2 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeNumberRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberRequest) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberRequest) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberRequest) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberRequest) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberRequest) GetTextAlign() *FieldUpdateDocumentFieldTextAlignNumber {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateDocumentFieldFieldNumber struct {
	Type      FieldUpdateDocumentFieldTypeNumberRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldMetaNumberRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldNumber) GetType() FieldUpdateDocumentFieldTypeNumberRequest1 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeNumberRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldNumber) GetFieldMeta() *FieldUpdateDocumentFieldFieldMetaNumberRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldFieldNumber) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldFieldNumber) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldFieldNumber) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldFieldNumber) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldFieldNumber) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldFieldNumber) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldTypeTextRequest1 string

const (
	FieldUpdateDocumentFieldTypeTextRequest1Text FieldUpdateDocumentFieldTypeTextRequest1 = "TEXT"
)

func (e FieldUpdateDocumentFieldTypeTextRequest1) ToPointer() *FieldUpdateDocumentFieldTypeTextRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeTextRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = FieldUpdateDocumentFieldTypeTextRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeTextRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldTypeTextRequest2 string

const (
	FieldUpdateDocumentFieldTypeTextRequest2Text FieldUpdateDocumentFieldTypeTextRequest2 = "text"
)

func (e FieldUpdateDocumentFieldTypeTextRequest2) ToPointer() *FieldUpdateDocumentFieldTypeTextRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeTextRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldUpdateDocumentFieldTypeTextRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeTextRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldTextAlignText string

const (
	FieldUpdateDocumentFieldTextAlignTextLeft   FieldUpdateDocumentFieldTextAlignText = "left"
	FieldUpdateDocumentFieldTextAlignTextCenter FieldUpdateDocumentFieldTextAlignText = "center"
	FieldUpdateDocumentFieldTextAlignTextRight  FieldUpdateDocumentFieldTextAlignText = "right"
)

func (e FieldUpdateDocumentFieldTextAlignText) ToPointer() *FieldUpdateDocumentFieldTextAlignText {
	return &e
}
func (e *FieldUpdateDocumentFieldTextAlignText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldTextAlignText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTextAlignText: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMetaTextRequest struct {
	Label          *string                                  `json:"label,omitempty"`
	Placeholder    *string                                  `json:"placeholder,omitempty"`
	Required       *bool                                    `json:"required,omitempty"`
	ReadOnly       *bool                                    `json:"readOnly,omitempty"`
	Type           FieldUpdateDocumentFieldTypeTextRequest2 `json:"type"`
	Text           *string                                  `json:"text,omitempty"`
	CharacterLimit *float64                                 `json:"characterLimit,omitempty"`
	FontSize       *float64                                 `json:"fontSize,omitempty"`
	TextAlign      *FieldUpdateDocumentFieldTextAlignText   `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaTextRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaTextRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaTextRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaTextRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaTextRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaTextRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaTextRequest) GetType() FieldUpdateDocumentFieldTypeTextRequest2 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeTextRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaTextRequest) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldUpdateDocumentFieldFieldMetaTextRequest) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldUpdateDocumentFieldFieldMetaTextRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateDocumentFieldFieldMetaTextRequest) GetTextAlign() *FieldUpdateDocumentFieldTextAlignText {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateDocumentFieldFieldText struct {
	Type      FieldUpdateDocumentFieldTypeTextRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldMetaTextRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldText) GetType() FieldUpdateDocumentFieldTypeTextRequest1 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeTextRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldText) GetFieldMeta() *FieldUpdateDocumentFieldFieldMetaTextRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldFieldText) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldFieldText) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldFieldText) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldFieldText) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldFieldText) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldFieldText) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldTypeDateRequest1 string

const (
	FieldUpdateDocumentFieldTypeDateRequest1Date FieldUpdateDocumentFieldTypeDateRequest1 = "DATE"
)

func (e FieldUpdateDocumentFieldTypeDateRequest1) ToPointer() *FieldUpdateDocumentFieldTypeDateRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeDateRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = FieldUpdateDocumentFieldTypeDateRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeDateRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldTypeDateRequest2 string

const (
	FieldUpdateDocumentFieldTypeDateRequest2Date FieldUpdateDocumentFieldTypeDateRequest2 = "date"
)

func (e FieldUpdateDocumentFieldTypeDateRequest2) ToPointer() *FieldUpdateDocumentFieldTypeDateRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeDateRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldUpdateDocumentFieldTypeDateRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeDateRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldTextAlignDate string

const (
	FieldUpdateDocumentFieldTextAlignDateLeft   FieldUpdateDocumentFieldTextAlignDate = "left"
	FieldUpdateDocumentFieldTextAlignDateCenter FieldUpdateDocumentFieldTextAlignDate = "center"
	FieldUpdateDocumentFieldTextAlignDateRight  FieldUpdateDocumentFieldTextAlignDate = "right"
)

func (e FieldUpdateDocumentFieldTextAlignDate) ToPointer() *FieldUpdateDocumentFieldTextAlignDate {
	return &e
}
func (e *FieldUpdateDocumentFieldTextAlignDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldTextAlignDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTextAlignDate: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMetaDateRequest struct {
	Label       *string                                  `json:"label,omitempty"`
	Placeholder *string                                  `json:"placeholder,omitempty"`
	Required    *bool                                    `json:"required,omitempty"`
	ReadOnly    *bool                                    `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldTypeDateRequest2 `json:"type"`
	FontSize    *float64                                 `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateDocumentFieldTextAlignDate   `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaDateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaDateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaDateRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaDateRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaDateRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaDateRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaDateRequest) GetType() FieldUpdateDocumentFieldTypeDateRequest2 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeDateRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaDateRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateDocumentFieldFieldMetaDateRequest) GetTextAlign() *FieldUpdateDocumentFieldTextAlignDate {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateDocumentFieldFieldDate struct {
	Type      FieldUpdateDocumentFieldTypeDateRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldMetaDateRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldDate) GetType() FieldUpdateDocumentFieldTypeDateRequest1 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeDateRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldDate) GetFieldMeta() *FieldUpdateDocumentFieldFieldMetaDateRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldFieldDate) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldFieldDate) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldFieldDate) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldFieldDate) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldFieldDate) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldFieldDate) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldTypeEmailRequest1 string

const (
	FieldUpdateDocumentFieldTypeEmailRequest1Email FieldUpdateDocumentFieldTypeEmailRequest1 = "EMAIL"
)

func (e FieldUpdateDocumentFieldTypeEmailRequest1) ToPointer() *FieldUpdateDocumentFieldTypeEmailRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeEmailRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = FieldUpdateDocumentFieldTypeEmailRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeEmailRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldTypeEmailRequest2 string

const (
	FieldUpdateDocumentFieldTypeEmailRequest2Email FieldUpdateDocumentFieldTypeEmailRequest2 = "email"
)

func (e FieldUpdateDocumentFieldTypeEmailRequest2) ToPointer() *FieldUpdateDocumentFieldTypeEmailRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeEmailRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldUpdateDocumentFieldTypeEmailRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeEmailRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldTextAlignEmail string

const (
	FieldUpdateDocumentFieldTextAlignEmailLeft   FieldUpdateDocumentFieldTextAlignEmail = "left"
	FieldUpdateDocumentFieldTextAlignEmailCenter FieldUpdateDocumentFieldTextAlignEmail = "center"
	FieldUpdateDocumentFieldTextAlignEmailRight  FieldUpdateDocumentFieldTextAlignEmail = "right"
)

func (e FieldUpdateDocumentFieldTextAlignEmail) ToPointer() *FieldUpdateDocumentFieldTextAlignEmail {
	return &e
}
func (e *FieldUpdateDocumentFieldTextAlignEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldTextAlignEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTextAlignEmail: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMetaEmailRequest struct {
	Label       *string                                   `json:"label,omitempty"`
	Placeholder *string                                   `json:"placeholder,omitempty"`
	Required    *bool                                     `json:"required,omitempty"`
	ReadOnly    *bool                                     `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldTypeEmailRequest2 `json:"type"`
	FontSize    *float64                                  `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateDocumentFieldTextAlignEmail   `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaEmailRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaEmailRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaEmailRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaEmailRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaEmailRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaEmailRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaEmailRequest) GetType() FieldUpdateDocumentFieldTypeEmailRequest2 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeEmailRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaEmailRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateDocumentFieldFieldMetaEmailRequest) GetTextAlign() *FieldUpdateDocumentFieldTextAlignEmail {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateDocumentFieldFieldEmail struct {
	Type      FieldUpdateDocumentFieldTypeEmailRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldMetaEmailRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldEmail) GetType() FieldUpdateDocumentFieldTypeEmailRequest1 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeEmailRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldEmail) GetFieldMeta() *FieldUpdateDocumentFieldFieldMetaEmailRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldFieldEmail) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldFieldEmail) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldFieldEmail) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldFieldEmail) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldFieldEmail) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldFieldEmail) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldTypeNameRequest1 string

const (
	FieldUpdateDocumentFieldTypeNameRequest1Name FieldUpdateDocumentFieldTypeNameRequest1 = "NAME"
)

func (e FieldUpdateDocumentFieldTypeNameRequest1) ToPointer() *FieldUpdateDocumentFieldTypeNameRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeNameRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = FieldUpdateDocumentFieldTypeNameRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeNameRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldTypeNameRequest2 string

const (
	FieldUpdateDocumentFieldTypeNameRequest2Name FieldUpdateDocumentFieldTypeNameRequest2 = "name"
)

func (e FieldUpdateDocumentFieldTypeNameRequest2) ToPointer() *FieldUpdateDocumentFieldTypeNameRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeNameRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldUpdateDocumentFieldTypeNameRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeNameRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldTextAlignName string

const (
	FieldUpdateDocumentFieldTextAlignNameLeft   FieldUpdateDocumentFieldTextAlignName = "left"
	FieldUpdateDocumentFieldTextAlignNameCenter FieldUpdateDocumentFieldTextAlignName = "center"
	FieldUpdateDocumentFieldTextAlignNameRight  FieldUpdateDocumentFieldTextAlignName = "right"
)

func (e FieldUpdateDocumentFieldTextAlignName) ToPointer() *FieldUpdateDocumentFieldTextAlignName {
	return &e
}
func (e *FieldUpdateDocumentFieldTextAlignName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldTextAlignName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTextAlignName: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMetaNameRequest struct {
	Label       *string                                  `json:"label,omitempty"`
	Placeholder *string                                  `json:"placeholder,omitempty"`
	Required    *bool                                    `json:"required,omitempty"`
	ReadOnly    *bool                                    `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldTypeNameRequest2 `json:"type"`
	FontSize    *float64                                 `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateDocumentFieldTextAlignName   `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaNameRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaNameRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaNameRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaNameRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaNameRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaNameRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaNameRequest) GetType() FieldUpdateDocumentFieldTypeNameRequest2 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeNameRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaNameRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateDocumentFieldFieldMetaNameRequest) GetTextAlign() *FieldUpdateDocumentFieldTextAlignName {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateDocumentFieldFieldName struct {
	Type      FieldUpdateDocumentFieldTypeNameRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldMetaNameRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldName) GetType() FieldUpdateDocumentFieldTypeNameRequest1 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeNameRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldName) GetFieldMeta() *FieldUpdateDocumentFieldFieldMetaNameRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldFieldName) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldFieldName) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldFieldName) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldFieldName) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldFieldName) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldFieldName) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldTypeInitialsRequest1 string

const (
	FieldUpdateDocumentFieldTypeInitialsRequest1Initials FieldUpdateDocumentFieldTypeInitialsRequest1 = "INITIALS"
)

func (e FieldUpdateDocumentFieldTypeInitialsRequest1) ToPointer() *FieldUpdateDocumentFieldTypeInitialsRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeInitialsRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = FieldUpdateDocumentFieldTypeInitialsRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeInitialsRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldTypeInitialsRequest2 string

const (
	FieldUpdateDocumentFieldTypeInitialsRequest2Initials FieldUpdateDocumentFieldTypeInitialsRequest2 = "initials"
)

func (e FieldUpdateDocumentFieldTypeInitialsRequest2) ToPointer() *FieldUpdateDocumentFieldTypeInitialsRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeInitialsRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldUpdateDocumentFieldTypeInitialsRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeInitialsRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldTextAlignInitials string

const (
	FieldUpdateDocumentFieldTextAlignInitialsLeft   FieldUpdateDocumentFieldTextAlignInitials = "left"
	FieldUpdateDocumentFieldTextAlignInitialsCenter FieldUpdateDocumentFieldTextAlignInitials = "center"
	FieldUpdateDocumentFieldTextAlignInitialsRight  FieldUpdateDocumentFieldTextAlignInitials = "right"
)

func (e FieldUpdateDocumentFieldTextAlignInitials) ToPointer() *FieldUpdateDocumentFieldTextAlignInitials {
	return &e
}
func (e *FieldUpdateDocumentFieldTextAlignInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldTextAlignInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTextAlignInitials: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMetaInitialsRequest struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldTypeInitialsRequest2 `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateDocumentFieldTextAlignInitials   `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaInitialsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaInitialsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaInitialsRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaInitialsRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaInitialsRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaInitialsRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaInitialsRequest) GetType() FieldUpdateDocumentFieldTypeInitialsRequest2 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeInitialsRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaInitialsRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateDocumentFieldFieldMetaInitialsRequest) GetTextAlign() *FieldUpdateDocumentFieldTextAlignInitials {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateDocumentFieldFieldInitials struct {
	Type      FieldUpdateDocumentFieldTypeInitialsRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldMetaInitialsRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldInitials) GetType() FieldUpdateDocumentFieldTypeInitialsRequest1 {
	if o == nil {
		return FieldUpdateDocumentFieldTypeInitialsRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldInitials) GetFieldMeta() *FieldUpdateDocumentFieldFieldMetaInitialsRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldFieldInitials) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldFieldInitials) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldFieldInitials) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldFieldInitials) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldFieldInitials) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldFieldInitials) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldTypeFreeSignature string

const (
	FieldUpdateDocumentFieldTypeFreeSignatureFreeSignature FieldUpdateDocumentFieldTypeFreeSignature = "FREE_SIGNATURE"
)

func (e FieldUpdateDocumentFieldTypeFreeSignature) ToPointer() *FieldUpdateDocumentFieldTypeFreeSignature {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeFreeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldUpdateDocumentFieldTypeFreeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeFreeSignature: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldFreeSignature struct {
	Type FieldUpdateDocumentFieldTypeFreeSignature `json:"type"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldFreeSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldFreeSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldFreeSignature) GetType() FieldUpdateDocumentFieldTypeFreeSignature {
	if o == nil {
		return FieldUpdateDocumentFieldTypeFreeSignature("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldFreeSignature) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldFieldFreeSignature) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldFieldFreeSignature) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldFieldFreeSignature) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldFieldFreeSignature) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldFieldFreeSignature) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldTypeSignature string

const (
	FieldUpdateDocumentFieldTypeSignatureSignature FieldUpdateDocumentFieldTypeSignature = "SIGNATURE"
)

func (e FieldUpdateDocumentFieldTypeSignature) ToPointer() *FieldUpdateDocumentFieldTypeSignature {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = FieldUpdateDocumentFieldTypeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeSignature: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldSignature struct {
	Type FieldUpdateDocumentFieldTypeSignature `json:"type"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldSignature) GetType() FieldUpdateDocumentFieldTypeSignature {
	if o == nil {
		return FieldUpdateDocumentFieldTypeSignature("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldSignature) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldFieldSignature) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldFieldSignature) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldFieldSignature) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldFieldSignature) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldFieldSignature) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldFieldUnionType string

const (
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldSignature     FieldUpdateDocumentFieldFieldUnionType = "field_updateDocumentField_field_Signature"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldFreeSignature FieldUpdateDocumentFieldFieldUnionType = "field_updateDocumentField_field_FreeSignature"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldInitials      FieldUpdateDocumentFieldFieldUnionType = "field_updateDocumentField_field_Initials"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldName          FieldUpdateDocumentFieldFieldUnionType = "field_updateDocumentField_field_Name"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldEmail         FieldUpdateDocumentFieldFieldUnionType = "field_updateDocumentField_field_Email"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldDate          FieldUpdateDocumentFieldFieldUnionType = "field_updateDocumentField_field_Date"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldText          FieldUpdateDocumentFieldFieldUnionType = "field_updateDocumentField_field_Text"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldNumber        FieldUpdateDocumentFieldFieldUnionType = "field_updateDocumentField_field_Number"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldRadio         FieldUpdateDocumentFieldFieldUnionType = "field_updateDocumentField_field_Radio"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldCheckbox      FieldUpdateDocumentFieldFieldUnionType = "field_updateDocumentField_field_Checkbox"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldDropdown      FieldUpdateDocumentFieldFieldUnionType = "field_updateDocumentField_field_Dropdown"
)

type FieldUpdateDocumentFieldFieldUnion struct {
	FieldUpdateDocumentFieldFieldSignature     *FieldUpdateDocumentFieldFieldSignature     `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldFreeSignature *FieldUpdateDocumentFieldFieldFreeSignature `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldInitials      *FieldUpdateDocumentFieldFieldInitials      `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldName          *FieldUpdateDocumentFieldFieldName          `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldEmail         *FieldUpdateDocumentFieldFieldEmail         `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldDate          *FieldUpdateDocumentFieldFieldDate          `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldText          *FieldUpdateDocumentFieldFieldText          `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldNumber        *FieldUpdateDocumentFieldFieldNumber        `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldRadio         *FieldUpdateDocumentFieldFieldRadio         `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldCheckbox      *FieldUpdateDocumentFieldFieldCheckbox      `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldDropdown      *FieldUpdateDocumentFieldFieldDropdown      `queryParam:"inline"`

	Type FieldUpdateDocumentFieldFieldUnionType
}

func CreateFieldUpdateDocumentFieldFieldUnionFieldUpdateDocumentFieldFieldSignature(fieldUpdateDocumentFieldFieldSignature FieldUpdateDocumentFieldFieldSignature) FieldUpdateDocumentFieldFieldUnion {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldSignature

	return FieldUpdateDocumentFieldFieldUnion{
		FieldUpdateDocumentFieldFieldSignature: &fieldUpdateDocumentFieldFieldSignature,
		Type:                                   typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldUnionFieldUpdateDocumentFieldFieldFreeSignature(fieldUpdateDocumentFieldFieldFreeSignature FieldUpdateDocumentFieldFieldFreeSignature) FieldUpdateDocumentFieldFieldUnion {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldFreeSignature

	return FieldUpdateDocumentFieldFieldUnion{
		FieldUpdateDocumentFieldFieldFreeSignature: &fieldUpdateDocumentFieldFieldFreeSignature,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldUnionFieldUpdateDocumentFieldFieldInitials(fieldUpdateDocumentFieldFieldInitials FieldUpdateDocumentFieldFieldInitials) FieldUpdateDocumentFieldFieldUnion {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldInitials

	return FieldUpdateDocumentFieldFieldUnion{
		FieldUpdateDocumentFieldFieldInitials: &fieldUpdateDocumentFieldFieldInitials,
		Type:                                  typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldUnionFieldUpdateDocumentFieldFieldName(fieldUpdateDocumentFieldFieldName FieldUpdateDocumentFieldFieldName) FieldUpdateDocumentFieldFieldUnion {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldName

	return FieldUpdateDocumentFieldFieldUnion{
		FieldUpdateDocumentFieldFieldName: &fieldUpdateDocumentFieldFieldName,
		Type:                              typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldUnionFieldUpdateDocumentFieldFieldEmail(fieldUpdateDocumentFieldFieldEmail FieldUpdateDocumentFieldFieldEmail) FieldUpdateDocumentFieldFieldUnion {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldEmail

	return FieldUpdateDocumentFieldFieldUnion{
		FieldUpdateDocumentFieldFieldEmail: &fieldUpdateDocumentFieldFieldEmail,
		Type:                               typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldUnionFieldUpdateDocumentFieldFieldDate(fieldUpdateDocumentFieldFieldDate FieldUpdateDocumentFieldFieldDate) FieldUpdateDocumentFieldFieldUnion {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldDate

	return FieldUpdateDocumentFieldFieldUnion{
		FieldUpdateDocumentFieldFieldDate: &fieldUpdateDocumentFieldFieldDate,
		Type:                              typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldUnionFieldUpdateDocumentFieldFieldText(fieldUpdateDocumentFieldFieldText FieldUpdateDocumentFieldFieldText) FieldUpdateDocumentFieldFieldUnion {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldText

	return FieldUpdateDocumentFieldFieldUnion{
		FieldUpdateDocumentFieldFieldText: &fieldUpdateDocumentFieldFieldText,
		Type:                              typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldUnionFieldUpdateDocumentFieldFieldNumber(fieldUpdateDocumentFieldFieldNumber FieldUpdateDocumentFieldFieldNumber) FieldUpdateDocumentFieldFieldUnion {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldNumber

	return FieldUpdateDocumentFieldFieldUnion{
		FieldUpdateDocumentFieldFieldNumber: &fieldUpdateDocumentFieldFieldNumber,
		Type:                                typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldUnionFieldUpdateDocumentFieldFieldRadio(fieldUpdateDocumentFieldFieldRadio FieldUpdateDocumentFieldFieldRadio) FieldUpdateDocumentFieldFieldUnion {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldRadio

	return FieldUpdateDocumentFieldFieldUnion{
		FieldUpdateDocumentFieldFieldRadio: &fieldUpdateDocumentFieldFieldRadio,
		Type:                               typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldUnionFieldUpdateDocumentFieldFieldCheckbox(fieldUpdateDocumentFieldFieldCheckbox FieldUpdateDocumentFieldFieldCheckbox) FieldUpdateDocumentFieldFieldUnion {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldCheckbox

	return FieldUpdateDocumentFieldFieldUnion{
		FieldUpdateDocumentFieldFieldCheckbox: &fieldUpdateDocumentFieldFieldCheckbox,
		Type:                                  typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldUnionFieldUpdateDocumentFieldFieldDropdown(fieldUpdateDocumentFieldFieldDropdown FieldUpdateDocumentFieldFieldDropdown) FieldUpdateDocumentFieldFieldUnion {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldDropdown

	return FieldUpdateDocumentFieldFieldUnion{
		FieldUpdateDocumentFieldFieldDropdown: &fieldUpdateDocumentFieldFieldDropdown,
		Type:                                  typ,
	}
}

func (u *FieldUpdateDocumentFieldFieldUnion) UnmarshalJSON(data []byte) error {

	var fieldUpdateDocumentFieldFieldSignature FieldUpdateDocumentFieldFieldSignature = FieldUpdateDocumentFieldFieldSignature{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldSignature, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldSignature = &fieldUpdateDocumentFieldFieldSignature
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldSignature
		return nil
	}

	var fieldUpdateDocumentFieldFieldFreeSignature FieldUpdateDocumentFieldFieldFreeSignature = FieldUpdateDocumentFieldFieldFreeSignature{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldFreeSignature, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldFreeSignature = &fieldUpdateDocumentFieldFieldFreeSignature
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldFreeSignature
		return nil
	}

	var fieldUpdateDocumentFieldFieldInitials FieldUpdateDocumentFieldFieldInitials = FieldUpdateDocumentFieldFieldInitials{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldInitials, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldInitials = &fieldUpdateDocumentFieldFieldInitials
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldInitials
		return nil
	}

	var fieldUpdateDocumentFieldFieldName FieldUpdateDocumentFieldFieldName = FieldUpdateDocumentFieldFieldName{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldName, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldName = &fieldUpdateDocumentFieldFieldName
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldName
		return nil
	}

	var fieldUpdateDocumentFieldFieldEmail FieldUpdateDocumentFieldFieldEmail = FieldUpdateDocumentFieldFieldEmail{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldEmail, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldEmail = &fieldUpdateDocumentFieldFieldEmail
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldEmail
		return nil
	}

	var fieldUpdateDocumentFieldFieldDate FieldUpdateDocumentFieldFieldDate = FieldUpdateDocumentFieldFieldDate{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldDate, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldDate = &fieldUpdateDocumentFieldFieldDate
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldDate
		return nil
	}

	var fieldUpdateDocumentFieldFieldText FieldUpdateDocumentFieldFieldText = FieldUpdateDocumentFieldFieldText{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldText, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldText = &fieldUpdateDocumentFieldFieldText
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldText
		return nil
	}

	var fieldUpdateDocumentFieldFieldNumber FieldUpdateDocumentFieldFieldNumber = FieldUpdateDocumentFieldFieldNumber{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldNumber, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldNumber = &fieldUpdateDocumentFieldFieldNumber
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldNumber
		return nil
	}

	var fieldUpdateDocumentFieldFieldRadio FieldUpdateDocumentFieldFieldRadio = FieldUpdateDocumentFieldFieldRadio{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldRadio, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldRadio = &fieldUpdateDocumentFieldFieldRadio
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldRadio
		return nil
	}

	var fieldUpdateDocumentFieldFieldCheckbox FieldUpdateDocumentFieldFieldCheckbox = FieldUpdateDocumentFieldFieldCheckbox{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldCheckbox, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldCheckbox = &fieldUpdateDocumentFieldFieldCheckbox
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldCheckbox
		return nil
	}

	var fieldUpdateDocumentFieldFieldDropdown FieldUpdateDocumentFieldFieldDropdown = FieldUpdateDocumentFieldFieldDropdown{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldDropdown, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldDropdown = &fieldUpdateDocumentFieldFieldDropdown
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldFieldDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldUpdateDocumentFieldFieldUnion", string(data))
}

func (u FieldUpdateDocumentFieldFieldUnion) MarshalJSON() ([]byte, error) {
	if u.FieldUpdateDocumentFieldFieldSignature != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldSignature, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldFreeSignature != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldFreeSignature, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldInitials != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldInitials, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldName != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldName, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldEmail != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldEmail, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldDate != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldDate, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldText != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldText, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldNumber != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldNumber, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldRadio != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldRadio, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldCheckbox != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldCheckbox, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldDropdown != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type FieldUpdateDocumentFieldFieldUnion: all fields are null")
}

type FieldUpdateDocumentFieldRequest struct {
	DocumentID float64                            `json:"documentId"`
	Field      FieldUpdateDocumentFieldFieldUnion `json:"field"`
}

func (o *FieldUpdateDocumentFieldRequest) GetDocumentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DocumentID
}

func (o *FieldUpdateDocumentFieldRequest) GetField() FieldUpdateDocumentFieldFieldUnion {
	if o == nil {
		return FieldUpdateDocumentFieldFieldUnion{}
	}
	return o.Field
}

type FieldUpdateDocumentFieldTypeResponse string

const (
	FieldUpdateDocumentFieldTypeResponseSignature     FieldUpdateDocumentFieldTypeResponse = "SIGNATURE"
	FieldUpdateDocumentFieldTypeResponseFreeSignature FieldUpdateDocumentFieldTypeResponse = "FREE_SIGNATURE"
	FieldUpdateDocumentFieldTypeResponseInitials      FieldUpdateDocumentFieldTypeResponse = "INITIALS"
	FieldUpdateDocumentFieldTypeResponseName          FieldUpdateDocumentFieldTypeResponse = "NAME"
	FieldUpdateDocumentFieldTypeResponseEmail         FieldUpdateDocumentFieldTypeResponse = "EMAIL"
	FieldUpdateDocumentFieldTypeResponseDate          FieldUpdateDocumentFieldTypeResponse = "DATE"
	FieldUpdateDocumentFieldTypeResponseText          FieldUpdateDocumentFieldTypeResponse = "TEXT"
	FieldUpdateDocumentFieldTypeResponseNumber        FieldUpdateDocumentFieldTypeResponse = "NUMBER"
	FieldUpdateDocumentFieldTypeResponseRadio         FieldUpdateDocumentFieldTypeResponse = "RADIO"
	FieldUpdateDocumentFieldTypeResponseCheckbox      FieldUpdateDocumentFieldTypeResponse = "CHECKBOX"
	FieldUpdateDocumentFieldTypeResponseDropdown      FieldUpdateDocumentFieldTypeResponse = "DROPDOWN"
)

func (e FieldUpdateDocumentFieldTypeResponse) ToPointer() *FieldUpdateDocumentFieldTypeResponse {
	return &e
}
func (e *FieldUpdateDocumentFieldTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldUpdateDocumentFieldTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTypeResponse: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMetaTypeDropdown string

const (
	FieldUpdateDocumentFieldFieldMetaTypeDropdownDropdown FieldUpdateDocumentFieldFieldMetaTypeDropdown = "dropdown"
)

func (e FieldUpdateDocumentFieldFieldMetaTypeDropdown) ToPointer() *FieldUpdateDocumentFieldFieldMetaTypeDropdown {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldUpdateDocumentFieldFieldMetaTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaTypeDropdown: %v", v)
	}
}

type FieldUpdateDocumentFieldValueResponse3 struct {
	Value string `json:"value"`
}

func (f FieldUpdateDocumentFieldValueResponse3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldValueResponse3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldValueResponse3) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldFieldMetaDropdownResponse struct {
	Label        *string                                       `json:"label,omitempty"`
	Placeholder  *string                                       `json:"placeholder,omitempty"`
	Required     *bool                                         `json:"required,omitempty"`
	ReadOnly     *bool                                         `json:"readOnly,omitempty"`
	Type         FieldUpdateDocumentFieldFieldMetaTypeDropdown `json:"type"`
	Values       []FieldUpdateDocumentFieldValueResponse3      `json:"values,omitempty"`
	DefaultValue *string                                       `json:"defaultValue,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaDropdownResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaDropdownResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaDropdownResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaDropdownResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaDropdownResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaDropdownResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaDropdownResponse) GetType() FieldUpdateDocumentFieldFieldMetaTypeDropdown {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaTypeDropdown("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaDropdownResponse) GetValues() []FieldUpdateDocumentFieldValueResponse3 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateDocumentFieldFieldMetaDropdownResponse) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldUpdateDocumentFieldFieldMetaTypeCheckbox string

const (
	FieldUpdateDocumentFieldFieldMetaTypeCheckboxCheckbox FieldUpdateDocumentFieldFieldMetaTypeCheckbox = "checkbox"
)

func (e FieldUpdateDocumentFieldFieldMetaTypeCheckbox) ToPointer() *FieldUpdateDocumentFieldFieldMetaTypeCheckbox {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldUpdateDocumentFieldFieldMetaTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaTypeCheckbox: %v", v)
	}
}

type FieldUpdateDocumentFieldValueResponse2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldUpdateDocumentFieldValueResponse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldValueResponse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldValueResponse2) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldValueResponse2) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateDocumentFieldValueResponse2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldFieldMetaCheckboxResponse struct {
	Label            *string                                       `json:"label,omitempty"`
	Placeholder      *string                                       `json:"placeholder,omitempty"`
	Required         *bool                                         `json:"required,omitempty"`
	ReadOnly         *bool                                         `json:"readOnly,omitempty"`
	Type             FieldUpdateDocumentFieldFieldMetaTypeCheckbox `json:"type"`
	Values           []FieldUpdateDocumentFieldValueResponse2      `json:"values,omitempty"`
	ValidationRule   *string                                       `json:"validationRule,omitempty"`
	ValidationLength *float64                                      `json:"validationLength,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaCheckboxResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaCheckboxResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaCheckboxResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaCheckboxResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaCheckboxResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaCheckboxResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaCheckboxResponse) GetType() FieldUpdateDocumentFieldFieldMetaTypeCheckbox {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaTypeCheckbox("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaCheckboxResponse) GetValues() []FieldUpdateDocumentFieldValueResponse2 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateDocumentFieldFieldMetaCheckboxResponse) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldUpdateDocumentFieldFieldMetaCheckboxResponse) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldUpdateDocumentFieldFieldMetaTypeRadio string

const (
	FieldUpdateDocumentFieldFieldMetaTypeRadioRadio FieldUpdateDocumentFieldFieldMetaTypeRadio = "radio"
)

func (e FieldUpdateDocumentFieldFieldMetaTypeRadio) ToPointer() *FieldUpdateDocumentFieldFieldMetaTypeRadio {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldUpdateDocumentFieldFieldMetaTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaTypeRadio: %v", v)
	}
}

type FieldUpdateDocumentFieldValueResponse1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldUpdateDocumentFieldValueResponse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldValueResponse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldValueResponse1) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldValueResponse1) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateDocumentFieldValueResponse1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldFieldMetaRadioResponse struct {
	Label       *string                                    `json:"label,omitempty"`
	Placeholder *string                                    `json:"placeholder,omitempty"`
	Required    *bool                                      `json:"required,omitempty"`
	ReadOnly    *bool                                      `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldFieldMetaTypeRadio `json:"type"`
	Values      []FieldUpdateDocumentFieldValueResponse1   `json:"values,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaRadioResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaRadioResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaRadioResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaRadioResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaRadioResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaRadioResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaRadioResponse) GetType() FieldUpdateDocumentFieldFieldMetaTypeRadio {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaTypeRadio("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaRadioResponse) GetValues() []FieldUpdateDocumentFieldValueResponse1 {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldUpdateDocumentFieldFieldMetaTypeNumber string

const (
	FieldUpdateDocumentFieldFieldMetaTypeNumberNumber FieldUpdateDocumentFieldFieldMetaTypeNumber = "number"
)

func (e FieldUpdateDocumentFieldFieldMetaTypeNumber) ToPointer() *FieldUpdateDocumentFieldFieldMetaTypeNumber {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldUpdateDocumentFieldFieldMetaTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaTypeNumber: %v", v)
	}
}

type FieldUpdateDocumentFieldTextAlignResponse6 string

const (
	FieldUpdateDocumentFieldTextAlignResponse6Left   FieldUpdateDocumentFieldTextAlignResponse6 = "left"
	FieldUpdateDocumentFieldTextAlignResponse6Center FieldUpdateDocumentFieldTextAlignResponse6 = "center"
	FieldUpdateDocumentFieldTextAlignResponse6Right  FieldUpdateDocumentFieldTextAlignResponse6 = "right"
)

func (e FieldUpdateDocumentFieldTextAlignResponse6) ToPointer() *FieldUpdateDocumentFieldTextAlignResponse6 {
	return &e
}
func (e *FieldUpdateDocumentFieldTextAlignResponse6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldTextAlignResponse6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTextAlignResponse6: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMetaNumberResponse struct {
	Label        *string                                     `json:"label,omitempty"`
	Placeholder  *string                                     `json:"placeholder,omitempty"`
	Required     *bool                                       `json:"required,omitempty"`
	ReadOnly     *bool                                       `json:"readOnly,omitempty"`
	Type         FieldUpdateDocumentFieldFieldMetaTypeNumber `json:"type"`
	NumberFormat *string                                     `json:"numberFormat,omitempty"`
	Value        *string                                     `json:"value,omitempty"`
	MinValue     *float64                                    `json:"minValue,omitempty"`
	MaxValue     *float64                                    `json:"maxValue,omitempty"`
	FontSize     *float64                                    `json:"fontSize,omitempty"`
	TextAlign    *FieldUpdateDocumentFieldTextAlignResponse6 `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaNumberResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaNumberResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberResponse) GetType() FieldUpdateDocumentFieldFieldMetaTypeNumber {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaTypeNumber("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberResponse) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberResponse) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberResponse) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberResponse) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateDocumentFieldFieldMetaNumberResponse) GetTextAlign() *FieldUpdateDocumentFieldTextAlignResponse6 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateDocumentFieldFieldMetaTypeText string

const (
	FieldUpdateDocumentFieldFieldMetaTypeTextText FieldUpdateDocumentFieldFieldMetaTypeText = "text"
)

func (e FieldUpdateDocumentFieldFieldMetaTypeText) ToPointer() *FieldUpdateDocumentFieldFieldMetaTypeText {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldUpdateDocumentFieldFieldMetaTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaTypeText: %v", v)
	}
}

type FieldUpdateDocumentFieldTextAlignResponse5 string

const (
	FieldUpdateDocumentFieldTextAlignResponse5Left   FieldUpdateDocumentFieldTextAlignResponse5 = "left"
	FieldUpdateDocumentFieldTextAlignResponse5Center FieldUpdateDocumentFieldTextAlignResponse5 = "center"
	FieldUpdateDocumentFieldTextAlignResponse5Right  FieldUpdateDocumentFieldTextAlignResponse5 = "right"
)

func (e FieldUpdateDocumentFieldTextAlignResponse5) ToPointer() *FieldUpdateDocumentFieldTextAlignResponse5 {
	return &e
}
func (e *FieldUpdateDocumentFieldTextAlignResponse5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldTextAlignResponse5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTextAlignResponse5: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMetaTextResponse struct {
	Label          *string                                     `json:"label,omitempty"`
	Placeholder    *string                                     `json:"placeholder,omitempty"`
	Required       *bool                                       `json:"required,omitempty"`
	ReadOnly       *bool                                       `json:"readOnly,omitempty"`
	Type           FieldUpdateDocumentFieldFieldMetaTypeText   `json:"type"`
	Text           *string                                     `json:"text,omitempty"`
	CharacterLimit *float64                                    `json:"characterLimit,omitempty"`
	FontSize       *float64                                    `json:"fontSize,omitempty"`
	TextAlign      *FieldUpdateDocumentFieldTextAlignResponse5 `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaTextResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaTextResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaTextResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaTextResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaTextResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaTextResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaTextResponse) GetType() FieldUpdateDocumentFieldFieldMetaTypeText {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaTypeText("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaTextResponse) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldUpdateDocumentFieldFieldMetaTextResponse) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldUpdateDocumentFieldFieldMetaTextResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateDocumentFieldFieldMetaTextResponse) GetTextAlign() *FieldUpdateDocumentFieldTextAlignResponse5 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateDocumentFieldFieldMetaTypeDate string

const (
	FieldUpdateDocumentFieldFieldMetaTypeDateDate FieldUpdateDocumentFieldFieldMetaTypeDate = "date"
)

func (e FieldUpdateDocumentFieldFieldMetaTypeDate) ToPointer() *FieldUpdateDocumentFieldFieldMetaTypeDate {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldUpdateDocumentFieldFieldMetaTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaTypeDate: %v", v)
	}
}

type FieldUpdateDocumentFieldTextAlignResponse4 string

const (
	FieldUpdateDocumentFieldTextAlignResponse4Left   FieldUpdateDocumentFieldTextAlignResponse4 = "left"
	FieldUpdateDocumentFieldTextAlignResponse4Center FieldUpdateDocumentFieldTextAlignResponse4 = "center"
	FieldUpdateDocumentFieldTextAlignResponse4Right  FieldUpdateDocumentFieldTextAlignResponse4 = "right"
)

func (e FieldUpdateDocumentFieldTextAlignResponse4) ToPointer() *FieldUpdateDocumentFieldTextAlignResponse4 {
	return &e
}
func (e *FieldUpdateDocumentFieldTextAlignResponse4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldTextAlignResponse4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTextAlignResponse4: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMetaDateResponse struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldFieldMetaTypeDate   `json:"type"`
	FontSize    *float64                                    `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateDocumentFieldTextAlignResponse4 `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaDateResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaDateResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaDateResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaDateResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaDateResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaDateResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaDateResponse) GetType() FieldUpdateDocumentFieldFieldMetaTypeDate {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaTypeDate("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaDateResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateDocumentFieldFieldMetaDateResponse) GetTextAlign() *FieldUpdateDocumentFieldTextAlignResponse4 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateDocumentFieldFieldMetaTypeEmail string

const (
	FieldUpdateDocumentFieldFieldMetaTypeEmailEmail FieldUpdateDocumentFieldFieldMetaTypeEmail = "email"
)

func (e FieldUpdateDocumentFieldFieldMetaTypeEmail) ToPointer() *FieldUpdateDocumentFieldFieldMetaTypeEmail {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldUpdateDocumentFieldFieldMetaTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaTypeEmail: %v", v)
	}
}

type FieldUpdateDocumentFieldTextAlignResponse3 string

const (
	FieldUpdateDocumentFieldTextAlignResponse3Left   FieldUpdateDocumentFieldTextAlignResponse3 = "left"
	FieldUpdateDocumentFieldTextAlignResponse3Center FieldUpdateDocumentFieldTextAlignResponse3 = "center"
	FieldUpdateDocumentFieldTextAlignResponse3Right  FieldUpdateDocumentFieldTextAlignResponse3 = "right"
)

func (e FieldUpdateDocumentFieldTextAlignResponse3) ToPointer() *FieldUpdateDocumentFieldTextAlignResponse3 {
	return &e
}
func (e *FieldUpdateDocumentFieldTextAlignResponse3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldTextAlignResponse3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTextAlignResponse3: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMetaEmailResponse struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldFieldMetaTypeEmail  `json:"type"`
	FontSize    *float64                                    `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateDocumentFieldTextAlignResponse3 `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaEmailResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaEmailResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaEmailResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaEmailResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaEmailResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaEmailResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaEmailResponse) GetType() FieldUpdateDocumentFieldFieldMetaTypeEmail {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaTypeEmail("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaEmailResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateDocumentFieldFieldMetaEmailResponse) GetTextAlign() *FieldUpdateDocumentFieldTextAlignResponse3 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateDocumentFieldFieldMetaTypeName string

const (
	FieldUpdateDocumentFieldFieldMetaTypeNameName FieldUpdateDocumentFieldFieldMetaTypeName = "name"
)

func (e FieldUpdateDocumentFieldFieldMetaTypeName) ToPointer() *FieldUpdateDocumentFieldFieldMetaTypeName {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldUpdateDocumentFieldFieldMetaTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaTypeName: %v", v)
	}
}

type FieldUpdateDocumentFieldTextAlignResponse2 string

const (
	FieldUpdateDocumentFieldTextAlignResponse2Left   FieldUpdateDocumentFieldTextAlignResponse2 = "left"
	FieldUpdateDocumentFieldTextAlignResponse2Center FieldUpdateDocumentFieldTextAlignResponse2 = "center"
	FieldUpdateDocumentFieldTextAlignResponse2Right  FieldUpdateDocumentFieldTextAlignResponse2 = "right"
)

func (e FieldUpdateDocumentFieldTextAlignResponse2) ToPointer() *FieldUpdateDocumentFieldTextAlignResponse2 {
	return &e
}
func (e *FieldUpdateDocumentFieldTextAlignResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldTextAlignResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTextAlignResponse2: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMetaNameResponse struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldFieldMetaTypeName   `json:"type"`
	FontSize    *float64                                    `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateDocumentFieldTextAlignResponse2 `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaNameResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaNameResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaNameResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaNameResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaNameResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaNameResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaNameResponse) GetType() FieldUpdateDocumentFieldFieldMetaTypeName {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaTypeName("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaNameResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateDocumentFieldFieldMetaNameResponse) GetTextAlign() *FieldUpdateDocumentFieldTextAlignResponse2 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateDocumentFieldFieldMetaTypeInitials string

const (
	FieldUpdateDocumentFieldFieldMetaTypeInitialsInitials FieldUpdateDocumentFieldFieldMetaTypeInitials = "initials"
)

func (e FieldUpdateDocumentFieldFieldMetaTypeInitials) ToPointer() *FieldUpdateDocumentFieldFieldMetaTypeInitials {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldUpdateDocumentFieldFieldMetaTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaTypeInitials: %v", v)
	}
}

type FieldUpdateDocumentFieldTextAlignResponse1 string

const (
	FieldUpdateDocumentFieldTextAlignResponse1Left   FieldUpdateDocumentFieldTextAlignResponse1 = "left"
	FieldUpdateDocumentFieldTextAlignResponse1Center FieldUpdateDocumentFieldTextAlignResponse1 = "center"
	FieldUpdateDocumentFieldTextAlignResponse1Right  FieldUpdateDocumentFieldTextAlignResponse1 = "right"
)

func (e FieldUpdateDocumentFieldTextAlignResponse1) ToPointer() *FieldUpdateDocumentFieldTextAlignResponse1 {
	return &e
}
func (e *FieldUpdateDocumentFieldTextAlignResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldTextAlignResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldTextAlignResponse1: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMetaInitialsResponse struct {
	Label       *string                                       `json:"label,omitempty"`
	Placeholder *string                                       `json:"placeholder,omitempty"`
	Required    *bool                                         `json:"required,omitempty"`
	ReadOnly    *bool                                         `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldFieldMetaTypeInitials `json:"type"`
	FontSize    *float64                                      `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateDocumentFieldTextAlignResponse1   `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldFieldMetaInitialsResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldFieldMetaInitialsResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateDocumentFieldFieldMetaInitialsResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMetaInitialsResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMetaInitialsResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMetaInitialsResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMetaInitialsResponse) GetType() FieldUpdateDocumentFieldFieldMetaTypeInitials {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaTypeInitials("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMetaInitialsResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateDocumentFieldFieldMetaInitialsResponse) GetTextAlign() *FieldUpdateDocumentFieldTextAlignResponse1 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateDocumentFieldFieldMetaUnionType string

const (
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaInitialsResponse FieldUpdateDocumentFieldFieldMetaUnionType = "field_updateDocumentField_fieldMeta_Initials_response"
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaNameResponse     FieldUpdateDocumentFieldFieldMetaUnionType = "field_updateDocumentField_fieldMeta_Name_response"
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaEmailResponse    FieldUpdateDocumentFieldFieldMetaUnionType = "field_updateDocumentField_fieldMeta_Email_response"
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaDateResponse     FieldUpdateDocumentFieldFieldMetaUnionType = "field_updateDocumentField_fieldMeta_Date_response"
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaTextResponse     FieldUpdateDocumentFieldFieldMetaUnionType = "field_updateDocumentField_fieldMeta_Text_response"
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaNumberResponse   FieldUpdateDocumentFieldFieldMetaUnionType = "field_updateDocumentField_fieldMeta_Number_response"
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaRadioResponse    FieldUpdateDocumentFieldFieldMetaUnionType = "field_updateDocumentField_fieldMeta_Radio_response"
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaCheckboxResponse FieldUpdateDocumentFieldFieldMetaUnionType = "field_updateDocumentField_fieldMeta_Checkbox_response"
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaDropdownResponse FieldUpdateDocumentFieldFieldMetaUnionType = "field_updateDocumentField_fieldMeta_Dropdown_response"
)

type FieldUpdateDocumentFieldFieldMetaUnion struct {
	FieldUpdateDocumentFieldFieldMetaInitialsResponse *FieldUpdateDocumentFieldFieldMetaInitialsResponse `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldMetaNameResponse     *FieldUpdateDocumentFieldFieldMetaNameResponse     `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldMetaEmailResponse    *FieldUpdateDocumentFieldFieldMetaEmailResponse    `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldMetaDateResponse     *FieldUpdateDocumentFieldFieldMetaDateResponse     `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldMetaTextResponse     *FieldUpdateDocumentFieldFieldMetaTextResponse     `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldMetaNumberResponse   *FieldUpdateDocumentFieldFieldMetaNumberResponse   `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldMetaRadioResponse    *FieldUpdateDocumentFieldFieldMetaRadioResponse    `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldMetaCheckboxResponse *FieldUpdateDocumentFieldFieldMetaCheckboxResponse `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldMetaDropdownResponse *FieldUpdateDocumentFieldFieldMetaDropdownResponse `queryParam:"inline"`

	Type FieldUpdateDocumentFieldFieldMetaUnionType
}

func CreateFieldUpdateDocumentFieldFieldMetaUnionFieldUpdateDocumentFieldFieldMetaInitialsResponse(fieldUpdateDocumentFieldFieldMetaInitialsResponse FieldUpdateDocumentFieldFieldMetaInitialsResponse) FieldUpdateDocumentFieldFieldMetaUnion {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaInitialsResponse

	return FieldUpdateDocumentFieldFieldMetaUnion{
		FieldUpdateDocumentFieldFieldMetaInitialsResponse: &fieldUpdateDocumentFieldFieldMetaInitialsResponse,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldMetaUnionFieldUpdateDocumentFieldFieldMetaNameResponse(fieldUpdateDocumentFieldFieldMetaNameResponse FieldUpdateDocumentFieldFieldMetaNameResponse) FieldUpdateDocumentFieldFieldMetaUnion {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaNameResponse

	return FieldUpdateDocumentFieldFieldMetaUnion{
		FieldUpdateDocumentFieldFieldMetaNameResponse: &fieldUpdateDocumentFieldFieldMetaNameResponse,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldMetaUnionFieldUpdateDocumentFieldFieldMetaEmailResponse(fieldUpdateDocumentFieldFieldMetaEmailResponse FieldUpdateDocumentFieldFieldMetaEmailResponse) FieldUpdateDocumentFieldFieldMetaUnion {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaEmailResponse

	return FieldUpdateDocumentFieldFieldMetaUnion{
		FieldUpdateDocumentFieldFieldMetaEmailResponse: &fieldUpdateDocumentFieldFieldMetaEmailResponse,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldMetaUnionFieldUpdateDocumentFieldFieldMetaDateResponse(fieldUpdateDocumentFieldFieldMetaDateResponse FieldUpdateDocumentFieldFieldMetaDateResponse) FieldUpdateDocumentFieldFieldMetaUnion {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaDateResponse

	return FieldUpdateDocumentFieldFieldMetaUnion{
		FieldUpdateDocumentFieldFieldMetaDateResponse: &fieldUpdateDocumentFieldFieldMetaDateResponse,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldMetaUnionFieldUpdateDocumentFieldFieldMetaTextResponse(fieldUpdateDocumentFieldFieldMetaTextResponse FieldUpdateDocumentFieldFieldMetaTextResponse) FieldUpdateDocumentFieldFieldMetaUnion {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaTextResponse

	return FieldUpdateDocumentFieldFieldMetaUnion{
		FieldUpdateDocumentFieldFieldMetaTextResponse: &fieldUpdateDocumentFieldFieldMetaTextResponse,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldMetaUnionFieldUpdateDocumentFieldFieldMetaNumberResponse(fieldUpdateDocumentFieldFieldMetaNumberResponse FieldUpdateDocumentFieldFieldMetaNumberResponse) FieldUpdateDocumentFieldFieldMetaUnion {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaNumberResponse

	return FieldUpdateDocumentFieldFieldMetaUnion{
		FieldUpdateDocumentFieldFieldMetaNumberResponse: &fieldUpdateDocumentFieldFieldMetaNumberResponse,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldMetaUnionFieldUpdateDocumentFieldFieldMetaRadioResponse(fieldUpdateDocumentFieldFieldMetaRadioResponse FieldUpdateDocumentFieldFieldMetaRadioResponse) FieldUpdateDocumentFieldFieldMetaUnion {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaRadioResponse

	return FieldUpdateDocumentFieldFieldMetaUnion{
		FieldUpdateDocumentFieldFieldMetaRadioResponse: &fieldUpdateDocumentFieldFieldMetaRadioResponse,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldMetaUnionFieldUpdateDocumentFieldFieldMetaCheckboxResponse(fieldUpdateDocumentFieldFieldMetaCheckboxResponse FieldUpdateDocumentFieldFieldMetaCheckboxResponse) FieldUpdateDocumentFieldFieldMetaUnion {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaCheckboxResponse

	return FieldUpdateDocumentFieldFieldMetaUnion{
		FieldUpdateDocumentFieldFieldMetaCheckboxResponse: &fieldUpdateDocumentFieldFieldMetaCheckboxResponse,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldMetaUnionFieldUpdateDocumentFieldFieldMetaDropdownResponse(fieldUpdateDocumentFieldFieldMetaDropdownResponse FieldUpdateDocumentFieldFieldMetaDropdownResponse) FieldUpdateDocumentFieldFieldMetaUnion {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaDropdownResponse

	return FieldUpdateDocumentFieldFieldMetaUnion{
		FieldUpdateDocumentFieldFieldMetaDropdownResponse: &fieldUpdateDocumentFieldFieldMetaDropdownResponse,
		Type: typ,
	}
}

func (u *FieldUpdateDocumentFieldFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var fieldUpdateDocumentFieldFieldMetaInitialsResponse FieldUpdateDocumentFieldFieldMetaInitialsResponse = FieldUpdateDocumentFieldFieldMetaInitialsResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMetaInitialsResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldMetaInitialsResponse = &fieldUpdateDocumentFieldFieldMetaInitialsResponse
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaInitialsResponse
		return nil
	}

	var fieldUpdateDocumentFieldFieldMetaNameResponse FieldUpdateDocumentFieldFieldMetaNameResponse = FieldUpdateDocumentFieldFieldMetaNameResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMetaNameResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldMetaNameResponse = &fieldUpdateDocumentFieldFieldMetaNameResponse
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaNameResponse
		return nil
	}

	var fieldUpdateDocumentFieldFieldMetaEmailResponse FieldUpdateDocumentFieldFieldMetaEmailResponse = FieldUpdateDocumentFieldFieldMetaEmailResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMetaEmailResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldMetaEmailResponse = &fieldUpdateDocumentFieldFieldMetaEmailResponse
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaEmailResponse
		return nil
	}

	var fieldUpdateDocumentFieldFieldMetaDateResponse FieldUpdateDocumentFieldFieldMetaDateResponse = FieldUpdateDocumentFieldFieldMetaDateResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMetaDateResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldMetaDateResponse = &fieldUpdateDocumentFieldFieldMetaDateResponse
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaDateResponse
		return nil
	}

	var fieldUpdateDocumentFieldFieldMetaTextResponse FieldUpdateDocumentFieldFieldMetaTextResponse = FieldUpdateDocumentFieldFieldMetaTextResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMetaTextResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldMetaTextResponse = &fieldUpdateDocumentFieldFieldMetaTextResponse
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaTextResponse
		return nil
	}

	var fieldUpdateDocumentFieldFieldMetaNumberResponse FieldUpdateDocumentFieldFieldMetaNumberResponse = FieldUpdateDocumentFieldFieldMetaNumberResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMetaNumberResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldMetaNumberResponse = &fieldUpdateDocumentFieldFieldMetaNumberResponse
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaNumberResponse
		return nil
	}

	var fieldUpdateDocumentFieldFieldMetaRadioResponse FieldUpdateDocumentFieldFieldMetaRadioResponse = FieldUpdateDocumentFieldFieldMetaRadioResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMetaRadioResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldMetaRadioResponse = &fieldUpdateDocumentFieldFieldMetaRadioResponse
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaRadioResponse
		return nil
	}

	var fieldUpdateDocumentFieldFieldMetaCheckboxResponse FieldUpdateDocumentFieldFieldMetaCheckboxResponse = FieldUpdateDocumentFieldFieldMetaCheckboxResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMetaCheckboxResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldMetaCheckboxResponse = &fieldUpdateDocumentFieldFieldMetaCheckboxResponse
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaCheckboxResponse
		return nil
	}

	var fieldUpdateDocumentFieldFieldMetaDropdownResponse FieldUpdateDocumentFieldFieldMetaDropdownResponse = FieldUpdateDocumentFieldFieldMetaDropdownResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMetaDropdownResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldFieldMetaDropdownResponse = &fieldUpdateDocumentFieldFieldMetaDropdownResponse
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMetaDropdownResponse
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldUpdateDocumentFieldFieldMetaUnion", string(data))
}

func (u FieldUpdateDocumentFieldFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.FieldUpdateDocumentFieldFieldMetaInitialsResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMetaInitialsResponse, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldMetaNameResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMetaNameResponse, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldMetaEmailResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMetaEmailResponse, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldMetaDateResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMetaDateResponse, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldMetaTextResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMetaTextResponse, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldMetaNumberResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMetaNumberResponse, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldMetaRadioResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMetaRadioResponse, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldMetaCheckboxResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMetaCheckboxResponse, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldMetaDropdownResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMetaDropdownResponse, "", true)
	}

	return nil, errors.New("could not marshal union type FieldUpdateDocumentFieldFieldMetaUnion: all fields are null")
}

// FieldUpdateDocumentFieldResponseBody - Successful response
type FieldUpdateDocumentFieldResponseBody struct {
	Type        FieldUpdateDocumentFieldTypeResponse `json:"type"`
	ID          float64                              `json:"id"`
	SecondaryID string                               `json:"secondaryId"`
	DocumentID  *float64                             `json:"documentId"`
	TemplateID  *float64                             `json:"templateId"`
	RecipientID float64                              `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                                 `json:"page"`
	PositionX  any                                     `json:"positionX,omitempty"`
	PositionY  any                                     `json:"positionY,omitempty"`
	Width      any                                     `json:"width,omitempty"`
	Height     any                                     `json:"height,omitempty"`
	CustomText string                                  `json:"customText"`
	Inserted   bool                                    `json:"inserted"`
	FieldMeta  *FieldUpdateDocumentFieldFieldMetaUnion `json:"fieldMeta"`
}

func (o *FieldUpdateDocumentFieldResponseBody) GetType() FieldUpdateDocumentFieldTypeResponse {
	if o == nil {
		return FieldUpdateDocumentFieldTypeResponse("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldResponseBody) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldResponseBody) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *FieldUpdateDocumentFieldResponseBody) GetDocumentID() *float64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *FieldUpdateDocumentFieldResponseBody) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *FieldUpdateDocumentFieldResponseBody) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldUpdateDocumentFieldResponseBody) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *FieldUpdateDocumentFieldResponseBody) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *FieldUpdateDocumentFieldResponseBody) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *FieldUpdateDocumentFieldResponseBody) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldResponseBody) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *FieldUpdateDocumentFieldResponseBody) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *FieldUpdateDocumentFieldResponseBody) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *FieldUpdateDocumentFieldResponseBody) GetFieldMeta() *FieldUpdateDocumentFieldFieldMetaUnion {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

type FieldUpdateDocumentFieldResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldUpdateDocumentFieldResponseBody
}

func (o *FieldUpdateDocumentFieldResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FieldUpdateDocumentFieldResponse) GetObject() *FieldUpdateDocumentFieldResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
