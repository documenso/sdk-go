// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type TemplateCreateTemplateTemporaryVisibilityRequest string

const (
	TemplateCreateTemplateTemporaryVisibilityRequestEveryone        TemplateCreateTemplateTemporaryVisibilityRequest = "EVERYONE"
	TemplateCreateTemplateTemporaryVisibilityRequestManagerAndAbove TemplateCreateTemplateTemporaryVisibilityRequest = "MANAGER_AND_ABOVE"
	TemplateCreateTemplateTemporaryVisibilityRequestAdmin           TemplateCreateTemplateTemporaryVisibilityRequest = "ADMIN"
)

func (e TemplateCreateTemplateTemporaryVisibilityRequest) ToPointer() *TemplateCreateTemplateTemporaryVisibilityRequest {
	return &e
}
func (e *TemplateCreateTemplateTemporaryVisibilityRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = TemplateCreateTemplateTemporaryVisibilityRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryVisibilityRequest: %v", v)
	}
}

// TemplateCreateTemplateTemporaryGlobalAccessAuthRequest - The type of authentication required for the recipient to access the document.
type TemplateCreateTemplateTemporaryGlobalAccessAuthRequest string

const (
	TemplateCreateTemplateTemporaryGlobalAccessAuthRequestAccount       TemplateCreateTemplateTemporaryGlobalAccessAuthRequest = "ACCOUNT"
	TemplateCreateTemplateTemporaryGlobalAccessAuthRequestTwoFactorAuth TemplateCreateTemplateTemporaryGlobalAccessAuthRequest = "TWO_FACTOR_AUTH"
)

func (e TemplateCreateTemplateTemporaryGlobalAccessAuthRequest) ToPointer() *TemplateCreateTemplateTemporaryGlobalAccessAuthRequest {
	return &e
}
func (e *TemplateCreateTemplateTemporaryGlobalAccessAuthRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = TemplateCreateTemplateTemporaryGlobalAccessAuthRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryGlobalAccessAuthRequest: %v", v)
	}
}

// TemplateCreateTemplateTemporaryGlobalActionAuthRequest - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type TemplateCreateTemplateTemporaryGlobalActionAuthRequest string

const (
	TemplateCreateTemplateTemporaryGlobalActionAuthRequestAccount       TemplateCreateTemplateTemporaryGlobalActionAuthRequest = "ACCOUNT"
	TemplateCreateTemplateTemporaryGlobalActionAuthRequestPasskey       TemplateCreateTemplateTemporaryGlobalActionAuthRequest = "PASSKEY"
	TemplateCreateTemplateTemporaryGlobalActionAuthRequestTwoFactorAuth TemplateCreateTemplateTemporaryGlobalActionAuthRequest = "TWO_FACTOR_AUTH"
	TemplateCreateTemplateTemporaryGlobalActionAuthRequestPassword      TemplateCreateTemplateTemporaryGlobalActionAuthRequest = "PASSWORD"
)

func (e TemplateCreateTemplateTemporaryGlobalActionAuthRequest) ToPointer() *TemplateCreateTemplateTemporaryGlobalActionAuthRequest {
	return &e
}
func (e *TemplateCreateTemplateTemporaryGlobalActionAuthRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		*e = TemplateCreateTemplateTemporaryGlobalActionAuthRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryGlobalActionAuthRequest: %v", v)
	}
}

type TemplateCreateTemplateTemporaryTypeRequest string

const (
	TemplateCreateTemplateTemporaryTypeRequestPublic  TemplateCreateTemplateTemporaryTypeRequest = "PUBLIC"
	TemplateCreateTemplateTemporaryTypeRequestPrivate TemplateCreateTemplateTemporaryTypeRequest = "PRIVATE"
)

func (e TemplateCreateTemplateTemporaryTypeRequest) ToPointer() *TemplateCreateTemplateTemporaryTypeRequest {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PUBLIC":
		fallthrough
	case "PRIVATE":
		*e = TemplateCreateTemplateTemporaryTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTypeRequest: %v", v)
	}
}

// TemplateCreateTemplateTemporaryDateFormat - The date format to use for date fields and signing the document.
type TemplateCreateTemplateTemporaryDateFormat string

const (
	TemplateCreateTemplateTemporaryDateFormatYyyyMMddHhMmA            TemplateCreateTemplateTemporaryDateFormat = "yyyy-MM-dd hh:mm a"
	TemplateCreateTemplateTemporaryDateFormatYyyyMMdd                 TemplateCreateTemplateTemporaryDateFormat = "yyyy-MM-dd"
	TemplateCreateTemplateTemporaryDateFormatDdMmSlashYyyy            TemplateCreateTemplateTemporaryDateFormat = "dd/MM/yyyy"
	TemplateCreateTemplateTemporaryDateFormatMmDdSlashYyyy            TemplateCreateTemplateTemporaryDateFormat = "MM/dd/yyyy"
	TemplateCreateTemplateTemporaryDateFormatYyMMdd                   TemplateCreateTemplateTemporaryDateFormat = "yy-MM-dd"
	TemplateCreateTemplateTemporaryDateFormatMmmmDdCommaYyyy          TemplateCreateTemplateTemporaryDateFormat = "MMMM dd, yyyy"
	TemplateCreateTemplateTemporaryDateFormatEeeeMmmmDdCommaYyyy      TemplateCreateTemplateTemporaryDateFormat = "EEEE, MMMM dd, yyyy"
	TemplateCreateTemplateTemporaryDateFormatDdMmSlashYyyyHhMmA       TemplateCreateTemplateTemporaryDateFormat = "dd/MM/yyyy hh:mm a"
	TemplateCreateTemplateTemporaryDateFormatDdMmSlashYyyyHHmm        TemplateCreateTemplateTemporaryDateFormat = "dd/MM/yyyy HH:mm"
	TemplateCreateTemplateTemporaryDateFormatMmDdSlashYyyyHhMmA       TemplateCreateTemplateTemporaryDateFormat = "MM/dd/yyyy hh:mm a"
	TemplateCreateTemplateTemporaryDateFormatMmDdSlashYyyyHHmm        TemplateCreateTemplateTemporaryDateFormat = "MM/dd/yyyy HH:mm"
	TemplateCreateTemplateTemporaryDateFormatDdDotMmDotYyyy           TemplateCreateTemplateTemporaryDateFormat = "dd.MM.yyyy"
	TemplateCreateTemplateTemporaryDateFormatDdDotMmDotYyyyHHmm       TemplateCreateTemplateTemporaryDateFormat = "dd.MM.yyyy HH:mm"
	TemplateCreateTemplateTemporaryDateFormatYyyyMMddHHmm             TemplateCreateTemplateTemporaryDateFormat = "yyyy-MM-dd HH:mm"
	TemplateCreateTemplateTemporaryDateFormatYyMMddHhMmA              TemplateCreateTemplateTemporaryDateFormat = "yy-MM-dd hh:mm a"
	TemplateCreateTemplateTemporaryDateFormatYyMMddHHmm               TemplateCreateTemplateTemporaryDateFormat = "yy-MM-dd HH:mm"
	TemplateCreateTemplateTemporaryDateFormatYyyyMMddHHmmss           TemplateCreateTemplateTemporaryDateFormat = "yyyy-MM-dd HH:mm:ss"
	TemplateCreateTemplateTemporaryDateFormatMmmmDdCommaYyyyHhMmA     TemplateCreateTemplateTemporaryDateFormat = "MMMM dd, yyyy hh:mm a"
	TemplateCreateTemplateTemporaryDateFormatMmmmDdCommaYyyyHHmm      TemplateCreateTemplateTemporaryDateFormat = "MMMM dd, yyyy HH:mm"
	TemplateCreateTemplateTemporaryDateFormatEeeeMmmmDdCommaYyyyHhMmA TemplateCreateTemplateTemporaryDateFormat = "EEEE, MMMM dd, yyyy hh:mm a"
	TemplateCreateTemplateTemporaryDateFormatEeeeMmmmDdCommaYyyyHHmm  TemplateCreateTemplateTemporaryDateFormat = "EEEE, MMMM dd, yyyy HH:mm"
	TemplateCreateTemplateTemporaryDateFormatIso8601Full              TemplateCreateTemplateTemporaryDateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSXXX"
)

func (e TemplateCreateTemplateTemporaryDateFormat) ToPointer() *TemplateCreateTemplateTemporaryDateFormat {
	return &e
}
func (e *TemplateCreateTemplateTemporaryDateFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "yyyy-MM-dd hh:mm a":
		fallthrough
	case "yyyy-MM-dd":
		fallthrough
	case "dd/MM/yyyy":
		fallthrough
	case "MM/dd/yyyy":
		fallthrough
	case "yy-MM-dd":
		fallthrough
	case "MMMM dd, yyyy":
		fallthrough
	case "EEEE, MMMM dd, yyyy":
		fallthrough
	case "dd/MM/yyyy hh:mm a":
		fallthrough
	case "dd/MM/yyyy HH:mm":
		fallthrough
	case "MM/dd/yyyy hh:mm a":
		fallthrough
	case "MM/dd/yyyy HH:mm":
		fallthrough
	case "dd.MM.yyyy":
		fallthrough
	case "dd.MM.yyyy HH:mm":
		fallthrough
	case "yyyy-MM-dd HH:mm":
		fallthrough
	case "yy-MM-dd hh:mm a":
		fallthrough
	case "yy-MM-dd HH:mm":
		fallthrough
	case "yyyy-MM-dd HH:mm:ss":
		fallthrough
	case "MMMM dd, yyyy hh:mm a":
		fallthrough
	case "MMMM dd, yyyy HH:mm":
		fallthrough
	case "EEEE, MMMM dd, yyyy hh:mm a":
		fallthrough
	case "EEEE, MMMM dd, yyyy HH:mm":
		fallthrough
	case "yyyy-MM-dd'T'HH:mm:ss.SSSXXX":
		*e = TemplateCreateTemplateTemporaryDateFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryDateFormat: %v", v)
	}
}

// TemplateCreateTemplateTemporaryDistributionMethodRequest - The distribution method to use when sending the document to the recipients.
type TemplateCreateTemplateTemporaryDistributionMethodRequest string

const (
	TemplateCreateTemplateTemporaryDistributionMethodRequestEmail TemplateCreateTemplateTemporaryDistributionMethodRequest = "EMAIL"
	TemplateCreateTemplateTemporaryDistributionMethodRequestNone  TemplateCreateTemplateTemporaryDistributionMethodRequest = "NONE"
)

func (e TemplateCreateTemplateTemporaryDistributionMethodRequest) ToPointer() *TemplateCreateTemplateTemporaryDistributionMethodRequest {
	return &e
}
func (e *TemplateCreateTemplateTemporaryDistributionMethodRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = TemplateCreateTemplateTemporaryDistributionMethodRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryDistributionMethodRequest: %v", v)
	}
}

type TemplateCreateTemplateTemporaryEmailSettingsRequest struct {
	// Whether to send an email to all recipients that the document is ready for them to sign.
	RecipientSigningRequest *bool `default:"true" json:"recipientSigningRequest"`
	// Whether to send an email to the recipient who was removed from a pending document.
	RecipientRemoved *bool `default:"true" json:"recipientRemoved"`
	// Whether to send an email to the document owner when a recipient has signed the document.
	RecipientSigned *bool `default:"true" json:"recipientSigned"`
	// Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
	DocumentPending *bool `default:"true" json:"documentPending"`
	// Whether to send an email to all recipients when the document is complete.
	DocumentCompleted *bool `default:"true" json:"documentCompleted"`
	// Whether to send an email to all recipients if a pending document has been deleted.
	DocumentDeleted *bool `default:"true" json:"documentDeleted"`
	// Whether to send an email to the document owner when the document is complete.
	OwnerDocumentCompleted *bool `default:"true" json:"ownerDocumentCompleted"`
}

func (t TemplateCreateTemplateTemporaryEmailSettingsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateCreateTemplateTemporaryEmailSettingsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (t *TemplateCreateTemplateTemporaryEmailSettingsRequest) GetRecipientSigningRequest() *bool {
	if t == nil {
		return nil
	}
	return t.RecipientSigningRequest
}

func (t *TemplateCreateTemplateTemporaryEmailSettingsRequest) GetRecipientRemoved() *bool {
	if t == nil {
		return nil
	}
	return t.RecipientRemoved
}

func (t *TemplateCreateTemplateTemporaryEmailSettingsRequest) GetRecipientSigned() *bool {
	if t == nil {
		return nil
	}
	return t.RecipientSigned
}

func (t *TemplateCreateTemplateTemporaryEmailSettingsRequest) GetDocumentPending() *bool {
	if t == nil {
		return nil
	}
	return t.DocumentPending
}

func (t *TemplateCreateTemplateTemporaryEmailSettingsRequest) GetDocumentCompleted() *bool {
	if t == nil {
		return nil
	}
	return t.DocumentCompleted
}

func (t *TemplateCreateTemplateTemporaryEmailSettingsRequest) GetDocumentDeleted() *bool {
	if t == nil {
		return nil
	}
	return t.DocumentDeleted
}

func (t *TemplateCreateTemplateTemporaryEmailSettingsRequest) GetOwnerDocumentCompleted() *bool {
	if t == nil {
		return nil
	}
	return t.OwnerDocumentCompleted
}

// TemplateCreateTemplateTemporaryLanguage - The language to use for email communications with recipients.
type TemplateCreateTemplateTemporaryLanguage string

const (
	TemplateCreateTemplateTemporaryLanguageDe TemplateCreateTemplateTemporaryLanguage = "de"
	TemplateCreateTemplateTemporaryLanguageEn TemplateCreateTemplateTemporaryLanguage = "en"
	TemplateCreateTemplateTemporaryLanguageFr TemplateCreateTemplateTemporaryLanguage = "fr"
	TemplateCreateTemplateTemporaryLanguageEs TemplateCreateTemplateTemporaryLanguage = "es"
	TemplateCreateTemplateTemporaryLanguageIt TemplateCreateTemplateTemporaryLanguage = "it"
	TemplateCreateTemplateTemporaryLanguagePl TemplateCreateTemplateTemporaryLanguage = "pl"
)

func (e TemplateCreateTemplateTemporaryLanguage) ToPointer() *TemplateCreateTemplateTemporaryLanguage {
	return &e
}
func (e *TemplateCreateTemplateTemporaryLanguage) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "de":
		fallthrough
	case "en":
		fallthrough
	case "fr":
		fallthrough
	case "es":
		fallthrough
	case "it":
		fallthrough
	case "pl":
		*e = TemplateCreateTemplateTemporaryLanguage(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryLanguage: %v", v)
	}
}

type TemplateCreateTemplateTemporarySigningOrderRequest string

const (
	TemplateCreateTemplateTemporarySigningOrderRequestParallel   TemplateCreateTemplateTemporarySigningOrderRequest = "PARALLEL"
	TemplateCreateTemplateTemporarySigningOrderRequestSequential TemplateCreateTemplateTemporarySigningOrderRequest = "SEQUENTIAL"
)

func (e TemplateCreateTemplateTemporarySigningOrderRequest) ToPointer() *TemplateCreateTemplateTemporarySigningOrderRequest {
	return &e
}
func (e *TemplateCreateTemplateTemporarySigningOrderRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARALLEL":
		fallthrough
	case "SEQUENTIAL":
		*e = TemplateCreateTemplateTemporarySigningOrderRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporarySigningOrderRequest: %v", v)
	}
}

type TemplateCreateTemplateTemporaryMeta struct {
	// The subject of the email that will be sent to the recipients.
	Subject *string `json:"subject,omitempty"`
	// The message of the email that will be sent to the recipients.
	Message *string `json:"message,omitempty"`
	// The timezone to use for date fields and signing the document. Example Etc/UTC, Australia/Melbourne
	Timezone *string `json:"timezone,omitempty"`
	// The date format to use for date fields and signing the document.
	DateFormat *TemplateCreateTemplateTemporaryDateFormat `json:"dateFormat,omitempty"`
	// The distribution method to use when sending the document to the recipients.
	DistributionMethod *TemplateCreateTemplateTemporaryDistributionMethodRequest `json:"distributionMethod,omitempty"`
	EmailID            *string                                                   `json:"emailId,omitempty"`
	EmailReplyTo       *string                                                   `json:"emailReplyTo,omitempty"`
	EmailSettings      *TemplateCreateTemplateTemporaryEmailSettingsRequest      `json:"emailSettings,omitempty"`
	// The URL to which the recipient should be redirected after signing the document.
	RedirectURL *string `json:"redirectUrl,omitempty"`
	// The language to use for email communications with recipients.
	Language *TemplateCreateTemplateTemporaryLanguage `json:"language,omitempty"`
	// Whether to allow recipients to sign using a typed signature.
	TypedSignatureEnabled *bool `json:"typedSignatureEnabled,omitempty"`
	// Whether to allow recipients to sign using an uploaded signature.
	UploadSignatureEnabled *bool `json:"uploadSignatureEnabled,omitempty"`
	// Whether to allow recipients to sign using a draw signature.
	DrawSignatureEnabled   *bool                                               `json:"drawSignatureEnabled,omitempty"`
	SigningOrder           *TemplateCreateTemplateTemporarySigningOrderRequest `json:"signingOrder,omitempty"`
	AllowDictateNextSigner *bool                                               `json:"allowDictateNextSigner,omitempty"`
}

func (t *TemplateCreateTemplateTemporaryMeta) GetSubject() *string {
	if t == nil {
		return nil
	}
	return t.Subject
}

func (t *TemplateCreateTemplateTemporaryMeta) GetMessage() *string {
	if t == nil {
		return nil
	}
	return t.Message
}

func (t *TemplateCreateTemplateTemporaryMeta) GetTimezone() *string {
	if t == nil {
		return nil
	}
	return t.Timezone
}

func (t *TemplateCreateTemplateTemporaryMeta) GetDateFormat() *TemplateCreateTemplateTemporaryDateFormat {
	if t == nil {
		return nil
	}
	return t.DateFormat
}

func (t *TemplateCreateTemplateTemporaryMeta) GetDistributionMethod() *TemplateCreateTemplateTemporaryDistributionMethodRequest {
	if t == nil {
		return nil
	}
	return t.DistributionMethod
}

func (t *TemplateCreateTemplateTemporaryMeta) GetEmailID() *string {
	if t == nil {
		return nil
	}
	return t.EmailID
}

func (t *TemplateCreateTemplateTemporaryMeta) GetEmailReplyTo() *string {
	if t == nil {
		return nil
	}
	return t.EmailReplyTo
}

func (t *TemplateCreateTemplateTemporaryMeta) GetEmailSettings() *TemplateCreateTemplateTemporaryEmailSettingsRequest {
	if t == nil {
		return nil
	}
	return t.EmailSettings
}

func (t *TemplateCreateTemplateTemporaryMeta) GetRedirectURL() *string {
	if t == nil {
		return nil
	}
	return t.RedirectURL
}

func (t *TemplateCreateTemplateTemporaryMeta) GetLanguage() *TemplateCreateTemplateTemporaryLanguage {
	if t == nil {
		return nil
	}
	return t.Language
}

func (t *TemplateCreateTemplateTemporaryMeta) GetTypedSignatureEnabled() *bool {
	if t == nil {
		return nil
	}
	return t.TypedSignatureEnabled
}

func (t *TemplateCreateTemplateTemporaryMeta) GetUploadSignatureEnabled() *bool {
	if t == nil {
		return nil
	}
	return t.UploadSignatureEnabled
}

func (t *TemplateCreateTemplateTemporaryMeta) GetDrawSignatureEnabled() *bool {
	if t == nil {
		return nil
	}
	return t.DrawSignatureEnabled
}

func (t *TemplateCreateTemplateTemporaryMeta) GetSigningOrder() *TemplateCreateTemplateTemporarySigningOrderRequest {
	if t == nil {
		return nil
	}
	return t.SigningOrder
}

func (t *TemplateCreateTemplateTemporaryMeta) GetAllowDictateNextSigner() *bool {
	if t == nil {
		return nil
	}
	return t.AllowDictateNextSigner
}

type TemplateCreateTemplateTemporaryRequest struct {
	// The title of the document.
	Title            string                                                   `json:"title"`
	FolderID         *string                                                  `json:"folderId,omitempty"`
	ExternalID       *string                                                  `json:"externalId,omitempty"`
	Visibility       *TemplateCreateTemplateTemporaryVisibilityRequest        `json:"visibility,omitempty"`
	GlobalAccessAuth []TemplateCreateTemplateTemporaryGlobalAccessAuthRequest `json:"globalAccessAuth,omitempty"`
	GlobalActionAuth []TemplateCreateTemplateTemporaryGlobalActionAuthRequest `json:"globalActionAuth,omitempty"`
	// The title of the template that will be displayed to the public. Only applicable for public templates.
	PublicTitle *string `json:"publicTitle,omitempty"`
	// The description of the template that will be displayed to the public. Only applicable for public templates.
	PublicDescription *string                                     `json:"publicDescription,omitempty"`
	Type              *TemplateCreateTemplateTemporaryTypeRequest `json:"type,omitempty"`
	Meta              *TemplateCreateTemplateTemporaryMeta        `json:"meta,omitempty"`
}

func (t *TemplateCreateTemplateTemporaryRequest) GetTitle() string {
	if t == nil {
		return ""
	}
	return t.Title
}

func (t *TemplateCreateTemplateTemporaryRequest) GetFolderID() *string {
	if t == nil {
		return nil
	}
	return t.FolderID
}

func (t *TemplateCreateTemplateTemporaryRequest) GetExternalID() *string {
	if t == nil {
		return nil
	}
	return t.ExternalID
}

func (t *TemplateCreateTemplateTemporaryRequest) GetVisibility() *TemplateCreateTemplateTemporaryVisibilityRequest {
	if t == nil {
		return nil
	}
	return t.Visibility
}

func (t *TemplateCreateTemplateTemporaryRequest) GetGlobalAccessAuth() []TemplateCreateTemplateTemporaryGlobalAccessAuthRequest {
	if t == nil {
		return nil
	}
	return t.GlobalAccessAuth
}

func (t *TemplateCreateTemplateTemporaryRequest) GetGlobalActionAuth() []TemplateCreateTemplateTemporaryGlobalActionAuthRequest {
	if t == nil {
		return nil
	}
	return t.GlobalActionAuth
}

func (t *TemplateCreateTemplateTemporaryRequest) GetPublicTitle() *string {
	if t == nil {
		return nil
	}
	return t.PublicTitle
}

func (t *TemplateCreateTemplateTemporaryRequest) GetPublicDescription() *string {
	if t == nil {
		return nil
	}
	return t.PublicDescription
}

func (t *TemplateCreateTemplateTemporaryRequest) GetType() *TemplateCreateTemplateTemporaryTypeRequest {
	if t == nil {
		return nil
	}
	return t.Type
}

func (t *TemplateCreateTemplateTemporaryRequest) GetMeta() *TemplateCreateTemplateTemporaryMeta {
	if t == nil {
		return nil
	}
	return t.Meta
}

type TemplateCreateTemplateTemporaryTypeResponse string

const (
	TemplateCreateTemplateTemporaryTypeResponsePublic  TemplateCreateTemplateTemporaryTypeResponse = "PUBLIC"
	TemplateCreateTemplateTemporaryTypeResponsePrivate TemplateCreateTemplateTemporaryTypeResponse = "PRIVATE"
)

func (e TemplateCreateTemplateTemporaryTypeResponse) ToPointer() *TemplateCreateTemplateTemporaryTypeResponse {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PUBLIC":
		fallthrough
	case "PRIVATE":
		*e = TemplateCreateTemplateTemporaryTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTypeResponse: %v", v)
	}
}

type TemplateCreateTemplateTemporaryVisibilityResponse string

const (
	TemplateCreateTemplateTemporaryVisibilityResponseEveryone        TemplateCreateTemplateTemporaryVisibilityResponse = "EVERYONE"
	TemplateCreateTemplateTemporaryVisibilityResponseManagerAndAbove TemplateCreateTemplateTemporaryVisibilityResponse = "MANAGER_AND_ABOVE"
	TemplateCreateTemplateTemporaryVisibilityResponseAdmin           TemplateCreateTemplateTemporaryVisibilityResponse = "ADMIN"
)

func (e TemplateCreateTemplateTemporaryVisibilityResponse) ToPointer() *TemplateCreateTemplateTemporaryVisibilityResponse {
	return &e
}
func (e *TemplateCreateTemplateTemporaryVisibilityResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = TemplateCreateTemplateTemporaryVisibilityResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryVisibilityResponse: %v", v)
	}
}

// TemplateCreateTemplateTemporaryGlobalAccessAuthResponse - The type of authentication required for the recipient to access the document.
type TemplateCreateTemplateTemporaryGlobalAccessAuthResponse string

const (
	TemplateCreateTemplateTemporaryGlobalAccessAuthResponseAccount       TemplateCreateTemplateTemporaryGlobalAccessAuthResponse = "ACCOUNT"
	TemplateCreateTemplateTemporaryGlobalAccessAuthResponseTwoFactorAuth TemplateCreateTemplateTemporaryGlobalAccessAuthResponse = "TWO_FACTOR_AUTH"
)

func (e TemplateCreateTemplateTemporaryGlobalAccessAuthResponse) ToPointer() *TemplateCreateTemplateTemporaryGlobalAccessAuthResponse {
	return &e
}
func (e *TemplateCreateTemplateTemporaryGlobalAccessAuthResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = TemplateCreateTemplateTemporaryGlobalAccessAuthResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryGlobalAccessAuthResponse: %v", v)
	}
}

// TemplateCreateTemplateTemporaryGlobalActionAuthResponse - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type TemplateCreateTemplateTemporaryGlobalActionAuthResponse string

const (
	TemplateCreateTemplateTemporaryGlobalActionAuthResponseAccount       TemplateCreateTemplateTemporaryGlobalActionAuthResponse = "ACCOUNT"
	TemplateCreateTemplateTemporaryGlobalActionAuthResponsePasskey       TemplateCreateTemplateTemporaryGlobalActionAuthResponse = "PASSKEY"
	TemplateCreateTemplateTemporaryGlobalActionAuthResponseTwoFactorAuth TemplateCreateTemplateTemporaryGlobalActionAuthResponse = "TWO_FACTOR_AUTH"
	TemplateCreateTemplateTemporaryGlobalActionAuthResponsePassword      TemplateCreateTemplateTemporaryGlobalActionAuthResponse = "PASSWORD"
)

func (e TemplateCreateTemplateTemporaryGlobalActionAuthResponse) ToPointer() *TemplateCreateTemplateTemporaryGlobalActionAuthResponse {
	return &e
}
func (e *TemplateCreateTemplateTemporaryGlobalActionAuthResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		*e = TemplateCreateTemplateTemporaryGlobalActionAuthResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryGlobalActionAuthResponse: %v", v)
	}
}

type TemplateCreateTemplateTemporaryAuthOptions struct {
	GlobalAccessAuth []TemplateCreateTemplateTemporaryGlobalAccessAuthResponse `json:"globalAccessAuth"`
	GlobalActionAuth []TemplateCreateTemplateTemporaryGlobalActionAuthResponse `json:"globalActionAuth"`
}

func (t *TemplateCreateTemplateTemporaryAuthOptions) GetGlobalAccessAuth() []TemplateCreateTemplateTemporaryGlobalAccessAuthResponse {
	if t == nil {
		return []TemplateCreateTemplateTemporaryGlobalAccessAuthResponse{}
	}
	return t.GlobalAccessAuth
}

func (t *TemplateCreateTemplateTemporaryAuthOptions) GetGlobalActionAuth() []TemplateCreateTemplateTemporaryGlobalActionAuthResponse {
	if t == nil {
		return []TemplateCreateTemplateTemporaryGlobalActionAuthResponse{}
	}
	return t.GlobalActionAuth
}

type TemplateCreateTemplateTemporaryTemplateDocumentDataType string

const (
	TemplateCreateTemplateTemporaryTemplateDocumentDataTypeS3Path  TemplateCreateTemplateTemporaryTemplateDocumentDataType = "S3_PATH"
	TemplateCreateTemplateTemporaryTemplateDocumentDataTypeBytes   TemplateCreateTemplateTemporaryTemplateDocumentDataType = "BYTES"
	TemplateCreateTemplateTemporaryTemplateDocumentDataTypeBytes64 TemplateCreateTemplateTemporaryTemplateDocumentDataType = "BYTES_64"
)

func (e TemplateCreateTemplateTemporaryTemplateDocumentDataType) ToPointer() *TemplateCreateTemplateTemporaryTemplateDocumentDataType {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTemplateDocumentDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3_PATH":
		fallthrough
	case "BYTES":
		fallthrough
	case "BYTES_64":
		*e = TemplateCreateTemplateTemporaryTemplateDocumentDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTemplateDocumentDataType: %v", v)
	}
}

type TemplateCreateTemplateTemporaryTemplateDocumentData struct {
	Type           TemplateCreateTemplateTemporaryTemplateDocumentDataType `json:"type"`
	ID             string                                                  `json:"id"`
	Data           string                                                  `json:"data"`
	InitialData    string                                                  `json:"initialData"`
	EnvelopeItemID string                                                  `json:"envelopeItemId"`
}

func (t *TemplateCreateTemplateTemporaryTemplateDocumentData) GetType() TemplateCreateTemplateTemporaryTemplateDocumentDataType {
	if t == nil {
		return TemplateCreateTemplateTemporaryTemplateDocumentDataType("")
	}
	return t.Type
}

func (t *TemplateCreateTemplateTemporaryTemplateDocumentData) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *TemplateCreateTemplateTemporaryTemplateDocumentData) GetData() string {
	if t == nil {
		return ""
	}
	return t.Data
}

func (t *TemplateCreateTemplateTemporaryTemplateDocumentData) GetInitialData() string {
	if t == nil {
		return ""
	}
	return t.InitialData
}

func (t *TemplateCreateTemplateTemporaryTemplateDocumentData) GetEnvelopeItemID() string {
	if t == nil {
		return ""
	}
	return t.EnvelopeItemID
}

type TemplateCreateTemplateTemporaryTemplateMetaSigningOrder string

const (
	TemplateCreateTemplateTemporaryTemplateMetaSigningOrderParallel   TemplateCreateTemplateTemporaryTemplateMetaSigningOrder = "PARALLEL"
	TemplateCreateTemplateTemporaryTemplateMetaSigningOrderSequential TemplateCreateTemplateTemporaryTemplateMetaSigningOrder = "SEQUENTIAL"
)

func (e TemplateCreateTemplateTemporaryTemplateMetaSigningOrder) ToPointer() *TemplateCreateTemplateTemporaryTemplateMetaSigningOrder {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTemplateMetaSigningOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARALLEL":
		fallthrough
	case "SEQUENTIAL":
		*e = TemplateCreateTemplateTemporaryTemplateMetaSigningOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTemplateMetaSigningOrder: %v", v)
	}
}

type TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod string

const (
	TemplateCreateTemplateTemporaryTemplateMetaDistributionMethodEmail TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod = "EMAIL"
	TemplateCreateTemplateTemporaryTemplateMetaDistributionMethodNone  TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod = "NONE"
)

func (e TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod) ToPointer() *TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod: %v", v)
	}
}

type TemplateCreateTemplateTemporaryTemplateMetaEmailSettings struct {
	// Whether to send an email to all recipients that the document is ready for them to sign.
	RecipientSigningRequest *bool `default:"true" json:"recipientSigningRequest"`
	// Whether to send an email to the recipient who was removed from a pending document.
	RecipientRemoved *bool `default:"true" json:"recipientRemoved"`
	// Whether to send an email to the document owner when a recipient has signed the document.
	RecipientSigned *bool `default:"true" json:"recipientSigned"`
	// Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
	DocumentPending *bool `default:"true" json:"documentPending"`
	// Whether to send an email to all recipients when the document is complete.
	DocumentCompleted *bool `default:"true" json:"documentCompleted"`
	// Whether to send an email to all recipients if a pending document has been deleted.
	DocumentDeleted *bool `default:"true" json:"documentDeleted"`
	// Whether to send an email to the document owner when the document is complete.
	OwnerDocumentCompleted *bool `default:"true" json:"ownerDocumentCompleted"`
}

func (t TemplateCreateTemplateTemporaryTemplateMetaEmailSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateCreateTemplateTemporaryTemplateMetaEmailSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (t *TemplateCreateTemplateTemporaryTemplateMetaEmailSettings) GetRecipientSigningRequest() *bool {
	if t == nil {
		return nil
	}
	return t.RecipientSigningRequest
}

func (t *TemplateCreateTemplateTemporaryTemplateMetaEmailSettings) GetRecipientRemoved() *bool {
	if t == nil {
		return nil
	}
	return t.RecipientRemoved
}

func (t *TemplateCreateTemplateTemporaryTemplateMetaEmailSettings) GetRecipientSigned() *bool {
	if t == nil {
		return nil
	}
	return t.RecipientSigned
}

func (t *TemplateCreateTemplateTemporaryTemplateMetaEmailSettings) GetDocumentPending() *bool {
	if t == nil {
		return nil
	}
	return t.DocumentPending
}

func (t *TemplateCreateTemplateTemporaryTemplateMetaEmailSettings) GetDocumentCompleted() *bool {
	if t == nil {
		return nil
	}
	return t.DocumentCompleted
}

func (t *TemplateCreateTemplateTemporaryTemplateMetaEmailSettings) GetDocumentDeleted() *bool {
	if t == nil {
		return nil
	}
	return t.DocumentDeleted
}

func (t *TemplateCreateTemplateTemporaryTemplateMetaEmailSettings) GetOwnerDocumentCompleted() *bool {
	if t == nil {
		return nil
	}
	return t.OwnerDocumentCompleted
}

type TemplateCreateTemplateTemporaryTemplateMeta struct {
	ID                     string                                                        `json:"id"`
	Subject                *string                                                       `json:"subject"`
	Message                *string                                                       `json:"message"`
	Timezone               *string                                                       `json:"timezone"`
	DateFormat             *string                                                       `json:"dateFormat"`
	SigningOrder           TemplateCreateTemplateTemporaryTemplateMetaSigningOrder       `json:"signingOrder"`
	TypedSignatureEnabled  bool                                                          `json:"typedSignatureEnabled"`
	UploadSignatureEnabled bool                                                          `json:"uploadSignatureEnabled"`
	DrawSignatureEnabled   bool                                                          `json:"drawSignatureEnabled"`
	AllowDictateNextSigner bool                                                          `json:"allowDictateNextSigner"`
	DistributionMethod     TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod `json:"distributionMethod"`
	RedirectURL            *string                                                       `json:"redirectUrl"`
	Language               string                                                        `json:"language"`
	EmailSettings          *TemplateCreateTemplateTemporaryTemplateMetaEmailSettings     `json:"emailSettings"`
	EmailID                *string                                                       `json:"emailId"`
	EmailReplyTo           *string                                                       `json:"emailReplyTo"`
	TemplateID             *float64                                                      `json:"templateId"`
}

func (t *TemplateCreateTemplateTemporaryTemplateMeta) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *TemplateCreateTemplateTemporaryTemplateMeta) GetSubject() *string {
	if t == nil {
		return nil
	}
	return t.Subject
}

func (t *TemplateCreateTemplateTemporaryTemplateMeta) GetMessage() *string {
	if t == nil {
		return nil
	}
	return t.Message
}

func (t *TemplateCreateTemplateTemporaryTemplateMeta) GetTimezone() *string {
	if t == nil {
		return nil
	}
	return t.Timezone
}

func (t *TemplateCreateTemplateTemporaryTemplateMeta) GetDateFormat() *string {
	if t == nil {
		return nil
	}
	return t.DateFormat
}

func (t *TemplateCreateTemplateTemporaryTemplateMeta) GetSigningOrder() TemplateCreateTemplateTemporaryTemplateMetaSigningOrder {
	if t == nil {
		return TemplateCreateTemplateTemporaryTemplateMetaSigningOrder("")
	}
	return t.SigningOrder
}

func (t *TemplateCreateTemplateTemporaryTemplateMeta) GetTypedSignatureEnabled() bool {
	if t == nil {
		return false
	}
	return t.TypedSignatureEnabled
}

func (t *TemplateCreateTemplateTemporaryTemplateMeta) GetUploadSignatureEnabled() bool {
	if t == nil {
		return false
	}
	return t.UploadSignatureEnabled
}

func (t *TemplateCreateTemplateTemporaryTemplateMeta) GetDrawSignatureEnabled() bool {
	if t == nil {
		return false
	}
	return t.DrawSignatureEnabled
}

func (t *TemplateCreateTemplateTemporaryTemplateMeta) GetAllowDictateNextSigner() bool {
	if t == nil {
		return false
	}
	return t.AllowDictateNextSigner
}

func (t *TemplateCreateTemplateTemporaryTemplateMeta) GetDistributionMethod() TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod {
	if t == nil {
		return TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod("")
	}
	return t.DistributionMethod
}

func (t *TemplateCreateTemplateTemporaryTemplateMeta) GetRedirectURL() *string {
	if t == nil {
		return nil
	}
	return t.RedirectURL
}

func (t *TemplateCreateTemplateTemporaryTemplateMeta) GetLanguage() string {
	if t == nil {
		return ""
	}
	return t.Language
}

func (t *TemplateCreateTemplateTemporaryTemplateMeta) GetEmailSettings() *TemplateCreateTemplateTemporaryTemplateMetaEmailSettings {
	if t == nil {
		return nil
	}
	return t.EmailSettings
}

func (t *TemplateCreateTemplateTemporaryTemplateMeta) GetEmailID() *string {
	if t == nil {
		return nil
	}
	return t.EmailID
}

func (t *TemplateCreateTemplateTemporaryTemplateMeta) GetEmailReplyTo() *string {
	if t == nil {
		return nil
	}
	return t.EmailReplyTo
}

func (t *TemplateCreateTemplateTemporaryTemplateMeta) GetTemplateID() *float64 {
	if t == nil {
		return nil
	}
	return t.TemplateID
}

type TemplateCreateTemplateTemporaryDirectLink struct {
	ID                        string  `json:"id"`
	EnvelopeID                string  `json:"envelopeId"`
	Token                     string  `json:"token"`
	CreatedAt                 string  `json:"createdAt"`
	Enabled                   bool    `json:"enabled"`
	DirectTemplateRecipientID float64 `json:"directTemplateRecipientId"`
	TemplateID                float64 `json:"templateId"`
}

func (t *TemplateCreateTemplateTemporaryDirectLink) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *TemplateCreateTemplateTemporaryDirectLink) GetEnvelopeID() string {
	if t == nil {
		return ""
	}
	return t.EnvelopeID
}

func (t *TemplateCreateTemplateTemporaryDirectLink) GetToken() string {
	if t == nil {
		return ""
	}
	return t.Token
}

func (t *TemplateCreateTemplateTemporaryDirectLink) GetCreatedAt() string {
	if t == nil {
		return ""
	}
	return t.CreatedAt
}

func (t *TemplateCreateTemplateTemporaryDirectLink) GetEnabled() bool {
	if t == nil {
		return false
	}
	return t.Enabled
}

func (t *TemplateCreateTemplateTemporaryDirectLink) GetDirectTemplateRecipientID() float64 {
	if t == nil {
		return 0.0
	}
	return t.DirectTemplateRecipientID
}

func (t *TemplateCreateTemplateTemporaryDirectLink) GetTemplateID() float64 {
	if t == nil {
		return 0.0
	}
	return t.TemplateID
}

type TemplateCreateTemplateTemporaryUser struct {
	ID    float64 `json:"id"`
	Name  *string `json:"name"`
	Email string  `json:"email"`
}

func (t *TemplateCreateTemplateTemporaryUser) GetID() float64 {
	if t == nil {
		return 0.0
	}
	return t.ID
}

func (t *TemplateCreateTemplateTemporaryUser) GetName() *string {
	if t == nil {
		return nil
	}
	return t.Name
}

func (t *TemplateCreateTemplateTemporaryUser) GetEmail() string {
	if t == nil {
		return ""
	}
	return t.Email
}

type TemplateCreateTemplateTemporaryRole string

const (
	TemplateCreateTemplateTemporaryRoleCc        TemplateCreateTemplateTemporaryRole = "CC"
	TemplateCreateTemplateTemporaryRoleSigner    TemplateCreateTemplateTemporaryRole = "SIGNER"
	TemplateCreateTemplateTemporaryRoleViewer    TemplateCreateTemplateTemporaryRole = "VIEWER"
	TemplateCreateTemplateTemporaryRoleApprover  TemplateCreateTemplateTemporaryRole = "APPROVER"
	TemplateCreateTemplateTemporaryRoleAssistant TemplateCreateTemplateTemporaryRole = "ASSISTANT"
)

func (e TemplateCreateTemplateTemporaryRole) ToPointer() *TemplateCreateTemplateTemporaryRole {
	return &e
}
func (e *TemplateCreateTemplateTemporaryRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = TemplateCreateTemplateTemporaryRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryRole: %v", v)
	}
}

type TemplateCreateTemplateTemporaryReadStatus string

const (
	TemplateCreateTemplateTemporaryReadStatusNotOpened TemplateCreateTemplateTemporaryReadStatus = "NOT_OPENED"
	TemplateCreateTemplateTemporaryReadStatusOpened    TemplateCreateTemplateTemporaryReadStatus = "OPENED"
)

func (e TemplateCreateTemplateTemporaryReadStatus) ToPointer() *TemplateCreateTemplateTemporaryReadStatus {
	return &e
}
func (e *TemplateCreateTemplateTemporaryReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = TemplateCreateTemplateTemporaryReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryReadStatus: %v", v)
	}
}

type TemplateCreateTemplateTemporarySigningStatus string

const (
	TemplateCreateTemplateTemporarySigningStatusNotSigned TemplateCreateTemplateTemporarySigningStatus = "NOT_SIGNED"
	TemplateCreateTemplateTemporarySigningStatusSigned    TemplateCreateTemplateTemporarySigningStatus = "SIGNED"
	TemplateCreateTemplateTemporarySigningStatusRejected  TemplateCreateTemplateTemporarySigningStatus = "REJECTED"
)

func (e TemplateCreateTemplateTemporarySigningStatus) ToPointer() *TemplateCreateTemplateTemporarySigningStatus {
	return &e
}
func (e *TemplateCreateTemplateTemporarySigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = TemplateCreateTemplateTemporarySigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporarySigningStatus: %v", v)
	}
}

type TemplateCreateTemplateTemporarySendStatus string

const (
	TemplateCreateTemplateTemporarySendStatusNotSent TemplateCreateTemplateTemporarySendStatus = "NOT_SENT"
	TemplateCreateTemplateTemporarySendStatusSent    TemplateCreateTemplateTemporarySendStatus = "SENT"
)

func (e TemplateCreateTemplateTemporarySendStatus) ToPointer() *TemplateCreateTemplateTemporarySendStatus {
	return &e
}
func (e *TemplateCreateTemplateTemporarySendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = TemplateCreateTemplateTemporarySendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporarySendStatus: %v", v)
	}
}

// TemplateCreateTemplateTemporaryAccessAuth - The type of authentication required for the recipient to access the document.
type TemplateCreateTemplateTemporaryAccessAuth string

const (
	TemplateCreateTemplateTemporaryAccessAuthAccount       TemplateCreateTemplateTemporaryAccessAuth = "ACCOUNT"
	TemplateCreateTemplateTemporaryAccessAuthTwoFactorAuth TemplateCreateTemplateTemporaryAccessAuth = "TWO_FACTOR_AUTH"
)

func (e TemplateCreateTemplateTemporaryAccessAuth) ToPointer() *TemplateCreateTemplateTemporaryAccessAuth {
	return &e
}
func (e *TemplateCreateTemplateTemporaryAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = TemplateCreateTemplateTemporaryAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryAccessAuth: %v", v)
	}
}

// TemplateCreateTemplateTemporaryActionAuth - The type of authentication required for the recipient to sign the document.
type TemplateCreateTemplateTemporaryActionAuth string

const (
	TemplateCreateTemplateTemporaryActionAuthAccount       TemplateCreateTemplateTemporaryActionAuth = "ACCOUNT"
	TemplateCreateTemplateTemporaryActionAuthPasskey       TemplateCreateTemplateTemporaryActionAuth = "PASSKEY"
	TemplateCreateTemplateTemporaryActionAuthTwoFactorAuth TemplateCreateTemplateTemporaryActionAuth = "TWO_FACTOR_AUTH"
	TemplateCreateTemplateTemporaryActionAuthPassword      TemplateCreateTemplateTemporaryActionAuth = "PASSWORD"
	TemplateCreateTemplateTemporaryActionAuthExplicitNone  TemplateCreateTemplateTemporaryActionAuth = "EXPLICIT_NONE"
)

func (e TemplateCreateTemplateTemporaryActionAuth) ToPointer() *TemplateCreateTemplateTemporaryActionAuth {
	return &e
}
func (e *TemplateCreateTemplateTemporaryActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "PASSWORD":
		fallthrough
	case "EXPLICIT_NONE":
		*e = TemplateCreateTemplateTemporaryActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryActionAuth: %v", v)
	}
}

type TemplateCreateTemplateTemporaryRecipientAuthOptions struct {
	AccessAuth []TemplateCreateTemplateTemporaryAccessAuth `json:"accessAuth"`
	ActionAuth []TemplateCreateTemplateTemporaryActionAuth `json:"actionAuth"`
}

func (t *TemplateCreateTemplateTemporaryRecipientAuthOptions) GetAccessAuth() []TemplateCreateTemplateTemporaryAccessAuth {
	if t == nil {
		return []TemplateCreateTemplateTemporaryAccessAuth{}
	}
	return t.AccessAuth
}

func (t *TemplateCreateTemplateTemporaryRecipientAuthOptions) GetActionAuth() []TemplateCreateTemplateTemporaryActionAuth {
	if t == nil {
		return []TemplateCreateTemplateTemporaryActionAuth{}
	}
	return t.ActionAuth
}

type TemplateCreateTemplateTemporaryRecipient struct {
	EnvelopeID        string                                               `json:"envelopeId"`
	Role              TemplateCreateTemplateTemporaryRole                  `json:"role"`
	ReadStatus        TemplateCreateTemplateTemporaryReadStatus            `json:"readStatus"`
	SigningStatus     TemplateCreateTemplateTemporarySigningStatus         `json:"signingStatus"`
	SendStatus        TemplateCreateTemplateTemporarySendStatus            `json:"sendStatus"`
	ID                float64                                              `json:"id"`
	Email             string                                               `json:"email"`
	Name              string                                               `json:"name"`
	Token             string                                               `json:"token"`
	DocumentDeletedAt *string                                              `json:"documentDeletedAt"`
	Expired           *string                                              `json:"expired"`
	SignedAt          *string                                              `json:"signedAt"`
	AuthOptions       *TemplateCreateTemplateTemporaryRecipientAuthOptions `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
	DocumentID      *float64 `json:"documentId,omitempty"`
	TemplateID      *float64 `json:"templateId,omitempty"`
}

func (t *TemplateCreateTemplateTemporaryRecipient) GetEnvelopeID() string {
	if t == nil {
		return ""
	}
	return t.EnvelopeID
}

func (t *TemplateCreateTemplateTemporaryRecipient) GetRole() TemplateCreateTemplateTemporaryRole {
	if t == nil {
		return TemplateCreateTemplateTemporaryRole("")
	}
	return t.Role
}

func (t *TemplateCreateTemplateTemporaryRecipient) GetReadStatus() TemplateCreateTemplateTemporaryReadStatus {
	if t == nil {
		return TemplateCreateTemplateTemporaryReadStatus("")
	}
	return t.ReadStatus
}

func (t *TemplateCreateTemplateTemporaryRecipient) GetSigningStatus() TemplateCreateTemplateTemporarySigningStatus {
	if t == nil {
		return TemplateCreateTemplateTemporarySigningStatus("")
	}
	return t.SigningStatus
}

func (t *TemplateCreateTemplateTemporaryRecipient) GetSendStatus() TemplateCreateTemplateTemporarySendStatus {
	if t == nil {
		return TemplateCreateTemplateTemporarySendStatus("")
	}
	return t.SendStatus
}

func (t *TemplateCreateTemplateTemporaryRecipient) GetID() float64 {
	if t == nil {
		return 0.0
	}
	return t.ID
}

func (t *TemplateCreateTemplateTemporaryRecipient) GetEmail() string {
	if t == nil {
		return ""
	}
	return t.Email
}

func (t *TemplateCreateTemplateTemporaryRecipient) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *TemplateCreateTemplateTemporaryRecipient) GetToken() string {
	if t == nil {
		return ""
	}
	return t.Token
}

func (t *TemplateCreateTemplateTemporaryRecipient) GetDocumentDeletedAt() *string {
	if t == nil {
		return nil
	}
	return t.DocumentDeletedAt
}

func (t *TemplateCreateTemplateTemporaryRecipient) GetExpired() *string {
	if t == nil {
		return nil
	}
	return t.Expired
}

func (t *TemplateCreateTemplateTemporaryRecipient) GetSignedAt() *string {
	if t == nil {
		return nil
	}
	return t.SignedAt
}

func (t *TemplateCreateTemplateTemporaryRecipient) GetAuthOptions() *TemplateCreateTemplateTemporaryRecipientAuthOptions {
	if t == nil {
		return nil
	}
	return t.AuthOptions
}

func (t *TemplateCreateTemplateTemporaryRecipient) GetSigningOrder() *float64 {
	if t == nil {
		return nil
	}
	return t.SigningOrder
}

func (t *TemplateCreateTemplateTemporaryRecipient) GetRejectionReason() *string {
	if t == nil {
		return nil
	}
	return t.RejectionReason
}

func (t *TemplateCreateTemplateTemporaryRecipient) GetDocumentID() *float64 {
	if t == nil {
		return nil
	}
	return t.DocumentID
}

func (t *TemplateCreateTemplateTemporaryRecipient) GetTemplateID() *float64 {
	if t == nil {
		return nil
	}
	return t.TemplateID
}

type TemplateCreateTemplateTemporaryFieldType string

const (
	TemplateCreateTemplateTemporaryFieldTypeSignature     TemplateCreateTemplateTemporaryFieldType = "SIGNATURE"
	TemplateCreateTemplateTemporaryFieldTypeFreeSignature TemplateCreateTemplateTemporaryFieldType = "FREE_SIGNATURE"
	TemplateCreateTemplateTemporaryFieldTypeInitials      TemplateCreateTemplateTemporaryFieldType = "INITIALS"
	TemplateCreateTemplateTemporaryFieldTypeName          TemplateCreateTemplateTemporaryFieldType = "NAME"
	TemplateCreateTemplateTemporaryFieldTypeEmail         TemplateCreateTemplateTemporaryFieldType = "EMAIL"
	TemplateCreateTemplateTemporaryFieldTypeDate          TemplateCreateTemplateTemporaryFieldType = "DATE"
	TemplateCreateTemplateTemporaryFieldTypeText          TemplateCreateTemplateTemporaryFieldType = "TEXT"
	TemplateCreateTemplateTemporaryFieldTypeNumber        TemplateCreateTemplateTemporaryFieldType = "NUMBER"
	TemplateCreateTemplateTemporaryFieldTypeRadio         TemplateCreateTemplateTemporaryFieldType = "RADIO"
	TemplateCreateTemplateTemporaryFieldTypeCheckbox      TemplateCreateTemplateTemporaryFieldType = "CHECKBOX"
	TemplateCreateTemplateTemporaryFieldTypeDropdown      TemplateCreateTemplateTemporaryFieldType = "DROPDOWN"
)

func (e TemplateCreateTemplateTemporaryFieldType) ToPointer() *TemplateCreateTemplateTemporaryFieldType {
	return &e
}
func (e *TemplateCreateTemplateTemporaryFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = TemplateCreateTemplateTemporaryFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryFieldType: %v", v)
	}
}

type TemplateCreateTemplateTemporaryTypeDropdown string

const (
	TemplateCreateTemplateTemporaryTypeDropdownDropdown TemplateCreateTemplateTemporaryTypeDropdown = "dropdown"
)

func (e TemplateCreateTemplateTemporaryTypeDropdown) ToPointer() *TemplateCreateTemplateTemporaryTypeDropdown {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = TemplateCreateTemplateTemporaryTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTypeDropdown: %v", v)
	}
}

type TemplateCreateTemplateTemporaryValue3 struct {
	Value string `json:"value"`
}

func (t TemplateCreateTemplateTemporaryValue3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateCreateTemplateTemporaryValue3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (t *TemplateCreateTemplateTemporaryValue3) GetValue() string {
	if t == nil {
		return ""
	}
	return t.Value
}

type TemplateCreateTemplateTemporaryFieldMetaDropdown struct {
	Label        *string                                     `json:"label,omitempty"`
	Placeholder  *string                                     `json:"placeholder,omitempty"`
	Required     *bool                                       `json:"required,omitempty"`
	ReadOnly     *bool                                       `json:"readOnly,omitempty"`
	Type         TemplateCreateTemplateTemporaryTypeDropdown `json:"type"`
	Values       []TemplateCreateTemplateTemporaryValue3     `json:"values,omitempty"`
	DefaultValue *string                                     `json:"defaultValue,omitempty"`
}

func (t TemplateCreateTemplateTemporaryFieldMetaDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateCreateTemplateTemporaryFieldMetaDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (t *TemplateCreateTemplateTemporaryFieldMetaDropdown) GetLabel() *string {
	if t == nil {
		return nil
	}
	return t.Label
}

func (t *TemplateCreateTemplateTemporaryFieldMetaDropdown) GetPlaceholder() *string {
	if t == nil {
		return nil
	}
	return t.Placeholder
}

func (t *TemplateCreateTemplateTemporaryFieldMetaDropdown) GetRequired() *bool {
	if t == nil {
		return nil
	}
	return t.Required
}

func (t *TemplateCreateTemplateTemporaryFieldMetaDropdown) GetReadOnly() *bool {
	if t == nil {
		return nil
	}
	return t.ReadOnly
}

func (t *TemplateCreateTemplateTemporaryFieldMetaDropdown) GetType() TemplateCreateTemplateTemporaryTypeDropdown {
	if t == nil {
		return TemplateCreateTemplateTemporaryTypeDropdown("")
	}
	return t.Type
}

func (t *TemplateCreateTemplateTemporaryFieldMetaDropdown) GetValues() []TemplateCreateTemplateTemporaryValue3 {
	if t == nil {
		return nil
	}
	return t.Values
}

func (t *TemplateCreateTemplateTemporaryFieldMetaDropdown) GetDefaultValue() *string {
	if t == nil {
		return nil
	}
	return t.DefaultValue
}

type TemplateCreateTemplateTemporaryTypeCheckbox string

const (
	TemplateCreateTemplateTemporaryTypeCheckboxCheckbox TemplateCreateTemplateTemporaryTypeCheckbox = "checkbox"
)

func (e TemplateCreateTemplateTemporaryTypeCheckbox) ToPointer() *TemplateCreateTemplateTemporaryTypeCheckbox {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = TemplateCreateTemplateTemporaryTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTypeCheckbox: %v", v)
	}
}

type TemplateCreateTemplateTemporaryValue2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (t TemplateCreateTemplateTemporaryValue2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateCreateTemplateTemporaryValue2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (t *TemplateCreateTemplateTemporaryValue2) GetID() float64 {
	if t == nil {
		return 0.0
	}
	return t.ID
}

func (t *TemplateCreateTemplateTemporaryValue2) GetChecked() bool {
	if t == nil {
		return false
	}
	return t.Checked
}

func (t *TemplateCreateTemplateTemporaryValue2) GetValue() string {
	if t == nil {
		return ""
	}
	return t.Value
}

type TemplateCreateTemplateTemporaryDirection string

const (
	TemplateCreateTemplateTemporaryDirectionVertical   TemplateCreateTemplateTemporaryDirection = "vertical"
	TemplateCreateTemplateTemporaryDirectionHorizontal TemplateCreateTemplateTemporaryDirection = "horizontal"
)

func (e TemplateCreateTemplateTemporaryDirection) ToPointer() *TemplateCreateTemplateTemporaryDirection {
	return &e
}
func (e *TemplateCreateTemplateTemporaryDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vertical":
		fallthrough
	case "horizontal":
		*e = TemplateCreateTemplateTemporaryDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryDirection: %v", v)
	}
}

type TemplateCreateTemplateTemporaryFieldMetaCheckbox struct {
	Label            *string                                     `json:"label,omitempty"`
	Placeholder      *string                                     `json:"placeholder,omitempty"`
	Required         *bool                                       `json:"required,omitempty"`
	ReadOnly         *bool                                       `json:"readOnly,omitempty"`
	Type             TemplateCreateTemplateTemporaryTypeCheckbox `json:"type"`
	Values           []TemplateCreateTemplateTemporaryValue2     `json:"values,omitempty"`
	ValidationRule   *string                                     `json:"validationRule,omitempty"`
	ValidationLength *float64                                    `json:"validationLength,omitempty"`
	Direction        *TemplateCreateTemplateTemporaryDirection   `default:"vertical" json:"direction"`
}

func (t TemplateCreateTemplateTemporaryFieldMetaCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateCreateTemplateTemporaryFieldMetaCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (t *TemplateCreateTemplateTemporaryFieldMetaCheckbox) GetLabel() *string {
	if t == nil {
		return nil
	}
	return t.Label
}

func (t *TemplateCreateTemplateTemporaryFieldMetaCheckbox) GetPlaceholder() *string {
	if t == nil {
		return nil
	}
	return t.Placeholder
}

func (t *TemplateCreateTemplateTemporaryFieldMetaCheckbox) GetRequired() *bool {
	if t == nil {
		return nil
	}
	return t.Required
}

func (t *TemplateCreateTemplateTemporaryFieldMetaCheckbox) GetReadOnly() *bool {
	if t == nil {
		return nil
	}
	return t.ReadOnly
}

func (t *TemplateCreateTemplateTemporaryFieldMetaCheckbox) GetType() TemplateCreateTemplateTemporaryTypeCheckbox {
	if t == nil {
		return TemplateCreateTemplateTemporaryTypeCheckbox("")
	}
	return t.Type
}

func (t *TemplateCreateTemplateTemporaryFieldMetaCheckbox) GetValues() []TemplateCreateTemplateTemporaryValue2 {
	if t == nil {
		return nil
	}
	return t.Values
}

func (t *TemplateCreateTemplateTemporaryFieldMetaCheckbox) GetValidationRule() *string {
	if t == nil {
		return nil
	}
	return t.ValidationRule
}

func (t *TemplateCreateTemplateTemporaryFieldMetaCheckbox) GetValidationLength() *float64 {
	if t == nil {
		return nil
	}
	return t.ValidationLength
}

func (t *TemplateCreateTemplateTemporaryFieldMetaCheckbox) GetDirection() *TemplateCreateTemplateTemporaryDirection {
	if t == nil {
		return nil
	}
	return t.Direction
}

type TemplateCreateTemplateTemporaryTypeRadio string

const (
	TemplateCreateTemplateTemporaryTypeRadioRadio TemplateCreateTemplateTemporaryTypeRadio = "radio"
)

func (e TemplateCreateTemplateTemporaryTypeRadio) ToPointer() *TemplateCreateTemplateTemporaryTypeRadio {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = TemplateCreateTemplateTemporaryTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTypeRadio: %v", v)
	}
}

type TemplateCreateTemplateTemporaryValue1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (t TemplateCreateTemplateTemporaryValue1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateCreateTemplateTemporaryValue1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (t *TemplateCreateTemplateTemporaryValue1) GetID() float64 {
	if t == nil {
		return 0.0
	}
	return t.ID
}

func (t *TemplateCreateTemplateTemporaryValue1) GetChecked() bool {
	if t == nil {
		return false
	}
	return t.Checked
}

func (t *TemplateCreateTemplateTemporaryValue1) GetValue() string {
	if t == nil {
		return ""
	}
	return t.Value
}

type TemplateCreateTemplateTemporaryFieldMetaRadio struct {
	Label       *string                                  `json:"label,omitempty"`
	Placeholder *string                                  `json:"placeholder,omitempty"`
	Required    *bool                                    `json:"required,omitempty"`
	ReadOnly    *bool                                    `json:"readOnly,omitempty"`
	Type        TemplateCreateTemplateTemporaryTypeRadio `json:"type"`
	Values      []TemplateCreateTemplateTemporaryValue1  `json:"values,omitempty"`
}

func (t TemplateCreateTemplateTemporaryFieldMetaRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateCreateTemplateTemporaryFieldMetaRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (t *TemplateCreateTemplateTemporaryFieldMetaRadio) GetLabel() *string {
	if t == nil {
		return nil
	}
	return t.Label
}

func (t *TemplateCreateTemplateTemporaryFieldMetaRadio) GetPlaceholder() *string {
	if t == nil {
		return nil
	}
	return t.Placeholder
}

func (t *TemplateCreateTemplateTemporaryFieldMetaRadio) GetRequired() *bool {
	if t == nil {
		return nil
	}
	return t.Required
}

func (t *TemplateCreateTemplateTemporaryFieldMetaRadio) GetReadOnly() *bool {
	if t == nil {
		return nil
	}
	return t.ReadOnly
}

func (t *TemplateCreateTemplateTemporaryFieldMetaRadio) GetType() TemplateCreateTemplateTemporaryTypeRadio {
	if t == nil {
		return TemplateCreateTemplateTemporaryTypeRadio("")
	}
	return t.Type
}

func (t *TemplateCreateTemplateTemporaryFieldMetaRadio) GetValues() []TemplateCreateTemplateTemporaryValue1 {
	if t == nil {
		return nil
	}
	return t.Values
}

type TemplateCreateTemplateTemporaryTypeNumber string

const (
	TemplateCreateTemplateTemporaryTypeNumberNumber TemplateCreateTemplateTemporaryTypeNumber = "number"
)

func (e TemplateCreateTemplateTemporaryTypeNumber) ToPointer() *TemplateCreateTemplateTemporaryTypeNumber {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = TemplateCreateTemplateTemporaryTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTypeNumber: %v", v)
	}
}

type TemplateCreateTemplateTemporaryTextAlign6 string

const (
	TemplateCreateTemplateTemporaryTextAlign6Left   TemplateCreateTemplateTemporaryTextAlign6 = "left"
	TemplateCreateTemplateTemporaryTextAlign6Center TemplateCreateTemplateTemporaryTextAlign6 = "center"
	TemplateCreateTemplateTemporaryTextAlign6Right  TemplateCreateTemplateTemporaryTextAlign6 = "right"
)

func (e TemplateCreateTemplateTemporaryTextAlign6) ToPointer() *TemplateCreateTemplateTemporaryTextAlign6 {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTextAlign6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateCreateTemplateTemporaryTextAlign6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTextAlign6: %v", v)
	}
}

type TemplateCreateTemplateTemporaryFieldMetaNumber struct {
	Label        *string                                    `json:"label,omitempty"`
	Placeholder  *string                                    `json:"placeholder,omitempty"`
	Required     *bool                                      `json:"required,omitempty"`
	ReadOnly     *bool                                      `json:"readOnly,omitempty"`
	Type         TemplateCreateTemplateTemporaryTypeNumber  `json:"type"`
	NumberFormat *string                                    `json:"numberFormat,omitempty"`
	Value        *string                                    `json:"value,omitempty"`
	MinValue     *float64                                   `json:"minValue,omitempty"`
	MaxValue     *float64                                   `json:"maxValue,omitempty"`
	FontSize     *float64                                   `json:"fontSize,omitempty"`
	TextAlign    *TemplateCreateTemplateTemporaryTextAlign6 `json:"textAlign,omitempty"`
}

func (t TemplateCreateTemplateTemporaryFieldMetaNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateCreateTemplateTemporaryFieldMetaNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (t *TemplateCreateTemplateTemporaryFieldMetaNumber) GetLabel() *string {
	if t == nil {
		return nil
	}
	return t.Label
}

func (t *TemplateCreateTemplateTemporaryFieldMetaNumber) GetPlaceholder() *string {
	if t == nil {
		return nil
	}
	return t.Placeholder
}

func (t *TemplateCreateTemplateTemporaryFieldMetaNumber) GetRequired() *bool {
	if t == nil {
		return nil
	}
	return t.Required
}

func (t *TemplateCreateTemplateTemporaryFieldMetaNumber) GetReadOnly() *bool {
	if t == nil {
		return nil
	}
	return t.ReadOnly
}

func (t *TemplateCreateTemplateTemporaryFieldMetaNumber) GetType() TemplateCreateTemplateTemporaryTypeNumber {
	if t == nil {
		return TemplateCreateTemplateTemporaryTypeNumber("")
	}
	return t.Type
}

func (t *TemplateCreateTemplateTemporaryFieldMetaNumber) GetNumberFormat() *string {
	if t == nil {
		return nil
	}
	return t.NumberFormat
}

func (t *TemplateCreateTemplateTemporaryFieldMetaNumber) GetValue() *string {
	if t == nil {
		return nil
	}
	return t.Value
}

func (t *TemplateCreateTemplateTemporaryFieldMetaNumber) GetMinValue() *float64 {
	if t == nil {
		return nil
	}
	return t.MinValue
}

func (t *TemplateCreateTemplateTemporaryFieldMetaNumber) GetMaxValue() *float64 {
	if t == nil {
		return nil
	}
	return t.MaxValue
}

func (t *TemplateCreateTemplateTemporaryFieldMetaNumber) GetFontSize() *float64 {
	if t == nil {
		return nil
	}
	return t.FontSize
}

func (t *TemplateCreateTemplateTemporaryFieldMetaNumber) GetTextAlign() *TemplateCreateTemplateTemporaryTextAlign6 {
	if t == nil {
		return nil
	}
	return t.TextAlign
}

type TemplateCreateTemplateTemporaryTypeText string

const (
	TemplateCreateTemplateTemporaryTypeTextText TemplateCreateTemplateTemporaryTypeText = "text"
)

func (e TemplateCreateTemplateTemporaryTypeText) ToPointer() *TemplateCreateTemplateTemporaryTypeText {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = TemplateCreateTemplateTemporaryTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTypeText: %v", v)
	}
}

type TemplateCreateTemplateTemporaryTextAlign5 string

const (
	TemplateCreateTemplateTemporaryTextAlign5Left   TemplateCreateTemplateTemporaryTextAlign5 = "left"
	TemplateCreateTemplateTemporaryTextAlign5Center TemplateCreateTemplateTemporaryTextAlign5 = "center"
	TemplateCreateTemplateTemporaryTextAlign5Right  TemplateCreateTemplateTemporaryTextAlign5 = "right"
)

func (e TemplateCreateTemplateTemporaryTextAlign5) ToPointer() *TemplateCreateTemplateTemporaryTextAlign5 {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTextAlign5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateCreateTemplateTemporaryTextAlign5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTextAlign5: %v", v)
	}
}

type TemplateCreateTemplateTemporaryFieldMetaText struct {
	Label          *string                                    `json:"label,omitempty"`
	Placeholder    *string                                    `json:"placeholder,omitempty"`
	Required       *bool                                      `json:"required,omitempty"`
	ReadOnly       *bool                                      `json:"readOnly,omitempty"`
	Type           TemplateCreateTemplateTemporaryTypeText    `json:"type"`
	Text           *string                                    `json:"text,omitempty"`
	CharacterLimit *float64                                   `json:"characterLimit,omitempty"`
	FontSize       *float64                                   `json:"fontSize,omitempty"`
	TextAlign      *TemplateCreateTemplateTemporaryTextAlign5 `json:"textAlign,omitempty"`
}

func (t TemplateCreateTemplateTemporaryFieldMetaText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateCreateTemplateTemporaryFieldMetaText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (t *TemplateCreateTemplateTemporaryFieldMetaText) GetLabel() *string {
	if t == nil {
		return nil
	}
	return t.Label
}

func (t *TemplateCreateTemplateTemporaryFieldMetaText) GetPlaceholder() *string {
	if t == nil {
		return nil
	}
	return t.Placeholder
}

func (t *TemplateCreateTemplateTemporaryFieldMetaText) GetRequired() *bool {
	if t == nil {
		return nil
	}
	return t.Required
}

func (t *TemplateCreateTemplateTemporaryFieldMetaText) GetReadOnly() *bool {
	if t == nil {
		return nil
	}
	return t.ReadOnly
}

func (t *TemplateCreateTemplateTemporaryFieldMetaText) GetType() TemplateCreateTemplateTemporaryTypeText {
	if t == nil {
		return TemplateCreateTemplateTemporaryTypeText("")
	}
	return t.Type
}

func (t *TemplateCreateTemplateTemporaryFieldMetaText) GetText() *string {
	if t == nil {
		return nil
	}
	return t.Text
}

func (t *TemplateCreateTemplateTemporaryFieldMetaText) GetCharacterLimit() *float64 {
	if t == nil {
		return nil
	}
	return t.CharacterLimit
}

func (t *TemplateCreateTemplateTemporaryFieldMetaText) GetFontSize() *float64 {
	if t == nil {
		return nil
	}
	return t.FontSize
}

func (t *TemplateCreateTemplateTemporaryFieldMetaText) GetTextAlign() *TemplateCreateTemplateTemporaryTextAlign5 {
	if t == nil {
		return nil
	}
	return t.TextAlign
}

type TemplateCreateTemplateTemporaryTypeDate string

const (
	TemplateCreateTemplateTemporaryTypeDateDate TemplateCreateTemplateTemporaryTypeDate = "date"
)

func (e TemplateCreateTemplateTemporaryTypeDate) ToPointer() *TemplateCreateTemplateTemporaryTypeDate {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = TemplateCreateTemplateTemporaryTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTypeDate: %v", v)
	}
}

type TemplateCreateTemplateTemporaryTextAlign4 string

const (
	TemplateCreateTemplateTemporaryTextAlign4Left   TemplateCreateTemplateTemporaryTextAlign4 = "left"
	TemplateCreateTemplateTemporaryTextAlign4Center TemplateCreateTemplateTemporaryTextAlign4 = "center"
	TemplateCreateTemplateTemporaryTextAlign4Right  TemplateCreateTemplateTemporaryTextAlign4 = "right"
)

func (e TemplateCreateTemplateTemporaryTextAlign4) ToPointer() *TemplateCreateTemplateTemporaryTextAlign4 {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTextAlign4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateCreateTemplateTemporaryTextAlign4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTextAlign4: %v", v)
	}
}

type TemplateCreateTemplateTemporaryFieldMetaDate struct {
	Label       *string                                    `json:"label,omitempty"`
	Placeholder *string                                    `json:"placeholder,omitempty"`
	Required    *bool                                      `json:"required,omitempty"`
	ReadOnly    *bool                                      `json:"readOnly,omitempty"`
	Type        TemplateCreateTemplateTemporaryTypeDate    `json:"type"`
	FontSize    *float64                                   `json:"fontSize,omitempty"`
	TextAlign   *TemplateCreateTemplateTemporaryTextAlign4 `json:"textAlign,omitempty"`
}

func (t TemplateCreateTemplateTemporaryFieldMetaDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateCreateTemplateTemporaryFieldMetaDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (t *TemplateCreateTemplateTemporaryFieldMetaDate) GetLabel() *string {
	if t == nil {
		return nil
	}
	return t.Label
}

func (t *TemplateCreateTemplateTemporaryFieldMetaDate) GetPlaceholder() *string {
	if t == nil {
		return nil
	}
	return t.Placeholder
}

func (t *TemplateCreateTemplateTemporaryFieldMetaDate) GetRequired() *bool {
	if t == nil {
		return nil
	}
	return t.Required
}

func (t *TemplateCreateTemplateTemporaryFieldMetaDate) GetReadOnly() *bool {
	if t == nil {
		return nil
	}
	return t.ReadOnly
}

func (t *TemplateCreateTemplateTemporaryFieldMetaDate) GetType() TemplateCreateTemplateTemporaryTypeDate {
	if t == nil {
		return TemplateCreateTemplateTemporaryTypeDate("")
	}
	return t.Type
}

func (t *TemplateCreateTemplateTemporaryFieldMetaDate) GetFontSize() *float64 {
	if t == nil {
		return nil
	}
	return t.FontSize
}

func (t *TemplateCreateTemplateTemporaryFieldMetaDate) GetTextAlign() *TemplateCreateTemplateTemporaryTextAlign4 {
	if t == nil {
		return nil
	}
	return t.TextAlign
}

type TemplateCreateTemplateTemporaryTypeEmail string

const (
	TemplateCreateTemplateTemporaryTypeEmailEmail TemplateCreateTemplateTemporaryTypeEmail = "email"
)

func (e TemplateCreateTemplateTemporaryTypeEmail) ToPointer() *TemplateCreateTemplateTemporaryTypeEmail {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = TemplateCreateTemplateTemporaryTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTypeEmail: %v", v)
	}
}

type TemplateCreateTemplateTemporaryTextAlign3 string

const (
	TemplateCreateTemplateTemporaryTextAlign3Left   TemplateCreateTemplateTemporaryTextAlign3 = "left"
	TemplateCreateTemplateTemporaryTextAlign3Center TemplateCreateTemplateTemporaryTextAlign3 = "center"
	TemplateCreateTemplateTemporaryTextAlign3Right  TemplateCreateTemplateTemporaryTextAlign3 = "right"
)

func (e TemplateCreateTemplateTemporaryTextAlign3) ToPointer() *TemplateCreateTemplateTemporaryTextAlign3 {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTextAlign3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateCreateTemplateTemporaryTextAlign3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTextAlign3: %v", v)
	}
}

type TemplateCreateTemplateTemporaryFieldMetaEmail struct {
	Label       *string                                    `json:"label,omitempty"`
	Placeholder *string                                    `json:"placeholder,omitempty"`
	Required    *bool                                      `json:"required,omitempty"`
	ReadOnly    *bool                                      `json:"readOnly,omitempty"`
	Type        TemplateCreateTemplateTemporaryTypeEmail   `json:"type"`
	FontSize    *float64                                   `json:"fontSize,omitempty"`
	TextAlign   *TemplateCreateTemplateTemporaryTextAlign3 `json:"textAlign,omitempty"`
}

func (t TemplateCreateTemplateTemporaryFieldMetaEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateCreateTemplateTemporaryFieldMetaEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (t *TemplateCreateTemplateTemporaryFieldMetaEmail) GetLabel() *string {
	if t == nil {
		return nil
	}
	return t.Label
}

func (t *TemplateCreateTemplateTemporaryFieldMetaEmail) GetPlaceholder() *string {
	if t == nil {
		return nil
	}
	return t.Placeholder
}

func (t *TemplateCreateTemplateTemporaryFieldMetaEmail) GetRequired() *bool {
	if t == nil {
		return nil
	}
	return t.Required
}

func (t *TemplateCreateTemplateTemporaryFieldMetaEmail) GetReadOnly() *bool {
	if t == nil {
		return nil
	}
	return t.ReadOnly
}

func (t *TemplateCreateTemplateTemporaryFieldMetaEmail) GetType() TemplateCreateTemplateTemporaryTypeEmail {
	if t == nil {
		return TemplateCreateTemplateTemporaryTypeEmail("")
	}
	return t.Type
}

func (t *TemplateCreateTemplateTemporaryFieldMetaEmail) GetFontSize() *float64 {
	if t == nil {
		return nil
	}
	return t.FontSize
}

func (t *TemplateCreateTemplateTemporaryFieldMetaEmail) GetTextAlign() *TemplateCreateTemplateTemporaryTextAlign3 {
	if t == nil {
		return nil
	}
	return t.TextAlign
}

type TemplateCreateTemplateTemporaryTypeName string

const (
	TemplateCreateTemplateTemporaryTypeNameName TemplateCreateTemplateTemporaryTypeName = "name"
)

func (e TemplateCreateTemplateTemporaryTypeName) ToPointer() *TemplateCreateTemplateTemporaryTypeName {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = TemplateCreateTemplateTemporaryTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTypeName: %v", v)
	}
}

type TemplateCreateTemplateTemporaryTextAlign2 string

const (
	TemplateCreateTemplateTemporaryTextAlign2Left   TemplateCreateTemplateTemporaryTextAlign2 = "left"
	TemplateCreateTemplateTemporaryTextAlign2Center TemplateCreateTemplateTemporaryTextAlign2 = "center"
	TemplateCreateTemplateTemporaryTextAlign2Right  TemplateCreateTemplateTemporaryTextAlign2 = "right"
)

func (e TemplateCreateTemplateTemporaryTextAlign2) ToPointer() *TemplateCreateTemplateTemporaryTextAlign2 {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTextAlign2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateCreateTemplateTemporaryTextAlign2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTextAlign2: %v", v)
	}
}

type TemplateCreateTemplateTemporaryFieldMetaName struct {
	Label       *string                                    `json:"label,omitempty"`
	Placeholder *string                                    `json:"placeholder,omitempty"`
	Required    *bool                                      `json:"required,omitempty"`
	ReadOnly    *bool                                      `json:"readOnly,omitempty"`
	Type        TemplateCreateTemplateTemporaryTypeName    `json:"type"`
	FontSize    *float64                                   `json:"fontSize,omitempty"`
	TextAlign   *TemplateCreateTemplateTemporaryTextAlign2 `json:"textAlign,omitempty"`
}

func (t TemplateCreateTemplateTemporaryFieldMetaName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateCreateTemplateTemporaryFieldMetaName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (t *TemplateCreateTemplateTemporaryFieldMetaName) GetLabel() *string {
	if t == nil {
		return nil
	}
	return t.Label
}

func (t *TemplateCreateTemplateTemporaryFieldMetaName) GetPlaceholder() *string {
	if t == nil {
		return nil
	}
	return t.Placeholder
}

func (t *TemplateCreateTemplateTemporaryFieldMetaName) GetRequired() *bool {
	if t == nil {
		return nil
	}
	return t.Required
}

func (t *TemplateCreateTemplateTemporaryFieldMetaName) GetReadOnly() *bool {
	if t == nil {
		return nil
	}
	return t.ReadOnly
}

func (t *TemplateCreateTemplateTemporaryFieldMetaName) GetType() TemplateCreateTemplateTemporaryTypeName {
	if t == nil {
		return TemplateCreateTemplateTemporaryTypeName("")
	}
	return t.Type
}

func (t *TemplateCreateTemplateTemporaryFieldMetaName) GetFontSize() *float64 {
	if t == nil {
		return nil
	}
	return t.FontSize
}

func (t *TemplateCreateTemplateTemporaryFieldMetaName) GetTextAlign() *TemplateCreateTemplateTemporaryTextAlign2 {
	if t == nil {
		return nil
	}
	return t.TextAlign
}

type TemplateCreateTemplateTemporaryTypeInitials string

const (
	TemplateCreateTemplateTemporaryTypeInitialsInitials TemplateCreateTemplateTemporaryTypeInitials = "initials"
)

func (e TemplateCreateTemplateTemporaryTypeInitials) ToPointer() *TemplateCreateTemplateTemporaryTypeInitials {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = TemplateCreateTemplateTemporaryTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTypeInitials: %v", v)
	}
}

type TemplateCreateTemplateTemporaryTextAlign1 string

const (
	TemplateCreateTemplateTemporaryTextAlign1Left   TemplateCreateTemplateTemporaryTextAlign1 = "left"
	TemplateCreateTemplateTemporaryTextAlign1Center TemplateCreateTemplateTemporaryTextAlign1 = "center"
	TemplateCreateTemplateTemporaryTextAlign1Right  TemplateCreateTemplateTemporaryTextAlign1 = "right"
)

func (e TemplateCreateTemplateTemporaryTextAlign1) ToPointer() *TemplateCreateTemplateTemporaryTextAlign1 {
	return &e
}
func (e *TemplateCreateTemplateTemporaryTextAlign1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateCreateTemplateTemporaryTextAlign1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryTextAlign1: %v", v)
	}
}

type TemplateCreateTemplateTemporaryFieldMetaInitials struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        TemplateCreateTemplateTemporaryTypeInitials `json:"type"`
	FontSize    *float64                                    `json:"fontSize,omitempty"`
	TextAlign   *TemplateCreateTemplateTemporaryTextAlign1  `json:"textAlign,omitempty"`
}

func (t TemplateCreateTemplateTemporaryFieldMetaInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateCreateTemplateTemporaryFieldMetaInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (t *TemplateCreateTemplateTemporaryFieldMetaInitials) GetLabel() *string {
	if t == nil {
		return nil
	}
	return t.Label
}

func (t *TemplateCreateTemplateTemporaryFieldMetaInitials) GetPlaceholder() *string {
	if t == nil {
		return nil
	}
	return t.Placeholder
}

func (t *TemplateCreateTemplateTemporaryFieldMetaInitials) GetRequired() *bool {
	if t == nil {
		return nil
	}
	return t.Required
}

func (t *TemplateCreateTemplateTemporaryFieldMetaInitials) GetReadOnly() *bool {
	if t == nil {
		return nil
	}
	return t.ReadOnly
}

func (t *TemplateCreateTemplateTemporaryFieldMetaInitials) GetType() TemplateCreateTemplateTemporaryTypeInitials {
	if t == nil {
		return TemplateCreateTemplateTemporaryTypeInitials("")
	}
	return t.Type
}

func (t *TemplateCreateTemplateTemporaryFieldMetaInitials) GetFontSize() *float64 {
	if t == nil {
		return nil
	}
	return t.FontSize
}

func (t *TemplateCreateTemplateTemporaryFieldMetaInitials) GetTextAlign() *TemplateCreateTemplateTemporaryTextAlign1 {
	if t == nil {
		return nil
	}
	return t.TextAlign
}

type TemplateCreateTemplateTemporaryFieldMetaUnionType string

const (
	TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaInitials TemplateCreateTemplateTemporaryFieldMetaUnionType = "template_createTemplateTemporary_fieldMeta_Initials"
	TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaName     TemplateCreateTemplateTemporaryFieldMetaUnionType = "template_createTemplateTemporary_fieldMeta_Name"
	TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaEmail    TemplateCreateTemplateTemporaryFieldMetaUnionType = "template_createTemplateTemporary_fieldMeta_Email"
	TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaDate     TemplateCreateTemplateTemporaryFieldMetaUnionType = "template_createTemplateTemporary_fieldMeta_Date"
	TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaText     TemplateCreateTemplateTemporaryFieldMetaUnionType = "template_createTemplateTemporary_fieldMeta_Text"
	TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaNumber   TemplateCreateTemplateTemporaryFieldMetaUnionType = "template_createTemplateTemporary_fieldMeta_Number"
	TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaRadio    TemplateCreateTemplateTemporaryFieldMetaUnionType = "template_createTemplateTemporary_fieldMeta_Radio"
	TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaCheckbox TemplateCreateTemplateTemporaryFieldMetaUnionType = "template_createTemplateTemporary_fieldMeta_Checkbox"
	TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaDropdown TemplateCreateTemplateTemporaryFieldMetaUnionType = "template_createTemplateTemporary_fieldMeta_Dropdown"
)

type TemplateCreateTemplateTemporaryFieldMetaUnion struct {
	TemplateCreateTemplateTemporaryFieldMetaInitials *TemplateCreateTemplateTemporaryFieldMetaInitials `queryParam:"inline,name=fieldMeta"`
	TemplateCreateTemplateTemporaryFieldMetaName     *TemplateCreateTemplateTemporaryFieldMetaName     `queryParam:"inline,name=fieldMeta"`
	TemplateCreateTemplateTemporaryFieldMetaEmail    *TemplateCreateTemplateTemporaryFieldMetaEmail    `queryParam:"inline,name=fieldMeta"`
	TemplateCreateTemplateTemporaryFieldMetaDate     *TemplateCreateTemplateTemporaryFieldMetaDate     `queryParam:"inline,name=fieldMeta"`
	TemplateCreateTemplateTemporaryFieldMetaText     *TemplateCreateTemplateTemporaryFieldMetaText     `queryParam:"inline,name=fieldMeta"`
	TemplateCreateTemplateTemporaryFieldMetaNumber   *TemplateCreateTemplateTemporaryFieldMetaNumber   `queryParam:"inline,name=fieldMeta"`
	TemplateCreateTemplateTemporaryFieldMetaRadio    *TemplateCreateTemplateTemporaryFieldMetaRadio    `queryParam:"inline,name=fieldMeta"`
	TemplateCreateTemplateTemporaryFieldMetaCheckbox *TemplateCreateTemplateTemporaryFieldMetaCheckbox `queryParam:"inline,name=fieldMeta"`
	TemplateCreateTemplateTemporaryFieldMetaDropdown *TemplateCreateTemplateTemporaryFieldMetaDropdown `queryParam:"inline,name=fieldMeta"`

	Type TemplateCreateTemplateTemporaryFieldMetaUnionType
}

func CreateTemplateCreateTemplateTemporaryFieldMetaUnionTemplateCreateTemplateTemporaryFieldMetaInitials(templateCreateTemplateTemporaryFieldMetaInitials TemplateCreateTemplateTemporaryFieldMetaInitials) TemplateCreateTemplateTemporaryFieldMetaUnion {
	typ := TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaInitials

	return TemplateCreateTemplateTemporaryFieldMetaUnion{
		TemplateCreateTemplateTemporaryFieldMetaInitials: &templateCreateTemplateTemporaryFieldMetaInitials,
		Type: typ,
	}
}

func CreateTemplateCreateTemplateTemporaryFieldMetaUnionTemplateCreateTemplateTemporaryFieldMetaName(templateCreateTemplateTemporaryFieldMetaName TemplateCreateTemplateTemporaryFieldMetaName) TemplateCreateTemplateTemporaryFieldMetaUnion {
	typ := TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaName

	return TemplateCreateTemplateTemporaryFieldMetaUnion{
		TemplateCreateTemplateTemporaryFieldMetaName: &templateCreateTemplateTemporaryFieldMetaName,
		Type: typ,
	}
}

func CreateTemplateCreateTemplateTemporaryFieldMetaUnionTemplateCreateTemplateTemporaryFieldMetaEmail(templateCreateTemplateTemporaryFieldMetaEmail TemplateCreateTemplateTemporaryFieldMetaEmail) TemplateCreateTemplateTemporaryFieldMetaUnion {
	typ := TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaEmail

	return TemplateCreateTemplateTemporaryFieldMetaUnion{
		TemplateCreateTemplateTemporaryFieldMetaEmail: &templateCreateTemplateTemporaryFieldMetaEmail,
		Type: typ,
	}
}

func CreateTemplateCreateTemplateTemporaryFieldMetaUnionTemplateCreateTemplateTemporaryFieldMetaDate(templateCreateTemplateTemporaryFieldMetaDate TemplateCreateTemplateTemporaryFieldMetaDate) TemplateCreateTemplateTemporaryFieldMetaUnion {
	typ := TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaDate

	return TemplateCreateTemplateTemporaryFieldMetaUnion{
		TemplateCreateTemplateTemporaryFieldMetaDate: &templateCreateTemplateTemporaryFieldMetaDate,
		Type: typ,
	}
}

func CreateTemplateCreateTemplateTemporaryFieldMetaUnionTemplateCreateTemplateTemporaryFieldMetaText(templateCreateTemplateTemporaryFieldMetaText TemplateCreateTemplateTemporaryFieldMetaText) TemplateCreateTemplateTemporaryFieldMetaUnion {
	typ := TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaText

	return TemplateCreateTemplateTemporaryFieldMetaUnion{
		TemplateCreateTemplateTemporaryFieldMetaText: &templateCreateTemplateTemporaryFieldMetaText,
		Type: typ,
	}
}

func CreateTemplateCreateTemplateTemporaryFieldMetaUnionTemplateCreateTemplateTemporaryFieldMetaNumber(templateCreateTemplateTemporaryFieldMetaNumber TemplateCreateTemplateTemporaryFieldMetaNumber) TemplateCreateTemplateTemporaryFieldMetaUnion {
	typ := TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaNumber

	return TemplateCreateTemplateTemporaryFieldMetaUnion{
		TemplateCreateTemplateTemporaryFieldMetaNumber: &templateCreateTemplateTemporaryFieldMetaNumber,
		Type: typ,
	}
}

func CreateTemplateCreateTemplateTemporaryFieldMetaUnionTemplateCreateTemplateTemporaryFieldMetaRadio(templateCreateTemplateTemporaryFieldMetaRadio TemplateCreateTemplateTemporaryFieldMetaRadio) TemplateCreateTemplateTemporaryFieldMetaUnion {
	typ := TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaRadio

	return TemplateCreateTemplateTemporaryFieldMetaUnion{
		TemplateCreateTemplateTemporaryFieldMetaRadio: &templateCreateTemplateTemporaryFieldMetaRadio,
		Type: typ,
	}
}

func CreateTemplateCreateTemplateTemporaryFieldMetaUnionTemplateCreateTemplateTemporaryFieldMetaCheckbox(templateCreateTemplateTemporaryFieldMetaCheckbox TemplateCreateTemplateTemporaryFieldMetaCheckbox) TemplateCreateTemplateTemporaryFieldMetaUnion {
	typ := TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaCheckbox

	return TemplateCreateTemplateTemporaryFieldMetaUnion{
		TemplateCreateTemplateTemporaryFieldMetaCheckbox: &templateCreateTemplateTemporaryFieldMetaCheckbox,
		Type: typ,
	}
}

func CreateTemplateCreateTemplateTemporaryFieldMetaUnionTemplateCreateTemplateTemporaryFieldMetaDropdown(templateCreateTemplateTemporaryFieldMetaDropdown TemplateCreateTemplateTemporaryFieldMetaDropdown) TemplateCreateTemplateTemporaryFieldMetaUnion {
	typ := TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaDropdown

	return TemplateCreateTemplateTemporaryFieldMetaUnion{
		TemplateCreateTemplateTemporaryFieldMetaDropdown: &templateCreateTemplateTemporaryFieldMetaDropdown,
		Type: typ,
	}
}

func (u *TemplateCreateTemplateTemporaryFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var templateCreateTemplateTemporaryFieldMetaInitials TemplateCreateTemplateTemporaryFieldMetaInitials = TemplateCreateTemplateTemporaryFieldMetaInitials{}
	if err := utils.UnmarshalJSON(data, &templateCreateTemplateTemporaryFieldMetaInitials, "", true, nil); err == nil {
		u.TemplateCreateTemplateTemporaryFieldMetaInitials = &templateCreateTemplateTemporaryFieldMetaInitials
		u.Type = TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaInitials
		return nil
	}

	var templateCreateTemplateTemporaryFieldMetaName TemplateCreateTemplateTemporaryFieldMetaName = TemplateCreateTemplateTemporaryFieldMetaName{}
	if err := utils.UnmarshalJSON(data, &templateCreateTemplateTemporaryFieldMetaName, "", true, nil); err == nil {
		u.TemplateCreateTemplateTemporaryFieldMetaName = &templateCreateTemplateTemporaryFieldMetaName
		u.Type = TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaName
		return nil
	}

	var templateCreateTemplateTemporaryFieldMetaEmail TemplateCreateTemplateTemporaryFieldMetaEmail = TemplateCreateTemplateTemporaryFieldMetaEmail{}
	if err := utils.UnmarshalJSON(data, &templateCreateTemplateTemporaryFieldMetaEmail, "", true, nil); err == nil {
		u.TemplateCreateTemplateTemporaryFieldMetaEmail = &templateCreateTemplateTemporaryFieldMetaEmail
		u.Type = TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaEmail
		return nil
	}

	var templateCreateTemplateTemporaryFieldMetaDate TemplateCreateTemplateTemporaryFieldMetaDate = TemplateCreateTemplateTemporaryFieldMetaDate{}
	if err := utils.UnmarshalJSON(data, &templateCreateTemplateTemporaryFieldMetaDate, "", true, nil); err == nil {
		u.TemplateCreateTemplateTemporaryFieldMetaDate = &templateCreateTemplateTemporaryFieldMetaDate
		u.Type = TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaDate
		return nil
	}

	var templateCreateTemplateTemporaryFieldMetaText TemplateCreateTemplateTemporaryFieldMetaText = TemplateCreateTemplateTemporaryFieldMetaText{}
	if err := utils.UnmarshalJSON(data, &templateCreateTemplateTemporaryFieldMetaText, "", true, nil); err == nil {
		u.TemplateCreateTemplateTemporaryFieldMetaText = &templateCreateTemplateTemporaryFieldMetaText
		u.Type = TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaText
		return nil
	}

	var templateCreateTemplateTemporaryFieldMetaNumber TemplateCreateTemplateTemporaryFieldMetaNumber = TemplateCreateTemplateTemporaryFieldMetaNumber{}
	if err := utils.UnmarshalJSON(data, &templateCreateTemplateTemporaryFieldMetaNumber, "", true, nil); err == nil {
		u.TemplateCreateTemplateTemporaryFieldMetaNumber = &templateCreateTemplateTemporaryFieldMetaNumber
		u.Type = TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaNumber
		return nil
	}

	var templateCreateTemplateTemporaryFieldMetaRadio TemplateCreateTemplateTemporaryFieldMetaRadio = TemplateCreateTemplateTemporaryFieldMetaRadio{}
	if err := utils.UnmarshalJSON(data, &templateCreateTemplateTemporaryFieldMetaRadio, "", true, nil); err == nil {
		u.TemplateCreateTemplateTemporaryFieldMetaRadio = &templateCreateTemplateTemporaryFieldMetaRadio
		u.Type = TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaRadio
		return nil
	}

	var templateCreateTemplateTemporaryFieldMetaCheckbox TemplateCreateTemplateTemporaryFieldMetaCheckbox = TemplateCreateTemplateTemporaryFieldMetaCheckbox{}
	if err := utils.UnmarshalJSON(data, &templateCreateTemplateTemporaryFieldMetaCheckbox, "", true, nil); err == nil {
		u.TemplateCreateTemplateTemporaryFieldMetaCheckbox = &templateCreateTemplateTemporaryFieldMetaCheckbox
		u.Type = TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaCheckbox
		return nil
	}

	var templateCreateTemplateTemporaryFieldMetaDropdown TemplateCreateTemplateTemporaryFieldMetaDropdown = TemplateCreateTemplateTemporaryFieldMetaDropdown{}
	if err := utils.UnmarshalJSON(data, &templateCreateTemplateTemporaryFieldMetaDropdown, "", true, nil); err == nil {
		u.TemplateCreateTemplateTemporaryFieldMetaDropdown = &templateCreateTemplateTemporaryFieldMetaDropdown
		u.Type = TemplateCreateTemplateTemporaryFieldMetaUnionTypeTemplateCreateTemplateTemporaryFieldMetaDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TemplateCreateTemplateTemporaryFieldMetaUnion", string(data))
}

func (u TemplateCreateTemplateTemporaryFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.TemplateCreateTemplateTemporaryFieldMetaInitials != nil {
		return utils.MarshalJSON(u.TemplateCreateTemplateTemporaryFieldMetaInitials, "", true)
	}

	if u.TemplateCreateTemplateTemporaryFieldMetaName != nil {
		return utils.MarshalJSON(u.TemplateCreateTemplateTemporaryFieldMetaName, "", true)
	}

	if u.TemplateCreateTemplateTemporaryFieldMetaEmail != nil {
		return utils.MarshalJSON(u.TemplateCreateTemplateTemporaryFieldMetaEmail, "", true)
	}

	if u.TemplateCreateTemplateTemporaryFieldMetaDate != nil {
		return utils.MarshalJSON(u.TemplateCreateTemplateTemporaryFieldMetaDate, "", true)
	}

	if u.TemplateCreateTemplateTemporaryFieldMetaText != nil {
		return utils.MarshalJSON(u.TemplateCreateTemplateTemporaryFieldMetaText, "", true)
	}

	if u.TemplateCreateTemplateTemporaryFieldMetaNumber != nil {
		return utils.MarshalJSON(u.TemplateCreateTemplateTemporaryFieldMetaNumber, "", true)
	}

	if u.TemplateCreateTemplateTemporaryFieldMetaRadio != nil {
		return utils.MarshalJSON(u.TemplateCreateTemplateTemporaryFieldMetaRadio, "", true)
	}

	if u.TemplateCreateTemplateTemporaryFieldMetaCheckbox != nil {
		return utils.MarshalJSON(u.TemplateCreateTemplateTemporaryFieldMetaCheckbox, "", true)
	}

	if u.TemplateCreateTemplateTemporaryFieldMetaDropdown != nil {
		return utils.MarshalJSON(u.TemplateCreateTemplateTemporaryFieldMetaDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type TemplateCreateTemplateTemporaryFieldMetaUnion: all fields are null")
}

type TemplateCreateTemplateTemporaryField struct {
	EnvelopeID     string                                   `json:"envelopeId"`
	EnvelopeItemID string                                   `json:"envelopeItemId"`
	Type           TemplateCreateTemplateTemporaryFieldType `json:"type"`
	ID             float64                                  `json:"id"`
	SecondaryID    string                                   `json:"secondaryId"`
	RecipientID    float64                                  `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                                        `json:"page"`
	PositionX  any                                            `json:"positionX,omitempty"`
	PositionY  any                                            `json:"positionY,omitempty"`
	Width      any                                            `json:"width,omitempty"`
	Height     any                                            `json:"height,omitempty"`
	CustomText string                                         `json:"customText"`
	Inserted   bool                                           `json:"inserted"`
	FieldMeta  *TemplateCreateTemplateTemporaryFieldMetaUnion `json:"fieldMeta"`
	DocumentID *float64                                       `json:"documentId,omitempty"`
	TemplateID *float64                                       `json:"templateId,omitempty"`
}

func (t *TemplateCreateTemplateTemporaryField) GetEnvelopeID() string {
	if t == nil {
		return ""
	}
	return t.EnvelopeID
}

func (t *TemplateCreateTemplateTemporaryField) GetEnvelopeItemID() string {
	if t == nil {
		return ""
	}
	return t.EnvelopeItemID
}

func (t *TemplateCreateTemplateTemporaryField) GetType() TemplateCreateTemplateTemporaryFieldType {
	if t == nil {
		return TemplateCreateTemplateTemporaryFieldType("")
	}
	return t.Type
}

func (t *TemplateCreateTemplateTemporaryField) GetID() float64 {
	if t == nil {
		return 0.0
	}
	return t.ID
}

func (t *TemplateCreateTemplateTemporaryField) GetSecondaryID() string {
	if t == nil {
		return ""
	}
	return t.SecondaryID
}

func (t *TemplateCreateTemplateTemporaryField) GetRecipientID() float64 {
	if t == nil {
		return 0.0
	}
	return t.RecipientID
}

func (t *TemplateCreateTemplateTemporaryField) GetPage() float64 {
	if t == nil {
		return 0.0
	}
	return t.Page
}

func (t *TemplateCreateTemplateTemporaryField) GetPositionX() any {
	if t == nil {
		return nil
	}
	return t.PositionX
}

func (t *TemplateCreateTemplateTemporaryField) GetPositionY() any {
	if t == nil {
		return nil
	}
	return t.PositionY
}

func (t *TemplateCreateTemplateTemporaryField) GetWidth() any {
	if t == nil {
		return nil
	}
	return t.Width
}

func (t *TemplateCreateTemplateTemporaryField) GetHeight() any {
	if t == nil {
		return nil
	}
	return t.Height
}

func (t *TemplateCreateTemplateTemporaryField) GetCustomText() string {
	if t == nil {
		return ""
	}
	return t.CustomText
}

func (t *TemplateCreateTemplateTemporaryField) GetInserted() bool {
	if t == nil {
		return false
	}
	return t.Inserted
}

func (t *TemplateCreateTemplateTemporaryField) GetFieldMeta() *TemplateCreateTemplateTemporaryFieldMetaUnion {
	if t == nil {
		return nil
	}
	return t.FieldMeta
}

func (t *TemplateCreateTemplateTemporaryField) GetDocumentID() *float64 {
	if t == nil {
		return nil
	}
	return t.DocumentID
}

func (t *TemplateCreateTemplateTemporaryField) GetTemplateID() *float64 {
	if t == nil {
		return nil
	}
	return t.TemplateID
}

type TemplateCreateTemplateTemporaryFolderType string

const (
	TemplateCreateTemplateTemporaryFolderTypeDocument TemplateCreateTemplateTemporaryFolderType = "DOCUMENT"
	TemplateCreateTemplateTemporaryFolderTypeTemplate TemplateCreateTemplateTemporaryFolderType = "TEMPLATE"
)

func (e TemplateCreateTemplateTemporaryFolderType) ToPointer() *TemplateCreateTemplateTemporaryFolderType {
	return &e
}
func (e *TemplateCreateTemplateTemporaryFolderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		*e = TemplateCreateTemplateTemporaryFolderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryFolderType: %v", v)
	}
}

type TemplateCreateTemplateTemporaryFolderVisibility string

const (
	TemplateCreateTemplateTemporaryFolderVisibilityEveryone        TemplateCreateTemplateTemporaryFolderVisibility = "EVERYONE"
	TemplateCreateTemplateTemporaryFolderVisibilityManagerAndAbove TemplateCreateTemplateTemporaryFolderVisibility = "MANAGER_AND_ABOVE"
	TemplateCreateTemplateTemporaryFolderVisibilityAdmin           TemplateCreateTemplateTemporaryFolderVisibility = "ADMIN"
)

func (e TemplateCreateTemplateTemporaryFolderVisibility) ToPointer() *TemplateCreateTemplateTemporaryFolderVisibility {
	return &e
}
func (e *TemplateCreateTemplateTemporaryFolderVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = TemplateCreateTemplateTemporaryFolderVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateTemplateTemporaryFolderVisibility: %v", v)
	}
}

type TemplateCreateTemplateTemporaryFolder struct {
	ID         string                                          `json:"id"`
	Name       string                                          `json:"name"`
	Type       TemplateCreateTemplateTemporaryFolderType       `json:"type"`
	Visibility TemplateCreateTemplateTemporaryFolderVisibility `json:"visibility"`
	UserID     float64                                         `json:"userId"`
	TeamID     float64                                         `json:"teamId"`
	Pinned     bool                                            `json:"pinned"`
	ParentID   *string                                         `json:"parentId"`
	CreatedAt  string                                          `json:"createdAt"`
	UpdatedAt  string                                          `json:"updatedAt"`
}

func (t *TemplateCreateTemplateTemporaryFolder) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *TemplateCreateTemplateTemporaryFolder) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *TemplateCreateTemplateTemporaryFolder) GetType() TemplateCreateTemplateTemporaryFolderType {
	if t == nil {
		return TemplateCreateTemplateTemporaryFolderType("")
	}
	return t.Type
}

func (t *TemplateCreateTemplateTemporaryFolder) GetVisibility() TemplateCreateTemplateTemporaryFolderVisibility {
	if t == nil {
		return TemplateCreateTemplateTemporaryFolderVisibility("")
	}
	return t.Visibility
}

func (t *TemplateCreateTemplateTemporaryFolder) GetUserID() float64 {
	if t == nil {
		return 0.0
	}
	return t.UserID
}

func (t *TemplateCreateTemplateTemporaryFolder) GetTeamID() float64 {
	if t == nil {
		return 0.0
	}
	return t.TeamID
}

func (t *TemplateCreateTemplateTemporaryFolder) GetPinned() bool {
	if t == nil {
		return false
	}
	return t.Pinned
}

func (t *TemplateCreateTemplateTemporaryFolder) GetParentID() *string {
	if t == nil {
		return nil
	}
	return t.ParentID
}

func (t *TemplateCreateTemplateTemporaryFolder) GetCreatedAt() string {
	if t == nil {
		return ""
	}
	return t.CreatedAt
}

func (t *TemplateCreateTemplateTemporaryFolder) GetUpdatedAt() string {
	if t == nil {
		return ""
	}
	return t.UpdatedAt
}

type Template struct {
	Type                   TemplateCreateTemplateTemporaryTypeResponse         `json:"type"`
	Visibility             TemplateCreateTemplateTemporaryVisibilityResponse   `json:"visibility"`
	ID                     float64                                             `json:"id"`
	ExternalID             *string                                             `json:"externalId"`
	Title                  string                                              `json:"title"`
	UserID                 float64                                             `json:"userId"`
	TeamID                 float64                                             `json:"teamId"`
	AuthOptions            *TemplateCreateTemplateTemporaryAuthOptions         `json:"authOptions"`
	CreatedAt              string                                              `json:"createdAt"`
	UpdatedAt              string                                              `json:"updatedAt"`
	PublicTitle            string                                              `json:"publicTitle"`
	PublicDescription      string                                              `json:"publicDescription"`
	FolderID               *string                                             `json:"folderId"`
	EnvelopeID             string                                              `json:"envelopeId"`
	TemplateDocumentDataID *string                                             `default:"" json:"templateDocumentDataId"`
	TemplateDocumentData   TemplateCreateTemplateTemporaryTemplateDocumentData `json:"templateDocumentData"`
	TemplateMeta           TemplateCreateTemplateTemporaryTemplateMeta         `json:"templateMeta"`
	DirectLink             *TemplateCreateTemplateTemporaryDirectLink          `json:"directLink"`
	User                   TemplateCreateTemplateTemporaryUser                 `json:"user"`
	Recipients             []TemplateCreateTemplateTemporaryRecipient          `json:"recipients"`
	Fields                 []TemplateCreateTemplateTemporaryField              `json:"fields"`
	Folder                 *TemplateCreateTemplateTemporaryFolder              `json:"folder"`
}

func (t Template) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Template) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"type", "visibility", "id", "title", "userId", "teamId", "createdAt", "updatedAt", "publicTitle", "publicDescription", "envelopeId", "templateDocumentData", "templateMeta", "user", "recipients", "fields"}); err != nil {
		return err
	}
	return nil
}

func (t *Template) GetType() TemplateCreateTemplateTemporaryTypeResponse {
	if t == nil {
		return TemplateCreateTemplateTemporaryTypeResponse("")
	}
	return t.Type
}

func (t *Template) GetVisibility() TemplateCreateTemplateTemporaryVisibilityResponse {
	if t == nil {
		return TemplateCreateTemplateTemporaryVisibilityResponse("")
	}
	return t.Visibility
}

func (t *Template) GetID() float64 {
	if t == nil {
		return 0.0
	}
	return t.ID
}

func (t *Template) GetExternalID() *string {
	if t == nil {
		return nil
	}
	return t.ExternalID
}

func (t *Template) GetTitle() string {
	if t == nil {
		return ""
	}
	return t.Title
}

func (t *Template) GetUserID() float64 {
	if t == nil {
		return 0.0
	}
	return t.UserID
}

func (t *Template) GetTeamID() float64 {
	if t == nil {
		return 0.0
	}
	return t.TeamID
}

func (t *Template) GetAuthOptions() *TemplateCreateTemplateTemporaryAuthOptions {
	if t == nil {
		return nil
	}
	return t.AuthOptions
}

func (t *Template) GetCreatedAt() string {
	if t == nil {
		return ""
	}
	return t.CreatedAt
}

func (t *Template) GetUpdatedAt() string {
	if t == nil {
		return ""
	}
	return t.UpdatedAt
}

func (t *Template) GetPublicTitle() string {
	if t == nil {
		return ""
	}
	return t.PublicTitle
}

func (t *Template) GetPublicDescription() string {
	if t == nil {
		return ""
	}
	return t.PublicDescription
}

func (t *Template) GetFolderID() *string {
	if t == nil {
		return nil
	}
	return t.FolderID
}

func (t *Template) GetEnvelopeID() string {
	if t == nil {
		return ""
	}
	return t.EnvelopeID
}

func (t *Template) GetTemplateDocumentDataID() *string {
	if t == nil {
		return nil
	}
	return t.TemplateDocumentDataID
}

func (t *Template) GetTemplateDocumentData() TemplateCreateTemplateTemporaryTemplateDocumentData {
	if t == nil {
		return TemplateCreateTemplateTemporaryTemplateDocumentData{}
	}
	return t.TemplateDocumentData
}

func (t *Template) GetTemplateMeta() TemplateCreateTemplateTemporaryTemplateMeta {
	if t == nil {
		return TemplateCreateTemplateTemporaryTemplateMeta{}
	}
	return t.TemplateMeta
}

func (t *Template) GetDirectLink() *TemplateCreateTemplateTemporaryDirectLink {
	if t == nil {
		return nil
	}
	return t.DirectLink
}

func (t *Template) GetUser() TemplateCreateTemplateTemporaryUser {
	if t == nil {
		return TemplateCreateTemplateTemporaryUser{}
	}
	return t.User
}

func (t *Template) GetRecipients() []TemplateCreateTemplateTemporaryRecipient {
	if t == nil {
		return []TemplateCreateTemplateTemporaryRecipient{}
	}
	return t.Recipients
}

func (t *Template) GetFields() []TemplateCreateTemplateTemporaryField {
	if t == nil {
		return []TemplateCreateTemplateTemporaryField{}
	}
	return t.Fields
}

func (t *Template) GetFolder() *TemplateCreateTemplateTemporaryFolder {
	if t == nil {
		return nil
	}
	return t.Folder
}

// TemplateCreateTemplateTemporaryResponseBody - Successful response
type TemplateCreateTemplateTemporaryResponseBody struct {
	Template  Template `json:"template"`
	UploadURL string   `json:"uploadUrl"`
}

func (t *TemplateCreateTemplateTemporaryResponseBody) GetTemplate() Template {
	if t == nil {
		return Template{}
	}
	return t.Template
}

func (t *TemplateCreateTemplateTemporaryResponseBody) GetUploadURL() string {
	if t == nil {
		return ""
	}
	return t.UploadURL
}

type TemplateCreateTemplateTemporaryResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *TemplateCreateTemplateTemporaryResponseBody
}

func (t *TemplateCreateTemplateTemporaryResponse) GetHTTPMeta() components.HTTPMetadata {
	if t == nil {
		return components.HTTPMetadata{}
	}
	return t.HTTPMeta
}

func (t *TemplateCreateTemplateTemporaryResponse) GetObject() *TemplateCreateTemplateTemporaryResponseBody {
	if t == nil {
		return nil
	}
	return t.Object
}
