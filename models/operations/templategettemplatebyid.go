// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type TemplateGetTemplateByIDRequest struct {
	TemplateID float64 `pathParam:"style=simple,explode=false,name=templateId"`
}

func (o *TemplateGetTemplateByIDRequest) GetTemplateID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TemplateID
}

type TemplateGetTemplateByIDType string

const (
	TemplateGetTemplateByIDTypePublic  TemplateGetTemplateByIDType = "PUBLIC"
	TemplateGetTemplateByIDTypePrivate TemplateGetTemplateByIDType = "PRIVATE"
)

func (e TemplateGetTemplateByIDType) ToPointer() *TemplateGetTemplateByIDType {
	return &e
}
func (e *TemplateGetTemplateByIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PUBLIC":
		fallthrough
	case "PRIVATE":
		*e = TemplateGetTemplateByIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDType: %v", v)
	}
}

type TemplateGetTemplateByIDVisibility string

const (
	TemplateGetTemplateByIDVisibilityEveryone        TemplateGetTemplateByIDVisibility = "EVERYONE"
	TemplateGetTemplateByIDVisibilityManagerAndAbove TemplateGetTemplateByIDVisibility = "MANAGER_AND_ABOVE"
	TemplateGetTemplateByIDVisibilityAdmin           TemplateGetTemplateByIDVisibility = "ADMIN"
)

func (e TemplateGetTemplateByIDVisibility) ToPointer() *TemplateGetTemplateByIDVisibility {
	return &e
}
func (e *TemplateGetTemplateByIDVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = TemplateGetTemplateByIDVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDVisibility: %v", v)
	}
}

// TemplateGetTemplateByIDGlobalAccessAuth - The type of authentication required for the recipient to access the document.
type TemplateGetTemplateByIDGlobalAccessAuth string

const (
	TemplateGetTemplateByIDGlobalAccessAuthAccount TemplateGetTemplateByIDGlobalAccessAuth = "ACCOUNT"
)

func (e TemplateGetTemplateByIDGlobalAccessAuth) ToPointer() *TemplateGetTemplateByIDGlobalAccessAuth {
	return &e
}
func (e *TemplateGetTemplateByIDGlobalAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = TemplateGetTemplateByIDGlobalAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDGlobalAccessAuth: %v", v)
	}
}

// TemplateGetTemplateByIDGlobalActionAuth - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type TemplateGetTemplateByIDGlobalActionAuth string

const (
	TemplateGetTemplateByIDGlobalActionAuthAccount       TemplateGetTemplateByIDGlobalActionAuth = "ACCOUNT"
	TemplateGetTemplateByIDGlobalActionAuthPasskey       TemplateGetTemplateByIDGlobalActionAuth = "PASSKEY"
	TemplateGetTemplateByIDGlobalActionAuthTwoFactorAuth TemplateGetTemplateByIDGlobalActionAuth = "TWO_FACTOR_AUTH"
)

func (e TemplateGetTemplateByIDGlobalActionAuth) ToPointer() *TemplateGetTemplateByIDGlobalActionAuth {
	return &e
}
func (e *TemplateGetTemplateByIDGlobalActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = TemplateGetTemplateByIDGlobalActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDGlobalActionAuth: %v", v)
	}
}

type TemplateGetTemplateByIDAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	GlobalAccessAuth *TemplateGetTemplateByIDGlobalAccessAuth `json:"globalAccessAuth"`
	// The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
	GlobalActionAuth *TemplateGetTemplateByIDGlobalActionAuth `json:"globalActionAuth"`
}

func (o *TemplateGetTemplateByIDAuthOptions) GetGlobalAccessAuth() *TemplateGetTemplateByIDGlobalAccessAuth {
	if o == nil {
		return nil
	}
	return o.GlobalAccessAuth
}

func (o *TemplateGetTemplateByIDAuthOptions) GetGlobalActionAuth() *TemplateGetTemplateByIDGlobalActionAuth {
	if o == nil {
		return nil
	}
	return o.GlobalActionAuth
}

type TemplateDocumentDataType string

const (
	TemplateDocumentDataTypeS3Path  TemplateDocumentDataType = "S3_PATH"
	TemplateDocumentDataTypeBytes   TemplateDocumentDataType = "BYTES"
	TemplateDocumentDataTypeBytes64 TemplateDocumentDataType = "BYTES_64"
)

func (e TemplateDocumentDataType) ToPointer() *TemplateDocumentDataType {
	return &e
}
func (e *TemplateDocumentDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3_PATH":
		fallthrough
	case "BYTES":
		fallthrough
	case "BYTES_64":
		*e = TemplateDocumentDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateDocumentDataType: %v", v)
	}
}

type TemplateDocumentData struct {
	Type        TemplateDocumentDataType `json:"type"`
	ID          string                   `json:"id"`
	Data        string                   `json:"data"`
	InitialData string                   `json:"initialData"`
}

func (o *TemplateDocumentData) GetType() TemplateDocumentDataType {
	if o == nil {
		return TemplateDocumentDataType("")
	}
	return o.Type
}

func (o *TemplateDocumentData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TemplateDocumentData) GetData() string {
	if o == nil {
		return ""
	}
	return o.Data
}

func (o *TemplateDocumentData) GetInitialData() string {
	if o == nil {
		return ""
	}
	return o.InitialData
}

type TemplateGetTemplateByIDSigningOrder string

const (
	TemplateGetTemplateByIDSigningOrderParallel   TemplateGetTemplateByIDSigningOrder = "PARALLEL"
	TemplateGetTemplateByIDSigningOrderSequential TemplateGetTemplateByIDSigningOrder = "SEQUENTIAL"
)

func (e TemplateGetTemplateByIDSigningOrder) ToPointer() *TemplateGetTemplateByIDSigningOrder {
	return &e
}
func (e *TemplateGetTemplateByIDSigningOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARALLEL":
		fallthrough
	case "SEQUENTIAL":
		*e = TemplateGetTemplateByIDSigningOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDSigningOrder: %v", v)
	}
}

type TemplateGetTemplateByIDDistributionMethod string

const (
	TemplateGetTemplateByIDDistributionMethodEmail TemplateGetTemplateByIDDistributionMethod = "EMAIL"
	TemplateGetTemplateByIDDistributionMethodNone  TemplateGetTemplateByIDDistributionMethod = "NONE"
)

func (e TemplateGetTemplateByIDDistributionMethod) ToPointer() *TemplateGetTemplateByIDDistributionMethod {
	return &e
}
func (e *TemplateGetTemplateByIDDistributionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = TemplateGetTemplateByIDDistributionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDDistributionMethod: %v", v)
	}
}

type TemplateGetTemplateByIDEmailSettings struct {
	// Whether to send an email to all recipients that the document is ready for them to sign.
	RecipientSigningRequest *bool `default:"true" json:"recipientSigningRequest"`
	// Whether to send an email to the recipient who was removed from a pending document.
	RecipientRemoved *bool `default:"true" json:"recipientRemoved"`
	// Whether to send an email to the document owner when a recipient has signed the document.
	RecipientSigned *bool `default:"true" json:"recipientSigned"`
	// Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
	DocumentPending *bool `default:"true" json:"documentPending"`
	// Whether to send an email to all recipients when the document is complete.
	DocumentCompleted *bool `default:"true" json:"documentCompleted"`
	// Whether to send an email to all recipients if a pending document has been deleted.
	DocumentDeleted *bool `default:"true" json:"documentDeleted"`
	// Whether to send an email to the document owner when the document is complete.
	OwnerDocumentCompleted *bool `default:"true" json:"ownerDocumentCompleted"`
}

func (t TemplateGetTemplateByIDEmailSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateGetTemplateByIDEmailSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TemplateGetTemplateByIDEmailSettings) GetRecipientSigningRequest() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigningRequest
}

func (o *TemplateGetTemplateByIDEmailSettings) GetRecipientRemoved() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientRemoved
}

func (o *TemplateGetTemplateByIDEmailSettings) GetRecipientSigned() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigned
}

func (o *TemplateGetTemplateByIDEmailSettings) GetDocumentPending() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentPending
}

func (o *TemplateGetTemplateByIDEmailSettings) GetDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentCompleted
}

func (o *TemplateGetTemplateByIDEmailSettings) GetDocumentDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentDeleted
}

func (o *TemplateGetTemplateByIDEmailSettings) GetOwnerDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.OwnerDocumentCompleted
}

type TemplateGetTemplateByIDTemplateMeta struct {
	ID                     string                                    `json:"id"`
	Subject                *string                                   `json:"subject"`
	Message                *string                                   `json:"message"`
	Timezone               *string                                   `json:"timezone"`
	DateFormat             *string                                   `json:"dateFormat"`
	SigningOrder           *TemplateGetTemplateByIDSigningOrder      `json:"signingOrder"`
	TypedSignatureEnabled  bool                                      `json:"typedSignatureEnabled"`
	UploadSignatureEnabled bool                                      `json:"uploadSignatureEnabled"`
	DrawSignatureEnabled   bool                                      `json:"drawSignatureEnabled"`
	AllowDictateNextSigner bool                                      `json:"allowDictateNextSigner"`
	DistributionMethod     TemplateGetTemplateByIDDistributionMethod `json:"distributionMethod"`
	TemplateID             float64                                   `json:"templateId"`
	RedirectURL            *string                                   `json:"redirectUrl"`
	Language               string                                    `json:"language"`
	EmailSettings          *TemplateGetTemplateByIDEmailSettings     `json:"emailSettings"`
}

func (o *TemplateGetTemplateByIDTemplateMeta) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TemplateGetTemplateByIDTemplateMeta) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *TemplateGetTemplateByIDTemplateMeta) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *TemplateGetTemplateByIDTemplateMeta) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *TemplateGetTemplateByIDTemplateMeta) GetDateFormat() *string {
	if o == nil {
		return nil
	}
	return o.DateFormat
}

func (o *TemplateGetTemplateByIDTemplateMeta) GetSigningOrder() *TemplateGetTemplateByIDSigningOrder {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *TemplateGetTemplateByIDTemplateMeta) GetTypedSignatureEnabled() bool {
	if o == nil {
		return false
	}
	return o.TypedSignatureEnabled
}

func (o *TemplateGetTemplateByIDTemplateMeta) GetUploadSignatureEnabled() bool {
	if o == nil {
		return false
	}
	return o.UploadSignatureEnabled
}

func (o *TemplateGetTemplateByIDTemplateMeta) GetDrawSignatureEnabled() bool {
	if o == nil {
		return false
	}
	return o.DrawSignatureEnabled
}

func (o *TemplateGetTemplateByIDTemplateMeta) GetAllowDictateNextSigner() bool {
	if o == nil {
		return false
	}
	return o.AllowDictateNextSigner
}

func (o *TemplateGetTemplateByIDTemplateMeta) GetDistributionMethod() TemplateGetTemplateByIDDistributionMethod {
	if o == nil {
		return TemplateGetTemplateByIDDistributionMethod("")
	}
	return o.DistributionMethod
}

func (o *TemplateGetTemplateByIDTemplateMeta) GetTemplateID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TemplateID
}

func (o *TemplateGetTemplateByIDTemplateMeta) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *TemplateGetTemplateByIDTemplateMeta) GetLanguage() string {
	if o == nil {
		return ""
	}
	return o.Language
}

func (o *TemplateGetTemplateByIDTemplateMeta) GetEmailSettings() *TemplateGetTemplateByIDEmailSettings {
	if o == nil {
		return nil
	}
	return o.EmailSettings
}

type TemplateGetTemplateByIDDirectLink struct {
	ID                        string  `json:"id"`
	TemplateID                float64 `json:"templateId"`
	Token                     string  `json:"token"`
	CreatedAt                 string  `json:"createdAt"`
	Enabled                   bool    `json:"enabled"`
	DirectTemplateRecipientID float64 `json:"directTemplateRecipientId"`
}

func (o *TemplateGetTemplateByIDDirectLink) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TemplateGetTemplateByIDDirectLink) GetTemplateID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TemplateID
}

func (o *TemplateGetTemplateByIDDirectLink) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *TemplateGetTemplateByIDDirectLink) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *TemplateGetTemplateByIDDirectLink) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *TemplateGetTemplateByIDDirectLink) GetDirectTemplateRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DirectTemplateRecipientID
}

type TemplateGetTemplateByIDUser struct {
	ID    float64 `json:"id"`
	Name  *string `json:"name"`
	Email string  `json:"email"`
}

func (o *TemplateGetTemplateByIDUser) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateGetTemplateByIDUser) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *TemplateGetTemplateByIDUser) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

type TemplateGetTemplateByIDRole string

const (
	TemplateGetTemplateByIDRoleCc        TemplateGetTemplateByIDRole = "CC"
	TemplateGetTemplateByIDRoleSigner    TemplateGetTemplateByIDRole = "SIGNER"
	TemplateGetTemplateByIDRoleViewer    TemplateGetTemplateByIDRole = "VIEWER"
	TemplateGetTemplateByIDRoleApprover  TemplateGetTemplateByIDRole = "APPROVER"
	TemplateGetTemplateByIDRoleAssistant TemplateGetTemplateByIDRole = "ASSISTANT"
)

func (e TemplateGetTemplateByIDRole) ToPointer() *TemplateGetTemplateByIDRole {
	return &e
}
func (e *TemplateGetTemplateByIDRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		fallthrough
	case "ASSISTANT":
		*e = TemplateGetTemplateByIDRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDRole: %v", v)
	}
}

type TemplateGetTemplateByIDReadStatus string

const (
	TemplateGetTemplateByIDReadStatusNotOpened TemplateGetTemplateByIDReadStatus = "NOT_OPENED"
	TemplateGetTemplateByIDReadStatusOpened    TemplateGetTemplateByIDReadStatus = "OPENED"
)

func (e TemplateGetTemplateByIDReadStatus) ToPointer() *TemplateGetTemplateByIDReadStatus {
	return &e
}
func (e *TemplateGetTemplateByIDReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = TemplateGetTemplateByIDReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDReadStatus: %v", v)
	}
}

type TemplateGetTemplateByIDSigningStatus string

const (
	TemplateGetTemplateByIDSigningStatusNotSigned TemplateGetTemplateByIDSigningStatus = "NOT_SIGNED"
	TemplateGetTemplateByIDSigningStatusSigned    TemplateGetTemplateByIDSigningStatus = "SIGNED"
	TemplateGetTemplateByIDSigningStatusRejected  TemplateGetTemplateByIDSigningStatus = "REJECTED"
)

func (e TemplateGetTemplateByIDSigningStatus) ToPointer() *TemplateGetTemplateByIDSigningStatus {
	return &e
}
func (e *TemplateGetTemplateByIDSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = TemplateGetTemplateByIDSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDSigningStatus: %v", v)
	}
}

type TemplateGetTemplateByIDSendStatus string

const (
	TemplateGetTemplateByIDSendStatusNotSent TemplateGetTemplateByIDSendStatus = "NOT_SENT"
	TemplateGetTemplateByIDSendStatusSent    TemplateGetTemplateByIDSendStatus = "SENT"
)

func (e TemplateGetTemplateByIDSendStatus) ToPointer() *TemplateGetTemplateByIDSendStatus {
	return &e
}
func (e *TemplateGetTemplateByIDSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = TemplateGetTemplateByIDSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDSendStatus: %v", v)
	}
}

// TemplateGetTemplateByIDAccessAuth - The type of authentication required for the recipient to access the document.
type TemplateGetTemplateByIDAccessAuth string

const (
	TemplateGetTemplateByIDAccessAuthAccount TemplateGetTemplateByIDAccessAuth = "ACCOUNT"
)

func (e TemplateGetTemplateByIDAccessAuth) ToPointer() *TemplateGetTemplateByIDAccessAuth {
	return &e
}
func (e *TemplateGetTemplateByIDAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = TemplateGetTemplateByIDAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDAccessAuth: %v", v)
	}
}

// TemplateGetTemplateByIDActionAuth - The type of authentication required for the recipient to sign the document.
type TemplateGetTemplateByIDActionAuth string

const (
	TemplateGetTemplateByIDActionAuthAccount       TemplateGetTemplateByIDActionAuth = "ACCOUNT"
	TemplateGetTemplateByIDActionAuthPasskey       TemplateGetTemplateByIDActionAuth = "PASSKEY"
	TemplateGetTemplateByIDActionAuthTwoFactorAuth TemplateGetTemplateByIDActionAuth = "TWO_FACTOR_AUTH"
	TemplateGetTemplateByIDActionAuthExplicitNone  TemplateGetTemplateByIDActionAuth = "EXPLICIT_NONE"
)

func (e TemplateGetTemplateByIDActionAuth) ToPointer() *TemplateGetTemplateByIDActionAuth {
	return &e
}
func (e *TemplateGetTemplateByIDActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "EXPLICIT_NONE":
		*e = TemplateGetTemplateByIDActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDActionAuth: %v", v)
	}
}

type TemplateGetTemplateByIDRecipientAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	AccessAuth *TemplateGetTemplateByIDAccessAuth `json:"accessAuth"`
	// The type of authentication required for the recipient to sign the document.
	ActionAuth *TemplateGetTemplateByIDActionAuth `json:"actionAuth"`
}

func (o *TemplateGetTemplateByIDRecipientAuthOptions) GetAccessAuth() *TemplateGetTemplateByIDAccessAuth {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *TemplateGetTemplateByIDRecipientAuthOptions) GetActionAuth() *TemplateGetTemplateByIDActionAuth {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

type TemplateGetTemplateByIDRecipient struct {
	Role              TemplateGetTemplateByIDRole                  `json:"role"`
	ReadStatus        TemplateGetTemplateByIDReadStatus            `json:"readStatus"`
	SigningStatus     TemplateGetTemplateByIDSigningStatus         `json:"signingStatus"`
	SendStatus        TemplateGetTemplateByIDSendStatus            `json:"sendStatus"`
	ID                float64                                      `json:"id"`
	DocumentID        *float64                                     `json:"documentId"`
	TemplateID        *float64                                     `json:"templateId"`
	Email             string                                       `json:"email"`
	Name              string                                       `json:"name"`
	Token             string                                       `json:"token"`
	DocumentDeletedAt *string                                      `json:"documentDeletedAt"`
	Expired           *string                                      `json:"expired"`
	SignedAt          *string                                      `json:"signedAt"`
	AuthOptions       *TemplateGetTemplateByIDRecipientAuthOptions `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
}

func (o *TemplateGetTemplateByIDRecipient) GetRole() TemplateGetTemplateByIDRole {
	if o == nil {
		return TemplateGetTemplateByIDRole("")
	}
	return o.Role
}

func (o *TemplateGetTemplateByIDRecipient) GetReadStatus() TemplateGetTemplateByIDReadStatus {
	if o == nil {
		return TemplateGetTemplateByIDReadStatus("")
	}
	return o.ReadStatus
}

func (o *TemplateGetTemplateByIDRecipient) GetSigningStatus() TemplateGetTemplateByIDSigningStatus {
	if o == nil {
		return TemplateGetTemplateByIDSigningStatus("")
	}
	return o.SigningStatus
}

func (o *TemplateGetTemplateByIDRecipient) GetSendStatus() TemplateGetTemplateByIDSendStatus {
	if o == nil {
		return TemplateGetTemplateByIDSendStatus("")
	}
	return o.SendStatus
}

func (o *TemplateGetTemplateByIDRecipient) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateGetTemplateByIDRecipient) GetDocumentID() *float64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *TemplateGetTemplateByIDRecipient) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *TemplateGetTemplateByIDRecipient) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *TemplateGetTemplateByIDRecipient) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TemplateGetTemplateByIDRecipient) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *TemplateGetTemplateByIDRecipient) GetDocumentDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DocumentDeletedAt
}

func (o *TemplateGetTemplateByIDRecipient) GetExpired() *string {
	if o == nil {
		return nil
	}
	return o.Expired
}

func (o *TemplateGetTemplateByIDRecipient) GetSignedAt() *string {
	if o == nil {
		return nil
	}
	return o.SignedAt
}

func (o *TemplateGetTemplateByIDRecipient) GetAuthOptions() *TemplateGetTemplateByIDRecipientAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *TemplateGetTemplateByIDRecipient) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *TemplateGetTemplateByIDRecipient) GetRejectionReason() *string {
	if o == nil {
		return nil
	}
	return o.RejectionReason
}

type TemplateGetTemplateByIDFieldType string

const (
	TemplateGetTemplateByIDFieldTypeSignature     TemplateGetTemplateByIDFieldType = "SIGNATURE"
	TemplateGetTemplateByIDFieldTypeFreeSignature TemplateGetTemplateByIDFieldType = "FREE_SIGNATURE"
	TemplateGetTemplateByIDFieldTypeInitials      TemplateGetTemplateByIDFieldType = "INITIALS"
	TemplateGetTemplateByIDFieldTypeName          TemplateGetTemplateByIDFieldType = "NAME"
	TemplateGetTemplateByIDFieldTypeEmail         TemplateGetTemplateByIDFieldType = "EMAIL"
	TemplateGetTemplateByIDFieldTypeDate          TemplateGetTemplateByIDFieldType = "DATE"
	TemplateGetTemplateByIDFieldTypeText          TemplateGetTemplateByIDFieldType = "TEXT"
	TemplateGetTemplateByIDFieldTypeNumber        TemplateGetTemplateByIDFieldType = "NUMBER"
	TemplateGetTemplateByIDFieldTypeRadio         TemplateGetTemplateByIDFieldType = "RADIO"
	TemplateGetTemplateByIDFieldTypeCheckbox      TemplateGetTemplateByIDFieldType = "CHECKBOX"
	TemplateGetTemplateByIDFieldTypeDropdown      TemplateGetTemplateByIDFieldType = "DROPDOWN"
)

func (e TemplateGetTemplateByIDFieldType) ToPointer() *TemplateGetTemplateByIDFieldType {
	return &e
}
func (e *TemplateGetTemplateByIDFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = TemplateGetTemplateByIDFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDFieldType: %v", v)
	}
}

type TemplateGetTemplateByIDTypeDropdown string

const (
	TemplateGetTemplateByIDTypeDropdownDropdown TemplateGetTemplateByIDTypeDropdown = "dropdown"
)

func (e TemplateGetTemplateByIDTypeDropdown) ToPointer() *TemplateGetTemplateByIDTypeDropdown {
	return &e
}
func (e *TemplateGetTemplateByIDTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = TemplateGetTemplateByIDTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDTypeDropdown: %v", v)
	}
}

type TemplateGetTemplateByIDValue3 struct {
	Value string `json:"value"`
}

func (o *TemplateGetTemplateByIDValue3) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateGetTemplateByIDFieldMetaDropdown struct {
	Label        *string                             `json:"label,omitempty"`
	Placeholder  *string                             `json:"placeholder,omitempty"`
	Required     *bool                               `json:"required,omitempty"`
	ReadOnly     *bool                               `json:"readOnly,omitempty"`
	Type         TemplateGetTemplateByIDTypeDropdown `json:"type"`
	Values       []TemplateGetTemplateByIDValue3     `json:"values,omitempty"`
	DefaultValue *string                             `json:"defaultValue,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMetaDropdown) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMetaDropdown) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMetaDropdown) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMetaDropdown) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMetaDropdown) GetType() TemplateGetTemplateByIDTypeDropdown {
	if o == nil {
		return TemplateGetTemplateByIDTypeDropdown("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMetaDropdown) GetValues() []TemplateGetTemplateByIDValue3 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *TemplateGetTemplateByIDFieldMetaDropdown) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type TemplateGetTemplateByIDTypeCheckbox string

const (
	TemplateGetTemplateByIDTypeCheckboxCheckbox TemplateGetTemplateByIDTypeCheckbox = "checkbox"
)

func (e TemplateGetTemplateByIDTypeCheckbox) ToPointer() *TemplateGetTemplateByIDTypeCheckbox {
	return &e
}
func (e *TemplateGetTemplateByIDTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = TemplateGetTemplateByIDTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDTypeCheckbox: %v", v)
	}
}

type TemplateGetTemplateByIDValue2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *TemplateGetTemplateByIDValue2) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateGetTemplateByIDValue2) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *TemplateGetTemplateByIDValue2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateGetTemplateByIDFieldMetaCheckbox struct {
	Label            *string                             `json:"label,omitempty"`
	Placeholder      *string                             `json:"placeholder,omitempty"`
	Required         *bool                               `json:"required,omitempty"`
	ReadOnly         *bool                               `json:"readOnly,omitempty"`
	Type             TemplateGetTemplateByIDTypeCheckbox `json:"type"`
	Values           []TemplateGetTemplateByIDValue2     `json:"values,omitempty"`
	ValidationRule   *string                             `json:"validationRule,omitempty"`
	ValidationLength *float64                            `json:"validationLength,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMetaCheckbox) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMetaCheckbox) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMetaCheckbox) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMetaCheckbox) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMetaCheckbox) GetType() TemplateGetTemplateByIDTypeCheckbox {
	if o == nil {
		return TemplateGetTemplateByIDTypeCheckbox("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMetaCheckbox) GetValues() []TemplateGetTemplateByIDValue2 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *TemplateGetTemplateByIDFieldMetaCheckbox) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *TemplateGetTemplateByIDFieldMetaCheckbox) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type TemplateGetTemplateByIDTypeRadio string

const (
	TemplateGetTemplateByIDTypeRadioRadio TemplateGetTemplateByIDTypeRadio = "radio"
)

func (e TemplateGetTemplateByIDTypeRadio) ToPointer() *TemplateGetTemplateByIDTypeRadio {
	return &e
}
func (e *TemplateGetTemplateByIDTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = TemplateGetTemplateByIDTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDTypeRadio: %v", v)
	}
}

type TemplateGetTemplateByIDValue1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *TemplateGetTemplateByIDValue1) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateGetTemplateByIDValue1) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *TemplateGetTemplateByIDValue1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateGetTemplateByIDFieldMetaRadio struct {
	Label       *string                          `json:"label,omitempty"`
	Placeholder *string                          `json:"placeholder,omitempty"`
	Required    *bool                            `json:"required,omitempty"`
	ReadOnly    *bool                            `json:"readOnly,omitempty"`
	Type        TemplateGetTemplateByIDTypeRadio `json:"type"`
	Values      []TemplateGetTemplateByIDValue1  `json:"values,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMetaRadio) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMetaRadio) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMetaRadio) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMetaRadio) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMetaRadio) GetType() TemplateGetTemplateByIDTypeRadio {
	if o == nil {
		return TemplateGetTemplateByIDTypeRadio("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMetaRadio) GetValues() []TemplateGetTemplateByIDValue1 {
	if o == nil {
		return nil
	}
	return o.Values
}

type TemplateGetTemplateByIDTypeNumber string

const (
	TemplateGetTemplateByIDTypeNumberNumber TemplateGetTemplateByIDTypeNumber = "number"
)

func (e TemplateGetTemplateByIDTypeNumber) ToPointer() *TemplateGetTemplateByIDTypeNumber {
	return &e
}
func (e *TemplateGetTemplateByIDTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = TemplateGetTemplateByIDTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDTypeNumber: %v", v)
	}
}

type TemplateGetTemplateByIDTextAlign6 string

const (
	TemplateGetTemplateByIDTextAlign6Left   TemplateGetTemplateByIDTextAlign6 = "left"
	TemplateGetTemplateByIDTextAlign6Center TemplateGetTemplateByIDTextAlign6 = "center"
	TemplateGetTemplateByIDTextAlign6Right  TemplateGetTemplateByIDTextAlign6 = "right"
)

func (e TemplateGetTemplateByIDTextAlign6) ToPointer() *TemplateGetTemplateByIDTextAlign6 {
	return &e
}
func (e *TemplateGetTemplateByIDTextAlign6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateGetTemplateByIDTextAlign6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDTextAlign6: %v", v)
	}
}

type TemplateGetTemplateByIDFieldMetaNumber struct {
	Label        *string                            `json:"label,omitempty"`
	Placeholder  *string                            `json:"placeholder,omitempty"`
	Required     *bool                              `json:"required,omitempty"`
	ReadOnly     *bool                              `json:"readOnly,omitempty"`
	Type         TemplateGetTemplateByIDTypeNumber  `json:"type"`
	NumberFormat *string                            `json:"numberFormat,omitempty"`
	Value        *string                            `json:"value,omitempty"`
	MinValue     *float64                           `json:"minValue,omitempty"`
	MaxValue     *float64                           `json:"maxValue,omitempty"`
	FontSize     *float64                           `json:"fontSize,omitempty"`
	TextAlign    *TemplateGetTemplateByIDTextAlign6 `json:"textAlign,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMetaNumber) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMetaNumber) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMetaNumber) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMetaNumber) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMetaNumber) GetType() TemplateGetTemplateByIDTypeNumber {
	if o == nil {
		return TemplateGetTemplateByIDTypeNumber("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMetaNumber) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *TemplateGetTemplateByIDFieldMetaNumber) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *TemplateGetTemplateByIDFieldMetaNumber) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *TemplateGetTemplateByIDFieldMetaNumber) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *TemplateGetTemplateByIDFieldMetaNumber) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateGetTemplateByIDFieldMetaNumber) GetTextAlign() *TemplateGetTemplateByIDTextAlign6 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateGetTemplateByIDTypeText string

const (
	TemplateGetTemplateByIDTypeTextText TemplateGetTemplateByIDTypeText = "text"
)

func (e TemplateGetTemplateByIDTypeText) ToPointer() *TemplateGetTemplateByIDTypeText {
	return &e
}
func (e *TemplateGetTemplateByIDTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = TemplateGetTemplateByIDTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDTypeText: %v", v)
	}
}

type TemplateGetTemplateByIDTextAlign5 string

const (
	TemplateGetTemplateByIDTextAlign5Left   TemplateGetTemplateByIDTextAlign5 = "left"
	TemplateGetTemplateByIDTextAlign5Center TemplateGetTemplateByIDTextAlign5 = "center"
	TemplateGetTemplateByIDTextAlign5Right  TemplateGetTemplateByIDTextAlign5 = "right"
)

func (e TemplateGetTemplateByIDTextAlign5) ToPointer() *TemplateGetTemplateByIDTextAlign5 {
	return &e
}
func (e *TemplateGetTemplateByIDTextAlign5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateGetTemplateByIDTextAlign5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDTextAlign5: %v", v)
	}
}

type TemplateGetTemplateByIDFieldMetaText struct {
	Label          *string                            `json:"label,omitempty"`
	Placeholder    *string                            `json:"placeholder,omitempty"`
	Required       *bool                              `json:"required,omitempty"`
	ReadOnly       *bool                              `json:"readOnly,omitempty"`
	Type           TemplateGetTemplateByIDTypeText    `json:"type"`
	Text           *string                            `json:"text,omitempty"`
	CharacterLimit *float64                           `json:"characterLimit,omitempty"`
	FontSize       *float64                           `json:"fontSize,omitempty"`
	TextAlign      *TemplateGetTemplateByIDTextAlign5 `json:"textAlign,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMetaText) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMetaText) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMetaText) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMetaText) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMetaText) GetType() TemplateGetTemplateByIDTypeText {
	if o == nil {
		return TemplateGetTemplateByIDTypeText("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMetaText) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *TemplateGetTemplateByIDFieldMetaText) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *TemplateGetTemplateByIDFieldMetaText) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateGetTemplateByIDFieldMetaText) GetTextAlign() *TemplateGetTemplateByIDTextAlign5 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateGetTemplateByIDTypeDate string

const (
	TemplateGetTemplateByIDTypeDateDate TemplateGetTemplateByIDTypeDate = "date"
)

func (e TemplateGetTemplateByIDTypeDate) ToPointer() *TemplateGetTemplateByIDTypeDate {
	return &e
}
func (e *TemplateGetTemplateByIDTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = TemplateGetTemplateByIDTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDTypeDate: %v", v)
	}
}

type TemplateGetTemplateByIDTextAlign4 string

const (
	TemplateGetTemplateByIDTextAlign4Left   TemplateGetTemplateByIDTextAlign4 = "left"
	TemplateGetTemplateByIDTextAlign4Center TemplateGetTemplateByIDTextAlign4 = "center"
	TemplateGetTemplateByIDTextAlign4Right  TemplateGetTemplateByIDTextAlign4 = "right"
)

func (e TemplateGetTemplateByIDTextAlign4) ToPointer() *TemplateGetTemplateByIDTextAlign4 {
	return &e
}
func (e *TemplateGetTemplateByIDTextAlign4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateGetTemplateByIDTextAlign4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDTextAlign4: %v", v)
	}
}

type TemplateGetTemplateByIDFieldMetaDate struct {
	Label       *string                            `json:"label,omitempty"`
	Placeholder *string                            `json:"placeholder,omitempty"`
	Required    *bool                              `json:"required,omitempty"`
	ReadOnly    *bool                              `json:"readOnly,omitempty"`
	Type        TemplateGetTemplateByIDTypeDate    `json:"type"`
	FontSize    *float64                           `json:"fontSize,omitempty"`
	TextAlign   *TemplateGetTemplateByIDTextAlign4 `json:"textAlign,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMetaDate) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMetaDate) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMetaDate) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMetaDate) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMetaDate) GetType() TemplateGetTemplateByIDTypeDate {
	if o == nil {
		return TemplateGetTemplateByIDTypeDate("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMetaDate) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateGetTemplateByIDFieldMetaDate) GetTextAlign() *TemplateGetTemplateByIDTextAlign4 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateGetTemplateByIDTypeEmail string

const (
	TemplateGetTemplateByIDTypeEmailEmail TemplateGetTemplateByIDTypeEmail = "email"
)

func (e TemplateGetTemplateByIDTypeEmail) ToPointer() *TemplateGetTemplateByIDTypeEmail {
	return &e
}
func (e *TemplateGetTemplateByIDTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = TemplateGetTemplateByIDTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDTypeEmail: %v", v)
	}
}

type TemplateGetTemplateByIDTextAlign3 string

const (
	TemplateGetTemplateByIDTextAlign3Left   TemplateGetTemplateByIDTextAlign3 = "left"
	TemplateGetTemplateByIDTextAlign3Center TemplateGetTemplateByIDTextAlign3 = "center"
	TemplateGetTemplateByIDTextAlign3Right  TemplateGetTemplateByIDTextAlign3 = "right"
)

func (e TemplateGetTemplateByIDTextAlign3) ToPointer() *TemplateGetTemplateByIDTextAlign3 {
	return &e
}
func (e *TemplateGetTemplateByIDTextAlign3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateGetTemplateByIDTextAlign3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDTextAlign3: %v", v)
	}
}

type TemplateGetTemplateByIDFieldMetaEmail struct {
	Label       *string                            `json:"label,omitempty"`
	Placeholder *string                            `json:"placeholder,omitempty"`
	Required    *bool                              `json:"required,omitempty"`
	ReadOnly    *bool                              `json:"readOnly,omitempty"`
	Type        TemplateGetTemplateByIDTypeEmail   `json:"type"`
	FontSize    *float64                           `json:"fontSize,omitempty"`
	TextAlign   *TemplateGetTemplateByIDTextAlign3 `json:"textAlign,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMetaEmail) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMetaEmail) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMetaEmail) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMetaEmail) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMetaEmail) GetType() TemplateGetTemplateByIDTypeEmail {
	if o == nil {
		return TemplateGetTemplateByIDTypeEmail("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMetaEmail) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateGetTemplateByIDFieldMetaEmail) GetTextAlign() *TemplateGetTemplateByIDTextAlign3 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateGetTemplateByIDTypeName string

const (
	TemplateGetTemplateByIDTypeNameName TemplateGetTemplateByIDTypeName = "name"
)

func (e TemplateGetTemplateByIDTypeName) ToPointer() *TemplateGetTemplateByIDTypeName {
	return &e
}
func (e *TemplateGetTemplateByIDTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = TemplateGetTemplateByIDTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDTypeName: %v", v)
	}
}

type TemplateGetTemplateByIDTextAlign2 string

const (
	TemplateGetTemplateByIDTextAlign2Left   TemplateGetTemplateByIDTextAlign2 = "left"
	TemplateGetTemplateByIDTextAlign2Center TemplateGetTemplateByIDTextAlign2 = "center"
	TemplateGetTemplateByIDTextAlign2Right  TemplateGetTemplateByIDTextAlign2 = "right"
)

func (e TemplateGetTemplateByIDTextAlign2) ToPointer() *TemplateGetTemplateByIDTextAlign2 {
	return &e
}
func (e *TemplateGetTemplateByIDTextAlign2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateGetTemplateByIDTextAlign2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDTextAlign2: %v", v)
	}
}

type TemplateGetTemplateByIDFieldMetaName struct {
	Label       *string                            `json:"label,omitempty"`
	Placeholder *string                            `json:"placeholder,omitempty"`
	Required    *bool                              `json:"required,omitempty"`
	ReadOnly    *bool                              `json:"readOnly,omitempty"`
	Type        TemplateGetTemplateByIDTypeName    `json:"type"`
	FontSize    *float64                           `json:"fontSize,omitempty"`
	TextAlign   *TemplateGetTemplateByIDTextAlign2 `json:"textAlign,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMetaName) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMetaName) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMetaName) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMetaName) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMetaName) GetType() TemplateGetTemplateByIDTypeName {
	if o == nil {
		return TemplateGetTemplateByIDTypeName("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMetaName) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateGetTemplateByIDFieldMetaName) GetTextAlign() *TemplateGetTemplateByIDTextAlign2 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateGetTemplateByIDTypeInitials string

const (
	TemplateGetTemplateByIDTypeInitialsInitials TemplateGetTemplateByIDTypeInitials = "initials"
)

func (e TemplateGetTemplateByIDTypeInitials) ToPointer() *TemplateGetTemplateByIDTypeInitials {
	return &e
}
func (e *TemplateGetTemplateByIDTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = TemplateGetTemplateByIDTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDTypeInitials: %v", v)
	}
}

type TemplateGetTemplateByIDTextAlign1 string

const (
	TemplateGetTemplateByIDTextAlign1Left   TemplateGetTemplateByIDTextAlign1 = "left"
	TemplateGetTemplateByIDTextAlign1Center TemplateGetTemplateByIDTextAlign1 = "center"
	TemplateGetTemplateByIDTextAlign1Right  TemplateGetTemplateByIDTextAlign1 = "right"
)

func (e TemplateGetTemplateByIDTextAlign1) ToPointer() *TemplateGetTemplateByIDTextAlign1 {
	return &e
}
func (e *TemplateGetTemplateByIDTextAlign1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = TemplateGetTemplateByIDTextAlign1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateGetTemplateByIDTextAlign1: %v", v)
	}
}

type TemplateGetTemplateByIDFieldMetaInitials struct {
	Label       *string                             `json:"label,omitempty"`
	Placeholder *string                             `json:"placeholder,omitempty"`
	Required    *bool                               `json:"required,omitempty"`
	ReadOnly    *bool                               `json:"readOnly,omitempty"`
	Type        TemplateGetTemplateByIDTypeInitials `json:"type"`
	FontSize    *float64                            `json:"fontSize,omitempty"`
	TextAlign   *TemplateGetTemplateByIDTextAlign1  `json:"textAlign,omitempty"`
}

func (o *TemplateGetTemplateByIDFieldMetaInitials) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateGetTemplateByIDFieldMetaInitials) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateGetTemplateByIDFieldMetaInitials) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateGetTemplateByIDFieldMetaInitials) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateGetTemplateByIDFieldMetaInitials) GetType() TemplateGetTemplateByIDTypeInitials {
	if o == nil {
		return TemplateGetTemplateByIDTypeInitials("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDFieldMetaInitials) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *TemplateGetTemplateByIDFieldMetaInitials) GetTextAlign() *TemplateGetTemplateByIDTextAlign1 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type TemplateGetTemplateByIDFieldMetaUnionType string

const (
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaInitials TemplateGetTemplateByIDFieldMetaUnionType = "template_getTemplateById_fieldMeta_Initials"
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaName     TemplateGetTemplateByIDFieldMetaUnionType = "template_getTemplateById_fieldMeta_Name"
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaEmail    TemplateGetTemplateByIDFieldMetaUnionType = "template_getTemplateById_fieldMeta_Email"
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaDate     TemplateGetTemplateByIDFieldMetaUnionType = "template_getTemplateById_fieldMeta_Date"
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaText     TemplateGetTemplateByIDFieldMetaUnionType = "template_getTemplateById_fieldMeta_Text"
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaNumber   TemplateGetTemplateByIDFieldMetaUnionType = "template_getTemplateById_fieldMeta_Number"
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaRadio    TemplateGetTemplateByIDFieldMetaUnionType = "template_getTemplateById_fieldMeta_Radio"
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaCheckbox TemplateGetTemplateByIDFieldMetaUnionType = "template_getTemplateById_fieldMeta_Checkbox"
	TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaDropdown TemplateGetTemplateByIDFieldMetaUnionType = "template_getTemplateById_fieldMeta_Dropdown"
)

type TemplateGetTemplateByIDFieldMetaUnion struct {
	TemplateGetTemplateByIDFieldMetaInitials *TemplateGetTemplateByIDFieldMetaInitials `queryParam:"inline"`
	TemplateGetTemplateByIDFieldMetaName     *TemplateGetTemplateByIDFieldMetaName     `queryParam:"inline"`
	TemplateGetTemplateByIDFieldMetaEmail    *TemplateGetTemplateByIDFieldMetaEmail    `queryParam:"inline"`
	TemplateGetTemplateByIDFieldMetaDate     *TemplateGetTemplateByIDFieldMetaDate     `queryParam:"inline"`
	TemplateGetTemplateByIDFieldMetaText     *TemplateGetTemplateByIDFieldMetaText     `queryParam:"inline"`
	TemplateGetTemplateByIDFieldMetaNumber   *TemplateGetTemplateByIDFieldMetaNumber   `queryParam:"inline"`
	TemplateGetTemplateByIDFieldMetaRadio    *TemplateGetTemplateByIDFieldMetaRadio    `queryParam:"inline"`
	TemplateGetTemplateByIDFieldMetaCheckbox *TemplateGetTemplateByIDFieldMetaCheckbox `queryParam:"inline"`
	TemplateGetTemplateByIDFieldMetaDropdown *TemplateGetTemplateByIDFieldMetaDropdown `queryParam:"inline"`

	Type TemplateGetTemplateByIDFieldMetaUnionType
}

func CreateTemplateGetTemplateByIDFieldMetaUnionTemplateGetTemplateByIDFieldMetaInitials(templateGetTemplateByIDFieldMetaInitials TemplateGetTemplateByIDFieldMetaInitials) TemplateGetTemplateByIDFieldMetaUnion {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaInitials

	return TemplateGetTemplateByIDFieldMetaUnion{
		TemplateGetTemplateByIDFieldMetaInitials: &templateGetTemplateByIDFieldMetaInitials,
		Type:                                     typ,
	}
}

func CreateTemplateGetTemplateByIDFieldMetaUnionTemplateGetTemplateByIDFieldMetaName(templateGetTemplateByIDFieldMetaName TemplateGetTemplateByIDFieldMetaName) TemplateGetTemplateByIDFieldMetaUnion {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaName

	return TemplateGetTemplateByIDFieldMetaUnion{
		TemplateGetTemplateByIDFieldMetaName: &templateGetTemplateByIDFieldMetaName,
		Type:                                 typ,
	}
}

func CreateTemplateGetTemplateByIDFieldMetaUnionTemplateGetTemplateByIDFieldMetaEmail(templateGetTemplateByIDFieldMetaEmail TemplateGetTemplateByIDFieldMetaEmail) TemplateGetTemplateByIDFieldMetaUnion {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaEmail

	return TemplateGetTemplateByIDFieldMetaUnion{
		TemplateGetTemplateByIDFieldMetaEmail: &templateGetTemplateByIDFieldMetaEmail,
		Type:                                  typ,
	}
}

func CreateTemplateGetTemplateByIDFieldMetaUnionTemplateGetTemplateByIDFieldMetaDate(templateGetTemplateByIDFieldMetaDate TemplateGetTemplateByIDFieldMetaDate) TemplateGetTemplateByIDFieldMetaUnion {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaDate

	return TemplateGetTemplateByIDFieldMetaUnion{
		TemplateGetTemplateByIDFieldMetaDate: &templateGetTemplateByIDFieldMetaDate,
		Type:                                 typ,
	}
}

func CreateTemplateGetTemplateByIDFieldMetaUnionTemplateGetTemplateByIDFieldMetaText(templateGetTemplateByIDFieldMetaText TemplateGetTemplateByIDFieldMetaText) TemplateGetTemplateByIDFieldMetaUnion {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaText

	return TemplateGetTemplateByIDFieldMetaUnion{
		TemplateGetTemplateByIDFieldMetaText: &templateGetTemplateByIDFieldMetaText,
		Type:                                 typ,
	}
}

func CreateTemplateGetTemplateByIDFieldMetaUnionTemplateGetTemplateByIDFieldMetaNumber(templateGetTemplateByIDFieldMetaNumber TemplateGetTemplateByIDFieldMetaNumber) TemplateGetTemplateByIDFieldMetaUnion {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaNumber

	return TemplateGetTemplateByIDFieldMetaUnion{
		TemplateGetTemplateByIDFieldMetaNumber: &templateGetTemplateByIDFieldMetaNumber,
		Type:                                   typ,
	}
}

func CreateTemplateGetTemplateByIDFieldMetaUnionTemplateGetTemplateByIDFieldMetaRadio(templateGetTemplateByIDFieldMetaRadio TemplateGetTemplateByIDFieldMetaRadio) TemplateGetTemplateByIDFieldMetaUnion {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaRadio

	return TemplateGetTemplateByIDFieldMetaUnion{
		TemplateGetTemplateByIDFieldMetaRadio: &templateGetTemplateByIDFieldMetaRadio,
		Type:                                  typ,
	}
}

func CreateTemplateGetTemplateByIDFieldMetaUnionTemplateGetTemplateByIDFieldMetaCheckbox(templateGetTemplateByIDFieldMetaCheckbox TemplateGetTemplateByIDFieldMetaCheckbox) TemplateGetTemplateByIDFieldMetaUnion {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaCheckbox

	return TemplateGetTemplateByIDFieldMetaUnion{
		TemplateGetTemplateByIDFieldMetaCheckbox: &templateGetTemplateByIDFieldMetaCheckbox,
		Type:                                     typ,
	}
}

func CreateTemplateGetTemplateByIDFieldMetaUnionTemplateGetTemplateByIDFieldMetaDropdown(templateGetTemplateByIDFieldMetaDropdown TemplateGetTemplateByIDFieldMetaDropdown) TemplateGetTemplateByIDFieldMetaUnion {
	typ := TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaDropdown

	return TemplateGetTemplateByIDFieldMetaUnion{
		TemplateGetTemplateByIDFieldMetaDropdown: &templateGetTemplateByIDFieldMetaDropdown,
		Type:                                     typ,
	}
}

func (u *TemplateGetTemplateByIDFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var templateGetTemplateByIDFieldMetaRadio TemplateGetTemplateByIDFieldMetaRadio = TemplateGetTemplateByIDFieldMetaRadio{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMetaRadio, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMetaRadio = &templateGetTemplateByIDFieldMetaRadio
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaRadio
		return nil
	}

	var templateGetTemplateByIDFieldMetaInitials TemplateGetTemplateByIDFieldMetaInitials = TemplateGetTemplateByIDFieldMetaInitials{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMetaInitials, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMetaInitials = &templateGetTemplateByIDFieldMetaInitials
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaInitials
		return nil
	}

	var templateGetTemplateByIDFieldMetaName TemplateGetTemplateByIDFieldMetaName = TemplateGetTemplateByIDFieldMetaName{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMetaName, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMetaName = &templateGetTemplateByIDFieldMetaName
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaName
		return nil
	}

	var templateGetTemplateByIDFieldMetaEmail TemplateGetTemplateByIDFieldMetaEmail = TemplateGetTemplateByIDFieldMetaEmail{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMetaEmail, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMetaEmail = &templateGetTemplateByIDFieldMetaEmail
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaEmail
		return nil
	}

	var templateGetTemplateByIDFieldMetaDate TemplateGetTemplateByIDFieldMetaDate = TemplateGetTemplateByIDFieldMetaDate{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMetaDate, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMetaDate = &templateGetTemplateByIDFieldMetaDate
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaDate
		return nil
	}

	var templateGetTemplateByIDFieldMetaDropdown TemplateGetTemplateByIDFieldMetaDropdown = TemplateGetTemplateByIDFieldMetaDropdown{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMetaDropdown, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMetaDropdown = &templateGetTemplateByIDFieldMetaDropdown
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaDropdown
		return nil
	}

	var templateGetTemplateByIDFieldMetaCheckbox TemplateGetTemplateByIDFieldMetaCheckbox = TemplateGetTemplateByIDFieldMetaCheckbox{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMetaCheckbox, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMetaCheckbox = &templateGetTemplateByIDFieldMetaCheckbox
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaCheckbox
		return nil
	}

	var templateGetTemplateByIDFieldMetaText TemplateGetTemplateByIDFieldMetaText = TemplateGetTemplateByIDFieldMetaText{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMetaText, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMetaText = &templateGetTemplateByIDFieldMetaText
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaText
		return nil
	}

	var templateGetTemplateByIDFieldMetaNumber TemplateGetTemplateByIDFieldMetaNumber = TemplateGetTemplateByIDFieldMetaNumber{}
	if err := utils.UnmarshalJSON(data, &templateGetTemplateByIDFieldMetaNumber, "", true, true); err == nil {
		u.TemplateGetTemplateByIDFieldMetaNumber = &templateGetTemplateByIDFieldMetaNumber
		u.Type = TemplateGetTemplateByIDFieldMetaUnionTypeTemplateGetTemplateByIDFieldMetaNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TemplateGetTemplateByIDFieldMetaUnion", string(data))
}

func (u TemplateGetTemplateByIDFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.TemplateGetTemplateByIDFieldMetaInitials != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMetaInitials, "", true)
	}

	if u.TemplateGetTemplateByIDFieldMetaName != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMetaName, "", true)
	}

	if u.TemplateGetTemplateByIDFieldMetaEmail != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMetaEmail, "", true)
	}

	if u.TemplateGetTemplateByIDFieldMetaDate != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMetaDate, "", true)
	}

	if u.TemplateGetTemplateByIDFieldMetaText != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMetaText, "", true)
	}

	if u.TemplateGetTemplateByIDFieldMetaNumber != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMetaNumber, "", true)
	}

	if u.TemplateGetTemplateByIDFieldMetaRadio != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMetaRadio, "", true)
	}

	if u.TemplateGetTemplateByIDFieldMetaCheckbox != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMetaCheckbox, "", true)
	}

	if u.TemplateGetTemplateByIDFieldMetaDropdown != nil {
		return utils.MarshalJSON(u.TemplateGetTemplateByIDFieldMetaDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type TemplateGetTemplateByIDFieldMetaUnion: all fields are null")
}

type TemplateGetTemplateByIDField struct {
	Type        TemplateGetTemplateByIDFieldType `json:"type"`
	ID          float64                          `json:"id"`
	SecondaryID string                           `json:"secondaryId"`
	DocumentID  *float64                         `json:"documentId"`
	TemplateID  *float64                         `json:"templateId"`
	RecipientID float64                          `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                                `json:"page"`
	PositionX  any                                    `json:"positionX,omitempty"`
	PositionY  any                                    `json:"positionY,omitempty"`
	Width      any                                    `json:"width,omitempty"`
	Height     any                                    `json:"height,omitempty"`
	CustomText string                                 `json:"customText"`
	Inserted   bool                                   `json:"inserted"`
	FieldMeta  *TemplateGetTemplateByIDFieldMetaUnion `json:"fieldMeta"`
}

func (o *TemplateGetTemplateByIDField) GetType() TemplateGetTemplateByIDFieldType {
	if o == nil {
		return TemplateGetTemplateByIDFieldType("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDField) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateGetTemplateByIDField) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *TemplateGetTemplateByIDField) GetDocumentID() *float64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *TemplateGetTemplateByIDField) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *TemplateGetTemplateByIDField) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *TemplateGetTemplateByIDField) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *TemplateGetTemplateByIDField) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *TemplateGetTemplateByIDField) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *TemplateGetTemplateByIDField) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *TemplateGetTemplateByIDField) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *TemplateGetTemplateByIDField) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *TemplateGetTemplateByIDField) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *TemplateGetTemplateByIDField) GetFieldMeta() *TemplateGetTemplateByIDFieldMetaUnion {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

// TemplateGetTemplateByIDResponseBody - Successful response
type TemplateGetTemplateByIDResponseBody struct {
	Type                   TemplateGetTemplateByIDType          `json:"type"`
	Visibility             TemplateGetTemplateByIDVisibility    `json:"visibility"`
	ID                     float64                              `json:"id"`
	ExternalID             *string                              `json:"externalId"`
	Title                  string                               `json:"title"`
	UserID                 float64                              `json:"userId"`
	TeamID                 *float64                             `json:"teamId"`
	AuthOptions            *TemplateGetTemplateByIDAuthOptions  `json:"authOptions"`
	TemplateDocumentDataID string                               `json:"templateDocumentDataId"`
	CreatedAt              string                               `json:"createdAt"`
	UpdatedAt              string                               `json:"updatedAt"`
	PublicTitle            string                               `json:"publicTitle"`
	PublicDescription      string                               `json:"publicDescription"`
	TemplateDocumentData   TemplateDocumentData                 `json:"templateDocumentData"`
	TemplateMeta           *TemplateGetTemplateByIDTemplateMeta `json:"templateMeta"`
	DirectLink             *TemplateGetTemplateByIDDirectLink   `json:"directLink"`
	User                   TemplateGetTemplateByIDUser          `json:"user"`
	Recipients             []TemplateGetTemplateByIDRecipient   `json:"recipients"`
	Fields                 []TemplateGetTemplateByIDField       `json:"fields"`
}

func (o *TemplateGetTemplateByIDResponseBody) GetType() TemplateGetTemplateByIDType {
	if o == nil {
		return TemplateGetTemplateByIDType("")
	}
	return o.Type
}

func (o *TemplateGetTemplateByIDResponseBody) GetVisibility() TemplateGetTemplateByIDVisibility {
	if o == nil {
		return TemplateGetTemplateByIDVisibility("")
	}
	return o.Visibility
}

func (o *TemplateGetTemplateByIDResponseBody) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateGetTemplateByIDResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *TemplateGetTemplateByIDResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *TemplateGetTemplateByIDResponseBody) GetUserID() float64 {
	if o == nil {
		return 0.0
	}
	return o.UserID
}

func (o *TemplateGetTemplateByIDResponseBody) GetTeamID() *float64 {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *TemplateGetTemplateByIDResponseBody) GetAuthOptions() *TemplateGetTemplateByIDAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *TemplateGetTemplateByIDResponseBody) GetTemplateDocumentDataID() string {
	if o == nil {
		return ""
	}
	return o.TemplateDocumentDataID
}

func (o *TemplateGetTemplateByIDResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *TemplateGetTemplateByIDResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *TemplateGetTemplateByIDResponseBody) GetPublicTitle() string {
	if o == nil {
		return ""
	}
	return o.PublicTitle
}

func (o *TemplateGetTemplateByIDResponseBody) GetPublicDescription() string {
	if o == nil {
		return ""
	}
	return o.PublicDescription
}

func (o *TemplateGetTemplateByIDResponseBody) GetTemplateDocumentData() TemplateDocumentData {
	if o == nil {
		return TemplateDocumentData{}
	}
	return o.TemplateDocumentData
}

func (o *TemplateGetTemplateByIDResponseBody) GetTemplateMeta() *TemplateGetTemplateByIDTemplateMeta {
	if o == nil {
		return nil
	}
	return o.TemplateMeta
}

func (o *TemplateGetTemplateByIDResponseBody) GetDirectLink() *TemplateGetTemplateByIDDirectLink {
	if o == nil {
		return nil
	}
	return o.DirectLink
}

func (o *TemplateGetTemplateByIDResponseBody) GetUser() TemplateGetTemplateByIDUser {
	if o == nil {
		return TemplateGetTemplateByIDUser{}
	}
	return o.User
}

func (o *TemplateGetTemplateByIDResponseBody) GetRecipients() []TemplateGetTemplateByIDRecipient {
	if o == nil {
		return []TemplateGetTemplateByIDRecipient{}
	}
	return o.Recipients
}

func (o *TemplateGetTemplateByIDResponseBody) GetFields() []TemplateGetTemplateByIDField {
	if o == nil {
		return []TemplateGetTemplateByIDField{}
	}
	return o.Fields
}

type TemplateGetTemplateByIDResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *TemplateGetTemplateByIDResponseBody
}

func (o *TemplateGetTemplateByIDResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *TemplateGetTemplateByIDResponse) GetObject() *TemplateGetTemplateByIDResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
