// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type DocumentGetDocumentWithDetailsByIDRequest struct {
	DocumentID float64 `pathParam:"style=simple,explode=false,name=documentId"`
}

func (o *DocumentGetDocumentWithDetailsByIDRequest) GetDocumentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DocumentID
}

type DocumentGetDocumentWithDetailsByIDVisibility string

const (
	DocumentGetDocumentWithDetailsByIDVisibilityEveryone        DocumentGetDocumentWithDetailsByIDVisibility = "EVERYONE"
	DocumentGetDocumentWithDetailsByIDVisibilityManagerAndAbove DocumentGetDocumentWithDetailsByIDVisibility = "MANAGER_AND_ABOVE"
	DocumentGetDocumentWithDetailsByIDVisibilityAdmin           DocumentGetDocumentWithDetailsByIDVisibility = "ADMIN"
)

func (e DocumentGetDocumentWithDetailsByIDVisibility) ToPointer() *DocumentGetDocumentWithDetailsByIDVisibility {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = DocumentGetDocumentWithDetailsByIDVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDVisibility: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDStatus string

const (
	DocumentGetDocumentWithDetailsByIDStatusDraft     DocumentGetDocumentWithDetailsByIDStatus = "DRAFT"
	DocumentGetDocumentWithDetailsByIDStatusPending   DocumentGetDocumentWithDetailsByIDStatus = "PENDING"
	DocumentGetDocumentWithDetailsByIDStatusCompleted DocumentGetDocumentWithDetailsByIDStatus = "COMPLETED"
)

func (e DocumentGetDocumentWithDetailsByIDStatus) ToPointer() *DocumentGetDocumentWithDetailsByIDStatus {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "PENDING":
		fallthrough
	case "COMPLETED":
		*e = DocumentGetDocumentWithDetailsByIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDStatus: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDSource string

const (
	DocumentGetDocumentWithDetailsByIDSourceDocument           DocumentGetDocumentWithDetailsByIDSource = "DOCUMENT"
	DocumentGetDocumentWithDetailsByIDSourceTemplate           DocumentGetDocumentWithDetailsByIDSource = "TEMPLATE"
	DocumentGetDocumentWithDetailsByIDSourceTemplateDirectLink DocumentGetDocumentWithDetailsByIDSource = "TEMPLATE_DIRECT_LINK"
)

func (e DocumentGetDocumentWithDetailsByIDSource) ToPointer() *DocumentGetDocumentWithDetailsByIDSource {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		fallthrough
	case "TEMPLATE_DIRECT_LINK":
		*e = DocumentGetDocumentWithDetailsByIDSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDSource: %v", v)
	}
}

// DocumentGetDocumentWithDetailsByIDGlobalAccessAuth - The type of authentication required for the recipient to access the document.
type DocumentGetDocumentWithDetailsByIDGlobalAccessAuth string

const (
	DocumentGetDocumentWithDetailsByIDGlobalAccessAuthAccount DocumentGetDocumentWithDetailsByIDGlobalAccessAuth = "ACCOUNT"
)

func (e DocumentGetDocumentWithDetailsByIDGlobalAccessAuth) ToPointer() *DocumentGetDocumentWithDetailsByIDGlobalAccessAuth {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDGlobalAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = DocumentGetDocumentWithDetailsByIDGlobalAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDGlobalAccessAuth: %v", v)
	}
}

// DocumentGetDocumentWithDetailsByIDGlobalActionAuth - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type DocumentGetDocumentWithDetailsByIDGlobalActionAuth string

const (
	DocumentGetDocumentWithDetailsByIDGlobalActionAuthAccount       DocumentGetDocumentWithDetailsByIDGlobalActionAuth = "ACCOUNT"
	DocumentGetDocumentWithDetailsByIDGlobalActionAuthPasskey       DocumentGetDocumentWithDetailsByIDGlobalActionAuth = "PASSKEY"
	DocumentGetDocumentWithDetailsByIDGlobalActionAuthTwoFactorAuth DocumentGetDocumentWithDetailsByIDGlobalActionAuth = "TWO_FACTOR_AUTH"
)

func (e DocumentGetDocumentWithDetailsByIDGlobalActionAuth) ToPointer() *DocumentGetDocumentWithDetailsByIDGlobalActionAuth {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDGlobalActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = DocumentGetDocumentWithDetailsByIDGlobalActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDGlobalActionAuth: %v", v)
	}
}

type AuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	GlobalAccessAuth *DocumentGetDocumentWithDetailsByIDGlobalAccessAuth `json:"globalAccessAuth"`
	// The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
	GlobalActionAuth *DocumentGetDocumentWithDetailsByIDGlobalActionAuth `json:"globalActionAuth"`
}

func (o *AuthOptions) GetGlobalAccessAuth() *DocumentGetDocumentWithDetailsByIDGlobalAccessAuth {
	if o == nil {
		return nil
	}
	return o.GlobalAccessAuth
}

func (o *AuthOptions) GetGlobalActionAuth() *DocumentGetDocumentWithDetailsByIDGlobalActionAuth {
	if o == nil {
		return nil
	}
	return o.GlobalActionAuth
}

type DocumentGetDocumentWithDetailsByIDFormValuesType string

const (
	DocumentGetDocumentWithDetailsByIDFormValuesTypeStr     DocumentGetDocumentWithDetailsByIDFormValuesType = "str"
	DocumentGetDocumentWithDetailsByIDFormValuesTypeBoolean DocumentGetDocumentWithDetailsByIDFormValuesType = "boolean"
	DocumentGetDocumentWithDetailsByIDFormValuesTypeNumber  DocumentGetDocumentWithDetailsByIDFormValuesType = "number"
)

type DocumentGetDocumentWithDetailsByIDFormValues struct {
	Str     *string  `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`
	Number  *float64 `queryParam:"inline"`

	Type DocumentGetDocumentWithDetailsByIDFormValuesType
}

func CreateDocumentGetDocumentWithDetailsByIDFormValuesStr(str string) DocumentGetDocumentWithDetailsByIDFormValues {
	typ := DocumentGetDocumentWithDetailsByIDFormValuesTypeStr

	return DocumentGetDocumentWithDetailsByIDFormValues{
		Str:  &str,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFormValuesBoolean(boolean bool) DocumentGetDocumentWithDetailsByIDFormValues {
	typ := DocumentGetDocumentWithDetailsByIDFormValuesTypeBoolean

	return DocumentGetDocumentWithDetailsByIDFormValues{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFormValuesNumber(number float64) DocumentGetDocumentWithDetailsByIDFormValues {
	typ := DocumentGetDocumentWithDetailsByIDFormValuesTypeNumber

	return DocumentGetDocumentWithDetailsByIDFormValues{
		Number: &number,
		Type:   typ,
	}
}

func (u *DocumentGetDocumentWithDetailsByIDFormValues) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = DocumentGetDocumentWithDetailsByIDFormValuesTypeStr
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = DocumentGetDocumentWithDetailsByIDFormValuesTypeBoolean
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = DocumentGetDocumentWithDetailsByIDFormValuesTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DocumentGetDocumentWithDetailsByIDFormValues", string(data))
}

func (u DocumentGetDocumentWithDetailsByIDFormValues) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type DocumentGetDocumentWithDetailsByIDFormValues: all fields are null")
}

type DocumentGetDocumentWithDetailsByIDDocumentsType string

const (
	DocumentGetDocumentWithDetailsByIDDocumentsTypeS3Path  DocumentGetDocumentWithDetailsByIDDocumentsType = "S3_PATH"
	DocumentGetDocumentWithDetailsByIDDocumentsTypeBytes   DocumentGetDocumentWithDetailsByIDDocumentsType = "BYTES"
	DocumentGetDocumentWithDetailsByIDDocumentsTypeBytes64 DocumentGetDocumentWithDetailsByIDDocumentsType = "BYTES_64"
)

func (e DocumentGetDocumentWithDetailsByIDDocumentsType) ToPointer() *DocumentGetDocumentWithDetailsByIDDocumentsType {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDDocumentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3_PATH":
		fallthrough
	case "BYTES":
		fallthrough
	case "BYTES_64":
		*e = DocumentGetDocumentWithDetailsByIDDocumentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDDocumentsType: %v", v)
	}
}

type DocumentData struct {
	Type        DocumentGetDocumentWithDetailsByIDDocumentsType `json:"type"`
	ID          string                                          `json:"id"`
	Data        string                                          `json:"data"`
	InitialData string                                          `json:"initialData"`
}

func (o *DocumentData) GetType() DocumentGetDocumentWithDetailsByIDDocumentsType {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDDocumentsType("")
	}
	return o.Type
}

func (o *DocumentData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DocumentData) GetData() string {
	if o == nil {
		return ""
	}
	return o.Data
}

func (o *DocumentData) GetInitialData() string {
	if o == nil {
		return ""
	}
	return o.InitialData
}

type DocumentGetDocumentWithDetailsByIDSigningOrder string

const (
	DocumentGetDocumentWithDetailsByIDSigningOrderParallel   DocumentGetDocumentWithDetailsByIDSigningOrder = "PARALLEL"
	DocumentGetDocumentWithDetailsByIDSigningOrderSequential DocumentGetDocumentWithDetailsByIDSigningOrder = "SEQUENTIAL"
)

func (e DocumentGetDocumentWithDetailsByIDSigningOrder) ToPointer() *DocumentGetDocumentWithDetailsByIDSigningOrder {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDSigningOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARALLEL":
		fallthrough
	case "SEQUENTIAL":
		*e = DocumentGetDocumentWithDetailsByIDSigningOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDSigningOrder: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDDistributionMethod string

const (
	DocumentGetDocumentWithDetailsByIDDistributionMethodEmail DocumentGetDocumentWithDetailsByIDDistributionMethod = "EMAIL"
	DocumentGetDocumentWithDetailsByIDDistributionMethodNone  DocumentGetDocumentWithDetailsByIDDistributionMethod = "NONE"
)

func (e DocumentGetDocumentWithDetailsByIDDistributionMethod) ToPointer() *DocumentGetDocumentWithDetailsByIDDistributionMethod {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDDistributionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = DocumentGetDocumentWithDetailsByIDDistributionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDDistributionMethod: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDEmailSettings struct {
	// Whether to send an email to all recipients that the document is ready for them to sign.
	RecipientSigningRequest *bool `default:"true" json:"recipientSigningRequest"`
	// Whether to send an email to the recipient who was removed from a pending document.
	RecipientRemoved *bool `default:"true" json:"recipientRemoved"`
	// Whether to send an email to the document owner when a recipient has signed the document.
	RecipientSigned *bool `default:"true" json:"recipientSigned"`
	// Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
	DocumentPending *bool `default:"true" json:"documentPending"`
	// Whether to send an email to all recipients when the document is complete.
	DocumentCompleted *bool `default:"true" json:"documentCompleted"`
	// Whether to send an email to all recipients if a pending document has been deleted.
	DocumentDeleted *bool `default:"true" json:"documentDeleted"`
	// Whether to send an email to the document owner when the document is complete.
	OwnerDocumentCompleted *bool `default:"true" json:"ownerDocumentCompleted"`
}

func (d DocumentGetDocumentWithDetailsByIDEmailSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocumentGetDocumentWithDetailsByIDEmailSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DocumentGetDocumentWithDetailsByIDEmailSettings) GetRecipientSigningRequest() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigningRequest
}

func (o *DocumentGetDocumentWithDetailsByIDEmailSettings) GetRecipientRemoved() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientRemoved
}

func (o *DocumentGetDocumentWithDetailsByIDEmailSettings) GetRecipientSigned() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigned
}

func (o *DocumentGetDocumentWithDetailsByIDEmailSettings) GetDocumentPending() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentPending
}

func (o *DocumentGetDocumentWithDetailsByIDEmailSettings) GetDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentCompleted
}

func (o *DocumentGetDocumentWithDetailsByIDEmailSettings) GetDocumentDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentDeleted
}

func (o *DocumentGetDocumentWithDetailsByIDEmailSettings) GetOwnerDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.OwnerDocumentCompleted
}

type DocumentMeta struct {
	SigningOrder          DocumentGetDocumentWithDetailsByIDSigningOrder       `json:"signingOrder"`
	DistributionMethod    DocumentGetDocumentWithDetailsByIDDistributionMethod `json:"distributionMethod"`
	ID                    string                                               `json:"id"`
	Subject               *string                                              `json:"subject"`
	Message               *string                                              `json:"message"`
	Timezone              *string                                              `json:"timezone"`
	Password              *string                                              `json:"password"`
	DateFormat            *string                                              `json:"dateFormat"`
	DocumentID            int64                                                `json:"documentId"`
	RedirectURL           *string                                              `json:"redirectUrl"`
	TypedSignatureEnabled bool                                                 `json:"typedSignatureEnabled"`
	Language              string                                               `json:"language"`
	EmailSettings         *DocumentGetDocumentWithDetailsByIDEmailSettings     `json:"emailSettings"`
}

func (o *DocumentMeta) GetSigningOrder() DocumentGetDocumentWithDetailsByIDSigningOrder {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDSigningOrder("")
	}
	return o.SigningOrder
}

func (o *DocumentMeta) GetDistributionMethod() DocumentGetDocumentWithDetailsByIDDistributionMethod {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDDistributionMethod("")
	}
	return o.DistributionMethod
}

func (o *DocumentMeta) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DocumentMeta) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *DocumentMeta) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *DocumentMeta) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *DocumentMeta) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *DocumentMeta) GetDateFormat() *string {
	if o == nil {
		return nil
	}
	return o.DateFormat
}

func (o *DocumentMeta) GetDocumentID() int64 {
	if o == nil {
		return 0
	}
	return o.DocumentID
}

func (o *DocumentMeta) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *DocumentMeta) GetTypedSignatureEnabled() bool {
	if o == nil {
		return false
	}
	return o.TypedSignatureEnabled
}

func (o *DocumentMeta) GetLanguage() string {
	if o == nil {
		return ""
	}
	return o.Language
}

func (o *DocumentMeta) GetEmailSettings() *DocumentGetDocumentWithDetailsByIDEmailSettings {
	if o == nil {
		return nil
	}
	return o.EmailSettings
}

type DocumentGetDocumentWithDetailsByIDRole string

const (
	DocumentGetDocumentWithDetailsByIDRoleCc       DocumentGetDocumentWithDetailsByIDRole = "CC"
	DocumentGetDocumentWithDetailsByIDRoleSigner   DocumentGetDocumentWithDetailsByIDRole = "SIGNER"
	DocumentGetDocumentWithDetailsByIDRoleViewer   DocumentGetDocumentWithDetailsByIDRole = "VIEWER"
	DocumentGetDocumentWithDetailsByIDRoleApprover DocumentGetDocumentWithDetailsByIDRole = "APPROVER"
)

func (e DocumentGetDocumentWithDetailsByIDRole) ToPointer() *DocumentGetDocumentWithDetailsByIDRole {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		*e = DocumentGetDocumentWithDetailsByIDRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDRole: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDReadStatus string

const (
	DocumentGetDocumentWithDetailsByIDReadStatusNotOpened DocumentGetDocumentWithDetailsByIDReadStatus = "NOT_OPENED"
	DocumentGetDocumentWithDetailsByIDReadStatusOpened    DocumentGetDocumentWithDetailsByIDReadStatus = "OPENED"
)

func (e DocumentGetDocumentWithDetailsByIDReadStatus) ToPointer() *DocumentGetDocumentWithDetailsByIDReadStatus {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = DocumentGetDocumentWithDetailsByIDReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDReadStatus: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDSigningStatus string

const (
	DocumentGetDocumentWithDetailsByIDSigningStatusNotSigned DocumentGetDocumentWithDetailsByIDSigningStatus = "NOT_SIGNED"
	DocumentGetDocumentWithDetailsByIDSigningStatusSigned    DocumentGetDocumentWithDetailsByIDSigningStatus = "SIGNED"
	DocumentGetDocumentWithDetailsByIDSigningStatusRejected  DocumentGetDocumentWithDetailsByIDSigningStatus = "REJECTED"
)

func (e DocumentGetDocumentWithDetailsByIDSigningStatus) ToPointer() *DocumentGetDocumentWithDetailsByIDSigningStatus {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = DocumentGetDocumentWithDetailsByIDSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDSigningStatus: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDSendStatus string

const (
	DocumentGetDocumentWithDetailsByIDSendStatusNotSent DocumentGetDocumentWithDetailsByIDSendStatus = "NOT_SENT"
	DocumentGetDocumentWithDetailsByIDSendStatusSent    DocumentGetDocumentWithDetailsByIDSendStatus = "SENT"
)

func (e DocumentGetDocumentWithDetailsByIDSendStatus) ToPointer() *DocumentGetDocumentWithDetailsByIDSendStatus {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = DocumentGetDocumentWithDetailsByIDSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDSendStatus: %v", v)
	}
}

// DocumentGetDocumentWithDetailsByIDAccessAuth - The type of authentication required for the recipient to access the document.
type DocumentGetDocumentWithDetailsByIDAccessAuth string

const (
	DocumentGetDocumentWithDetailsByIDAccessAuthAccount DocumentGetDocumentWithDetailsByIDAccessAuth = "ACCOUNT"
)

func (e DocumentGetDocumentWithDetailsByIDAccessAuth) ToPointer() *DocumentGetDocumentWithDetailsByIDAccessAuth {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = DocumentGetDocumentWithDetailsByIDAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDAccessAuth: %v", v)
	}
}

// DocumentGetDocumentWithDetailsByIDActionAuth - The type of authentication required for the recipient to sign the document.
type DocumentGetDocumentWithDetailsByIDActionAuth string

const (
	DocumentGetDocumentWithDetailsByIDActionAuthAccount       DocumentGetDocumentWithDetailsByIDActionAuth = "ACCOUNT"
	DocumentGetDocumentWithDetailsByIDActionAuthPasskey       DocumentGetDocumentWithDetailsByIDActionAuth = "PASSKEY"
	DocumentGetDocumentWithDetailsByIDActionAuthTwoFactorAuth DocumentGetDocumentWithDetailsByIDActionAuth = "TWO_FACTOR_AUTH"
	DocumentGetDocumentWithDetailsByIDActionAuthExplicitNone  DocumentGetDocumentWithDetailsByIDActionAuth = "EXPLICIT_NONE"
)

func (e DocumentGetDocumentWithDetailsByIDActionAuth) ToPointer() *DocumentGetDocumentWithDetailsByIDActionAuth {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "EXPLICIT_NONE":
		*e = DocumentGetDocumentWithDetailsByIDActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDActionAuth: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	AccessAuth *DocumentGetDocumentWithDetailsByIDAccessAuth `json:"accessAuth"`
	// The type of authentication required for the recipient to sign the document.
	ActionAuth *DocumentGetDocumentWithDetailsByIDActionAuth `json:"actionAuth"`
}

func (o *DocumentGetDocumentWithDetailsByIDAuthOptions) GetAccessAuth() *DocumentGetDocumentWithDetailsByIDAccessAuth {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *DocumentGetDocumentWithDetailsByIDAuthOptions) GetActionAuth() *DocumentGetDocumentWithDetailsByIDActionAuth {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

type DocumentGetDocumentWithDetailsByIDRecipients struct {
	Role              DocumentGetDocumentWithDetailsByIDRole          `json:"role"`
	ReadStatus        DocumentGetDocumentWithDetailsByIDReadStatus    `json:"readStatus"`
	SigningStatus     DocumentGetDocumentWithDetailsByIDSigningStatus `json:"signingStatus"`
	SendStatus        DocumentGetDocumentWithDetailsByIDSendStatus    `json:"sendStatus"`
	ID                int64                                           `json:"id"`
	DocumentID        *int64                                          `json:"documentId"`
	TemplateID        *int64                                          `json:"templateId"`
	Email             string                                          `json:"email"`
	Name              string                                          `json:"name"`
	Token             string                                          `json:"token"`
	DocumentDeletedAt *string                                         `json:"documentDeletedAt"`
	Expired           *string                                         `json:"expired"`
	SignedAt          *string                                         `json:"signedAt"`
	AuthOptions       *DocumentGetDocumentWithDetailsByIDAuthOptions  `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
}

func (o *DocumentGetDocumentWithDetailsByIDRecipients) GetRole() DocumentGetDocumentWithDetailsByIDRole {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDRole("")
	}
	return o.Role
}

func (o *DocumentGetDocumentWithDetailsByIDRecipients) GetReadStatus() DocumentGetDocumentWithDetailsByIDReadStatus {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDReadStatus("")
	}
	return o.ReadStatus
}

func (o *DocumentGetDocumentWithDetailsByIDRecipients) GetSigningStatus() DocumentGetDocumentWithDetailsByIDSigningStatus {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDSigningStatus("")
	}
	return o.SigningStatus
}

func (o *DocumentGetDocumentWithDetailsByIDRecipients) GetSendStatus() DocumentGetDocumentWithDetailsByIDSendStatus {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDSendStatus("")
	}
	return o.SendStatus
}

func (o *DocumentGetDocumentWithDetailsByIDRecipients) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *DocumentGetDocumentWithDetailsByIDRecipients) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *DocumentGetDocumentWithDetailsByIDRecipients) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *DocumentGetDocumentWithDetailsByIDRecipients) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *DocumentGetDocumentWithDetailsByIDRecipients) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DocumentGetDocumentWithDetailsByIDRecipients) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *DocumentGetDocumentWithDetailsByIDRecipients) GetDocumentDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DocumentDeletedAt
}

func (o *DocumentGetDocumentWithDetailsByIDRecipients) GetExpired() *string {
	if o == nil {
		return nil
	}
	return o.Expired
}

func (o *DocumentGetDocumentWithDetailsByIDRecipients) GetSignedAt() *string {
	if o == nil {
		return nil
	}
	return o.SignedAt
}

func (o *DocumentGetDocumentWithDetailsByIDRecipients) GetAuthOptions() *DocumentGetDocumentWithDetailsByIDAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *DocumentGetDocumentWithDetailsByIDRecipients) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *DocumentGetDocumentWithDetailsByIDRecipients) GetRejectionReason() *string {
	if o == nil {
		return nil
	}
	return o.RejectionReason
}

type DocumentGetDocumentWithDetailsByIDType string

const (
	DocumentGetDocumentWithDetailsByIDTypeSignature     DocumentGetDocumentWithDetailsByIDType = "SIGNATURE"
	DocumentGetDocumentWithDetailsByIDTypeFreeSignature DocumentGetDocumentWithDetailsByIDType = "FREE_SIGNATURE"
	DocumentGetDocumentWithDetailsByIDTypeInitials      DocumentGetDocumentWithDetailsByIDType = "INITIALS"
	DocumentGetDocumentWithDetailsByIDTypeName          DocumentGetDocumentWithDetailsByIDType = "NAME"
	DocumentGetDocumentWithDetailsByIDTypeEmail         DocumentGetDocumentWithDetailsByIDType = "EMAIL"
	DocumentGetDocumentWithDetailsByIDTypeDate          DocumentGetDocumentWithDetailsByIDType = "DATE"
	DocumentGetDocumentWithDetailsByIDTypeText          DocumentGetDocumentWithDetailsByIDType = "TEXT"
	DocumentGetDocumentWithDetailsByIDTypeNumber        DocumentGetDocumentWithDetailsByIDType = "NUMBER"
	DocumentGetDocumentWithDetailsByIDTypeRadio         DocumentGetDocumentWithDetailsByIDType = "RADIO"
	DocumentGetDocumentWithDetailsByIDTypeCheckbox      DocumentGetDocumentWithDetailsByIDType = "CHECKBOX"
	DocumentGetDocumentWithDetailsByIDTypeDropdown      DocumentGetDocumentWithDetailsByIDType = "DROPDOWN"
)

func (e DocumentGetDocumentWithDetailsByIDType) ToPointer() *DocumentGetDocumentWithDetailsByIDType {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = DocumentGetDocumentWithDetailsByIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDType: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields9Type string

const (
	DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields9TypeDropdown DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields9Type = "dropdown"
)

func (e DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields9Type) ToPointer() *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields9Type {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields9Type: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFieldMetaValues struct {
	Value string `json:"value"`
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type DocumentGetDocumentWithDetailsByIDFieldMeta9 struct {
	Label        *string                                                                                               `json:"label,omitempty"`
	Placeholder  *string                                                                                               `json:"placeholder,omitempty"`
	Required     *bool                                                                                                 `json:"required,omitempty"`
	ReadOnly     *bool                                                                                                 `json:"readOnly,omitempty"`
	Type         DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields9Type `json:"type"`
	Values       []DocumentGetDocumentWithDetailsByIDFieldMetaValues                                                   `json:"values,omitempty"`
	DefaultValue *string                                                                                               `json:"defaultValue,omitempty"`
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta9) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta9) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta9) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta9) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta9) GetType() DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields9Type {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields9Type("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta9) GetValues() []DocumentGetDocumentWithDetailsByIDFieldMetaValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta9) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFieldsType string

const (
	DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFieldsTypeCheckbox DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFieldsType = "checkbox"
)

func (e DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFieldsType) ToPointer() *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFieldsType {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFieldsType: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponseValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponseValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponseValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponseValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type DocumentGetDocumentWithDetailsByIDFieldMeta8 struct {
	Label            *string                                                                                              `json:"label,omitempty"`
	Placeholder      *string                                                                                              `json:"placeholder,omitempty"`
	Required         *bool                                                                                                `json:"required,omitempty"`
	ReadOnly         *bool                                                                                                `json:"readOnly,omitempty"`
	Type             DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFieldsType `json:"type"`
	Values           []DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponseValues                                 `json:"values,omitempty"`
	ValidationRule   *string                                                                                              `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                                             `json:"validationLength,omitempty"`
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta8) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta8) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta8) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta8) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta8) GetType() DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFieldsType {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFieldsType("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta8) GetValues() []DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponseValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta8) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta8) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType string

const (
	DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyTypeRadio DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType = "radio"
)

func (e DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType) ToPointer() *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type DocumentGetDocumentWithDetailsByIDFieldMeta7 struct {
	Label       *string                                                                                        `json:"label,omitempty"`
	Placeholder *string                                                                                        `json:"placeholder,omitempty"`
	Required    *bool                                                                                          `json:"required,omitempty"`
	ReadOnly    *bool                                                                                          `json:"readOnly,omitempty"`
	Type        DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType `json:"type"`
	Values      []DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsValues                                   `json:"values,omitempty"`
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta7) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta7) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta7) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta7) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta7) GetType() DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta7) GetValues() []DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONType string

const (
	DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONTypeNumber DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONType = "number"
)

func (e DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONType) ToPointer() *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONType {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONType: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFieldMeta6 struct {
	Label        *string                                                                            `json:"label,omitempty"`
	Placeholder  *string                                                                            `json:"placeholder,omitempty"`
	Required     *bool                                                                              `json:"required,omitempty"`
	ReadOnly     *bool                                                                              `json:"readOnly,omitempty"`
	Type         DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONType `json:"type"`
	NumberFormat *string                                                                            `json:"numberFormat,omitempty"`
	Value        *string                                                                            `json:"value,omitempty"`
	MinValue     *float64                                                                           `json:"minValue,omitempty"`
	MaxValue     *float64                                                                           `json:"maxValue,omitempty"`
	FontSize     *float64                                                                           `json:"fontSize,omitempty"`
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta6) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta6) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta6) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta6) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta6) GetType() DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONType {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta6) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta6) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta6) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta6) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta6) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200Type string

const (
	DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200TypeText DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200Type = "text"
)

func (e DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200Type) ToPointer() *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200Type {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200Type: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFieldMeta5 struct {
	Label          *string                                                             `json:"label,omitempty"`
	Placeholder    *string                                                             `json:"placeholder,omitempty"`
	Required       *bool                                                               `json:"required,omitempty"`
	ReadOnly       *bool                                                               `json:"readOnly,omitempty"`
	Type           DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200Type `json:"type"`
	Text           *string                                                             `json:"text,omitempty"`
	CharacterLimit *float64                                                            `json:"characterLimit,omitempty"`
	FontSize       *float64                                                            `json:"fontSize,omitempty"`
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta5) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta5) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta5) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta5) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta5) GetType() DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200Type {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200Type("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta5) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta5) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta5) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponseType string

const (
	DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponseTypeDate DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponseType = "date"
)

func (e DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponseType) ToPointer() *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponseType {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponseType: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFieldMeta4 struct {
	Label       *string                                                          `json:"label,omitempty"`
	Placeholder *string                                                          `json:"placeholder,omitempty"`
	Required    *bool                                                            `json:"required,omitempty"`
	ReadOnly    *bool                                                            `json:"readOnly,omitempty"`
	Type        DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponseType `json:"type"`
	FontSize    *float64                                                         `json:"fontSize,omitempty"`
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta4) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta4) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta4) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta4) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta4) GetType() DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponseType {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponseType("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta4) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsType string

const (
	DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsTypeEmail DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsType = "email"
)

func (e DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsType) ToPointer() *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsType {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsType: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFieldMeta3 struct {
	Label       *string                                                  `json:"label,omitempty"`
	Placeholder *string                                                  `json:"placeholder,omitempty"`
	Required    *bool                                                    `json:"required,omitempty"`
	ReadOnly    *bool                                                    `json:"readOnly,omitempty"`
	Type        DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsType `json:"type"`
	FontSize    *float64                                                 `json:"fontSize,omitempty"`
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta3) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta3) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta3) GetType() DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsType {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsType("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta3) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type DocumentGetDocumentWithDetailsByIDFieldMetaType string

const (
	DocumentGetDocumentWithDetailsByIDFieldMetaTypeName DocumentGetDocumentWithDetailsByIDFieldMetaType = "name"
)

func (e DocumentGetDocumentWithDetailsByIDFieldMetaType) ToPointer() *DocumentGetDocumentWithDetailsByIDFieldMetaType {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDFieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = DocumentGetDocumentWithDetailsByIDFieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDFieldMetaType: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFieldMeta2 struct {
	Label       *string                                         `json:"label,omitempty"`
	Placeholder *string                                         `json:"placeholder,omitempty"`
	Required    *bool                                           `json:"required,omitempty"`
	ReadOnly    *bool                                           `json:"readOnly,omitempty"`
	Type        DocumentGetDocumentWithDetailsByIDFieldMetaType `json:"type"`
	FontSize    *float64                                        `json:"fontSize,omitempty"`
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta2) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta2) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta2) GetType() DocumentGetDocumentWithDetailsByIDFieldMetaType {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDFieldMetaType("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta2) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields1Type string

const (
	DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields1TypeInitials DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields1Type = "initials"
)

func (e DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields1Type) ToPointer() *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields1Type {
	return &e
}
func (e *DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields1Type: %v", v)
	}
}

type DocumentGetDocumentWithDetailsByIDFieldMeta1 struct {
	Label       *string                                                                                               `json:"label,omitempty"`
	Placeholder *string                                                                                               `json:"placeholder,omitempty"`
	Required    *bool                                                                                                 `json:"required,omitempty"`
	ReadOnly    *bool                                                                                                 `json:"readOnly,omitempty"`
	Type        DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields1Type `json:"type"`
	FontSize    *float64                                                                                              `json:"fontSize,omitempty"`
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta1) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta1) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta1) GetType() DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields1Type {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDFieldMetaDocumentsResponse200ApplicationJSONResponseBodyFields1Type("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFieldMeta1) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type DocumentGetDocumentWithDetailsByIDFieldMetaUnionType string

const (
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta1 DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document-getDocumentWithDetailsById_fieldMeta_1"
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta2 DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document-getDocumentWithDetailsById_fieldMeta_2"
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta3 DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document-getDocumentWithDetailsById_fieldMeta_3"
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta4 DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document-getDocumentWithDetailsById_fieldMeta_4"
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta5 DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document-getDocumentWithDetailsById_fieldMeta_5"
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta6 DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document-getDocumentWithDetailsById_fieldMeta_6"
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta7 DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document-getDocumentWithDetailsById_fieldMeta_7"
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta8 DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document-getDocumentWithDetailsById_fieldMeta_8"
	DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta9 DocumentGetDocumentWithDetailsByIDFieldMetaUnionType = "document-getDocumentWithDetailsById_fieldMeta_9"
)

type DocumentGetDocumentWithDetailsByIDFieldMeta struct {
	DocumentGetDocumentWithDetailsByIDFieldMeta1 *DocumentGetDocumentWithDetailsByIDFieldMeta1 `queryParam:"inline"`
	DocumentGetDocumentWithDetailsByIDFieldMeta2 *DocumentGetDocumentWithDetailsByIDFieldMeta2 `queryParam:"inline"`
	DocumentGetDocumentWithDetailsByIDFieldMeta3 *DocumentGetDocumentWithDetailsByIDFieldMeta3 `queryParam:"inline"`
	DocumentGetDocumentWithDetailsByIDFieldMeta4 *DocumentGetDocumentWithDetailsByIDFieldMeta4 `queryParam:"inline"`
	DocumentGetDocumentWithDetailsByIDFieldMeta5 *DocumentGetDocumentWithDetailsByIDFieldMeta5 `queryParam:"inline"`
	DocumentGetDocumentWithDetailsByIDFieldMeta6 *DocumentGetDocumentWithDetailsByIDFieldMeta6 `queryParam:"inline"`
	DocumentGetDocumentWithDetailsByIDFieldMeta7 *DocumentGetDocumentWithDetailsByIDFieldMeta7 `queryParam:"inline"`
	DocumentGetDocumentWithDetailsByIDFieldMeta8 *DocumentGetDocumentWithDetailsByIDFieldMeta8 `queryParam:"inline"`
	DocumentGetDocumentWithDetailsByIDFieldMeta9 *DocumentGetDocumentWithDetailsByIDFieldMeta9 `queryParam:"inline"`

	Type DocumentGetDocumentWithDetailsByIDFieldMetaUnionType
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaDocumentGetDocumentWithDetailsByIDFieldMeta1(documentGetDocumentWithDetailsByIDFieldMeta1 DocumentGetDocumentWithDetailsByIDFieldMeta1) DocumentGetDocumentWithDetailsByIDFieldMeta {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta1

	return DocumentGetDocumentWithDetailsByIDFieldMeta{
		DocumentGetDocumentWithDetailsByIDFieldMeta1: &documentGetDocumentWithDetailsByIDFieldMeta1,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaDocumentGetDocumentWithDetailsByIDFieldMeta2(documentGetDocumentWithDetailsByIDFieldMeta2 DocumentGetDocumentWithDetailsByIDFieldMeta2) DocumentGetDocumentWithDetailsByIDFieldMeta {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta2

	return DocumentGetDocumentWithDetailsByIDFieldMeta{
		DocumentGetDocumentWithDetailsByIDFieldMeta2: &documentGetDocumentWithDetailsByIDFieldMeta2,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaDocumentGetDocumentWithDetailsByIDFieldMeta3(documentGetDocumentWithDetailsByIDFieldMeta3 DocumentGetDocumentWithDetailsByIDFieldMeta3) DocumentGetDocumentWithDetailsByIDFieldMeta {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta3

	return DocumentGetDocumentWithDetailsByIDFieldMeta{
		DocumentGetDocumentWithDetailsByIDFieldMeta3: &documentGetDocumentWithDetailsByIDFieldMeta3,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaDocumentGetDocumentWithDetailsByIDFieldMeta4(documentGetDocumentWithDetailsByIDFieldMeta4 DocumentGetDocumentWithDetailsByIDFieldMeta4) DocumentGetDocumentWithDetailsByIDFieldMeta {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta4

	return DocumentGetDocumentWithDetailsByIDFieldMeta{
		DocumentGetDocumentWithDetailsByIDFieldMeta4: &documentGetDocumentWithDetailsByIDFieldMeta4,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaDocumentGetDocumentWithDetailsByIDFieldMeta5(documentGetDocumentWithDetailsByIDFieldMeta5 DocumentGetDocumentWithDetailsByIDFieldMeta5) DocumentGetDocumentWithDetailsByIDFieldMeta {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta5

	return DocumentGetDocumentWithDetailsByIDFieldMeta{
		DocumentGetDocumentWithDetailsByIDFieldMeta5: &documentGetDocumentWithDetailsByIDFieldMeta5,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaDocumentGetDocumentWithDetailsByIDFieldMeta6(documentGetDocumentWithDetailsByIDFieldMeta6 DocumentGetDocumentWithDetailsByIDFieldMeta6) DocumentGetDocumentWithDetailsByIDFieldMeta {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta6

	return DocumentGetDocumentWithDetailsByIDFieldMeta{
		DocumentGetDocumentWithDetailsByIDFieldMeta6: &documentGetDocumentWithDetailsByIDFieldMeta6,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaDocumentGetDocumentWithDetailsByIDFieldMeta7(documentGetDocumentWithDetailsByIDFieldMeta7 DocumentGetDocumentWithDetailsByIDFieldMeta7) DocumentGetDocumentWithDetailsByIDFieldMeta {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta7

	return DocumentGetDocumentWithDetailsByIDFieldMeta{
		DocumentGetDocumentWithDetailsByIDFieldMeta7: &documentGetDocumentWithDetailsByIDFieldMeta7,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaDocumentGetDocumentWithDetailsByIDFieldMeta8(documentGetDocumentWithDetailsByIDFieldMeta8 DocumentGetDocumentWithDetailsByIDFieldMeta8) DocumentGetDocumentWithDetailsByIDFieldMeta {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta8

	return DocumentGetDocumentWithDetailsByIDFieldMeta{
		DocumentGetDocumentWithDetailsByIDFieldMeta8: &documentGetDocumentWithDetailsByIDFieldMeta8,
		Type: typ,
	}
}

func CreateDocumentGetDocumentWithDetailsByIDFieldMetaDocumentGetDocumentWithDetailsByIDFieldMeta9(documentGetDocumentWithDetailsByIDFieldMeta9 DocumentGetDocumentWithDetailsByIDFieldMeta9) DocumentGetDocumentWithDetailsByIDFieldMeta {
	typ := DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta9

	return DocumentGetDocumentWithDetailsByIDFieldMeta{
		DocumentGetDocumentWithDetailsByIDFieldMeta9: &documentGetDocumentWithDetailsByIDFieldMeta9,
		Type: typ,
	}
}

func (u *DocumentGetDocumentWithDetailsByIDFieldMeta) UnmarshalJSON(data []byte) error {

	var documentGetDocumentWithDetailsByIDFieldMeta1 DocumentGetDocumentWithDetailsByIDFieldMeta1 = DocumentGetDocumentWithDetailsByIDFieldMeta1{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMeta1, "", true, true); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMeta1 = &documentGetDocumentWithDetailsByIDFieldMeta1
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta1
		return nil
	}

	var documentGetDocumentWithDetailsByIDFieldMeta2 DocumentGetDocumentWithDetailsByIDFieldMeta2 = DocumentGetDocumentWithDetailsByIDFieldMeta2{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMeta2, "", true, true); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMeta2 = &documentGetDocumentWithDetailsByIDFieldMeta2
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta2
		return nil
	}

	var documentGetDocumentWithDetailsByIDFieldMeta3 DocumentGetDocumentWithDetailsByIDFieldMeta3 = DocumentGetDocumentWithDetailsByIDFieldMeta3{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMeta3, "", true, true); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMeta3 = &documentGetDocumentWithDetailsByIDFieldMeta3
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta3
		return nil
	}

	var documentGetDocumentWithDetailsByIDFieldMeta4 DocumentGetDocumentWithDetailsByIDFieldMeta4 = DocumentGetDocumentWithDetailsByIDFieldMeta4{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMeta4, "", true, true); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMeta4 = &documentGetDocumentWithDetailsByIDFieldMeta4
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta4
		return nil
	}

	var documentGetDocumentWithDetailsByIDFieldMeta7 DocumentGetDocumentWithDetailsByIDFieldMeta7 = DocumentGetDocumentWithDetailsByIDFieldMeta7{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMeta7, "", true, true); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMeta7 = &documentGetDocumentWithDetailsByIDFieldMeta7
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta7
		return nil
	}

	var documentGetDocumentWithDetailsByIDFieldMeta9 DocumentGetDocumentWithDetailsByIDFieldMeta9 = DocumentGetDocumentWithDetailsByIDFieldMeta9{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMeta9, "", true, true); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMeta9 = &documentGetDocumentWithDetailsByIDFieldMeta9
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta9
		return nil
	}

	var documentGetDocumentWithDetailsByIDFieldMeta5 DocumentGetDocumentWithDetailsByIDFieldMeta5 = DocumentGetDocumentWithDetailsByIDFieldMeta5{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMeta5, "", true, true); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMeta5 = &documentGetDocumentWithDetailsByIDFieldMeta5
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta5
		return nil
	}

	var documentGetDocumentWithDetailsByIDFieldMeta8 DocumentGetDocumentWithDetailsByIDFieldMeta8 = DocumentGetDocumentWithDetailsByIDFieldMeta8{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMeta8, "", true, true); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMeta8 = &documentGetDocumentWithDetailsByIDFieldMeta8
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta8
		return nil
	}

	var documentGetDocumentWithDetailsByIDFieldMeta6 DocumentGetDocumentWithDetailsByIDFieldMeta6 = DocumentGetDocumentWithDetailsByIDFieldMeta6{}
	if err := utils.UnmarshalJSON(data, &documentGetDocumentWithDetailsByIDFieldMeta6, "", true, true); err == nil {
		u.DocumentGetDocumentWithDetailsByIDFieldMeta6 = &documentGetDocumentWithDetailsByIDFieldMeta6
		u.Type = DocumentGetDocumentWithDetailsByIDFieldMetaUnionTypeDocumentGetDocumentWithDetailsByIDFieldMeta6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DocumentGetDocumentWithDetailsByIDFieldMeta", string(data))
}

func (u DocumentGetDocumentWithDetailsByIDFieldMeta) MarshalJSON() ([]byte, error) {
	if u.DocumentGetDocumentWithDetailsByIDFieldMeta1 != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMeta1, "", true)
	}

	if u.DocumentGetDocumentWithDetailsByIDFieldMeta2 != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMeta2, "", true)
	}

	if u.DocumentGetDocumentWithDetailsByIDFieldMeta3 != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMeta3, "", true)
	}

	if u.DocumentGetDocumentWithDetailsByIDFieldMeta4 != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMeta4, "", true)
	}

	if u.DocumentGetDocumentWithDetailsByIDFieldMeta5 != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMeta5, "", true)
	}

	if u.DocumentGetDocumentWithDetailsByIDFieldMeta6 != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMeta6, "", true)
	}

	if u.DocumentGetDocumentWithDetailsByIDFieldMeta7 != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMeta7, "", true)
	}

	if u.DocumentGetDocumentWithDetailsByIDFieldMeta8 != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMeta8, "", true)
	}

	if u.DocumentGetDocumentWithDetailsByIDFieldMeta9 != nil {
		return utils.MarshalJSON(u.DocumentGetDocumentWithDetailsByIDFieldMeta9, "", true)
	}

	return nil, errors.New("could not marshal union type DocumentGetDocumentWithDetailsByIDFieldMeta: all fields are null")
}

type DocumentGetDocumentWithDetailsByIDFields struct {
	Type        DocumentGetDocumentWithDetailsByIDType `json:"type"`
	ID          int64                                  `json:"id"`
	SecondaryID string                                 `json:"secondaryId"`
	DocumentID  *int64                                 `json:"documentId"`
	TemplateID  *int64                                 `json:"templateId"`
	RecipientID int64                                  `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                                      `json:"page"`
	PositionX  any                                          `json:"positionX,omitempty"`
	PositionY  any                                          `json:"positionY,omitempty"`
	Width      any                                          `json:"width,omitempty"`
	Height     any                                          `json:"height,omitempty"`
	CustomText string                                       `json:"customText"`
	Inserted   bool                                         `json:"inserted"`
	FieldMeta  *DocumentGetDocumentWithDetailsByIDFieldMeta `json:"fieldMeta"`
}

func (o *DocumentGetDocumentWithDetailsByIDFields) GetType() DocumentGetDocumentWithDetailsByIDType {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDType("")
	}
	return o.Type
}

func (o *DocumentGetDocumentWithDetailsByIDFields) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *DocumentGetDocumentWithDetailsByIDFields) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *DocumentGetDocumentWithDetailsByIDFields) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *DocumentGetDocumentWithDetailsByIDFields) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *DocumentGetDocumentWithDetailsByIDFields) GetRecipientID() int64 {
	if o == nil {
		return 0
	}
	return o.RecipientID
}

func (o *DocumentGetDocumentWithDetailsByIDFields) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *DocumentGetDocumentWithDetailsByIDFields) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *DocumentGetDocumentWithDetailsByIDFields) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *DocumentGetDocumentWithDetailsByIDFields) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *DocumentGetDocumentWithDetailsByIDFields) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *DocumentGetDocumentWithDetailsByIDFields) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *DocumentGetDocumentWithDetailsByIDFields) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *DocumentGetDocumentWithDetailsByIDFields) GetFieldMeta() *DocumentGetDocumentWithDetailsByIDFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

// DocumentGetDocumentWithDetailsByIDResponseBody - Successful response
type DocumentGetDocumentWithDetailsByIDResponseBody struct {
	Visibility DocumentGetDocumentWithDetailsByIDVisibility `json:"visibility"`
	Status     DocumentGetDocumentWithDetailsByIDStatus     `json:"status"`
	Source     DocumentGetDocumentWithDetailsByIDSource     `json:"source"`
	ID         int64                                        `json:"id"`
	// A custom external ID you can use to identify the document.
	ExternalID *string `json:"externalId"`
	// The ID of the user that created this document.
	UserID         float64                                                 `json:"userId"`
	AuthOptions    *AuthOptions                                            `json:"authOptions"`
	FormValues     map[string]DocumentGetDocumentWithDetailsByIDFormValues `json:"formValues"`
	Title          string                                                  `json:"title"`
	DocumentDataID string                                                  `json:"documentDataId"`
	CreatedAt      string                                                  `json:"createdAt"`
	UpdatedAt      string                                                  `json:"updatedAt"`
	CompletedAt    *string                                                 `json:"completedAt"`
	DeletedAt      *string                                                 `json:"deletedAt"`
	TeamID         *int64                                                  `json:"teamId"`
	TemplateID     *int64                                                  `json:"templateId"`
	DocumentData   DocumentData                                            `json:"documentData"`
	DocumentMeta   *DocumentMeta                                           `json:"documentMeta"`
	Recipients     []DocumentGetDocumentWithDetailsByIDRecipients          `json:"recipients"`
	Fields         []DocumentGetDocumentWithDetailsByIDFields              `json:"fields"`
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetVisibility() DocumentGetDocumentWithDetailsByIDVisibility {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDVisibility("")
	}
	return o.Visibility
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetStatus() DocumentGetDocumentWithDetailsByIDStatus {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDStatus("")
	}
	return o.Status
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetSource() DocumentGetDocumentWithDetailsByIDSource {
	if o == nil {
		return DocumentGetDocumentWithDetailsByIDSource("")
	}
	return o.Source
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetUserID() float64 {
	if o == nil {
		return 0.0
	}
	return o.UserID
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetAuthOptions() *AuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetFormValues() map[string]DocumentGetDocumentWithDetailsByIDFormValues {
	if o == nil {
		return nil
	}
	return o.FormValues
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetDocumentDataID() string {
	if o == nil {
		return ""
	}
	return o.DocumentDataID
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetCompletedAt() *string {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetTeamID() *int64 {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetDocumentData() DocumentData {
	if o == nil {
		return DocumentData{}
	}
	return o.DocumentData
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetDocumentMeta() *DocumentMeta {
	if o == nil {
		return nil
	}
	return o.DocumentMeta
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetRecipients() []DocumentGetDocumentWithDetailsByIDRecipients {
	if o == nil {
		return []DocumentGetDocumentWithDetailsByIDRecipients{}
	}
	return o.Recipients
}

func (o *DocumentGetDocumentWithDetailsByIDResponseBody) GetFields() []DocumentGetDocumentWithDetailsByIDFields {
	if o == nil {
		return []DocumentGetDocumentWithDetailsByIDFields{}
	}
	return o.Fields
}

type DocumentGetDocumentWithDetailsByIDResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *DocumentGetDocumentWithDetailsByIDResponseBody
}

func (o *DocumentGetDocumentWithDetailsByIDResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *DocumentGetDocumentWithDetailsByIDResponse) GetObject() *DocumentGetDocumentWithDetailsByIDResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
