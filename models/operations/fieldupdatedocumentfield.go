// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11TypeDropdown FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type = "DROPDOWN"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaTypeDropdown FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType = "dropdown"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestValues struct {
	Value string `json:"value"`
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta struct {
	Label        *string                                                                       `json:"label,omitempty"`
	Placeholder  *string                                                                       `json:"placeholder,omitempty"`
	Required     *bool                                                                         `json:"required,omitempty"`
	ReadOnly     *bool                                                                         `json:"readOnly,omitempty"`
	Type         FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType `json:"type"`
	Values       []FieldUpdateDocumentFieldFieldDocumentsFieldsRequestValues                   `json:"values,omitempty"`
	DefaultValue *string                                                                       `json:"defaultValue,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta) GetValues() []FieldUpdateDocumentFieldFieldDocumentsFieldsRequestValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldUpdateDocumentFieldField11 struct {
	Type      FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type       `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldField11) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldField11) GetFieldMeta() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldField11) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldField11) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldField11) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldField11) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldField11) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldField11) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10TypeCheckbox FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type = "CHECKBOX"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaTypeCheckbox FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType = "checkbox"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta struct {
	Label            *string                                                                       `json:"label,omitempty"`
	Placeholder      *string                                                                       `json:"placeholder,omitempty"`
	Required         *bool                                                                         `json:"required,omitempty"`
	ReadOnly         *bool                                                                         `json:"readOnly,omitempty"`
	Type             FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType `json:"type"`
	Values           []FieldUpdateDocumentFieldFieldDocumentsFieldsValues                          `json:"values,omitempty"`
	ValidationRule   *string                                                                       `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                      `json:"validationLength,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta) GetValues() []FieldUpdateDocumentFieldFieldDocumentsFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldUpdateDocumentFieldField10 struct {
	Type      FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type       `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldField10) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldField10) GetFieldMeta() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldField10) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldField10) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldField10) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldField10) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldField10) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldField10) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9TypeRadio FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type = "RADIO"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaTypeRadio FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType = "radio"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldUpdateDocumentFieldFieldValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldFieldValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateDocumentFieldFieldValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta struct {
	Label       *string                                                                      `json:"label,omitempty"`
	Placeholder *string                                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType `json:"type"`
	Values      []FieldUpdateDocumentFieldFieldValues                                        `json:"values,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta) GetValues() []FieldUpdateDocumentFieldFieldValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldUpdateDocumentFieldField9 struct {
	Type      FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type       `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldField9) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldField9) GetFieldMeta() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldField9) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldField9) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldField9) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldField9) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldField9) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldField9) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8TypeNumber FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type = "NUMBER"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaTypeNumber FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType = "number"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta struct {
	Label        *string                                                                      `json:"label,omitempty"`
	Placeholder  *string                                                                      `json:"placeholder,omitempty"`
	Required     *bool                                                                        `json:"required,omitempty"`
	ReadOnly     *bool                                                                        `json:"readOnly,omitempty"`
	Type         FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType `json:"type"`
	NumberFormat *string                                                                      `json:"numberFormat,omitempty"`
	Value        *string                                                                      `json:"value,omitempty"`
	MinValue     *float64                                                                     `json:"minValue,omitempty"`
	MaxValue     *float64                                                                     `json:"maxValue,omitempty"`
	FontSize     *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldField8 struct {
	Type      FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type       `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldField8) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldField8) GetFieldMeta() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldField8) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldField8) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldField8) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldField8) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldField8) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldField8) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7TypeText FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type = "TEXT"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaTypeText FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType = "text"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMeta struct {
	Label          *string                                                                      `json:"label,omitempty"`
	Placeholder    *string                                                                      `json:"placeholder,omitempty"`
	Required       *bool                                                                        `json:"required,omitempty"`
	ReadOnly       *bool                                                                        `json:"readOnly,omitempty"`
	Type           FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType `json:"type"`
	Text           *string                                                                      `json:"text,omitempty"`
	CharacterLimit *float64                                                                     `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMeta) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMeta) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMeta) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldField7 struct {
	Type      FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type       `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldField7) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldField7) GetFieldMeta() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldField7) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldField7) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldField7) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldField7) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldField7) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldField7) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6TypeDate FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type = "DATE"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaTypeDate FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType = "date"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta struct {
	Label       *string                                                                      `json:"label,omitempty"`
	Placeholder *string                                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType `json:"type"`
	FontSize    *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldField6 struct {
	Type      FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldField6) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldField6) GetFieldMeta() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldField6) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldField6) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldField6) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldField6) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldField6) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldField6) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5TypeEmail FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type = "EMAIL"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaTypeEmail FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType = "email"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestFieldMeta struct {
	Label       *string                                                                      `json:"label,omitempty"`
	Placeholder *string                                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType `json:"type"`
	FontSize    *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestFieldMeta) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldField5 struct {
	Type      FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestFieldMeta       `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldField5) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldField5) GetFieldMeta() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldField5) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldField5) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldField5) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldField5) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldField5) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldField5) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4TypeName FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type = "NAME"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4FieldMetaType string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4FieldMetaTypeName FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4FieldMetaType = "name"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4FieldMetaType) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4FieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4FieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsFieldMeta struct {
	Label       *string                                                                      `json:"label,omitempty"`
	Placeholder *string                                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4FieldMetaType `json:"type"`
	FontSize    *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsFieldMeta) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4FieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldDocumentsFieldsFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldField4 struct {
	Type      FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldDocumentsFieldsFieldMeta              `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldField4) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldField4) GetFieldMeta() *FieldUpdateDocumentFieldFieldDocumentsFieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldField4) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldField4) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldField4) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldField4) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldField4) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldField4) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestType string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestTypeInitials FieldUpdateDocumentFieldFieldDocumentsFieldsRequestType = "INITIALS"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestType) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestType {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestType: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyTypeInitials FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType = "initials"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldFieldMeta struct {
	Label       *string                                                            `json:"label,omitempty"`
	Placeholder *string                                                            `json:"placeholder,omitempty"`
	Required    *bool                                                              `json:"required,omitempty"`
	ReadOnly    *bool                                                              `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType `json:"type"`
	FontSize    *float64                                                           `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldFieldMeta) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldField3 struct {
	Type      FieldUpdateDocumentFieldFieldDocumentsFieldsRequestType `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldFieldFieldMeta                 `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldField3) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsRequestType {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsRequestType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldField3) GetFieldMeta() *FieldUpdateDocumentFieldFieldFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldField3) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldField3) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldField3) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldField3) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldField3) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldField3) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldFieldDocumentsFieldsType string

const (
	FieldUpdateDocumentFieldFieldDocumentsFieldsTypeFreeSignature FieldUpdateDocumentFieldFieldDocumentsFieldsType = "FREE_SIGNATURE"
)

func (e FieldUpdateDocumentFieldFieldDocumentsFieldsType) ToPointer() *FieldUpdateDocumentFieldFieldDocumentsFieldsType {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldDocumentsFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldUpdateDocumentFieldFieldDocumentsFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldDocumentsFieldsType: %v", v)
	}
}

type FieldUpdateDocumentFieldField2 struct {
	Type FieldUpdateDocumentFieldFieldDocumentsFieldsType `json:"type"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldField2) GetType() FieldUpdateDocumentFieldFieldDocumentsFieldsType {
	if o == nil {
		return FieldUpdateDocumentFieldFieldDocumentsFieldsType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldField2) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldField2) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldField2) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldField2) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldField2) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldField2) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldFieldType string

const (
	FieldUpdateDocumentFieldFieldTypeSignature FieldUpdateDocumentFieldFieldType = "SIGNATURE"
)

func (e FieldUpdateDocumentFieldFieldType) ToPointer() *FieldUpdateDocumentFieldFieldType {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = FieldUpdateDocumentFieldFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldType: %v", v)
	}
}

type FieldUpdateDocumentFieldField1 struct {
	Type FieldUpdateDocumentFieldFieldType `json:"type"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldField1) GetType() FieldUpdateDocumentFieldFieldType {
	if o == nil {
		return FieldUpdateDocumentFieldFieldType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldField1) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldField1) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldField1) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldField1) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldField1) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldField1) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldFieldUnionType string

const (
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField1  FieldUpdateDocumentFieldFieldUnionType = "field-updateDocumentField_field_1"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField2  FieldUpdateDocumentFieldFieldUnionType = "field-updateDocumentField_field_2"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField3  FieldUpdateDocumentFieldFieldUnionType = "field-updateDocumentField_field_3"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField4  FieldUpdateDocumentFieldFieldUnionType = "field-updateDocumentField_field_4"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField5  FieldUpdateDocumentFieldFieldUnionType = "field-updateDocumentField_field_5"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField6  FieldUpdateDocumentFieldFieldUnionType = "field-updateDocumentField_field_6"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField7  FieldUpdateDocumentFieldFieldUnionType = "field-updateDocumentField_field_7"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField8  FieldUpdateDocumentFieldFieldUnionType = "field-updateDocumentField_field_8"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField9  FieldUpdateDocumentFieldFieldUnionType = "field-updateDocumentField_field_9"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField10 FieldUpdateDocumentFieldFieldUnionType = "field-updateDocumentField_field_10"
	FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField11 FieldUpdateDocumentFieldFieldUnionType = "field-updateDocumentField_field_11"
)

type FieldUpdateDocumentFieldField struct {
	FieldUpdateDocumentFieldField1  *FieldUpdateDocumentFieldField1  `queryParam:"inline"`
	FieldUpdateDocumentFieldField2  *FieldUpdateDocumentFieldField2  `queryParam:"inline"`
	FieldUpdateDocumentFieldField3  *FieldUpdateDocumentFieldField3  `queryParam:"inline"`
	FieldUpdateDocumentFieldField4  *FieldUpdateDocumentFieldField4  `queryParam:"inline"`
	FieldUpdateDocumentFieldField5  *FieldUpdateDocumentFieldField5  `queryParam:"inline"`
	FieldUpdateDocumentFieldField6  *FieldUpdateDocumentFieldField6  `queryParam:"inline"`
	FieldUpdateDocumentFieldField7  *FieldUpdateDocumentFieldField7  `queryParam:"inline"`
	FieldUpdateDocumentFieldField8  *FieldUpdateDocumentFieldField8  `queryParam:"inline"`
	FieldUpdateDocumentFieldField9  *FieldUpdateDocumentFieldField9  `queryParam:"inline"`
	FieldUpdateDocumentFieldField10 *FieldUpdateDocumentFieldField10 `queryParam:"inline"`
	FieldUpdateDocumentFieldField11 *FieldUpdateDocumentFieldField11 `queryParam:"inline"`

	Type FieldUpdateDocumentFieldFieldUnionType
}

func CreateFieldUpdateDocumentFieldFieldFieldUpdateDocumentFieldField1(fieldUpdateDocumentFieldField1 FieldUpdateDocumentFieldField1) FieldUpdateDocumentFieldField {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField1

	return FieldUpdateDocumentFieldField{
		FieldUpdateDocumentFieldField1: &fieldUpdateDocumentFieldField1,
		Type:                           typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldFieldUpdateDocumentFieldField2(fieldUpdateDocumentFieldField2 FieldUpdateDocumentFieldField2) FieldUpdateDocumentFieldField {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField2

	return FieldUpdateDocumentFieldField{
		FieldUpdateDocumentFieldField2: &fieldUpdateDocumentFieldField2,
		Type:                           typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldFieldUpdateDocumentFieldField3(fieldUpdateDocumentFieldField3 FieldUpdateDocumentFieldField3) FieldUpdateDocumentFieldField {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField3

	return FieldUpdateDocumentFieldField{
		FieldUpdateDocumentFieldField3: &fieldUpdateDocumentFieldField3,
		Type:                           typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldFieldUpdateDocumentFieldField4(fieldUpdateDocumentFieldField4 FieldUpdateDocumentFieldField4) FieldUpdateDocumentFieldField {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField4

	return FieldUpdateDocumentFieldField{
		FieldUpdateDocumentFieldField4: &fieldUpdateDocumentFieldField4,
		Type:                           typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldFieldUpdateDocumentFieldField5(fieldUpdateDocumentFieldField5 FieldUpdateDocumentFieldField5) FieldUpdateDocumentFieldField {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField5

	return FieldUpdateDocumentFieldField{
		FieldUpdateDocumentFieldField5: &fieldUpdateDocumentFieldField5,
		Type:                           typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldFieldUpdateDocumentFieldField6(fieldUpdateDocumentFieldField6 FieldUpdateDocumentFieldField6) FieldUpdateDocumentFieldField {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField6

	return FieldUpdateDocumentFieldField{
		FieldUpdateDocumentFieldField6: &fieldUpdateDocumentFieldField6,
		Type:                           typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldFieldUpdateDocumentFieldField7(fieldUpdateDocumentFieldField7 FieldUpdateDocumentFieldField7) FieldUpdateDocumentFieldField {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField7

	return FieldUpdateDocumentFieldField{
		FieldUpdateDocumentFieldField7: &fieldUpdateDocumentFieldField7,
		Type:                           typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldFieldUpdateDocumentFieldField8(fieldUpdateDocumentFieldField8 FieldUpdateDocumentFieldField8) FieldUpdateDocumentFieldField {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField8

	return FieldUpdateDocumentFieldField{
		FieldUpdateDocumentFieldField8: &fieldUpdateDocumentFieldField8,
		Type:                           typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldFieldUpdateDocumentFieldField9(fieldUpdateDocumentFieldField9 FieldUpdateDocumentFieldField9) FieldUpdateDocumentFieldField {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField9

	return FieldUpdateDocumentFieldField{
		FieldUpdateDocumentFieldField9: &fieldUpdateDocumentFieldField9,
		Type:                           typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldFieldUpdateDocumentFieldField10(fieldUpdateDocumentFieldField10 FieldUpdateDocumentFieldField10) FieldUpdateDocumentFieldField {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField10

	return FieldUpdateDocumentFieldField{
		FieldUpdateDocumentFieldField10: &fieldUpdateDocumentFieldField10,
		Type:                            typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldFieldUpdateDocumentFieldField11(fieldUpdateDocumentFieldField11 FieldUpdateDocumentFieldField11) FieldUpdateDocumentFieldField {
	typ := FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField11

	return FieldUpdateDocumentFieldField{
		FieldUpdateDocumentFieldField11: &fieldUpdateDocumentFieldField11,
		Type:                            typ,
	}
}

func (u *FieldUpdateDocumentFieldField) UnmarshalJSON(data []byte) error {

	var fieldUpdateDocumentFieldField1 FieldUpdateDocumentFieldField1 = FieldUpdateDocumentFieldField1{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldField1, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldField1 = &fieldUpdateDocumentFieldField1
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField1
		return nil
	}

	var fieldUpdateDocumentFieldField2 FieldUpdateDocumentFieldField2 = FieldUpdateDocumentFieldField2{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldField2, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldField2 = &fieldUpdateDocumentFieldField2
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField2
		return nil
	}

	var fieldUpdateDocumentFieldField3 FieldUpdateDocumentFieldField3 = FieldUpdateDocumentFieldField3{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldField3, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldField3 = &fieldUpdateDocumentFieldField3
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField3
		return nil
	}

	var fieldUpdateDocumentFieldField4 FieldUpdateDocumentFieldField4 = FieldUpdateDocumentFieldField4{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldField4, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldField4 = &fieldUpdateDocumentFieldField4
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField4
		return nil
	}

	var fieldUpdateDocumentFieldField5 FieldUpdateDocumentFieldField5 = FieldUpdateDocumentFieldField5{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldField5, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldField5 = &fieldUpdateDocumentFieldField5
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField5
		return nil
	}

	var fieldUpdateDocumentFieldField6 FieldUpdateDocumentFieldField6 = FieldUpdateDocumentFieldField6{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldField6, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldField6 = &fieldUpdateDocumentFieldField6
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField6
		return nil
	}

	var fieldUpdateDocumentFieldField7 FieldUpdateDocumentFieldField7 = FieldUpdateDocumentFieldField7{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldField7, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldField7 = &fieldUpdateDocumentFieldField7
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField7
		return nil
	}

	var fieldUpdateDocumentFieldField8 FieldUpdateDocumentFieldField8 = FieldUpdateDocumentFieldField8{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldField8, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldField8 = &fieldUpdateDocumentFieldField8
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField8
		return nil
	}

	var fieldUpdateDocumentFieldField9 FieldUpdateDocumentFieldField9 = FieldUpdateDocumentFieldField9{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldField9, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldField9 = &fieldUpdateDocumentFieldField9
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField9
		return nil
	}

	var fieldUpdateDocumentFieldField10 FieldUpdateDocumentFieldField10 = FieldUpdateDocumentFieldField10{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldField10, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldField10 = &fieldUpdateDocumentFieldField10
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField10
		return nil
	}

	var fieldUpdateDocumentFieldField11 FieldUpdateDocumentFieldField11 = FieldUpdateDocumentFieldField11{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldField11, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldField11 = &fieldUpdateDocumentFieldField11
		u.Type = FieldUpdateDocumentFieldFieldUnionTypeFieldUpdateDocumentFieldField11
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldUpdateDocumentFieldField", string(data))
}

func (u FieldUpdateDocumentFieldField) MarshalJSON() ([]byte, error) {
	if u.FieldUpdateDocumentFieldField1 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldField1, "", true)
	}

	if u.FieldUpdateDocumentFieldField2 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldField2, "", true)
	}

	if u.FieldUpdateDocumentFieldField3 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldField3, "", true)
	}

	if u.FieldUpdateDocumentFieldField4 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldField4, "", true)
	}

	if u.FieldUpdateDocumentFieldField5 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldField5, "", true)
	}

	if u.FieldUpdateDocumentFieldField6 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldField6, "", true)
	}

	if u.FieldUpdateDocumentFieldField7 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldField7, "", true)
	}

	if u.FieldUpdateDocumentFieldField8 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldField8, "", true)
	}

	if u.FieldUpdateDocumentFieldField9 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldField9, "", true)
	}

	if u.FieldUpdateDocumentFieldField10 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldField10, "", true)
	}

	if u.FieldUpdateDocumentFieldField11 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldField11, "", true)
	}

	return nil, errors.New("could not marshal union type FieldUpdateDocumentFieldField: all fields are null")
}

type FieldUpdateDocumentFieldRequestBody struct {
	DocumentID float64                       `json:"documentId"`
	Field      FieldUpdateDocumentFieldField `json:"field"`
}

func (o *FieldUpdateDocumentFieldRequestBody) GetDocumentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DocumentID
}

func (o *FieldUpdateDocumentFieldRequestBody) GetField() FieldUpdateDocumentFieldField {
	if o == nil {
		return FieldUpdateDocumentFieldField{}
	}
	return o.Field
}

type FieldUpdateDocumentFieldType string

const (
	FieldUpdateDocumentFieldTypeSignature     FieldUpdateDocumentFieldType = "SIGNATURE"
	FieldUpdateDocumentFieldTypeFreeSignature FieldUpdateDocumentFieldType = "FREE_SIGNATURE"
	FieldUpdateDocumentFieldTypeInitials      FieldUpdateDocumentFieldType = "INITIALS"
	FieldUpdateDocumentFieldTypeName          FieldUpdateDocumentFieldType = "NAME"
	FieldUpdateDocumentFieldTypeEmail         FieldUpdateDocumentFieldType = "EMAIL"
	FieldUpdateDocumentFieldTypeDate          FieldUpdateDocumentFieldType = "DATE"
	FieldUpdateDocumentFieldTypeText          FieldUpdateDocumentFieldType = "TEXT"
	FieldUpdateDocumentFieldTypeNumber        FieldUpdateDocumentFieldType = "NUMBER"
	FieldUpdateDocumentFieldTypeRadio         FieldUpdateDocumentFieldType = "RADIO"
	FieldUpdateDocumentFieldTypeCheckbox      FieldUpdateDocumentFieldType = "CHECKBOX"
	FieldUpdateDocumentFieldTypeDropdown      FieldUpdateDocumentFieldType = "DROPDOWN"
)

func (e FieldUpdateDocumentFieldType) ToPointer() *FieldUpdateDocumentFieldType {
	return &e
}
func (e *FieldUpdateDocumentFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldUpdateDocumentFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldType: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type string

const (
	FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9TypeDropdown FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type = "dropdown"
)

func (e FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type) ToPointer() *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponseValues struct {
	Value string `json:"value"`
}

func (o *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponseValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldFieldMeta9 struct {
	Label        *string                                                                                     `json:"label,omitempty"`
	Placeholder  *string                                                                                     `json:"placeholder,omitempty"`
	Required     *bool                                                                                       `json:"required,omitempty"`
	ReadOnly     *bool                                                                                       `json:"readOnly,omitempty"`
	Type         FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type `json:"type"`
	Values       []FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponseValues                            `json:"values,omitempty"`
	DefaultValue *string                                                                                     `json:"defaultValue,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldMeta9) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMeta9) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMeta9) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMeta9) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMeta9) GetType() FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMeta9) GetValues() []FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponseValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateDocumentFieldFieldMeta9) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type string

const (
	FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8TypeCheckbox FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type = "checkbox"
)

func (e FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type) ToPointer() *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMetaDocumentsFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldFieldMeta8 struct {
	Label            *string                                                                                     `json:"label,omitempty"`
	Placeholder      *string                                                                                     `json:"placeholder,omitempty"`
	Required         *bool                                                                                       `json:"required,omitempty"`
	ReadOnly         *bool                                                                                       `json:"readOnly,omitempty"`
	Type             FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type `json:"type"`
	Values           []FieldUpdateDocumentFieldFieldMetaDocumentsFieldsValues                                    `json:"values,omitempty"`
	ValidationRule   *string                                                                                     `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                                    `json:"validationLength,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldMeta8) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMeta8) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMeta8) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMeta8) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMeta8) GetType() FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMeta8) GetValues() []FieldUpdateDocumentFieldFieldMetaDocumentsFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateDocumentFieldFieldMeta8) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldUpdateDocumentFieldFieldMeta8) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type string

const (
	FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7TypeRadio FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type = "radio"
)

func (e FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type) ToPointer() *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMetaValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldUpdateDocumentFieldFieldMetaValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldFieldMetaValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateDocumentFieldFieldMetaValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldFieldMeta7 struct {
	Label       *string                                                                                     `json:"label,omitempty"`
	Placeholder *string                                                                                     `json:"placeholder,omitempty"`
	Required    *bool                                                                                       `json:"required,omitempty"`
	ReadOnly    *bool                                                                                       `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type `json:"type"`
	Values      []FieldUpdateDocumentFieldFieldMetaValues                                                   `json:"values,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldMeta7) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMeta7) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMeta7) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMeta7) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMeta7) GetType() FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMeta7) GetValues() []FieldUpdateDocumentFieldFieldMetaValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType string

const (
	FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyTypeNumber FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType = "number"
)

func (e FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType) ToPointer() *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMeta6 struct {
	Label        *string                                                                                    `json:"label,omitempty"`
	Placeholder  *string                                                                                    `json:"placeholder,omitempty"`
	Required     *bool                                                                                      `json:"required,omitempty"`
	ReadOnly     *bool                                                                                      `json:"readOnly,omitempty"`
	Type         FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType `json:"type"`
	NumberFormat *string                                                                                    `json:"numberFormat,omitempty"`
	Value        *string                                                                                    `json:"value,omitempty"`
	MinValue     *float64                                                                                   `json:"minValue,omitempty"`
	MaxValue     *float64                                                                                   `json:"maxValue,omitempty"`
	FontSize     *float64                                                                                   `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldMeta6) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMeta6) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMeta6) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMeta6) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMeta6) GetType() FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMeta6) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldUpdateDocumentFieldFieldMeta6) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldUpdateDocumentFieldFieldMeta6) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldUpdateDocumentFieldFieldMeta6) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldUpdateDocumentFieldFieldMeta6) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType string

const (
	FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONTypeText FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType = "text"
)

func (e FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType) ToPointer() *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMeta5 struct {
	Label          *string                                                                        `json:"label,omitempty"`
	Placeholder    *string                                                                        `json:"placeholder,omitempty"`
	Required       *bool                                                                          `json:"required,omitempty"`
	ReadOnly       *bool                                                                          `json:"readOnly,omitempty"`
	Type           FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType `json:"type"`
	Text           *string                                                                        `json:"text,omitempty"`
	CharacterLimit *float64                                                                       `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldMeta5) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMeta5) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMeta5) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMeta5) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMeta5) GetType() FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMeta5) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldUpdateDocumentFieldFieldMeta5) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldUpdateDocumentFieldFieldMeta5) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200Type string

const (
	FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200TypeDate FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200Type = "date"
)

func (e FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200Type) ToPointer() *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200Type {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200Type: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMeta4 struct {
	Label       *string                                                         `json:"label,omitempty"`
	Placeholder *string                                                         `json:"placeholder,omitempty"`
	Required    *bool                                                           `json:"required,omitempty"`
	ReadOnly    *bool                                                           `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200Type `json:"type"`
	FontSize    *float64                                                        `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldMeta4) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMeta4) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMeta4) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMeta4) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMeta4) GetType() FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200Type {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponse200Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMeta4) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponseType string

const (
	FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponseTypeEmail FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponseType = "email"
)

func (e FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponseType) ToPointer() *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponseType {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponseType: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMeta3 struct {
	Label       *string                                                      `json:"label,omitempty"`
	Placeholder *string                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponseType `json:"type"`
	FontSize    *float64                                                     `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldMeta3) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMeta3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMeta3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMeta3) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMeta3) GetType() FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponseType {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaDocumentsFieldsResponseType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMeta3) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldFieldMetaDocumentsFieldsType string

const (
	FieldUpdateDocumentFieldFieldMetaDocumentsFieldsTypeName FieldUpdateDocumentFieldFieldMetaDocumentsFieldsType = "name"
)

func (e FieldUpdateDocumentFieldFieldMetaDocumentsFieldsType) ToPointer() *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsType {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaDocumentsFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldUpdateDocumentFieldFieldMetaDocumentsFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaDocumentsFieldsType: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMeta2 struct {
	Label       *string                                              `json:"label,omitempty"`
	Placeholder *string                                              `json:"placeholder,omitempty"`
	Required    *bool                                                `json:"required,omitempty"`
	ReadOnly    *bool                                                `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldFieldMetaDocumentsFieldsType `json:"type"`
	FontSize    *float64                                             `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldMeta2) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMeta2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMeta2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMeta2) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMeta2) GetType() FieldUpdateDocumentFieldFieldMetaDocumentsFieldsType {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaDocumentsFieldsType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMeta2) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldFieldMetaType string

const (
	FieldUpdateDocumentFieldFieldMetaTypeInitials FieldUpdateDocumentFieldFieldMetaType = "initials"
)

func (e FieldUpdateDocumentFieldFieldMetaType) ToPointer() *FieldUpdateDocumentFieldFieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldFieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldUpdateDocumentFieldFieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldFieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldFieldMeta1 struct {
	Label       *string                               `json:"label,omitempty"`
	Placeholder *string                               `json:"placeholder,omitempty"`
	Required    *bool                                 `json:"required,omitempty"`
	ReadOnly    *bool                                 `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldFieldMetaType `json:"type"`
	FontSize    *float64                              `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldFieldMeta1) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldFieldMeta1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldFieldMeta1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldFieldMeta1) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldFieldMeta1) GetType() FieldUpdateDocumentFieldFieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldFieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldFieldMeta1) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldFieldMetaUnionType string

const (
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta1 FieldUpdateDocumentFieldFieldMetaUnionType = "field-updateDocumentField_fieldMeta_1"
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta2 FieldUpdateDocumentFieldFieldMetaUnionType = "field-updateDocumentField_fieldMeta_2"
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta3 FieldUpdateDocumentFieldFieldMetaUnionType = "field-updateDocumentField_fieldMeta_3"
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta4 FieldUpdateDocumentFieldFieldMetaUnionType = "field-updateDocumentField_fieldMeta_4"
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta5 FieldUpdateDocumentFieldFieldMetaUnionType = "field-updateDocumentField_fieldMeta_5"
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta6 FieldUpdateDocumentFieldFieldMetaUnionType = "field-updateDocumentField_fieldMeta_6"
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta7 FieldUpdateDocumentFieldFieldMetaUnionType = "field-updateDocumentField_fieldMeta_7"
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta8 FieldUpdateDocumentFieldFieldMetaUnionType = "field-updateDocumentField_fieldMeta_8"
	FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta9 FieldUpdateDocumentFieldFieldMetaUnionType = "field-updateDocumentField_fieldMeta_9"
)

type FieldUpdateDocumentFieldFieldMeta struct {
	FieldUpdateDocumentFieldFieldMeta1 *FieldUpdateDocumentFieldFieldMeta1 `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldMeta2 *FieldUpdateDocumentFieldFieldMeta2 `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldMeta3 *FieldUpdateDocumentFieldFieldMeta3 `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldMeta4 *FieldUpdateDocumentFieldFieldMeta4 `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldMeta5 *FieldUpdateDocumentFieldFieldMeta5 `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldMeta6 *FieldUpdateDocumentFieldFieldMeta6 `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldMeta7 *FieldUpdateDocumentFieldFieldMeta7 `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldMeta8 *FieldUpdateDocumentFieldFieldMeta8 `queryParam:"inline"`
	FieldUpdateDocumentFieldFieldMeta9 *FieldUpdateDocumentFieldFieldMeta9 `queryParam:"inline"`

	Type FieldUpdateDocumentFieldFieldMetaUnionType
}

func CreateFieldUpdateDocumentFieldFieldMetaFieldUpdateDocumentFieldFieldMeta1(fieldUpdateDocumentFieldFieldMeta1 FieldUpdateDocumentFieldFieldMeta1) FieldUpdateDocumentFieldFieldMeta {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta1

	return FieldUpdateDocumentFieldFieldMeta{
		FieldUpdateDocumentFieldFieldMeta1: &fieldUpdateDocumentFieldFieldMeta1,
		Type:                               typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldMetaFieldUpdateDocumentFieldFieldMeta2(fieldUpdateDocumentFieldFieldMeta2 FieldUpdateDocumentFieldFieldMeta2) FieldUpdateDocumentFieldFieldMeta {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta2

	return FieldUpdateDocumentFieldFieldMeta{
		FieldUpdateDocumentFieldFieldMeta2: &fieldUpdateDocumentFieldFieldMeta2,
		Type:                               typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldMetaFieldUpdateDocumentFieldFieldMeta3(fieldUpdateDocumentFieldFieldMeta3 FieldUpdateDocumentFieldFieldMeta3) FieldUpdateDocumentFieldFieldMeta {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta3

	return FieldUpdateDocumentFieldFieldMeta{
		FieldUpdateDocumentFieldFieldMeta3: &fieldUpdateDocumentFieldFieldMeta3,
		Type:                               typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldMetaFieldUpdateDocumentFieldFieldMeta4(fieldUpdateDocumentFieldFieldMeta4 FieldUpdateDocumentFieldFieldMeta4) FieldUpdateDocumentFieldFieldMeta {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta4

	return FieldUpdateDocumentFieldFieldMeta{
		FieldUpdateDocumentFieldFieldMeta4: &fieldUpdateDocumentFieldFieldMeta4,
		Type:                               typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldMetaFieldUpdateDocumentFieldFieldMeta5(fieldUpdateDocumentFieldFieldMeta5 FieldUpdateDocumentFieldFieldMeta5) FieldUpdateDocumentFieldFieldMeta {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta5

	return FieldUpdateDocumentFieldFieldMeta{
		FieldUpdateDocumentFieldFieldMeta5: &fieldUpdateDocumentFieldFieldMeta5,
		Type:                               typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldMetaFieldUpdateDocumentFieldFieldMeta6(fieldUpdateDocumentFieldFieldMeta6 FieldUpdateDocumentFieldFieldMeta6) FieldUpdateDocumentFieldFieldMeta {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta6

	return FieldUpdateDocumentFieldFieldMeta{
		FieldUpdateDocumentFieldFieldMeta6: &fieldUpdateDocumentFieldFieldMeta6,
		Type:                               typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldMetaFieldUpdateDocumentFieldFieldMeta7(fieldUpdateDocumentFieldFieldMeta7 FieldUpdateDocumentFieldFieldMeta7) FieldUpdateDocumentFieldFieldMeta {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta7

	return FieldUpdateDocumentFieldFieldMeta{
		FieldUpdateDocumentFieldFieldMeta7: &fieldUpdateDocumentFieldFieldMeta7,
		Type:                               typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldMetaFieldUpdateDocumentFieldFieldMeta8(fieldUpdateDocumentFieldFieldMeta8 FieldUpdateDocumentFieldFieldMeta8) FieldUpdateDocumentFieldFieldMeta {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta8

	return FieldUpdateDocumentFieldFieldMeta{
		FieldUpdateDocumentFieldFieldMeta8: &fieldUpdateDocumentFieldFieldMeta8,
		Type:                               typ,
	}
}

func CreateFieldUpdateDocumentFieldFieldMetaFieldUpdateDocumentFieldFieldMeta9(fieldUpdateDocumentFieldFieldMeta9 FieldUpdateDocumentFieldFieldMeta9) FieldUpdateDocumentFieldFieldMeta {
	typ := FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta9

	return FieldUpdateDocumentFieldFieldMeta{
		FieldUpdateDocumentFieldFieldMeta9: &fieldUpdateDocumentFieldFieldMeta9,
		Type:                               typ,
	}
}

func (u *FieldUpdateDocumentFieldFieldMeta) UnmarshalJSON(data []byte) error {

	var fieldUpdateDocumentFieldFieldMeta1 FieldUpdateDocumentFieldFieldMeta1 = FieldUpdateDocumentFieldFieldMeta1{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMeta1, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldFieldMeta1 = &fieldUpdateDocumentFieldFieldMeta1
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta1
		return nil
	}

	var fieldUpdateDocumentFieldFieldMeta2 FieldUpdateDocumentFieldFieldMeta2 = FieldUpdateDocumentFieldFieldMeta2{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMeta2, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldFieldMeta2 = &fieldUpdateDocumentFieldFieldMeta2
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta2
		return nil
	}

	var fieldUpdateDocumentFieldFieldMeta3 FieldUpdateDocumentFieldFieldMeta3 = FieldUpdateDocumentFieldFieldMeta3{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMeta3, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldFieldMeta3 = &fieldUpdateDocumentFieldFieldMeta3
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta3
		return nil
	}

	var fieldUpdateDocumentFieldFieldMeta4 FieldUpdateDocumentFieldFieldMeta4 = FieldUpdateDocumentFieldFieldMeta4{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMeta4, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldFieldMeta4 = &fieldUpdateDocumentFieldFieldMeta4
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta4
		return nil
	}

	var fieldUpdateDocumentFieldFieldMeta7 FieldUpdateDocumentFieldFieldMeta7 = FieldUpdateDocumentFieldFieldMeta7{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMeta7, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldFieldMeta7 = &fieldUpdateDocumentFieldFieldMeta7
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta7
		return nil
	}

	var fieldUpdateDocumentFieldFieldMeta9 FieldUpdateDocumentFieldFieldMeta9 = FieldUpdateDocumentFieldFieldMeta9{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMeta9, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldFieldMeta9 = &fieldUpdateDocumentFieldFieldMeta9
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta9
		return nil
	}

	var fieldUpdateDocumentFieldFieldMeta5 FieldUpdateDocumentFieldFieldMeta5 = FieldUpdateDocumentFieldFieldMeta5{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMeta5, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldFieldMeta5 = &fieldUpdateDocumentFieldFieldMeta5
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta5
		return nil
	}

	var fieldUpdateDocumentFieldFieldMeta8 FieldUpdateDocumentFieldFieldMeta8 = FieldUpdateDocumentFieldFieldMeta8{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMeta8, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldFieldMeta8 = &fieldUpdateDocumentFieldFieldMeta8
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta8
		return nil
	}

	var fieldUpdateDocumentFieldFieldMeta6 FieldUpdateDocumentFieldFieldMeta6 = FieldUpdateDocumentFieldFieldMeta6{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldFieldMeta6, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldFieldMeta6 = &fieldUpdateDocumentFieldFieldMeta6
		u.Type = FieldUpdateDocumentFieldFieldMetaUnionTypeFieldUpdateDocumentFieldFieldMeta6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldUpdateDocumentFieldFieldMeta", string(data))
}

func (u FieldUpdateDocumentFieldFieldMeta) MarshalJSON() ([]byte, error) {
	if u.FieldUpdateDocumentFieldFieldMeta1 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMeta1, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldMeta2 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMeta2, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldMeta3 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMeta3, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldMeta4 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMeta4, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldMeta5 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMeta5, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldMeta6 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMeta6, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldMeta7 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMeta7, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldMeta8 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMeta8, "", true)
	}

	if u.FieldUpdateDocumentFieldFieldMeta9 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldFieldMeta9, "", true)
	}

	return nil, errors.New("could not marshal union type FieldUpdateDocumentFieldFieldMeta: all fields are null")
}

// FieldUpdateDocumentFieldResponseBody - Successful response
type FieldUpdateDocumentFieldResponseBody struct {
	Type        FieldUpdateDocumentFieldType `json:"type"`
	ID          int64                        `json:"id"`
	SecondaryID string                       `json:"secondaryId"`
	DocumentID  *int64                       `json:"documentId"`
	TemplateID  *int64                       `json:"templateId"`
	RecipientID int64                        `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                            `json:"page"`
	PositionX  any                                `json:"positionX,omitempty"`
	PositionY  any                                `json:"positionY,omitempty"`
	Width      any                                `json:"width,omitempty"`
	Height     any                                `json:"height,omitempty"`
	CustomText string                             `json:"customText"`
	Inserted   bool                               `json:"inserted"`
	FieldMeta  *FieldUpdateDocumentFieldFieldMeta `json:"fieldMeta"`
}

func (o *FieldUpdateDocumentFieldResponseBody) GetType() FieldUpdateDocumentFieldType {
	if o == nil {
		return FieldUpdateDocumentFieldType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldResponseBody) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldResponseBody) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *FieldUpdateDocumentFieldResponseBody) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *FieldUpdateDocumentFieldResponseBody) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *FieldUpdateDocumentFieldResponseBody) GetRecipientID() int64 {
	if o == nil {
		return 0
	}
	return o.RecipientID
}

func (o *FieldUpdateDocumentFieldResponseBody) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *FieldUpdateDocumentFieldResponseBody) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *FieldUpdateDocumentFieldResponseBody) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *FieldUpdateDocumentFieldResponseBody) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldResponseBody) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *FieldUpdateDocumentFieldResponseBody) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *FieldUpdateDocumentFieldResponseBody) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *FieldUpdateDocumentFieldResponseBody) GetFieldMeta() *FieldUpdateDocumentFieldFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

type FieldUpdateDocumentFieldResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldUpdateDocumentFieldResponseBody
}

func (o *FieldUpdateDocumentFieldResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FieldUpdateDocumentFieldResponse) GetObject() *FieldUpdateDocumentFieldResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
