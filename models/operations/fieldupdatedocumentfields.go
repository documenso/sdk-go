// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11TypeDropdown FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type = "DROPDOWN"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaTypeDropdown FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType = "dropdown"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestValues struct {
	Value string `json:"value"`
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta struct {
	Label        *string                                                                         `json:"label,omitempty"`
	Placeholder  *string                                                                         `json:"placeholder,omitempty"`
	Required     *bool                                                                           `json:"required,omitempty"`
	ReadOnly     *bool                                                                           `json:"readOnly,omitempty"`
	Type         FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType `json:"type"`
	Values       []FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestValues                   `json:"values,omitempty"`
	DefaultValue *string                                                                         `json:"defaultValue,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta) GetValues() []FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldUpdateDocumentFieldsFields11 struct {
	Type      FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type       `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFields11) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFields11) GetFieldMeta() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldsFields11) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldsFields11) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldsFields11) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldsFields11) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldsFields11) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldsFields11) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10TypeCheckbox FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type = "CHECKBOX"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaTypeCheckbox FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType = "checkbox"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta struct {
	Label            *string                                                                         `json:"label,omitempty"`
	Placeholder      *string                                                                         `json:"placeholder,omitempty"`
	Required         *bool                                                                           `json:"required,omitempty"`
	ReadOnly         *bool                                                                           `json:"readOnly,omitempty"`
	Type             FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType `json:"type"`
	Values           []FieldUpdateDocumentFieldsFieldsDocumentsFieldsValues                          `json:"values,omitempty"`
	ValidationRule   *string                                                                         `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                        `json:"validationLength,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta) GetValues() []FieldUpdateDocumentFieldsFieldsDocumentsFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldUpdateDocumentFieldsFields10 struct {
	Type      FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type       `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFields10) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFields10) GetFieldMeta() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldsFields10) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldsFields10) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldsFields10) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldsFields10) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldsFields10) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldsFields10) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9TypeRadio FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type = "RADIO"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaTypeRadio FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType = "radio"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldUpdateDocumentFieldsFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldsFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateDocumentFieldsFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta struct {
	Label       *string                                                                        `json:"label,omitempty"`
	Placeholder *string                                                                        `json:"placeholder,omitempty"`
	Required    *bool                                                                          `json:"required,omitempty"`
	ReadOnly    *bool                                                                          `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType `json:"type"`
	Values      []FieldUpdateDocumentFieldsFieldsValues                                        `json:"values,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta) GetValues() []FieldUpdateDocumentFieldsFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldUpdateDocumentFieldsFields9 struct {
	Type      FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type       `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFields9) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFields9) GetFieldMeta() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldsFields9) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldsFields9) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldsFields9) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldsFields9) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldsFields9) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldsFields9) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8TypeNumber FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type = "NUMBER"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaTypeNumber FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType = "number"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta struct {
	Label        *string                                                                        `json:"label,omitempty"`
	Placeholder  *string                                                                        `json:"placeholder,omitempty"`
	Required     *bool                                                                          `json:"required,omitempty"`
	ReadOnly     *bool                                                                          `json:"readOnly,omitempty"`
	Type         FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType `json:"type"`
	NumberFormat *string                                                                        `json:"numberFormat,omitempty"`
	Value        *string                                                                        `json:"value,omitempty"`
	MinValue     *float64                                                                       `json:"minValue,omitempty"`
	MaxValue     *float64                                                                       `json:"maxValue,omitempty"`
	FontSize     *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldsFields8 struct {
	Type      FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type       `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFields8) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFields8) GetFieldMeta() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldsFields8) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldsFields8) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldsFields8) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldsFields8) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldsFields8) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldsFields8) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7TypeText FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type = "TEXT"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaTypeText FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType = "text"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta struct {
	Label          *string                                                                        `json:"label,omitempty"`
	Placeholder    *string                                                                        `json:"placeholder,omitempty"`
	Required       *bool                                                                          `json:"required,omitempty"`
	ReadOnly       *bool                                                                          `json:"readOnly,omitempty"`
	Type           FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType `json:"type"`
	Text           *string                                                                        `json:"text,omitempty"`
	CharacterLimit *float64                                                                       `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldsFields7 struct {
	Type      FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type       `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFields7) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFields7) GetFieldMeta() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldsFields7) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldsFields7) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldsFields7) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldsFields7) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldsFields7) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldsFields7) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6TypeDate FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type = "DATE"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaTypeDate FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType = "date"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta struct {
	Label       *string                                                                        `json:"label,omitempty"`
	Placeholder *string                                                                        `json:"placeholder,omitempty"`
	Required    *bool                                                                          `json:"required,omitempty"`
	ReadOnly    *bool                                                                          `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType `json:"type"`
	FontSize    *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldsFields6 struct {
	Type      FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFields6) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFields6) GetFieldMeta() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldsFields6) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldsFields6) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldsFields6) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldsFields6) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldsFields6) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldsFields6) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5TypeEmail FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type = "EMAIL"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaTypeEmail FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType = "email"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta struct {
	Label       *string                                                                        `json:"label,omitempty"`
	Placeholder *string                                                                        `json:"placeholder,omitempty"`
	Required    *bool                                                                          `json:"required,omitempty"`
	ReadOnly    *bool                                                                          `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType `json:"type"`
	FontSize    *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldsFields5 struct {
	Type      FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta       `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFields5) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFields5) GetFieldMeta() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldsFields5) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldsFields5) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldsFields5) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldsFields5) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldsFields5) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldsFields5) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4TypeName FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type = "NAME"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaTypeName FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType = "name"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsFieldMeta struct {
	Label       *string                                                                        `json:"label,omitempty"`
	Placeholder *string                                                                        `json:"placeholder,omitempty"`
	Required    *bool                                                                          `json:"required,omitempty"`
	ReadOnly    *bool                                                                          `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType `json:"type"`
	FontSize    *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsFieldMeta) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldsDocumentsFieldsFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldsFields4 struct {
	Type      FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldsDocumentsFieldsFieldMeta              `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFields4) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFields4) GetFieldMeta() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldsFields4) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldsFields4) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldsFields4) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldsFields4) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldsFields4) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldsFields4) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestType string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestTypeInitials FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestType = "INITIALS"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestType) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyTypeInitials FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType = "initials"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldsFieldMeta struct {
	Label       *string                                                              `json:"label,omitempty"`
	Placeholder *string                                                              `json:"placeholder,omitempty"`
	Required    *bool                                                                `json:"required,omitempty"`
	ReadOnly    *bool                                                                `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType `json:"type"`
	FontSize    *float64                                                             `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldsFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldsFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldsFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldsFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldsFieldMeta) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldsFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldsFields3 struct {
	Type      FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestType `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldsFieldMeta                 `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFields3) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsRequestType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFields3) GetFieldMeta() *FieldUpdateDocumentFieldsFieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateDocumentFieldsFields3) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldsFields3) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldsFields3) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldsFields3) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldsFields3) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldsFields3) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldsFieldsDocumentsFieldsType string

const (
	FieldUpdateDocumentFieldsFieldsDocumentsFieldsTypeFreeSignature FieldUpdateDocumentFieldsFieldsDocumentsFieldsType = "FREE_SIGNATURE"
)

func (e FieldUpdateDocumentFieldsFieldsDocumentsFieldsType) ToPointer() *FieldUpdateDocumentFieldsFieldsDocumentsFieldsType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsDocumentsFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldUpdateDocumentFieldsFieldsDocumentsFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsDocumentsFieldsType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFields2 struct {
	Type FieldUpdateDocumentFieldsFieldsDocumentsFieldsType `json:"type"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFields2) GetType() FieldUpdateDocumentFieldsFieldsDocumentsFieldsType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsDocumentsFieldsType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFields2) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldsFields2) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldsFields2) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldsFields2) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldsFields2) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldsFields2) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldsFieldsType string

const (
	FieldUpdateDocumentFieldsFieldsTypeSignature FieldUpdateDocumentFieldsFieldsType = "SIGNATURE"
)

func (e FieldUpdateDocumentFieldsFieldsType) ToPointer() *FieldUpdateDocumentFieldsFieldsType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = FieldUpdateDocumentFieldsFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldsType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFields1 struct {
	Type FieldUpdateDocumentFieldsFieldsType `json:"type"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFields1) GetType() FieldUpdateDocumentFieldsFieldsType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldsType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFields1) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldsFields1) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateDocumentFieldsFields1) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateDocumentFieldsFields1) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateDocumentFieldsFields1) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldsFields1) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateDocumentFieldsFieldsUnionType string

const (
	FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields1  FieldUpdateDocumentFieldsFieldsUnionType = "field-updateDocumentFields_fields_1"
	FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields2  FieldUpdateDocumentFieldsFieldsUnionType = "field-updateDocumentFields_fields_2"
	FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields3  FieldUpdateDocumentFieldsFieldsUnionType = "field-updateDocumentFields_fields_3"
	FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields4  FieldUpdateDocumentFieldsFieldsUnionType = "field-updateDocumentFields_fields_4"
	FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields5  FieldUpdateDocumentFieldsFieldsUnionType = "field-updateDocumentFields_fields_5"
	FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields6  FieldUpdateDocumentFieldsFieldsUnionType = "field-updateDocumentFields_fields_6"
	FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields7  FieldUpdateDocumentFieldsFieldsUnionType = "field-updateDocumentFields_fields_7"
	FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields8  FieldUpdateDocumentFieldsFieldsUnionType = "field-updateDocumentFields_fields_8"
	FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields9  FieldUpdateDocumentFieldsFieldsUnionType = "field-updateDocumentFields_fields_9"
	FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields10 FieldUpdateDocumentFieldsFieldsUnionType = "field-updateDocumentFields_fields_10"
	FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields11 FieldUpdateDocumentFieldsFieldsUnionType = "field-updateDocumentFields_fields_11"
)

type FieldUpdateDocumentFieldsFields struct {
	FieldUpdateDocumentFieldsFields1  *FieldUpdateDocumentFieldsFields1  `queryParam:"inline"`
	FieldUpdateDocumentFieldsFields2  *FieldUpdateDocumentFieldsFields2  `queryParam:"inline"`
	FieldUpdateDocumentFieldsFields3  *FieldUpdateDocumentFieldsFields3  `queryParam:"inline"`
	FieldUpdateDocumentFieldsFields4  *FieldUpdateDocumentFieldsFields4  `queryParam:"inline"`
	FieldUpdateDocumentFieldsFields5  *FieldUpdateDocumentFieldsFields5  `queryParam:"inline"`
	FieldUpdateDocumentFieldsFields6  *FieldUpdateDocumentFieldsFields6  `queryParam:"inline"`
	FieldUpdateDocumentFieldsFields7  *FieldUpdateDocumentFieldsFields7  `queryParam:"inline"`
	FieldUpdateDocumentFieldsFields8  *FieldUpdateDocumentFieldsFields8  `queryParam:"inline"`
	FieldUpdateDocumentFieldsFields9  *FieldUpdateDocumentFieldsFields9  `queryParam:"inline"`
	FieldUpdateDocumentFieldsFields10 *FieldUpdateDocumentFieldsFields10 `queryParam:"inline"`
	FieldUpdateDocumentFieldsFields11 *FieldUpdateDocumentFieldsFields11 `queryParam:"inline"`

	Type FieldUpdateDocumentFieldsFieldsUnionType
}

func CreateFieldUpdateDocumentFieldsFieldsFieldUpdateDocumentFieldsFields1(fieldUpdateDocumentFieldsFields1 FieldUpdateDocumentFieldsFields1) FieldUpdateDocumentFieldsFields {
	typ := FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields1

	return FieldUpdateDocumentFieldsFields{
		FieldUpdateDocumentFieldsFields1: &fieldUpdateDocumentFieldsFields1,
		Type:                             typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldsFieldUpdateDocumentFieldsFields2(fieldUpdateDocumentFieldsFields2 FieldUpdateDocumentFieldsFields2) FieldUpdateDocumentFieldsFields {
	typ := FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields2

	return FieldUpdateDocumentFieldsFields{
		FieldUpdateDocumentFieldsFields2: &fieldUpdateDocumentFieldsFields2,
		Type:                             typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldsFieldUpdateDocumentFieldsFields3(fieldUpdateDocumentFieldsFields3 FieldUpdateDocumentFieldsFields3) FieldUpdateDocumentFieldsFields {
	typ := FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields3

	return FieldUpdateDocumentFieldsFields{
		FieldUpdateDocumentFieldsFields3: &fieldUpdateDocumentFieldsFields3,
		Type:                             typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldsFieldUpdateDocumentFieldsFields4(fieldUpdateDocumentFieldsFields4 FieldUpdateDocumentFieldsFields4) FieldUpdateDocumentFieldsFields {
	typ := FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields4

	return FieldUpdateDocumentFieldsFields{
		FieldUpdateDocumentFieldsFields4: &fieldUpdateDocumentFieldsFields4,
		Type:                             typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldsFieldUpdateDocumentFieldsFields5(fieldUpdateDocumentFieldsFields5 FieldUpdateDocumentFieldsFields5) FieldUpdateDocumentFieldsFields {
	typ := FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields5

	return FieldUpdateDocumentFieldsFields{
		FieldUpdateDocumentFieldsFields5: &fieldUpdateDocumentFieldsFields5,
		Type:                             typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldsFieldUpdateDocumentFieldsFields6(fieldUpdateDocumentFieldsFields6 FieldUpdateDocumentFieldsFields6) FieldUpdateDocumentFieldsFields {
	typ := FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields6

	return FieldUpdateDocumentFieldsFields{
		FieldUpdateDocumentFieldsFields6: &fieldUpdateDocumentFieldsFields6,
		Type:                             typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldsFieldUpdateDocumentFieldsFields7(fieldUpdateDocumentFieldsFields7 FieldUpdateDocumentFieldsFields7) FieldUpdateDocumentFieldsFields {
	typ := FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields7

	return FieldUpdateDocumentFieldsFields{
		FieldUpdateDocumentFieldsFields7: &fieldUpdateDocumentFieldsFields7,
		Type:                             typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldsFieldUpdateDocumentFieldsFields8(fieldUpdateDocumentFieldsFields8 FieldUpdateDocumentFieldsFields8) FieldUpdateDocumentFieldsFields {
	typ := FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields8

	return FieldUpdateDocumentFieldsFields{
		FieldUpdateDocumentFieldsFields8: &fieldUpdateDocumentFieldsFields8,
		Type:                             typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldsFieldUpdateDocumentFieldsFields9(fieldUpdateDocumentFieldsFields9 FieldUpdateDocumentFieldsFields9) FieldUpdateDocumentFieldsFields {
	typ := FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields9

	return FieldUpdateDocumentFieldsFields{
		FieldUpdateDocumentFieldsFields9: &fieldUpdateDocumentFieldsFields9,
		Type:                             typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldsFieldUpdateDocumentFieldsFields10(fieldUpdateDocumentFieldsFields10 FieldUpdateDocumentFieldsFields10) FieldUpdateDocumentFieldsFields {
	typ := FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields10

	return FieldUpdateDocumentFieldsFields{
		FieldUpdateDocumentFieldsFields10: &fieldUpdateDocumentFieldsFields10,
		Type:                              typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldsFieldUpdateDocumentFieldsFields11(fieldUpdateDocumentFieldsFields11 FieldUpdateDocumentFieldsFields11) FieldUpdateDocumentFieldsFields {
	typ := FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields11

	return FieldUpdateDocumentFieldsFields{
		FieldUpdateDocumentFieldsFields11: &fieldUpdateDocumentFieldsFields11,
		Type:                              typ,
	}
}

func (u *FieldUpdateDocumentFieldsFields) UnmarshalJSON(data []byte) error {

	var fieldUpdateDocumentFieldsFields1 FieldUpdateDocumentFieldsFields1 = FieldUpdateDocumentFieldsFields1{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFields1, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFields1 = &fieldUpdateDocumentFieldsFields1
		u.Type = FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields1
		return nil
	}

	var fieldUpdateDocumentFieldsFields2 FieldUpdateDocumentFieldsFields2 = FieldUpdateDocumentFieldsFields2{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFields2, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFields2 = &fieldUpdateDocumentFieldsFields2
		u.Type = FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields2
		return nil
	}

	var fieldUpdateDocumentFieldsFields3 FieldUpdateDocumentFieldsFields3 = FieldUpdateDocumentFieldsFields3{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFields3, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFields3 = &fieldUpdateDocumentFieldsFields3
		u.Type = FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields3
		return nil
	}

	var fieldUpdateDocumentFieldsFields4 FieldUpdateDocumentFieldsFields4 = FieldUpdateDocumentFieldsFields4{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFields4, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFields4 = &fieldUpdateDocumentFieldsFields4
		u.Type = FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields4
		return nil
	}

	var fieldUpdateDocumentFieldsFields5 FieldUpdateDocumentFieldsFields5 = FieldUpdateDocumentFieldsFields5{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFields5, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFields5 = &fieldUpdateDocumentFieldsFields5
		u.Type = FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields5
		return nil
	}

	var fieldUpdateDocumentFieldsFields6 FieldUpdateDocumentFieldsFields6 = FieldUpdateDocumentFieldsFields6{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFields6, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFields6 = &fieldUpdateDocumentFieldsFields6
		u.Type = FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields6
		return nil
	}

	var fieldUpdateDocumentFieldsFields7 FieldUpdateDocumentFieldsFields7 = FieldUpdateDocumentFieldsFields7{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFields7, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFields7 = &fieldUpdateDocumentFieldsFields7
		u.Type = FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields7
		return nil
	}

	var fieldUpdateDocumentFieldsFields8 FieldUpdateDocumentFieldsFields8 = FieldUpdateDocumentFieldsFields8{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFields8, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFields8 = &fieldUpdateDocumentFieldsFields8
		u.Type = FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields8
		return nil
	}

	var fieldUpdateDocumentFieldsFields9 FieldUpdateDocumentFieldsFields9 = FieldUpdateDocumentFieldsFields9{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFields9, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFields9 = &fieldUpdateDocumentFieldsFields9
		u.Type = FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields9
		return nil
	}

	var fieldUpdateDocumentFieldsFields10 FieldUpdateDocumentFieldsFields10 = FieldUpdateDocumentFieldsFields10{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFields10, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFields10 = &fieldUpdateDocumentFieldsFields10
		u.Type = FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields10
		return nil
	}

	var fieldUpdateDocumentFieldsFields11 FieldUpdateDocumentFieldsFields11 = FieldUpdateDocumentFieldsFields11{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFields11, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFields11 = &fieldUpdateDocumentFieldsFields11
		u.Type = FieldUpdateDocumentFieldsFieldsUnionTypeFieldUpdateDocumentFieldsFields11
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldUpdateDocumentFieldsFields", string(data))
}

func (u FieldUpdateDocumentFieldsFields) MarshalJSON() ([]byte, error) {
	if u.FieldUpdateDocumentFieldsFields1 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFields1, "", true)
	}

	if u.FieldUpdateDocumentFieldsFields2 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFields2, "", true)
	}

	if u.FieldUpdateDocumentFieldsFields3 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFields3, "", true)
	}

	if u.FieldUpdateDocumentFieldsFields4 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFields4, "", true)
	}

	if u.FieldUpdateDocumentFieldsFields5 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFields5, "", true)
	}

	if u.FieldUpdateDocumentFieldsFields6 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFields6, "", true)
	}

	if u.FieldUpdateDocumentFieldsFields7 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFields7, "", true)
	}

	if u.FieldUpdateDocumentFieldsFields8 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFields8, "", true)
	}

	if u.FieldUpdateDocumentFieldsFields9 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFields9, "", true)
	}

	if u.FieldUpdateDocumentFieldsFields10 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFields10, "", true)
	}

	if u.FieldUpdateDocumentFieldsFields11 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFields11, "", true)
	}

	return nil, errors.New("could not marshal union type FieldUpdateDocumentFieldsFields: all fields are null")
}

type FieldUpdateDocumentFieldsRequestBody struct {
	DocumentID float64                           `json:"documentId"`
	Fields     []FieldUpdateDocumentFieldsFields `json:"fields"`
}

func (o *FieldUpdateDocumentFieldsRequestBody) GetDocumentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.DocumentID
}

func (o *FieldUpdateDocumentFieldsRequestBody) GetFields() []FieldUpdateDocumentFieldsFields {
	if o == nil {
		return []FieldUpdateDocumentFieldsFields{}
	}
	return o.Fields
}

type FieldUpdateDocumentFieldsType string

const (
	FieldUpdateDocumentFieldsTypeSignature     FieldUpdateDocumentFieldsType = "SIGNATURE"
	FieldUpdateDocumentFieldsTypeFreeSignature FieldUpdateDocumentFieldsType = "FREE_SIGNATURE"
	FieldUpdateDocumentFieldsTypeInitials      FieldUpdateDocumentFieldsType = "INITIALS"
	FieldUpdateDocumentFieldsTypeName          FieldUpdateDocumentFieldsType = "NAME"
	FieldUpdateDocumentFieldsTypeEmail         FieldUpdateDocumentFieldsType = "EMAIL"
	FieldUpdateDocumentFieldsTypeDate          FieldUpdateDocumentFieldsType = "DATE"
	FieldUpdateDocumentFieldsTypeText          FieldUpdateDocumentFieldsType = "TEXT"
	FieldUpdateDocumentFieldsTypeNumber        FieldUpdateDocumentFieldsType = "NUMBER"
	FieldUpdateDocumentFieldsTypeRadio         FieldUpdateDocumentFieldsType = "RADIO"
	FieldUpdateDocumentFieldsTypeCheckbox      FieldUpdateDocumentFieldsType = "CHECKBOX"
	FieldUpdateDocumentFieldsTypeDropdown      FieldUpdateDocumentFieldsType = "DROPDOWN"
)

func (e FieldUpdateDocumentFieldsType) ToPointer() *FieldUpdateDocumentFieldsType {
	return &e
}
func (e *FieldUpdateDocumentFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldUpdateDocumentFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type string

const (
	FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9TypeDropdown FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type = "dropdown"
)

func (e FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type) ToPointer() *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponseValues struct {
	Value string `json:"value"`
}

func (o *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponseValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldsFieldMeta9 struct {
	Label        *string                                                                                            `json:"label,omitempty"`
	Placeholder  *string                                                                                            `json:"placeholder,omitempty"`
	Required     *bool                                                                                              `json:"required,omitempty"`
	ReadOnly     *bool                                                                                              `json:"readOnly,omitempty"`
	Type         FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type `json:"type"`
	Values       []FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponseValues                                  `json:"values,omitempty"`
	DefaultValue *string                                                                                            `json:"defaultValue,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldMeta9) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldMeta9) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldMeta9) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldMeta9) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldMeta9) GetType() FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldMeta9) GetValues() []FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponseValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateDocumentFieldsFieldMeta9) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type string

const (
	FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8TypeCheckbox FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type = "checkbox"
)

func (e FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type) ToPointer() *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldsFieldMeta8 struct {
	Label            *string                                                                                            `json:"label,omitempty"`
	Placeholder      *string                                                                                            `json:"placeholder,omitempty"`
	Required         *bool                                                                                              `json:"required,omitempty"`
	ReadOnly         *bool                                                                                              `json:"readOnly,omitempty"`
	Type             FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type `json:"type"`
	Values           []FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsValues                                          `json:"values,omitempty"`
	ValidationRule   *string                                                                                            `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                                           `json:"validationLength,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldMeta8) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldMeta8) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldMeta8) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldMeta8) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldMeta8) GetType() FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldMeta8) GetValues() []FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateDocumentFieldsFieldMeta8) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldUpdateDocumentFieldsFieldMeta8) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType string

const (
	FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsTypeRadio FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType = "radio"
)

func (e FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType) ToPointer() *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldUpdateDocumentFieldsFieldMetaValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldsFieldMetaValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateDocumentFieldsFieldMetaValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateDocumentFieldsFieldMeta7 struct {
	Label       *string                                                                                           `json:"label,omitempty"`
	Placeholder *string                                                                                           `json:"placeholder,omitempty"`
	Required    *bool                                                                                             `json:"required,omitempty"`
	ReadOnly    *bool                                                                                             `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType `json:"type"`
	Values      []FieldUpdateDocumentFieldsFieldMetaValues                                                        `json:"values,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldMeta7) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldMeta7) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldMeta7) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldMeta7) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldMeta7) GetType() FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldMeta7) GetValues() []FieldUpdateDocumentFieldsFieldMetaValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType string

const (
	FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyTypeNumber FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType = "number"
)

func (e FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType) ToPointer() *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMeta6 struct {
	Label        *string                                                                                     `json:"label,omitempty"`
	Placeholder  *string                                                                                     `json:"placeholder,omitempty"`
	Required     *bool                                                                                       `json:"required,omitempty"`
	ReadOnly     *bool                                                                                       `json:"readOnly,omitempty"`
	Type         FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType `json:"type"`
	NumberFormat *string                                                                                     `json:"numberFormat,omitempty"`
	Value        *string                                                                                     `json:"value,omitempty"`
	MinValue     *float64                                                                                    `json:"minValue,omitempty"`
	MaxValue     *float64                                                                                    `json:"maxValue,omitempty"`
	FontSize     *float64                                                                                    `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldMeta6) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldMeta6) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldMeta6) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldMeta6) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldMeta6) GetType() FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldMeta6) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldUpdateDocumentFieldsFieldMeta6) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldUpdateDocumentFieldsFieldMeta6) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldUpdateDocumentFieldsFieldMeta6) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldUpdateDocumentFieldsFieldMeta6) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType string

const (
	FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONTypeText FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType = "text"
)

func (e FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType) ToPointer() *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMeta5 struct {
	Label          *string                                                                         `json:"label,omitempty"`
	Placeholder    *string                                                                         `json:"placeholder,omitempty"`
	Required       *bool                                                                           `json:"required,omitempty"`
	ReadOnly       *bool                                                                           `json:"readOnly,omitempty"`
	Type           FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType `json:"type"`
	Text           *string                                                                         `json:"text,omitempty"`
	CharacterLimit *float64                                                                        `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                        `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldMeta5) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldMeta5) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldMeta5) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldMeta5) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldMeta5) GetType() FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldMeta5) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldUpdateDocumentFieldsFieldMeta5) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldUpdateDocumentFieldsFieldMeta5) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type string

const (
	FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200TypeDate FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type = "date"
)

func (e FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type) ToPointer() *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMeta4 struct {
	Label       *string                                                          `json:"label,omitempty"`
	Placeholder *string                                                          `json:"placeholder,omitempty"`
	Required    *bool                                                            `json:"required,omitempty"`
	ReadOnly    *bool                                                            `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type `json:"type"`
	FontSize    *float64                                                         `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldMeta4) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldMeta4) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldMeta4) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldMeta4) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldMeta4) GetType() FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldMeta4) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponseType string

const (
	FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponseTypeEmail FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponseType = "email"
)

func (e FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponseType) ToPointer() *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponseType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponseType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMeta3 struct {
	Label       *string                                                       `json:"label,omitempty"`
	Placeholder *string                                                       `json:"placeholder,omitempty"`
	Required    *bool                                                         `json:"required,omitempty"`
	ReadOnly    *bool                                                         `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponseType `json:"type"`
	FontSize    *float64                                                      `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldMeta3) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldMeta3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldMeta3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldMeta3) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldMeta3) GetType() FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponseType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsResponseType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldMeta3) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsType string

const (
	FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsTypeName FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsType = "name"
)

func (e FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsType) ToPointer() *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMeta2 struct {
	Label       *string                                               `json:"label,omitempty"`
	Placeholder *string                                               `json:"placeholder,omitempty"`
	Required    *bool                                                 `json:"required,omitempty"`
	ReadOnly    *bool                                                 `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsType `json:"type"`
	FontSize    *float64                                              `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldMeta2) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldMeta2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldMeta2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldMeta2) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldMeta2) GetType() FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldMetaDocumentsFieldsType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldMeta2) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldsFieldMetaType string

const (
	FieldUpdateDocumentFieldsFieldMetaTypeInitials FieldUpdateDocumentFieldsFieldMetaType = "initials"
)

func (e FieldUpdateDocumentFieldsFieldMetaType) ToPointer() *FieldUpdateDocumentFieldsFieldMetaType {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldUpdateDocumentFieldsFieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaType: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMeta1 struct {
	Label       *string                                `json:"label,omitempty"`
	Placeholder *string                                `json:"placeholder,omitempty"`
	Required    *bool                                  `json:"required,omitempty"`
	ReadOnly    *bool                                  `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsFieldMetaType `json:"type"`
	FontSize    *float64                               `json:"fontSize,omitempty"`
}

func (o *FieldUpdateDocumentFieldsFieldMeta1) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateDocumentFieldsFieldMeta1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateDocumentFieldsFieldMeta1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateDocumentFieldsFieldMeta1) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateDocumentFieldsFieldMeta1) GetType() FieldUpdateDocumentFieldsFieldMetaType {
	if o == nil {
		return FieldUpdateDocumentFieldsFieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsFieldMeta1) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateDocumentFieldsFieldMetaUnionType string

const (
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta1 FieldUpdateDocumentFieldsFieldMetaUnionType = "field-updateDocumentFields_fieldMeta_1"
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta2 FieldUpdateDocumentFieldsFieldMetaUnionType = "field-updateDocumentFields_fieldMeta_2"
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta3 FieldUpdateDocumentFieldsFieldMetaUnionType = "field-updateDocumentFields_fieldMeta_3"
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta4 FieldUpdateDocumentFieldsFieldMetaUnionType = "field-updateDocumentFields_fieldMeta_4"
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta5 FieldUpdateDocumentFieldsFieldMetaUnionType = "field-updateDocumentFields_fieldMeta_5"
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta6 FieldUpdateDocumentFieldsFieldMetaUnionType = "field-updateDocumentFields_fieldMeta_6"
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta7 FieldUpdateDocumentFieldsFieldMetaUnionType = "field-updateDocumentFields_fieldMeta_7"
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta8 FieldUpdateDocumentFieldsFieldMetaUnionType = "field-updateDocumentFields_fieldMeta_8"
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta9 FieldUpdateDocumentFieldsFieldMetaUnionType = "field-updateDocumentFields_fieldMeta_9"
)

type FieldUpdateDocumentFieldsFieldMeta struct {
	FieldUpdateDocumentFieldsFieldMeta1 *FieldUpdateDocumentFieldsFieldMeta1 `queryParam:"inline"`
	FieldUpdateDocumentFieldsFieldMeta2 *FieldUpdateDocumentFieldsFieldMeta2 `queryParam:"inline"`
	FieldUpdateDocumentFieldsFieldMeta3 *FieldUpdateDocumentFieldsFieldMeta3 `queryParam:"inline"`
	FieldUpdateDocumentFieldsFieldMeta4 *FieldUpdateDocumentFieldsFieldMeta4 `queryParam:"inline"`
	FieldUpdateDocumentFieldsFieldMeta5 *FieldUpdateDocumentFieldsFieldMeta5 `queryParam:"inline"`
	FieldUpdateDocumentFieldsFieldMeta6 *FieldUpdateDocumentFieldsFieldMeta6 `queryParam:"inline"`
	FieldUpdateDocumentFieldsFieldMeta7 *FieldUpdateDocumentFieldsFieldMeta7 `queryParam:"inline"`
	FieldUpdateDocumentFieldsFieldMeta8 *FieldUpdateDocumentFieldsFieldMeta8 `queryParam:"inline"`
	FieldUpdateDocumentFieldsFieldMeta9 *FieldUpdateDocumentFieldsFieldMeta9 `queryParam:"inline"`

	Type FieldUpdateDocumentFieldsFieldMetaUnionType
}

func CreateFieldUpdateDocumentFieldsFieldMetaFieldUpdateDocumentFieldsFieldMeta1(fieldUpdateDocumentFieldsFieldMeta1 FieldUpdateDocumentFieldsFieldMeta1) FieldUpdateDocumentFieldsFieldMeta {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta1

	return FieldUpdateDocumentFieldsFieldMeta{
		FieldUpdateDocumentFieldsFieldMeta1: &fieldUpdateDocumentFieldsFieldMeta1,
		Type:                                typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldMetaFieldUpdateDocumentFieldsFieldMeta2(fieldUpdateDocumentFieldsFieldMeta2 FieldUpdateDocumentFieldsFieldMeta2) FieldUpdateDocumentFieldsFieldMeta {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta2

	return FieldUpdateDocumentFieldsFieldMeta{
		FieldUpdateDocumentFieldsFieldMeta2: &fieldUpdateDocumentFieldsFieldMeta2,
		Type:                                typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldMetaFieldUpdateDocumentFieldsFieldMeta3(fieldUpdateDocumentFieldsFieldMeta3 FieldUpdateDocumentFieldsFieldMeta3) FieldUpdateDocumentFieldsFieldMeta {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta3

	return FieldUpdateDocumentFieldsFieldMeta{
		FieldUpdateDocumentFieldsFieldMeta3: &fieldUpdateDocumentFieldsFieldMeta3,
		Type:                                typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldMetaFieldUpdateDocumentFieldsFieldMeta4(fieldUpdateDocumentFieldsFieldMeta4 FieldUpdateDocumentFieldsFieldMeta4) FieldUpdateDocumentFieldsFieldMeta {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta4

	return FieldUpdateDocumentFieldsFieldMeta{
		FieldUpdateDocumentFieldsFieldMeta4: &fieldUpdateDocumentFieldsFieldMeta4,
		Type:                                typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldMetaFieldUpdateDocumentFieldsFieldMeta5(fieldUpdateDocumentFieldsFieldMeta5 FieldUpdateDocumentFieldsFieldMeta5) FieldUpdateDocumentFieldsFieldMeta {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta5

	return FieldUpdateDocumentFieldsFieldMeta{
		FieldUpdateDocumentFieldsFieldMeta5: &fieldUpdateDocumentFieldsFieldMeta5,
		Type:                                typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldMetaFieldUpdateDocumentFieldsFieldMeta6(fieldUpdateDocumentFieldsFieldMeta6 FieldUpdateDocumentFieldsFieldMeta6) FieldUpdateDocumentFieldsFieldMeta {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta6

	return FieldUpdateDocumentFieldsFieldMeta{
		FieldUpdateDocumentFieldsFieldMeta6: &fieldUpdateDocumentFieldsFieldMeta6,
		Type:                                typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldMetaFieldUpdateDocumentFieldsFieldMeta7(fieldUpdateDocumentFieldsFieldMeta7 FieldUpdateDocumentFieldsFieldMeta7) FieldUpdateDocumentFieldsFieldMeta {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta7

	return FieldUpdateDocumentFieldsFieldMeta{
		FieldUpdateDocumentFieldsFieldMeta7: &fieldUpdateDocumentFieldsFieldMeta7,
		Type:                                typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldMetaFieldUpdateDocumentFieldsFieldMeta8(fieldUpdateDocumentFieldsFieldMeta8 FieldUpdateDocumentFieldsFieldMeta8) FieldUpdateDocumentFieldsFieldMeta {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta8

	return FieldUpdateDocumentFieldsFieldMeta{
		FieldUpdateDocumentFieldsFieldMeta8: &fieldUpdateDocumentFieldsFieldMeta8,
		Type:                                typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldMetaFieldUpdateDocumentFieldsFieldMeta9(fieldUpdateDocumentFieldsFieldMeta9 FieldUpdateDocumentFieldsFieldMeta9) FieldUpdateDocumentFieldsFieldMeta {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta9

	return FieldUpdateDocumentFieldsFieldMeta{
		FieldUpdateDocumentFieldsFieldMeta9: &fieldUpdateDocumentFieldsFieldMeta9,
		Type:                                typ,
	}
}

func (u *FieldUpdateDocumentFieldsFieldMeta) UnmarshalJSON(data []byte) error {

	var fieldUpdateDocumentFieldsFieldMeta1 FieldUpdateDocumentFieldsFieldMeta1 = FieldUpdateDocumentFieldsFieldMeta1{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMeta1, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFieldMeta1 = &fieldUpdateDocumentFieldsFieldMeta1
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta1
		return nil
	}

	var fieldUpdateDocumentFieldsFieldMeta2 FieldUpdateDocumentFieldsFieldMeta2 = FieldUpdateDocumentFieldsFieldMeta2{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMeta2, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFieldMeta2 = &fieldUpdateDocumentFieldsFieldMeta2
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta2
		return nil
	}

	var fieldUpdateDocumentFieldsFieldMeta3 FieldUpdateDocumentFieldsFieldMeta3 = FieldUpdateDocumentFieldsFieldMeta3{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMeta3, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFieldMeta3 = &fieldUpdateDocumentFieldsFieldMeta3
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta3
		return nil
	}

	var fieldUpdateDocumentFieldsFieldMeta4 FieldUpdateDocumentFieldsFieldMeta4 = FieldUpdateDocumentFieldsFieldMeta4{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMeta4, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFieldMeta4 = &fieldUpdateDocumentFieldsFieldMeta4
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta4
		return nil
	}

	var fieldUpdateDocumentFieldsFieldMeta7 FieldUpdateDocumentFieldsFieldMeta7 = FieldUpdateDocumentFieldsFieldMeta7{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMeta7, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFieldMeta7 = &fieldUpdateDocumentFieldsFieldMeta7
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta7
		return nil
	}

	var fieldUpdateDocumentFieldsFieldMeta9 FieldUpdateDocumentFieldsFieldMeta9 = FieldUpdateDocumentFieldsFieldMeta9{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMeta9, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFieldMeta9 = &fieldUpdateDocumentFieldsFieldMeta9
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta9
		return nil
	}

	var fieldUpdateDocumentFieldsFieldMeta5 FieldUpdateDocumentFieldsFieldMeta5 = FieldUpdateDocumentFieldsFieldMeta5{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMeta5, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFieldMeta5 = &fieldUpdateDocumentFieldsFieldMeta5
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta5
		return nil
	}

	var fieldUpdateDocumentFieldsFieldMeta8 FieldUpdateDocumentFieldsFieldMeta8 = FieldUpdateDocumentFieldsFieldMeta8{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMeta8, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFieldMeta8 = &fieldUpdateDocumentFieldsFieldMeta8
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta8
		return nil
	}

	var fieldUpdateDocumentFieldsFieldMeta6 FieldUpdateDocumentFieldsFieldMeta6 = FieldUpdateDocumentFieldsFieldMeta6{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMeta6, "", true, true); err == nil {
		u.FieldUpdateDocumentFieldsFieldMeta6 = &fieldUpdateDocumentFieldsFieldMeta6
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMeta6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldUpdateDocumentFieldsFieldMeta", string(data))
}

func (u FieldUpdateDocumentFieldsFieldMeta) MarshalJSON() ([]byte, error) {
	if u.FieldUpdateDocumentFieldsFieldMeta1 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMeta1, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldMeta2 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMeta2, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldMeta3 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMeta3, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldMeta4 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMeta4, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldMeta5 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMeta5, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldMeta6 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMeta6, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldMeta7 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMeta7, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldMeta8 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMeta8, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldMeta9 != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMeta9, "", true)
	}

	return nil, errors.New("could not marshal union type FieldUpdateDocumentFieldsFieldMeta: all fields are null")
}

type FieldUpdateDocumentFieldsDocumentsFieldsFields struct {
	Type        FieldUpdateDocumentFieldsType `json:"type"`
	ID          int64                         `json:"id"`
	SecondaryID string                        `json:"secondaryId"`
	DocumentID  *int64                        `json:"documentId"`
	TemplateID  *int64                        `json:"templateId"`
	RecipientID int64                         `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                             `json:"page"`
	PositionX  any                                 `json:"positionX,omitempty"`
	PositionY  any                                 `json:"positionY,omitempty"`
	Width      any                                 `json:"width,omitempty"`
	Height     any                                 `json:"height,omitempty"`
	CustomText string                              `json:"customText"`
	Inserted   bool                                `json:"inserted"`
	FieldMeta  *FieldUpdateDocumentFieldsFieldMeta `json:"fieldMeta"`
}

func (o *FieldUpdateDocumentFieldsDocumentsFieldsFields) GetType() FieldUpdateDocumentFieldsType {
	if o == nil {
		return FieldUpdateDocumentFieldsType("")
	}
	return o.Type
}

func (o *FieldUpdateDocumentFieldsDocumentsFieldsFields) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *FieldUpdateDocumentFieldsDocumentsFieldsFields) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *FieldUpdateDocumentFieldsDocumentsFieldsFields) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *FieldUpdateDocumentFieldsDocumentsFieldsFields) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *FieldUpdateDocumentFieldsDocumentsFieldsFields) GetRecipientID() int64 {
	if o == nil {
		return 0
	}
	return o.RecipientID
}

func (o *FieldUpdateDocumentFieldsDocumentsFieldsFields) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *FieldUpdateDocumentFieldsDocumentsFieldsFields) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *FieldUpdateDocumentFieldsDocumentsFieldsFields) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *FieldUpdateDocumentFieldsDocumentsFieldsFields) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateDocumentFieldsDocumentsFieldsFields) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *FieldUpdateDocumentFieldsDocumentsFieldsFields) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *FieldUpdateDocumentFieldsDocumentsFieldsFields) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *FieldUpdateDocumentFieldsDocumentsFieldsFields) GetFieldMeta() *FieldUpdateDocumentFieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

// FieldUpdateDocumentFieldsResponseBody - Successful response
type FieldUpdateDocumentFieldsResponseBody struct {
	Fields []FieldUpdateDocumentFieldsDocumentsFieldsFields `json:"fields"`
}

func (o *FieldUpdateDocumentFieldsResponseBody) GetFields() []FieldUpdateDocumentFieldsDocumentsFieldsFields {
	if o == nil {
		return []FieldUpdateDocumentFieldsDocumentsFieldsFields{}
	}
	return o.Fields
}

type FieldUpdateDocumentFieldsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldUpdateDocumentFieldsResponseBody
}

func (o *FieldUpdateDocumentFieldsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FieldUpdateDocumentFieldsResponse) GetObject() *FieldUpdateDocumentFieldsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
