// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldCreateTemplateFieldsTypeDropdownRequest1 string

const (
	FieldCreateTemplateFieldsTypeDropdownRequest1Dropdown FieldCreateTemplateFieldsTypeDropdownRequest1 = "DROPDOWN"
)

func (e FieldCreateTemplateFieldsTypeDropdownRequest1) ToPointer() *FieldCreateTemplateFieldsTypeDropdownRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeDropdownRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = FieldCreateTemplateFieldsTypeDropdownRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeDropdownRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldsTypeDropdownRequest2 string

const (
	FieldCreateTemplateFieldsTypeDropdownRequest2Dropdown FieldCreateTemplateFieldsTypeDropdownRequest2 = "dropdown"
)

func (e FieldCreateTemplateFieldsTypeDropdownRequest2) ToPointer() *FieldCreateTemplateFieldsTypeDropdownRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeDropdownRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateTemplateFieldsTypeDropdownRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeDropdownRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldsValueDropdown struct {
	Value string `json:"value"`
}

func (f FieldCreateTemplateFieldsValueDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsValueDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsValueDropdown) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldsFieldMetaDropdownRequest struct {
	Label        *string                                       `json:"label,omitempty"`
	Placeholder  *string                                       `json:"placeholder,omitempty"`
	Required     *bool                                         `json:"required,omitempty"`
	ReadOnly     *bool                                         `json:"readOnly,omitempty"`
	Type         FieldCreateTemplateFieldsTypeDropdownRequest2 `json:"type"`
	Values       []FieldCreateTemplateFieldsValueDropdown      `json:"values,omitempty"`
	DefaultValue *string                                       `json:"defaultValue,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaDropdownRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaDropdownRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaDropdownRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaDropdownRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaDropdownRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaDropdownRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaDropdownRequest) GetType() FieldCreateTemplateFieldsTypeDropdownRequest2 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeDropdownRequest2("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaDropdownRequest) GetValues() []FieldCreateTemplateFieldsValueDropdown {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateTemplateFieldsFieldMetaDropdownRequest) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldCreateTemplateFieldsFieldDropdown struct {
	Type      FieldCreateTemplateFieldsTypeDropdownRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldMetaDropdownRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldsFieldDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldDropdown) GetType() FieldCreateTemplateFieldsTypeDropdownRequest1 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeDropdownRequest1("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldDropdown) GetFieldMeta() *FieldCreateTemplateFieldsFieldMetaDropdownRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFieldDropdown) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFieldDropdown) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFieldDropdown) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFieldDropdown) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFieldDropdown) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFieldDropdown) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsTypeCheckboxRequest1 string

const (
	FieldCreateTemplateFieldsTypeCheckboxRequest1Checkbox FieldCreateTemplateFieldsTypeCheckboxRequest1 = "CHECKBOX"
)

func (e FieldCreateTemplateFieldsTypeCheckboxRequest1) ToPointer() *FieldCreateTemplateFieldsTypeCheckboxRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeCheckboxRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = FieldCreateTemplateFieldsTypeCheckboxRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeCheckboxRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldsTypeCheckboxRequest2 string

const (
	FieldCreateTemplateFieldsTypeCheckboxRequest2Checkbox FieldCreateTemplateFieldsTypeCheckboxRequest2 = "checkbox"
)

func (e FieldCreateTemplateFieldsTypeCheckboxRequest2) ToPointer() *FieldCreateTemplateFieldsTypeCheckboxRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeCheckboxRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateTemplateFieldsTypeCheckboxRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeCheckboxRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldsValueCheckbox struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldCreateTemplateFieldsValueCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsValueCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsValueCheckbox) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateTemplateFieldsValueCheckbox) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateTemplateFieldsValueCheckbox) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldsFieldMetaCheckboxRequest struct {
	Label            *string                                       `json:"label,omitempty"`
	Placeholder      *string                                       `json:"placeholder,omitempty"`
	Required         *bool                                         `json:"required,omitempty"`
	ReadOnly         *bool                                         `json:"readOnly,omitempty"`
	Type             FieldCreateTemplateFieldsTypeCheckboxRequest2 `json:"type"`
	Values           []FieldCreateTemplateFieldsValueCheckbox      `json:"values,omitempty"`
	ValidationRule   *string                                       `json:"validationRule,omitempty"`
	ValidationLength *float64                                      `json:"validationLength,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaCheckboxRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaCheckboxRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaCheckboxRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaCheckboxRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaCheckboxRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaCheckboxRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaCheckboxRequest) GetType() FieldCreateTemplateFieldsTypeCheckboxRequest2 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeCheckboxRequest2("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaCheckboxRequest) GetValues() []FieldCreateTemplateFieldsValueCheckbox {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateTemplateFieldsFieldMetaCheckboxRequest) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldCreateTemplateFieldsFieldMetaCheckboxRequest) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldCreateTemplateFieldsFieldCheckbox struct {
	Type      FieldCreateTemplateFieldsTypeCheckboxRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldMetaCheckboxRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldsFieldCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldCheckbox) GetType() FieldCreateTemplateFieldsTypeCheckboxRequest1 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeCheckboxRequest1("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldCheckbox) GetFieldMeta() *FieldCreateTemplateFieldsFieldMetaCheckboxRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFieldCheckbox) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFieldCheckbox) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFieldCheckbox) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFieldCheckbox) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFieldCheckbox) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFieldCheckbox) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsTypeRadioRequest1 string

const (
	FieldCreateTemplateFieldsTypeRadioRequest1Radio FieldCreateTemplateFieldsTypeRadioRequest1 = "RADIO"
)

func (e FieldCreateTemplateFieldsTypeRadioRequest1) ToPointer() *FieldCreateTemplateFieldsTypeRadioRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeRadioRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = FieldCreateTemplateFieldsTypeRadioRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeRadioRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldsTypeRadioRequest2 string

const (
	FieldCreateTemplateFieldsTypeRadioRequest2Radio FieldCreateTemplateFieldsTypeRadioRequest2 = "radio"
)

func (e FieldCreateTemplateFieldsTypeRadioRequest2) ToPointer() *FieldCreateTemplateFieldsTypeRadioRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeRadioRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateTemplateFieldsTypeRadioRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeRadioRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldsValueRadio struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldCreateTemplateFieldsValueRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsValueRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsValueRadio) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateTemplateFieldsValueRadio) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateTemplateFieldsValueRadio) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldsFieldMetaRadioRequest struct {
	Label       *string                                    `json:"label,omitempty"`
	Placeholder *string                                    `json:"placeholder,omitempty"`
	Required    *bool                                      `json:"required,omitempty"`
	ReadOnly    *bool                                      `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsTypeRadioRequest2 `json:"type"`
	Values      []FieldCreateTemplateFieldsValueRadio      `json:"values,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaRadioRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaRadioRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaRadioRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaRadioRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaRadioRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaRadioRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaRadioRequest) GetType() FieldCreateTemplateFieldsTypeRadioRequest2 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeRadioRequest2("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaRadioRequest) GetValues() []FieldCreateTemplateFieldsValueRadio {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldCreateTemplateFieldsFieldRadio struct {
	Type      FieldCreateTemplateFieldsTypeRadioRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldMetaRadioRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldsFieldRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldRadio) GetType() FieldCreateTemplateFieldsTypeRadioRequest1 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeRadioRequest1("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldRadio) GetFieldMeta() *FieldCreateTemplateFieldsFieldMetaRadioRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFieldRadio) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFieldRadio) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFieldRadio) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFieldRadio) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFieldRadio) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFieldRadio) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsTypeNumberRequest1 string

const (
	FieldCreateTemplateFieldsTypeNumberRequest1Number FieldCreateTemplateFieldsTypeNumberRequest1 = "NUMBER"
)

func (e FieldCreateTemplateFieldsTypeNumberRequest1) ToPointer() *FieldCreateTemplateFieldsTypeNumberRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeNumberRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = FieldCreateTemplateFieldsTypeNumberRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeNumberRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldsTypeNumberRequest2 string

const (
	FieldCreateTemplateFieldsTypeNumberRequest2Number FieldCreateTemplateFieldsTypeNumberRequest2 = "number"
)

func (e FieldCreateTemplateFieldsTypeNumberRequest2) ToPointer() *FieldCreateTemplateFieldsTypeNumberRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeNumberRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateTemplateFieldsTypeNumberRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeNumberRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldsTextAlignNumber string

const (
	FieldCreateTemplateFieldsTextAlignNumberLeft   FieldCreateTemplateFieldsTextAlignNumber = "left"
	FieldCreateTemplateFieldsTextAlignNumberCenter FieldCreateTemplateFieldsTextAlignNumber = "center"
	FieldCreateTemplateFieldsTextAlignNumberRight  FieldCreateTemplateFieldsTextAlignNumber = "right"
)

func (e FieldCreateTemplateFieldsTextAlignNumber) ToPointer() *FieldCreateTemplateFieldsTextAlignNumber {
	return &e
}
func (e *FieldCreateTemplateFieldsTextAlignNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldsTextAlignNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTextAlignNumber: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMetaNumberRequest struct {
	Label        *string                                     `json:"label,omitempty"`
	Placeholder  *string                                     `json:"placeholder,omitempty"`
	Required     *bool                                       `json:"required,omitempty"`
	ReadOnly     *bool                                       `json:"readOnly,omitempty"`
	Type         FieldCreateTemplateFieldsTypeNumberRequest2 `json:"type"`
	NumberFormat *string                                     `json:"numberFormat,omitempty"`
	Value        *string                                     `json:"value,omitempty"`
	MinValue     *float64                                    `json:"minValue,omitempty"`
	MaxValue     *float64                                    `json:"maxValue,omitempty"`
	FontSize     *float64                                    `json:"fontSize,omitempty"`
	TextAlign    *FieldCreateTemplateFieldsTextAlignNumber   `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaNumberRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaNumberRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberRequest) GetType() FieldCreateTemplateFieldsTypeNumberRequest2 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeNumberRequest2("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberRequest) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberRequest) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberRequest) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberRequest) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberRequest) GetTextAlign() *FieldCreateTemplateFieldsTextAlignNumber {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateTemplateFieldsFieldNumber struct {
	Type      FieldCreateTemplateFieldsTypeNumberRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldMetaNumberRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldsFieldNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldNumber) GetType() FieldCreateTemplateFieldsTypeNumberRequest1 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeNumberRequest1("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldNumber) GetFieldMeta() *FieldCreateTemplateFieldsFieldMetaNumberRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFieldNumber) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFieldNumber) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFieldNumber) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFieldNumber) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFieldNumber) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFieldNumber) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsTypeTextRequest1 string

const (
	FieldCreateTemplateFieldsTypeTextRequest1Text FieldCreateTemplateFieldsTypeTextRequest1 = "TEXT"
)

func (e FieldCreateTemplateFieldsTypeTextRequest1) ToPointer() *FieldCreateTemplateFieldsTypeTextRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeTextRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = FieldCreateTemplateFieldsTypeTextRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeTextRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldsTypeTextRequest2 string

const (
	FieldCreateTemplateFieldsTypeTextRequest2Text FieldCreateTemplateFieldsTypeTextRequest2 = "text"
)

func (e FieldCreateTemplateFieldsTypeTextRequest2) ToPointer() *FieldCreateTemplateFieldsTypeTextRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeTextRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateTemplateFieldsTypeTextRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeTextRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldsTextAlignText string

const (
	FieldCreateTemplateFieldsTextAlignTextLeft   FieldCreateTemplateFieldsTextAlignText = "left"
	FieldCreateTemplateFieldsTextAlignTextCenter FieldCreateTemplateFieldsTextAlignText = "center"
	FieldCreateTemplateFieldsTextAlignTextRight  FieldCreateTemplateFieldsTextAlignText = "right"
)

func (e FieldCreateTemplateFieldsTextAlignText) ToPointer() *FieldCreateTemplateFieldsTextAlignText {
	return &e
}
func (e *FieldCreateTemplateFieldsTextAlignText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldsTextAlignText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTextAlignText: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMetaTextRequest struct {
	Label          *string                                   `json:"label,omitempty"`
	Placeholder    *string                                   `json:"placeholder,omitempty"`
	Required       *bool                                     `json:"required,omitempty"`
	ReadOnly       *bool                                     `json:"readOnly,omitempty"`
	Type           FieldCreateTemplateFieldsTypeTextRequest2 `json:"type"`
	Text           *string                                   `json:"text,omitempty"`
	CharacterLimit *float64                                  `json:"characterLimit,omitempty"`
	FontSize       *float64                                  `json:"fontSize,omitempty"`
	TextAlign      *FieldCreateTemplateFieldsTextAlignText   `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaTextRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaTextRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaTextRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaTextRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaTextRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaTextRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaTextRequest) GetType() FieldCreateTemplateFieldsTypeTextRequest2 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeTextRequest2("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaTextRequest) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldCreateTemplateFieldsFieldMetaTextRequest) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldCreateTemplateFieldsFieldMetaTextRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateTemplateFieldsFieldMetaTextRequest) GetTextAlign() *FieldCreateTemplateFieldsTextAlignText {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateTemplateFieldsFieldText struct {
	Type      FieldCreateTemplateFieldsTypeTextRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldMetaTextRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldsFieldText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldText) GetType() FieldCreateTemplateFieldsTypeTextRequest1 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeTextRequest1("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldText) GetFieldMeta() *FieldCreateTemplateFieldsFieldMetaTextRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFieldText) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFieldText) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFieldText) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFieldText) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFieldText) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFieldText) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsTypeDateRequest1 string

const (
	FieldCreateTemplateFieldsTypeDateRequest1Date FieldCreateTemplateFieldsTypeDateRequest1 = "DATE"
)

func (e FieldCreateTemplateFieldsTypeDateRequest1) ToPointer() *FieldCreateTemplateFieldsTypeDateRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeDateRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = FieldCreateTemplateFieldsTypeDateRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeDateRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldsTypeDateRequest2 string

const (
	FieldCreateTemplateFieldsTypeDateRequest2Date FieldCreateTemplateFieldsTypeDateRequest2 = "date"
)

func (e FieldCreateTemplateFieldsTypeDateRequest2) ToPointer() *FieldCreateTemplateFieldsTypeDateRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeDateRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateTemplateFieldsTypeDateRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeDateRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldsTextAlignDate string

const (
	FieldCreateTemplateFieldsTextAlignDateLeft   FieldCreateTemplateFieldsTextAlignDate = "left"
	FieldCreateTemplateFieldsTextAlignDateCenter FieldCreateTemplateFieldsTextAlignDate = "center"
	FieldCreateTemplateFieldsTextAlignDateRight  FieldCreateTemplateFieldsTextAlignDate = "right"
)

func (e FieldCreateTemplateFieldsTextAlignDate) ToPointer() *FieldCreateTemplateFieldsTextAlignDate {
	return &e
}
func (e *FieldCreateTemplateFieldsTextAlignDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldsTextAlignDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTextAlignDate: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMetaDateRequest struct {
	Label       *string                                   `json:"label,omitempty"`
	Placeholder *string                                   `json:"placeholder,omitempty"`
	Required    *bool                                     `json:"required,omitempty"`
	ReadOnly    *bool                                     `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsTypeDateRequest2 `json:"type"`
	FontSize    *float64                                  `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateTemplateFieldsTextAlignDate   `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaDateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaDateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaDateRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaDateRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaDateRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaDateRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaDateRequest) GetType() FieldCreateTemplateFieldsTypeDateRequest2 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeDateRequest2("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaDateRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateTemplateFieldsFieldMetaDateRequest) GetTextAlign() *FieldCreateTemplateFieldsTextAlignDate {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateTemplateFieldsFieldDate struct {
	Type      FieldCreateTemplateFieldsTypeDateRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldMetaDateRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldsFieldDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldDate) GetType() FieldCreateTemplateFieldsTypeDateRequest1 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeDateRequest1("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldDate) GetFieldMeta() *FieldCreateTemplateFieldsFieldMetaDateRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFieldDate) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFieldDate) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFieldDate) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFieldDate) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFieldDate) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFieldDate) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsTypeEmailRequest1 string

const (
	FieldCreateTemplateFieldsTypeEmailRequest1Email FieldCreateTemplateFieldsTypeEmailRequest1 = "EMAIL"
)

func (e FieldCreateTemplateFieldsTypeEmailRequest1) ToPointer() *FieldCreateTemplateFieldsTypeEmailRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeEmailRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = FieldCreateTemplateFieldsTypeEmailRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeEmailRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldsTypeEmailRequest2 string

const (
	FieldCreateTemplateFieldsTypeEmailRequest2Email FieldCreateTemplateFieldsTypeEmailRequest2 = "email"
)

func (e FieldCreateTemplateFieldsTypeEmailRequest2) ToPointer() *FieldCreateTemplateFieldsTypeEmailRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeEmailRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateTemplateFieldsTypeEmailRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeEmailRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldsTextAlignEmail string

const (
	FieldCreateTemplateFieldsTextAlignEmailLeft   FieldCreateTemplateFieldsTextAlignEmail = "left"
	FieldCreateTemplateFieldsTextAlignEmailCenter FieldCreateTemplateFieldsTextAlignEmail = "center"
	FieldCreateTemplateFieldsTextAlignEmailRight  FieldCreateTemplateFieldsTextAlignEmail = "right"
)

func (e FieldCreateTemplateFieldsTextAlignEmail) ToPointer() *FieldCreateTemplateFieldsTextAlignEmail {
	return &e
}
func (e *FieldCreateTemplateFieldsTextAlignEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldsTextAlignEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTextAlignEmail: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMetaEmailRequest struct {
	Label       *string                                    `json:"label,omitempty"`
	Placeholder *string                                    `json:"placeholder,omitempty"`
	Required    *bool                                      `json:"required,omitempty"`
	ReadOnly    *bool                                      `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsTypeEmailRequest2 `json:"type"`
	FontSize    *float64                                   `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateTemplateFieldsTextAlignEmail   `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaEmailRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaEmailRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaEmailRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaEmailRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaEmailRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaEmailRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaEmailRequest) GetType() FieldCreateTemplateFieldsTypeEmailRequest2 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeEmailRequest2("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaEmailRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateTemplateFieldsFieldMetaEmailRequest) GetTextAlign() *FieldCreateTemplateFieldsTextAlignEmail {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateTemplateFieldsFieldEmail struct {
	Type      FieldCreateTemplateFieldsTypeEmailRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldMetaEmailRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldsFieldEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldEmail) GetType() FieldCreateTemplateFieldsTypeEmailRequest1 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeEmailRequest1("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldEmail) GetFieldMeta() *FieldCreateTemplateFieldsFieldMetaEmailRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFieldEmail) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFieldEmail) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFieldEmail) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFieldEmail) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFieldEmail) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFieldEmail) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsTypeNameRequest1 string

const (
	FieldCreateTemplateFieldsTypeNameRequest1Name FieldCreateTemplateFieldsTypeNameRequest1 = "NAME"
)

func (e FieldCreateTemplateFieldsTypeNameRequest1) ToPointer() *FieldCreateTemplateFieldsTypeNameRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeNameRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = FieldCreateTemplateFieldsTypeNameRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeNameRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldsTypeNameRequest2 string

const (
	FieldCreateTemplateFieldsTypeNameRequest2Name FieldCreateTemplateFieldsTypeNameRequest2 = "name"
)

func (e FieldCreateTemplateFieldsTypeNameRequest2) ToPointer() *FieldCreateTemplateFieldsTypeNameRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeNameRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateTemplateFieldsTypeNameRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeNameRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldsTextAlignName string

const (
	FieldCreateTemplateFieldsTextAlignNameLeft   FieldCreateTemplateFieldsTextAlignName = "left"
	FieldCreateTemplateFieldsTextAlignNameCenter FieldCreateTemplateFieldsTextAlignName = "center"
	FieldCreateTemplateFieldsTextAlignNameRight  FieldCreateTemplateFieldsTextAlignName = "right"
)

func (e FieldCreateTemplateFieldsTextAlignName) ToPointer() *FieldCreateTemplateFieldsTextAlignName {
	return &e
}
func (e *FieldCreateTemplateFieldsTextAlignName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldsTextAlignName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTextAlignName: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMetaNameRequest struct {
	Label       *string                                   `json:"label,omitempty"`
	Placeholder *string                                   `json:"placeholder,omitempty"`
	Required    *bool                                     `json:"required,omitempty"`
	ReadOnly    *bool                                     `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsTypeNameRequest2 `json:"type"`
	FontSize    *float64                                  `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateTemplateFieldsTextAlignName   `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaNameRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaNameRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaNameRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaNameRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaNameRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaNameRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaNameRequest) GetType() FieldCreateTemplateFieldsTypeNameRequest2 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeNameRequest2("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaNameRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateTemplateFieldsFieldMetaNameRequest) GetTextAlign() *FieldCreateTemplateFieldsTextAlignName {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateTemplateFieldsFieldName struct {
	Type      FieldCreateTemplateFieldsTypeNameRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldMetaNameRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldsFieldName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldName) GetType() FieldCreateTemplateFieldsTypeNameRequest1 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeNameRequest1("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldName) GetFieldMeta() *FieldCreateTemplateFieldsFieldMetaNameRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFieldName) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFieldName) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFieldName) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFieldName) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFieldName) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFieldName) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsTypeInitialsRequest1 string

const (
	FieldCreateTemplateFieldsTypeInitialsRequest1Initials FieldCreateTemplateFieldsTypeInitialsRequest1 = "INITIALS"
)

func (e FieldCreateTemplateFieldsTypeInitialsRequest1) ToPointer() *FieldCreateTemplateFieldsTypeInitialsRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeInitialsRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = FieldCreateTemplateFieldsTypeInitialsRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeInitialsRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldsTypeInitialsRequest2 string

const (
	FieldCreateTemplateFieldsTypeInitialsRequest2Initials FieldCreateTemplateFieldsTypeInitialsRequest2 = "initials"
)

func (e FieldCreateTemplateFieldsTypeInitialsRequest2) ToPointer() *FieldCreateTemplateFieldsTypeInitialsRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeInitialsRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateTemplateFieldsTypeInitialsRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeInitialsRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldsTextAlignInitials string

const (
	FieldCreateTemplateFieldsTextAlignInitialsLeft   FieldCreateTemplateFieldsTextAlignInitials = "left"
	FieldCreateTemplateFieldsTextAlignInitialsCenter FieldCreateTemplateFieldsTextAlignInitials = "center"
	FieldCreateTemplateFieldsTextAlignInitialsRight  FieldCreateTemplateFieldsTextAlignInitials = "right"
)

func (e FieldCreateTemplateFieldsTextAlignInitials) ToPointer() *FieldCreateTemplateFieldsTextAlignInitials {
	return &e
}
func (e *FieldCreateTemplateFieldsTextAlignInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldsTextAlignInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTextAlignInitials: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMetaInitialsRequest struct {
	Label       *string                                       `json:"label,omitempty"`
	Placeholder *string                                       `json:"placeholder,omitempty"`
	Required    *bool                                         `json:"required,omitempty"`
	ReadOnly    *bool                                         `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsTypeInitialsRequest2 `json:"type"`
	FontSize    *float64                                      `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateTemplateFieldsTextAlignInitials   `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaInitialsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaInitialsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaInitialsRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaInitialsRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaInitialsRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaInitialsRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaInitialsRequest) GetType() FieldCreateTemplateFieldsTypeInitialsRequest2 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeInitialsRequest2("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaInitialsRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateTemplateFieldsFieldMetaInitialsRequest) GetTextAlign() *FieldCreateTemplateFieldsTextAlignInitials {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateTemplateFieldsFieldInitials struct {
	Type      FieldCreateTemplateFieldsTypeInitialsRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldsFieldMetaInitialsRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldsFieldInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldInitials) GetType() FieldCreateTemplateFieldsTypeInitialsRequest1 {
	if o == nil {
		return FieldCreateTemplateFieldsTypeInitialsRequest1("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldInitials) GetFieldMeta() *FieldCreateTemplateFieldsFieldMetaInitialsRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldCreateTemplateFieldsFieldInitials) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFieldInitials) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFieldInitials) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFieldInitials) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFieldInitials) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFieldInitials) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsTypeFreeSignature string

const (
	FieldCreateTemplateFieldsTypeFreeSignatureFreeSignature FieldCreateTemplateFieldsTypeFreeSignature = "FREE_SIGNATURE"
)

func (e FieldCreateTemplateFieldsTypeFreeSignature) ToPointer() *FieldCreateTemplateFieldsTypeFreeSignature {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeFreeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldCreateTemplateFieldsTypeFreeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeFreeSignature: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldFreeSignature struct {
	Type FieldCreateTemplateFieldsTypeFreeSignature `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldsFieldFreeSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldFreeSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldFreeSignature) GetType() FieldCreateTemplateFieldsTypeFreeSignature {
	if o == nil {
		return FieldCreateTemplateFieldsTypeFreeSignature("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldFreeSignature) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFieldFreeSignature) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFieldFreeSignature) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFieldFreeSignature) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFieldFreeSignature) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFieldFreeSignature) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsTypeSignature string

const (
	FieldCreateTemplateFieldsTypeSignatureSignature FieldCreateTemplateFieldsTypeSignature = "SIGNATURE"
)

func (e FieldCreateTemplateFieldsTypeSignature) ToPointer() *FieldCreateTemplateFieldsTypeSignature {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = FieldCreateTemplateFieldsTypeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeSignature: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldSignature struct {
	Type FieldCreateTemplateFieldsTypeSignature `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldsFieldSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldSignature) GetType() FieldCreateTemplateFieldsTypeSignature {
	if o == nil {
		return FieldCreateTemplateFieldsTypeSignature("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldSignature) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFieldSignature) GetPageNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageNumber
}

func (o *FieldCreateTemplateFieldsFieldSignature) GetPageX() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageX
}

func (o *FieldCreateTemplateFieldsFieldSignature) GetPageY() float64 {
	if o == nil {
		return 0.0
	}
	return o.PageY
}

func (o *FieldCreateTemplateFieldsFieldSignature) GetWidth() float64 {
	if o == nil {
		return 0.0
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFieldSignature) GetHeight() float64 {
	if o == nil {
		return 0.0
	}
	return o.Height
}

type FieldCreateTemplateFieldsFieldUnionType string

const (
	FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldSignature     FieldCreateTemplateFieldsFieldUnionType = "field_createTemplateFields_field_Signature"
	FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldFreeSignature FieldCreateTemplateFieldsFieldUnionType = "field_createTemplateFields_field_FreeSignature"
	FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldInitials      FieldCreateTemplateFieldsFieldUnionType = "field_createTemplateFields_field_Initials"
	FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldName          FieldCreateTemplateFieldsFieldUnionType = "field_createTemplateFields_field_Name"
	FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldEmail         FieldCreateTemplateFieldsFieldUnionType = "field_createTemplateFields_field_Email"
	FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldDate          FieldCreateTemplateFieldsFieldUnionType = "field_createTemplateFields_field_Date"
	FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldText          FieldCreateTemplateFieldsFieldUnionType = "field_createTemplateFields_field_Text"
	FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldNumber        FieldCreateTemplateFieldsFieldUnionType = "field_createTemplateFields_field_Number"
	FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldRadio         FieldCreateTemplateFieldsFieldUnionType = "field_createTemplateFields_field_Radio"
	FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldCheckbox      FieldCreateTemplateFieldsFieldUnionType = "field_createTemplateFields_field_Checkbox"
	FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldDropdown      FieldCreateTemplateFieldsFieldUnionType = "field_createTemplateFields_field_Dropdown"
)

type FieldCreateTemplateFieldsFieldUnion struct {
	FieldCreateTemplateFieldsFieldSignature     *FieldCreateTemplateFieldsFieldSignature     `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldFreeSignature *FieldCreateTemplateFieldsFieldFreeSignature `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldInitials      *FieldCreateTemplateFieldsFieldInitials      `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldName          *FieldCreateTemplateFieldsFieldName          `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldEmail         *FieldCreateTemplateFieldsFieldEmail         `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldDate          *FieldCreateTemplateFieldsFieldDate          `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldText          *FieldCreateTemplateFieldsFieldText          `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldNumber        *FieldCreateTemplateFieldsFieldNumber        `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldRadio         *FieldCreateTemplateFieldsFieldRadio         `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldCheckbox      *FieldCreateTemplateFieldsFieldCheckbox      `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldDropdown      *FieldCreateTemplateFieldsFieldDropdown      `queryParam:"inline"`

	Type FieldCreateTemplateFieldsFieldUnionType
}

func CreateFieldCreateTemplateFieldsFieldUnionFieldCreateTemplateFieldsFieldSignature(fieldCreateTemplateFieldsFieldSignature FieldCreateTemplateFieldsFieldSignature) FieldCreateTemplateFieldsFieldUnion {
	typ := FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldSignature

	return FieldCreateTemplateFieldsFieldUnion{
		FieldCreateTemplateFieldsFieldSignature: &fieldCreateTemplateFieldsFieldSignature,
		Type:                                    typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldUnionFieldCreateTemplateFieldsFieldFreeSignature(fieldCreateTemplateFieldsFieldFreeSignature FieldCreateTemplateFieldsFieldFreeSignature) FieldCreateTemplateFieldsFieldUnion {
	typ := FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldFreeSignature

	return FieldCreateTemplateFieldsFieldUnion{
		FieldCreateTemplateFieldsFieldFreeSignature: &fieldCreateTemplateFieldsFieldFreeSignature,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldUnionFieldCreateTemplateFieldsFieldInitials(fieldCreateTemplateFieldsFieldInitials FieldCreateTemplateFieldsFieldInitials) FieldCreateTemplateFieldsFieldUnion {
	typ := FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldInitials

	return FieldCreateTemplateFieldsFieldUnion{
		FieldCreateTemplateFieldsFieldInitials: &fieldCreateTemplateFieldsFieldInitials,
		Type:                                   typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldUnionFieldCreateTemplateFieldsFieldName(fieldCreateTemplateFieldsFieldName FieldCreateTemplateFieldsFieldName) FieldCreateTemplateFieldsFieldUnion {
	typ := FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldName

	return FieldCreateTemplateFieldsFieldUnion{
		FieldCreateTemplateFieldsFieldName: &fieldCreateTemplateFieldsFieldName,
		Type:                               typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldUnionFieldCreateTemplateFieldsFieldEmail(fieldCreateTemplateFieldsFieldEmail FieldCreateTemplateFieldsFieldEmail) FieldCreateTemplateFieldsFieldUnion {
	typ := FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldEmail

	return FieldCreateTemplateFieldsFieldUnion{
		FieldCreateTemplateFieldsFieldEmail: &fieldCreateTemplateFieldsFieldEmail,
		Type:                                typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldUnionFieldCreateTemplateFieldsFieldDate(fieldCreateTemplateFieldsFieldDate FieldCreateTemplateFieldsFieldDate) FieldCreateTemplateFieldsFieldUnion {
	typ := FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldDate

	return FieldCreateTemplateFieldsFieldUnion{
		FieldCreateTemplateFieldsFieldDate: &fieldCreateTemplateFieldsFieldDate,
		Type:                               typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldUnionFieldCreateTemplateFieldsFieldText(fieldCreateTemplateFieldsFieldText FieldCreateTemplateFieldsFieldText) FieldCreateTemplateFieldsFieldUnion {
	typ := FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldText

	return FieldCreateTemplateFieldsFieldUnion{
		FieldCreateTemplateFieldsFieldText: &fieldCreateTemplateFieldsFieldText,
		Type:                               typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldUnionFieldCreateTemplateFieldsFieldNumber(fieldCreateTemplateFieldsFieldNumber FieldCreateTemplateFieldsFieldNumber) FieldCreateTemplateFieldsFieldUnion {
	typ := FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldNumber

	return FieldCreateTemplateFieldsFieldUnion{
		FieldCreateTemplateFieldsFieldNumber: &fieldCreateTemplateFieldsFieldNumber,
		Type:                                 typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldUnionFieldCreateTemplateFieldsFieldRadio(fieldCreateTemplateFieldsFieldRadio FieldCreateTemplateFieldsFieldRadio) FieldCreateTemplateFieldsFieldUnion {
	typ := FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldRadio

	return FieldCreateTemplateFieldsFieldUnion{
		FieldCreateTemplateFieldsFieldRadio: &fieldCreateTemplateFieldsFieldRadio,
		Type:                                typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldUnionFieldCreateTemplateFieldsFieldCheckbox(fieldCreateTemplateFieldsFieldCheckbox FieldCreateTemplateFieldsFieldCheckbox) FieldCreateTemplateFieldsFieldUnion {
	typ := FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldCheckbox

	return FieldCreateTemplateFieldsFieldUnion{
		FieldCreateTemplateFieldsFieldCheckbox: &fieldCreateTemplateFieldsFieldCheckbox,
		Type:                                   typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldUnionFieldCreateTemplateFieldsFieldDropdown(fieldCreateTemplateFieldsFieldDropdown FieldCreateTemplateFieldsFieldDropdown) FieldCreateTemplateFieldsFieldUnion {
	typ := FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldDropdown

	return FieldCreateTemplateFieldsFieldUnion{
		FieldCreateTemplateFieldsFieldDropdown: &fieldCreateTemplateFieldsFieldDropdown,
		Type:                                   typ,
	}
}

func (u *FieldCreateTemplateFieldsFieldUnion) UnmarshalJSON(data []byte) error {

	var fieldCreateTemplateFieldsFieldSignature FieldCreateTemplateFieldsFieldSignature = FieldCreateTemplateFieldsFieldSignature{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldSignature, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldSignature = &fieldCreateTemplateFieldsFieldSignature
		u.Type = FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldSignature
		return nil
	}

	var fieldCreateTemplateFieldsFieldFreeSignature FieldCreateTemplateFieldsFieldFreeSignature = FieldCreateTemplateFieldsFieldFreeSignature{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldFreeSignature, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldFreeSignature = &fieldCreateTemplateFieldsFieldFreeSignature
		u.Type = FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldFreeSignature
		return nil
	}

	var fieldCreateTemplateFieldsFieldInitials FieldCreateTemplateFieldsFieldInitials = FieldCreateTemplateFieldsFieldInitials{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldInitials, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldInitials = &fieldCreateTemplateFieldsFieldInitials
		u.Type = FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldInitials
		return nil
	}

	var fieldCreateTemplateFieldsFieldName FieldCreateTemplateFieldsFieldName = FieldCreateTemplateFieldsFieldName{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldName, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldName = &fieldCreateTemplateFieldsFieldName
		u.Type = FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldName
		return nil
	}

	var fieldCreateTemplateFieldsFieldEmail FieldCreateTemplateFieldsFieldEmail = FieldCreateTemplateFieldsFieldEmail{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldEmail, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldEmail = &fieldCreateTemplateFieldsFieldEmail
		u.Type = FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldEmail
		return nil
	}

	var fieldCreateTemplateFieldsFieldDate FieldCreateTemplateFieldsFieldDate = FieldCreateTemplateFieldsFieldDate{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldDate, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldDate = &fieldCreateTemplateFieldsFieldDate
		u.Type = FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldDate
		return nil
	}

	var fieldCreateTemplateFieldsFieldText FieldCreateTemplateFieldsFieldText = FieldCreateTemplateFieldsFieldText{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldText, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldText = &fieldCreateTemplateFieldsFieldText
		u.Type = FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldText
		return nil
	}

	var fieldCreateTemplateFieldsFieldNumber FieldCreateTemplateFieldsFieldNumber = FieldCreateTemplateFieldsFieldNumber{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldNumber, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldNumber = &fieldCreateTemplateFieldsFieldNumber
		u.Type = FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldNumber
		return nil
	}

	var fieldCreateTemplateFieldsFieldRadio FieldCreateTemplateFieldsFieldRadio = FieldCreateTemplateFieldsFieldRadio{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldRadio, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldRadio = &fieldCreateTemplateFieldsFieldRadio
		u.Type = FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldRadio
		return nil
	}

	var fieldCreateTemplateFieldsFieldCheckbox FieldCreateTemplateFieldsFieldCheckbox = FieldCreateTemplateFieldsFieldCheckbox{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldCheckbox, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldCheckbox = &fieldCreateTemplateFieldsFieldCheckbox
		u.Type = FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldCheckbox
		return nil
	}

	var fieldCreateTemplateFieldsFieldDropdown FieldCreateTemplateFieldsFieldDropdown = FieldCreateTemplateFieldsFieldDropdown{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldDropdown, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldDropdown = &fieldCreateTemplateFieldsFieldDropdown
		u.Type = FieldCreateTemplateFieldsFieldUnionTypeFieldCreateTemplateFieldsFieldDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldCreateTemplateFieldsFieldUnion", string(data))
}

func (u FieldCreateTemplateFieldsFieldUnion) MarshalJSON() ([]byte, error) {
	if u.FieldCreateTemplateFieldsFieldSignature != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldSignature, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldFreeSignature != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldFreeSignature, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldInitials != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldInitials, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldName != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldName, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldEmail != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldEmail, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldDate != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldDate, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldText != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldText, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldNumber != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldNumber, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldRadio != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldRadio, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldCheckbox != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldCheckbox, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldDropdown != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type FieldCreateTemplateFieldsFieldUnion: all fields are null")
}

type FieldCreateTemplateFieldsRequest struct {
	TemplateID float64                               `json:"templateId"`
	Fields     []FieldCreateTemplateFieldsFieldUnion `json:"fields"`
}

func (o *FieldCreateTemplateFieldsRequest) GetTemplateID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TemplateID
}

func (o *FieldCreateTemplateFieldsRequest) GetFields() []FieldCreateTemplateFieldsFieldUnion {
	if o == nil {
		return []FieldCreateTemplateFieldsFieldUnion{}
	}
	return o.Fields
}

type FieldCreateTemplateFieldsTypeResponse string

const (
	FieldCreateTemplateFieldsTypeResponseSignature     FieldCreateTemplateFieldsTypeResponse = "SIGNATURE"
	FieldCreateTemplateFieldsTypeResponseFreeSignature FieldCreateTemplateFieldsTypeResponse = "FREE_SIGNATURE"
	FieldCreateTemplateFieldsTypeResponseInitials      FieldCreateTemplateFieldsTypeResponse = "INITIALS"
	FieldCreateTemplateFieldsTypeResponseName          FieldCreateTemplateFieldsTypeResponse = "NAME"
	FieldCreateTemplateFieldsTypeResponseEmail         FieldCreateTemplateFieldsTypeResponse = "EMAIL"
	FieldCreateTemplateFieldsTypeResponseDate          FieldCreateTemplateFieldsTypeResponse = "DATE"
	FieldCreateTemplateFieldsTypeResponseText          FieldCreateTemplateFieldsTypeResponse = "TEXT"
	FieldCreateTemplateFieldsTypeResponseNumber        FieldCreateTemplateFieldsTypeResponse = "NUMBER"
	FieldCreateTemplateFieldsTypeResponseRadio         FieldCreateTemplateFieldsTypeResponse = "RADIO"
	FieldCreateTemplateFieldsTypeResponseCheckbox      FieldCreateTemplateFieldsTypeResponse = "CHECKBOX"
	FieldCreateTemplateFieldsTypeResponseDropdown      FieldCreateTemplateFieldsTypeResponse = "DROPDOWN"
)

func (e FieldCreateTemplateFieldsTypeResponse) ToPointer() *FieldCreateTemplateFieldsTypeResponse {
	return &e
}
func (e *FieldCreateTemplateFieldsTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldCreateTemplateFieldsTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTypeResponse: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMetaTypeDropdown string

const (
	FieldCreateTemplateFieldsFieldMetaTypeDropdownDropdown FieldCreateTemplateFieldsFieldMetaTypeDropdown = "dropdown"
)

func (e FieldCreateTemplateFieldsFieldMetaTypeDropdown) ToPointer() *FieldCreateTemplateFieldsFieldMetaTypeDropdown {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateTemplateFieldsFieldMetaTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaTypeDropdown: %v", v)
	}
}

type FieldCreateTemplateFieldsValueResponse3 struct {
	Value string `json:"value"`
}

func (f FieldCreateTemplateFieldsValueResponse3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsValueResponse3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsValueResponse3) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldsFieldMetaDropdownResponse struct {
	Label        *string                                        `json:"label,omitempty"`
	Placeholder  *string                                        `json:"placeholder,omitempty"`
	Required     *bool                                          `json:"required,omitempty"`
	ReadOnly     *bool                                          `json:"readOnly,omitempty"`
	Type         FieldCreateTemplateFieldsFieldMetaTypeDropdown `json:"type"`
	Values       []FieldCreateTemplateFieldsValueResponse3      `json:"values,omitempty"`
	DefaultValue *string                                        `json:"defaultValue,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaDropdownResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaDropdownResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaDropdownResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaDropdownResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaDropdownResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaDropdownResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaDropdownResponse) GetType() FieldCreateTemplateFieldsFieldMetaTypeDropdown {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaTypeDropdown("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaDropdownResponse) GetValues() []FieldCreateTemplateFieldsValueResponse3 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateTemplateFieldsFieldMetaDropdownResponse) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldCreateTemplateFieldsFieldMetaTypeCheckbox string

const (
	FieldCreateTemplateFieldsFieldMetaTypeCheckboxCheckbox FieldCreateTemplateFieldsFieldMetaTypeCheckbox = "checkbox"
)

func (e FieldCreateTemplateFieldsFieldMetaTypeCheckbox) ToPointer() *FieldCreateTemplateFieldsFieldMetaTypeCheckbox {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateTemplateFieldsFieldMetaTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaTypeCheckbox: %v", v)
	}
}

type FieldCreateTemplateFieldsValueResponse2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldCreateTemplateFieldsValueResponse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsValueResponse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsValueResponse2) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateTemplateFieldsValueResponse2) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateTemplateFieldsValueResponse2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldsFieldMetaCheckboxResponse struct {
	Label            *string                                        `json:"label,omitempty"`
	Placeholder      *string                                        `json:"placeholder,omitempty"`
	Required         *bool                                          `json:"required,omitempty"`
	ReadOnly         *bool                                          `json:"readOnly,omitempty"`
	Type             FieldCreateTemplateFieldsFieldMetaTypeCheckbox `json:"type"`
	Values           []FieldCreateTemplateFieldsValueResponse2      `json:"values,omitempty"`
	ValidationRule   *string                                        `json:"validationRule,omitempty"`
	ValidationLength *float64                                       `json:"validationLength,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaCheckboxResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaCheckboxResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaCheckboxResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaCheckboxResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaCheckboxResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaCheckboxResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaCheckboxResponse) GetType() FieldCreateTemplateFieldsFieldMetaTypeCheckbox {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaTypeCheckbox("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaCheckboxResponse) GetValues() []FieldCreateTemplateFieldsValueResponse2 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldCreateTemplateFieldsFieldMetaCheckboxResponse) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldCreateTemplateFieldsFieldMetaCheckboxResponse) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldCreateTemplateFieldsFieldMetaTypeRadio string

const (
	FieldCreateTemplateFieldsFieldMetaTypeRadioRadio FieldCreateTemplateFieldsFieldMetaTypeRadio = "radio"
)

func (e FieldCreateTemplateFieldsFieldMetaTypeRadio) ToPointer() *FieldCreateTemplateFieldsFieldMetaTypeRadio {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateTemplateFieldsFieldMetaTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaTypeRadio: %v", v)
	}
}

type FieldCreateTemplateFieldsValueResponse1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldCreateTemplateFieldsValueResponse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsValueResponse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsValueResponse1) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateTemplateFieldsValueResponse1) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldCreateTemplateFieldsValueResponse1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldCreateTemplateFieldsFieldMetaRadioResponse struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsFieldMetaTypeRadio `json:"type"`
	Values      []FieldCreateTemplateFieldsValueResponse1   `json:"values,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaRadioResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaRadioResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaRadioResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaRadioResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaRadioResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaRadioResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaRadioResponse) GetType() FieldCreateTemplateFieldsFieldMetaTypeRadio {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaTypeRadio("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaRadioResponse) GetValues() []FieldCreateTemplateFieldsValueResponse1 {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldCreateTemplateFieldsFieldMetaTypeNumber string

const (
	FieldCreateTemplateFieldsFieldMetaTypeNumberNumber FieldCreateTemplateFieldsFieldMetaTypeNumber = "number"
)

func (e FieldCreateTemplateFieldsFieldMetaTypeNumber) ToPointer() *FieldCreateTemplateFieldsFieldMetaTypeNumber {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateTemplateFieldsFieldMetaTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaTypeNumber: %v", v)
	}
}

type FieldCreateTemplateFieldsTextAlignResponse6 string

const (
	FieldCreateTemplateFieldsTextAlignResponse6Left   FieldCreateTemplateFieldsTextAlignResponse6 = "left"
	FieldCreateTemplateFieldsTextAlignResponse6Center FieldCreateTemplateFieldsTextAlignResponse6 = "center"
	FieldCreateTemplateFieldsTextAlignResponse6Right  FieldCreateTemplateFieldsTextAlignResponse6 = "right"
)

func (e FieldCreateTemplateFieldsTextAlignResponse6) ToPointer() *FieldCreateTemplateFieldsTextAlignResponse6 {
	return &e
}
func (e *FieldCreateTemplateFieldsTextAlignResponse6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldsTextAlignResponse6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTextAlignResponse6: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMetaNumberResponse struct {
	Label        *string                                      `json:"label,omitempty"`
	Placeholder  *string                                      `json:"placeholder,omitempty"`
	Required     *bool                                        `json:"required,omitempty"`
	ReadOnly     *bool                                        `json:"readOnly,omitempty"`
	Type         FieldCreateTemplateFieldsFieldMetaTypeNumber `json:"type"`
	NumberFormat *string                                      `json:"numberFormat,omitempty"`
	Value        *string                                      `json:"value,omitempty"`
	MinValue     *float64                                     `json:"minValue,omitempty"`
	MaxValue     *float64                                     `json:"maxValue,omitempty"`
	FontSize     *float64                                     `json:"fontSize,omitempty"`
	TextAlign    *FieldCreateTemplateFieldsTextAlignResponse6 `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaNumberResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaNumberResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberResponse) GetType() FieldCreateTemplateFieldsFieldMetaTypeNumber {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaTypeNumber("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberResponse) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberResponse) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberResponse) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberResponse) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateTemplateFieldsFieldMetaNumberResponse) GetTextAlign() *FieldCreateTemplateFieldsTextAlignResponse6 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateTemplateFieldsFieldMetaTypeText string

const (
	FieldCreateTemplateFieldsFieldMetaTypeTextText FieldCreateTemplateFieldsFieldMetaTypeText = "text"
)

func (e FieldCreateTemplateFieldsFieldMetaTypeText) ToPointer() *FieldCreateTemplateFieldsFieldMetaTypeText {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateTemplateFieldsFieldMetaTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaTypeText: %v", v)
	}
}

type FieldCreateTemplateFieldsTextAlignResponse5 string

const (
	FieldCreateTemplateFieldsTextAlignResponse5Left   FieldCreateTemplateFieldsTextAlignResponse5 = "left"
	FieldCreateTemplateFieldsTextAlignResponse5Center FieldCreateTemplateFieldsTextAlignResponse5 = "center"
	FieldCreateTemplateFieldsTextAlignResponse5Right  FieldCreateTemplateFieldsTextAlignResponse5 = "right"
)

func (e FieldCreateTemplateFieldsTextAlignResponse5) ToPointer() *FieldCreateTemplateFieldsTextAlignResponse5 {
	return &e
}
func (e *FieldCreateTemplateFieldsTextAlignResponse5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldsTextAlignResponse5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTextAlignResponse5: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMetaTextResponse struct {
	Label          *string                                      `json:"label,omitempty"`
	Placeholder    *string                                      `json:"placeholder,omitempty"`
	Required       *bool                                        `json:"required,omitempty"`
	ReadOnly       *bool                                        `json:"readOnly,omitempty"`
	Type           FieldCreateTemplateFieldsFieldMetaTypeText   `json:"type"`
	Text           *string                                      `json:"text,omitempty"`
	CharacterLimit *float64                                     `json:"characterLimit,omitempty"`
	FontSize       *float64                                     `json:"fontSize,omitempty"`
	TextAlign      *FieldCreateTemplateFieldsTextAlignResponse5 `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaTextResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaTextResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaTextResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaTextResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaTextResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaTextResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaTextResponse) GetType() FieldCreateTemplateFieldsFieldMetaTypeText {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaTypeText("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaTextResponse) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldCreateTemplateFieldsFieldMetaTextResponse) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldCreateTemplateFieldsFieldMetaTextResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateTemplateFieldsFieldMetaTextResponse) GetTextAlign() *FieldCreateTemplateFieldsTextAlignResponse5 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateTemplateFieldsFieldMetaTypeDate string

const (
	FieldCreateTemplateFieldsFieldMetaTypeDateDate FieldCreateTemplateFieldsFieldMetaTypeDate = "date"
)

func (e FieldCreateTemplateFieldsFieldMetaTypeDate) ToPointer() *FieldCreateTemplateFieldsFieldMetaTypeDate {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateTemplateFieldsFieldMetaTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaTypeDate: %v", v)
	}
}

type FieldCreateTemplateFieldsTextAlignResponse4 string

const (
	FieldCreateTemplateFieldsTextAlignResponse4Left   FieldCreateTemplateFieldsTextAlignResponse4 = "left"
	FieldCreateTemplateFieldsTextAlignResponse4Center FieldCreateTemplateFieldsTextAlignResponse4 = "center"
	FieldCreateTemplateFieldsTextAlignResponse4Right  FieldCreateTemplateFieldsTextAlignResponse4 = "right"
)

func (e FieldCreateTemplateFieldsTextAlignResponse4) ToPointer() *FieldCreateTemplateFieldsTextAlignResponse4 {
	return &e
}
func (e *FieldCreateTemplateFieldsTextAlignResponse4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldsTextAlignResponse4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTextAlignResponse4: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMetaDateResponse struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsFieldMetaTypeDate   `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateTemplateFieldsTextAlignResponse4 `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaDateResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaDateResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaDateResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaDateResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaDateResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaDateResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaDateResponse) GetType() FieldCreateTemplateFieldsFieldMetaTypeDate {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaTypeDate("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaDateResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateTemplateFieldsFieldMetaDateResponse) GetTextAlign() *FieldCreateTemplateFieldsTextAlignResponse4 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateTemplateFieldsFieldMetaTypeEmail string

const (
	FieldCreateTemplateFieldsFieldMetaTypeEmailEmail FieldCreateTemplateFieldsFieldMetaTypeEmail = "email"
)

func (e FieldCreateTemplateFieldsFieldMetaTypeEmail) ToPointer() *FieldCreateTemplateFieldsFieldMetaTypeEmail {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateTemplateFieldsFieldMetaTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaTypeEmail: %v", v)
	}
}

type FieldCreateTemplateFieldsTextAlignResponse3 string

const (
	FieldCreateTemplateFieldsTextAlignResponse3Left   FieldCreateTemplateFieldsTextAlignResponse3 = "left"
	FieldCreateTemplateFieldsTextAlignResponse3Center FieldCreateTemplateFieldsTextAlignResponse3 = "center"
	FieldCreateTemplateFieldsTextAlignResponse3Right  FieldCreateTemplateFieldsTextAlignResponse3 = "right"
)

func (e FieldCreateTemplateFieldsTextAlignResponse3) ToPointer() *FieldCreateTemplateFieldsTextAlignResponse3 {
	return &e
}
func (e *FieldCreateTemplateFieldsTextAlignResponse3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldsTextAlignResponse3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTextAlignResponse3: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMetaEmailResponse struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsFieldMetaTypeEmail  `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateTemplateFieldsTextAlignResponse3 `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaEmailResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaEmailResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaEmailResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaEmailResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaEmailResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaEmailResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaEmailResponse) GetType() FieldCreateTemplateFieldsFieldMetaTypeEmail {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaTypeEmail("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaEmailResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateTemplateFieldsFieldMetaEmailResponse) GetTextAlign() *FieldCreateTemplateFieldsTextAlignResponse3 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateTemplateFieldsFieldMetaTypeName string

const (
	FieldCreateTemplateFieldsFieldMetaTypeNameName FieldCreateTemplateFieldsFieldMetaTypeName = "name"
)

func (e FieldCreateTemplateFieldsFieldMetaTypeName) ToPointer() *FieldCreateTemplateFieldsFieldMetaTypeName {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateTemplateFieldsFieldMetaTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaTypeName: %v", v)
	}
}

type FieldCreateTemplateFieldsTextAlignResponse2 string

const (
	FieldCreateTemplateFieldsTextAlignResponse2Left   FieldCreateTemplateFieldsTextAlignResponse2 = "left"
	FieldCreateTemplateFieldsTextAlignResponse2Center FieldCreateTemplateFieldsTextAlignResponse2 = "center"
	FieldCreateTemplateFieldsTextAlignResponse2Right  FieldCreateTemplateFieldsTextAlignResponse2 = "right"
)

func (e FieldCreateTemplateFieldsTextAlignResponse2) ToPointer() *FieldCreateTemplateFieldsTextAlignResponse2 {
	return &e
}
func (e *FieldCreateTemplateFieldsTextAlignResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldsTextAlignResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTextAlignResponse2: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMetaNameResponse struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsFieldMetaTypeName   `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateTemplateFieldsTextAlignResponse2 `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaNameResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaNameResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaNameResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaNameResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaNameResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaNameResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaNameResponse) GetType() FieldCreateTemplateFieldsFieldMetaTypeName {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaTypeName("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaNameResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateTemplateFieldsFieldMetaNameResponse) GetTextAlign() *FieldCreateTemplateFieldsTextAlignResponse2 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateTemplateFieldsFieldMetaTypeInitials string

const (
	FieldCreateTemplateFieldsFieldMetaTypeInitialsInitials FieldCreateTemplateFieldsFieldMetaTypeInitials = "initials"
)

func (e FieldCreateTemplateFieldsFieldMetaTypeInitials) ToPointer() *FieldCreateTemplateFieldsFieldMetaTypeInitials {
	return &e
}
func (e *FieldCreateTemplateFieldsFieldMetaTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateTemplateFieldsFieldMetaTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsFieldMetaTypeInitials: %v", v)
	}
}

type FieldCreateTemplateFieldsTextAlignResponse1 string

const (
	FieldCreateTemplateFieldsTextAlignResponse1Left   FieldCreateTemplateFieldsTextAlignResponse1 = "left"
	FieldCreateTemplateFieldsTextAlignResponse1Center FieldCreateTemplateFieldsTextAlignResponse1 = "center"
	FieldCreateTemplateFieldsTextAlignResponse1Right  FieldCreateTemplateFieldsTextAlignResponse1 = "right"
)

func (e FieldCreateTemplateFieldsTextAlignResponse1) ToPointer() *FieldCreateTemplateFieldsTextAlignResponse1 {
	return &e
}
func (e *FieldCreateTemplateFieldsTextAlignResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldsTextAlignResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldsTextAlignResponse1: %v", v)
	}
}

type FieldCreateTemplateFieldsFieldMetaInitialsResponse struct {
	Label       *string                                        `json:"label,omitempty"`
	Placeholder *string                                        `json:"placeholder,omitempty"`
	Required    *bool                                          `json:"required,omitempty"`
	ReadOnly    *bool                                          `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldsFieldMetaTypeInitials `json:"type"`
	FontSize    *float64                                       `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateTemplateFieldsTextAlignResponse1   `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldsFieldMetaInitialsResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldsFieldMetaInitialsResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldCreateTemplateFieldsFieldMetaInitialsResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldCreateTemplateFieldsFieldMetaInitialsResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldCreateTemplateFieldsFieldMetaInitialsResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldCreateTemplateFieldsFieldMetaInitialsResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldCreateTemplateFieldsFieldMetaInitialsResponse) GetType() FieldCreateTemplateFieldsFieldMetaTypeInitials {
	if o == nil {
		return FieldCreateTemplateFieldsFieldMetaTypeInitials("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldMetaInitialsResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldCreateTemplateFieldsFieldMetaInitialsResponse) GetTextAlign() *FieldCreateTemplateFieldsTextAlignResponse1 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldCreateTemplateFieldsFieldMetaUnionType string

const (
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaInitialsResponse FieldCreateTemplateFieldsFieldMetaUnionType = "field_createTemplateFields_fieldMeta_Initials_response"
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaNameResponse     FieldCreateTemplateFieldsFieldMetaUnionType = "field_createTemplateFields_fieldMeta_Name_response"
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaEmailResponse    FieldCreateTemplateFieldsFieldMetaUnionType = "field_createTemplateFields_fieldMeta_Email_response"
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaDateResponse     FieldCreateTemplateFieldsFieldMetaUnionType = "field_createTemplateFields_fieldMeta_Date_response"
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaTextResponse     FieldCreateTemplateFieldsFieldMetaUnionType = "field_createTemplateFields_fieldMeta_Text_response"
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaNumberResponse   FieldCreateTemplateFieldsFieldMetaUnionType = "field_createTemplateFields_fieldMeta_Number_response"
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaRadioResponse    FieldCreateTemplateFieldsFieldMetaUnionType = "field_createTemplateFields_fieldMeta_Radio_response"
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaCheckboxResponse FieldCreateTemplateFieldsFieldMetaUnionType = "field_createTemplateFields_fieldMeta_Checkbox_response"
	FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaDropdownResponse FieldCreateTemplateFieldsFieldMetaUnionType = "field_createTemplateFields_fieldMeta_Dropdown_response"
)

type FieldCreateTemplateFieldsFieldMetaUnion struct {
	FieldCreateTemplateFieldsFieldMetaInitialsResponse *FieldCreateTemplateFieldsFieldMetaInitialsResponse `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldMetaNameResponse     *FieldCreateTemplateFieldsFieldMetaNameResponse     `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldMetaEmailResponse    *FieldCreateTemplateFieldsFieldMetaEmailResponse    `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldMetaDateResponse     *FieldCreateTemplateFieldsFieldMetaDateResponse     `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldMetaTextResponse     *FieldCreateTemplateFieldsFieldMetaTextResponse     `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldMetaNumberResponse   *FieldCreateTemplateFieldsFieldMetaNumberResponse   `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldMetaRadioResponse    *FieldCreateTemplateFieldsFieldMetaRadioResponse    `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldMetaCheckboxResponse *FieldCreateTemplateFieldsFieldMetaCheckboxResponse `queryParam:"inline"`
	FieldCreateTemplateFieldsFieldMetaDropdownResponse *FieldCreateTemplateFieldsFieldMetaDropdownResponse `queryParam:"inline"`

	Type FieldCreateTemplateFieldsFieldMetaUnionType
}

func CreateFieldCreateTemplateFieldsFieldMetaUnionFieldCreateTemplateFieldsFieldMetaInitialsResponse(fieldCreateTemplateFieldsFieldMetaInitialsResponse FieldCreateTemplateFieldsFieldMetaInitialsResponse) FieldCreateTemplateFieldsFieldMetaUnion {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaInitialsResponse

	return FieldCreateTemplateFieldsFieldMetaUnion{
		FieldCreateTemplateFieldsFieldMetaInitialsResponse: &fieldCreateTemplateFieldsFieldMetaInitialsResponse,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldMetaUnionFieldCreateTemplateFieldsFieldMetaNameResponse(fieldCreateTemplateFieldsFieldMetaNameResponse FieldCreateTemplateFieldsFieldMetaNameResponse) FieldCreateTemplateFieldsFieldMetaUnion {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaNameResponse

	return FieldCreateTemplateFieldsFieldMetaUnion{
		FieldCreateTemplateFieldsFieldMetaNameResponse: &fieldCreateTemplateFieldsFieldMetaNameResponse,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldMetaUnionFieldCreateTemplateFieldsFieldMetaEmailResponse(fieldCreateTemplateFieldsFieldMetaEmailResponse FieldCreateTemplateFieldsFieldMetaEmailResponse) FieldCreateTemplateFieldsFieldMetaUnion {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaEmailResponse

	return FieldCreateTemplateFieldsFieldMetaUnion{
		FieldCreateTemplateFieldsFieldMetaEmailResponse: &fieldCreateTemplateFieldsFieldMetaEmailResponse,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldMetaUnionFieldCreateTemplateFieldsFieldMetaDateResponse(fieldCreateTemplateFieldsFieldMetaDateResponse FieldCreateTemplateFieldsFieldMetaDateResponse) FieldCreateTemplateFieldsFieldMetaUnion {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaDateResponse

	return FieldCreateTemplateFieldsFieldMetaUnion{
		FieldCreateTemplateFieldsFieldMetaDateResponse: &fieldCreateTemplateFieldsFieldMetaDateResponse,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldMetaUnionFieldCreateTemplateFieldsFieldMetaTextResponse(fieldCreateTemplateFieldsFieldMetaTextResponse FieldCreateTemplateFieldsFieldMetaTextResponse) FieldCreateTemplateFieldsFieldMetaUnion {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaTextResponse

	return FieldCreateTemplateFieldsFieldMetaUnion{
		FieldCreateTemplateFieldsFieldMetaTextResponse: &fieldCreateTemplateFieldsFieldMetaTextResponse,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldMetaUnionFieldCreateTemplateFieldsFieldMetaNumberResponse(fieldCreateTemplateFieldsFieldMetaNumberResponse FieldCreateTemplateFieldsFieldMetaNumberResponse) FieldCreateTemplateFieldsFieldMetaUnion {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaNumberResponse

	return FieldCreateTemplateFieldsFieldMetaUnion{
		FieldCreateTemplateFieldsFieldMetaNumberResponse: &fieldCreateTemplateFieldsFieldMetaNumberResponse,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldMetaUnionFieldCreateTemplateFieldsFieldMetaRadioResponse(fieldCreateTemplateFieldsFieldMetaRadioResponse FieldCreateTemplateFieldsFieldMetaRadioResponse) FieldCreateTemplateFieldsFieldMetaUnion {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaRadioResponse

	return FieldCreateTemplateFieldsFieldMetaUnion{
		FieldCreateTemplateFieldsFieldMetaRadioResponse: &fieldCreateTemplateFieldsFieldMetaRadioResponse,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldMetaUnionFieldCreateTemplateFieldsFieldMetaCheckboxResponse(fieldCreateTemplateFieldsFieldMetaCheckboxResponse FieldCreateTemplateFieldsFieldMetaCheckboxResponse) FieldCreateTemplateFieldsFieldMetaUnion {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaCheckboxResponse

	return FieldCreateTemplateFieldsFieldMetaUnion{
		FieldCreateTemplateFieldsFieldMetaCheckboxResponse: &fieldCreateTemplateFieldsFieldMetaCheckboxResponse,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldsFieldMetaUnionFieldCreateTemplateFieldsFieldMetaDropdownResponse(fieldCreateTemplateFieldsFieldMetaDropdownResponse FieldCreateTemplateFieldsFieldMetaDropdownResponse) FieldCreateTemplateFieldsFieldMetaUnion {
	typ := FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaDropdownResponse

	return FieldCreateTemplateFieldsFieldMetaUnion{
		FieldCreateTemplateFieldsFieldMetaDropdownResponse: &fieldCreateTemplateFieldsFieldMetaDropdownResponse,
		Type: typ,
	}
}

func (u *FieldCreateTemplateFieldsFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var fieldCreateTemplateFieldsFieldMetaInitialsResponse FieldCreateTemplateFieldsFieldMetaInitialsResponse = FieldCreateTemplateFieldsFieldMetaInitialsResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMetaInitialsResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldMetaInitialsResponse = &fieldCreateTemplateFieldsFieldMetaInitialsResponse
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaInitialsResponse
		return nil
	}

	var fieldCreateTemplateFieldsFieldMetaNameResponse FieldCreateTemplateFieldsFieldMetaNameResponse = FieldCreateTemplateFieldsFieldMetaNameResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMetaNameResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldMetaNameResponse = &fieldCreateTemplateFieldsFieldMetaNameResponse
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaNameResponse
		return nil
	}

	var fieldCreateTemplateFieldsFieldMetaEmailResponse FieldCreateTemplateFieldsFieldMetaEmailResponse = FieldCreateTemplateFieldsFieldMetaEmailResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMetaEmailResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldMetaEmailResponse = &fieldCreateTemplateFieldsFieldMetaEmailResponse
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaEmailResponse
		return nil
	}

	var fieldCreateTemplateFieldsFieldMetaDateResponse FieldCreateTemplateFieldsFieldMetaDateResponse = FieldCreateTemplateFieldsFieldMetaDateResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMetaDateResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldMetaDateResponse = &fieldCreateTemplateFieldsFieldMetaDateResponse
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaDateResponse
		return nil
	}

	var fieldCreateTemplateFieldsFieldMetaTextResponse FieldCreateTemplateFieldsFieldMetaTextResponse = FieldCreateTemplateFieldsFieldMetaTextResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMetaTextResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldMetaTextResponse = &fieldCreateTemplateFieldsFieldMetaTextResponse
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaTextResponse
		return nil
	}

	var fieldCreateTemplateFieldsFieldMetaNumberResponse FieldCreateTemplateFieldsFieldMetaNumberResponse = FieldCreateTemplateFieldsFieldMetaNumberResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMetaNumberResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldMetaNumberResponse = &fieldCreateTemplateFieldsFieldMetaNumberResponse
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaNumberResponse
		return nil
	}

	var fieldCreateTemplateFieldsFieldMetaRadioResponse FieldCreateTemplateFieldsFieldMetaRadioResponse = FieldCreateTemplateFieldsFieldMetaRadioResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMetaRadioResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldMetaRadioResponse = &fieldCreateTemplateFieldsFieldMetaRadioResponse
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaRadioResponse
		return nil
	}

	var fieldCreateTemplateFieldsFieldMetaCheckboxResponse FieldCreateTemplateFieldsFieldMetaCheckboxResponse = FieldCreateTemplateFieldsFieldMetaCheckboxResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMetaCheckboxResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldMetaCheckboxResponse = &fieldCreateTemplateFieldsFieldMetaCheckboxResponse
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaCheckboxResponse
		return nil
	}

	var fieldCreateTemplateFieldsFieldMetaDropdownResponse FieldCreateTemplateFieldsFieldMetaDropdownResponse = FieldCreateTemplateFieldsFieldMetaDropdownResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldsFieldMetaDropdownResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldsFieldMetaDropdownResponse = &fieldCreateTemplateFieldsFieldMetaDropdownResponse
		u.Type = FieldCreateTemplateFieldsFieldMetaUnionTypeFieldCreateTemplateFieldsFieldMetaDropdownResponse
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldCreateTemplateFieldsFieldMetaUnion", string(data))
}

func (u FieldCreateTemplateFieldsFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.FieldCreateTemplateFieldsFieldMetaInitialsResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMetaInitialsResponse, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldMetaNameResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMetaNameResponse, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldMetaEmailResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMetaEmailResponse, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldMetaDateResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMetaDateResponse, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldMetaTextResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMetaTextResponse, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldMetaNumberResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMetaNumberResponse, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldMetaRadioResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMetaRadioResponse, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldMetaCheckboxResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMetaCheckboxResponse, "", true)
	}

	if u.FieldCreateTemplateFieldsFieldMetaDropdownResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldsFieldMetaDropdownResponse, "", true)
	}

	return nil, errors.New("could not marshal union type FieldCreateTemplateFieldsFieldMetaUnion: all fields are null")
}

type FieldCreateTemplateFieldsFieldResponse struct {
	Type        FieldCreateTemplateFieldsTypeResponse `json:"type"`
	ID          float64                               `json:"id"`
	SecondaryID string                                `json:"secondaryId"`
	DocumentID  *float64                              `json:"documentId"`
	TemplateID  *float64                              `json:"templateId"`
	RecipientID float64                               `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                                  `json:"page"`
	PositionX  any                                      `json:"positionX,omitempty"`
	PositionY  any                                      `json:"positionY,omitempty"`
	Width      any                                      `json:"width,omitempty"`
	Height     any                                      `json:"height,omitempty"`
	CustomText string                                   `json:"customText"`
	Inserted   bool                                     `json:"inserted"`
	FieldMeta  *FieldCreateTemplateFieldsFieldMetaUnion `json:"fieldMeta"`
}

func (o *FieldCreateTemplateFieldsFieldResponse) GetType() FieldCreateTemplateFieldsTypeResponse {
	if o == nil {
		return FieldCreateTemplateFieldsTypeResponse("")
	}
	return o.Type
}

func (o *FieldCreateTemplateFieldsFieldResponse) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldCreateTemplateFieldsFieldResponse) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *FieldCreateTemplateFieldsFieldResponse) GetDocumentID() *float64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *FieldCreateTemplateFieldsFieldResponse) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *FieldCreateTemplateFieldsFieldResponse) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldCreateTemplateFieldsFieldResponse) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *FieldCreateTemplateFieldsFieldResponse) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *FieldCreateTemplateFieldsFieldResponse) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *FieldCreateTemplateFieldsFieldResponse) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldCreateTemplateFieldsFieldResponse) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *FieldCreateTemplateFieldsFieldResponse) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *FieldCreateTemplateFieldsFieldResponse) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *FieldCreateTemplateFieldsFieldResponse) GetFieldMeta() *FieldCreateTemplateFieldsFieldMetaUnion {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

// FieldCreateTemplateFieldsResponseBody - Successful response
type FieldCreateTemplateFieldsResponseBody struct {
	Fields []FieldCreateTemplateFieldsFieldResponse `json:"fields"`
}

func (o *FieldCreateTemplateFieldsResponseBody) GetFields() []FieldCreateTemplateFieldsFieldResponse {
	if o == nil {
		return []FieldCreateTemplateFieldsFieldResponse{}
	}
	return o.Fields
}

type FieldCreateTemplateFieldsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldCreateTemplateFieldsResponseBody
}

func (o *FieldCreateTemplateFieldsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FieldCreateTemplateFieldsResponse) GetObject() *FieldCreateTemplateFieldsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
