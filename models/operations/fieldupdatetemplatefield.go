// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11TypeDropdown FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type = "DROPDOWN"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaTypeDropdown FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType = "dropdown"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestValues struct {
	Value string `json:"value"`
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta struct {
	Label        *string                                                                       `json:"label,omitempty"`
	Placeholder  *string                                                                       `json:"placeholder,omitempty"`
	Required     *bool                                                                         `json:"required,omitempty"`
	ReadOnly     *bool                                                                         `json:"readOnly,omitempty"`
	Type         FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType `json:"type"`
	Values       []FieldUpdateTemplateFieldFieldTemplatesFieldsRequestValues                   `json:"values,omitempty"`
	DefaultValue *string                                                                       `json:"defaultValue,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta) GetValues() []FieldUpdateTemplateFieldFieldTemplatesFieldsRequestValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldUpdateTemplateFieldField11 struct {
	Type      FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type       `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldField11) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldField11) GetFieldMeta() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldField11) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldField11) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldField11) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldField11) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldField11) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldField11) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10TypeCheckbox FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type = "CHECKBOX"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaTypeCheckbox FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType = "checkbox"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta struct {
	Label            *string                                                                       `json:"label,omitempty"`
	Placeholder      *string                                                                       `json:"placeholder,omitempty"`
	Required         *bool                                                                         `json:"required,omitempty"`
	ReadOnly         *bool                                                                         `json:"readOnly,omitempty"`
	Type             FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType `json:"type"`
	Values           []FieldUpdateTemplateFieldFieldTemplatesFieldsValues                          `json:"values,omitempty"`
	ValidationRule   *string                                                                       `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                      `json:"validationLength,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta) GetValues() []FieldUpdateTemplateFieldFieldTemplatesFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldUpdateTemplateFieldField10 struct {
	Type      FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type       `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldField10) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldField10) GetFieldMeta() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldField10) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldField10) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldField10) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldField10) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldField10) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldField10) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9TypeRadio FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type = "RADIO"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaTypeRadio FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType = "radio"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldUpdateTemplateFieldFieldValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldFieldValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateTemplateFieldFieldValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta struct {
	Label       *string                                                                      `json:"label,omitempty"`
	Placeholder *string                                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType `json:"type"`
	Values      []FieldUpdateTemplateFieldFieldValues                                        `json:"values,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta) GetValues() []FieldUpdateTemplateFieldFieldValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldUpdateTemplateFieldField9 struct {
	Type      FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type       `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldField9) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldField9) GetFieldMeta() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldField9) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldField9) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldField9) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldField9) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldField9) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldField9) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8TypeNumber FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type = "NUMBER"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaTypeNumber FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType = "number"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta struct {
	Label        *string                                                                      `json:"label,omitempty"`
	Placeholder  *string                                                                      `json:"placeholder,omitempty"`
	Required     *bool                                                                        `json:"required,omitempty"`
	ReadOnly     *bool                                                                        `json:"readOnly,omitempty"`
	Type         FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType `json:"type"`
	NumberFormat *string                                                                      `json:"numberFormat,omitempty"`
	Value        *string                                                                      `json:"value,omitempty"`
	MinValue     *float64                                                                     `json:"minValue,omitempty"`
	MaxValue     *float64                                                                     `json:"maxValue,omitempty"`
	FontSize     *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldField8 struct {
	Type      FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type       `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldField8) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldField8) GetFieldMeta() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldField8) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldField8) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldField8) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldField8) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldField8) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldField8) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7TypeText FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type = "TEXT"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaTypeText FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType = "text"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta struct {
	Label          *string                                                                      `json:"label,omitempty"`
	Placeholder    *string                                                                      `json:"placeholder,omitempty"`
	Required       *bool                                                                        `json:"required,omitempty"`
	ReadOnly       *bool                                                                        `json:"readOnly,omitempty"`
	Type           FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType `json:"type"`
	Text           *string                                                                      `json:"text,omitempty"`
	CharacterLimit *float64                                                                     `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldField7 struct {
	Type      FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type       `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldField7) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldField7) GetFieldMeta() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldField7) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldField7) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldField7) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldField7) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldField7) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldField7) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6TypeDate FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type = "DATE"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaTypeDate FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType = "date"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta struct {
	Label       *string                                                                      `json:"label,omitempty"`
	Placeholder *string                                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType `json:"type"`
	FontSize    *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldField6 struct {
	Type      FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldField6) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldField6) GetFieldMeta() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldField6) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldField6) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldField6) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldField6) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldField6) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldField6) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5TypeEmail FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type = "EMAIL"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaTypeEmail FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType = "email"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestFieldMeta struct {
	Label       *string                                                                      `json:"label,omitempty"`
	Placeholder *string                                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType `json:"type"`
	FontSize    *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestFieldMeta) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldField5 struct {
	Type      FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestFieldMeta       `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldField5) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldField5) GetFieldMeta() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldField5) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldField5) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldField5) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldField5) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldField5) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldField5) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4TypeName FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type = "NAME"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaTypeName FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType = "name"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsFieldMeta struct {
	Label       *string                                                                      `json:"label,omitempty"`
	Placeholder *string                                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType `json:"type"`
	FontSize    *float64                                                                     `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsFieldMeta) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldTemplatesFieldsFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldField4 struct {
	Type      FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldTemplatesFieldsFieldMeta              `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldField4) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldField4) GetFieldMeta() *FieldUpdateTemplateFieldFieldTemplatesFieldsFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldField4) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldField4) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldField4) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldField4) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldField4) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldField4) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestType string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestTypeInitials FieldUpdateTemplateFieldFieldTemplatesFieldsRequestType = "INITIALS"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestType) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestType {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestType: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyTypeInitials FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType = "initials"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldFieldMeta struct {
	Label       *string                                                            `json:"label,omitempty"`
	Placeholder *string                                                            `json:"placeholder,omitempty"`
	Required    *bool                                                              `json:"required,omitempty"`
	ReadOnly    *bool                                                              `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType `json:"type"`
	FontSize    *float64                                                           `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldFieldMeta) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldFieldMeta) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldFieldMeta) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldFieldMeta) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldFieldMeta) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldFieldMeta) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldField3 struct {
	Type      FieldUpdateTemplateFieldFieldTemplatesFieldsRequestType `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldFieldFieldMeta                 `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldField3) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsRequestType {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsRequestType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldField3) GetFieldMeta() *FieldUpdateTemplateFieldFieldFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldField3) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldField3) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldField3) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldField3) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldField3) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldField3) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldFieldTemplatesFieldsType string

const (
	FieldUpdateTemplateFieldFieldTemplatesFieldsTypeFreeSignature FieldUpdateTemplateFieldFieldTemplatesFieldsType = "FREE_SIGNATURE"
)

func (e FieldUpdateTemplateFieldFieldTemplatesFieldsType) ToPointer() *FieldUpdateTemplateFieldFieldTemplatesFieldsType {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldTemplatesFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldUpdateTemplateFieldFieldTemplatesFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldTemplatesFieldsType: %v", v)
	}
}

type FieldUpdateTemplateFieldField2 struct {
	Type FieldUpdateTemplateFieldFieldTemplatesFieldsType `json:"type"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldField2) GetType() FieldUpdateTemplateFieldFieldTemplatesFieldsType {
	if o == nil {
		return FieldUpdateTemplateFieldFieldTemplatesFieldsType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldField2) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldField2) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldField2) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldField2) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldField2) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldField2) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldFieldType string

const (
	FieldUpdateTemplateFieldFieldTypeSignature FieldUpdateTemplateFieldFieldType = "SIGNATURE"
)

func (e FieldUpdateTemplateFieldFieldType) ToPointer() *FieldUpdateTemplateFieldFieldType {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = FieldUpdateTemplateFieldFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldType: %v", v)
	}
}

type FieldUpdateTemplateFieldField1 struct {
	Type FieldUpdateTemplateFieldFieldType `json:"type"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (o *FieldUpdateTemplateFieldField1) GetType() FieldUpdateTemplateFieldFieldType {
	if o == nil {
		return FieldUpdateTemplateFieldFieldType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldField1) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldField1) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldField1) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldField1) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldField1) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldField1) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldFieldUnionType string

const (
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField1  FieldUpdateTemplateFieldFieldUnionType = "field-updateTemplateField_field_1"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField2  FieldUpdateTemplateFieldFieldUnionType = "field-updateTemplateField_field_2"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField3  FieldUpdateTemplateFieldFieldUnionType = "field-updateTemplateField_field_3"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField4  FieldUpdateTemplateFieldFieldUnionType = "field-updateTemplateField_field_4"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField5  FieldUpdateTemplateFieldFieldUnionType = "field-updateTemplateField_field_5"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField6  FieldUpdateTemplateFieldFieldUnionType = "field-updateTemplateField_field_6"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField7  FieldUpdateTemplateFieldFieldUnionType = "field-updateTemplateField_field_7"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField8  FieldUpdateTemplateFieldFieldUnionType = "field-updateTemplateField_field_8"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField9  FieldUpdateTemplateFieldFieldUnionType = "field-updateTemplateField_field_9"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField10 FieldUpdateTemplateFieldFieldUnionType = "field-updateTemplateField_field_10"
	FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField11 FieldUpdateTemplateFieldFieldUnionType = "field-updateTemplateField_field_11"
)

type FieldUpdateTemplateFieldField struct {
	FieldUpdateTemplateFieldField1  *FieldUpdateTemplateFieldField1  `queryParam:"inline"`
	FieldUpdateTemplateFieldField2  *FieldUpdateTemplateFieldField2  `queryParam:"inline"`
	FieldUpdateTemplateFieldField3  *FieldUpdateTemplateFieldField3  `queryParam:"inline"`
	FieldUpdateTemplateFieldField4  *FieldUpdateTemplateFieldField4  `queryParam:"inline"`
	FieldUpdateTemplateFieldField5  *FieldUpdateTemplateFieldField5  `queryParam:"inline"`
	FieldUpdateTemplateFieldField6  *FieldUpdateTemplateFieldField6  `queryParam:"inline"`
	FieldUpdateTemplateFieldField7  *FieldUpdateTemplateFieldField7  `queryParam:"inline"`
	FieldUpdateTemplateFieldField8  *FieldUpdateTemplateFieldField8  `queryParam:"inline"`
	FieldUpdateTemplateFieldField9  *FieldUpdateTemplateFieldField9  `queryParam:"inline"`
	FieldUpdateTemplateFieldField10 *FieldUpdateTemplateFieldField10 `queryParam:"inline"`
	FieldUpdateTemplateFieldField11 *FieldUpdateTemplateFieldField11 `queryParam:"inline"`

	Type FieldUpdateTemplateFieldFieldUnionType
}

func CreateFieldUpdateTemplateFieldFieldFieldUpdateTemplateFieldField1(fieldUpdateTemplateFieldField1 FieldUpdateTemplateFieldField1) FieldUpdateTemplateFieldField {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField1

	return FieldUpdateTemplateFieldField{
		FieldUpdateTemplateFieldField1: &fieldUpdateTemplateFieldField1,
		Type:                           typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldFieldUpdateTemplateFieldField2(fieldUpdateTemplateFieldField2 FieldUpdateTemplateFieldField2) FieldUpdateTemplateFieldField {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField2

	return FieldUpdateTemplateFieldField{
		FieldUpdateTemplateFieldField2: &fieldUpdateTemplateFieldField2,
		Type:                           typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldFieldUpdateTemplateFieldField3(fieldUpdateTemplateFieldField3 FieldUpdateTemplateFieldField3) FieldUpdateTemplateFieldField {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField3

	return FieldUpdateTemplateFieldField{
		FieldUpdateTemplateFieldField3: &fieldUpdateTemplateFieldField3,
		Type:                           typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldFieldUpdateTemplateFieldField4(fieldUpdateTemplateFieldField4 FieldUpdateTemplateFieldField4) FieldUpdateTemplateFieldField {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField4

	return FieldUpdateTemplateFieldField{
		FieldUpdateTemplateFieldField4: &fieldUpdateTemplateFieldField4,
		Type:                           typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldFieldUpdateTemplateFieldField5(fieldUpdateTemplateFieldField5 FieldUpdateTemplateFieldField5) FieldUpdateTemplateFieldField {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField5

	return FieldUpdateTemplateFieldField{
		FieldUpdateTemplateFieldField5: &fieldUpdateTemplateFieldField5,
		Type:                           typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldFieldUpdateTemplateFieldField6(fieldUpdateTemplateFieldField6 FieldUpdateTemplateFieldField6) FieldUpdateTemplateFieldField {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField6

	return FieldUpdateTemplateFieldField{
		FieldUpdateTemplateFieldField6: &fieldUpdateTemplateFieldField6,
		Type:                           typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldFieldUpdateTemplateFieldField7(fieldUpdateTemplateFieldField7 FieldUpdateTemplateFieldField7) FieldUpdateTemplateFieldField {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField7

	return FieldUpdateTemplateFieldField{
		FieldUpdateTemplateFieldField7: &fieldUpdateTemplateFieldField7,
		Type:                           typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldFieldUpdateTemplateFieldField8(fieldUpdateTemplateFieldField8 FieldUpdateTemplateFieldField8) FieldUpdateTemplateFieldField {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField8

	return FieldUpdateTemplateFieldField{
		FieldUpdateTemplateFieldField8: &fieldUpdateTemplateFieldField8,
		Type:                           typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldFieldUpdateTemplateFieldField9(fieldUpdateTemplateFieldField9 FieldUpdateTemplateFieldField9) FieldUpdateTemplateFieldField {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField9

	return FieldUpdateTemplateFieldField{
		FieldUpdateTemplateFieldField9: &fieldUpdateTemplateFieldField9,
		Type:                           typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldFieldUpdateTemplateFieldField10(fieldUpdateTemplateFieldField10 FieldUpdateTemplateFieldField10) FieldUpdateTemplateFieldField {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField10

	return FieldUpdateTemplateFieldField{
		FieldUpdateTemplateFieldField10: &fieldUpdateTemplateFieldField10,
		Type:                            typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldFieldUpdateTemplateFieldField11(fieldUpdateTemplateFieldField11 FieldUpdateTemplateFieldField11) FieldUpdateTemplateFieldField {
	typ := FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField11

	return FieldUpdateTemplateFieldField{
		FieldUpdateTemplateFieldField11: &fieldUpdateTemplateFieldField11,
		Type:                            typ,
	}
}

func (u *FieldUpdateTemplateFieldField) UnmarshalJSON(data []byte) error {

	var fieldUpdateTemplateFieldField1 FieldUpdateTemplateFieldField1 = FieldUpdateTemplateFieldField1{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldField1, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldField1 = &fieldUpdateTemplateFieldField1
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField1
		return nil
	}

	var fieldUpdateTemplateFieldField2 FieldUpdateTemplateFieldField2 = FieldUpdateTemplateFieldField2{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldField2, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldField2 = &fieldUpdateTemplateFieldField2
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField2
		return nil
	}

	var fieldUpdateTemplateFieldField3 FieldUpdateTemplateFieldField3 = FieldUpdateTemplateFieldField3{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldField3, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldField3 = &fieldUpdateTemplateFieldField3
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField3
		return nil
	}

	var fieldUpdateTemplateFieldField4 FieldUpdateTemplateFieldField4 = FieldUpdateTemplateFieldField4{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldField4, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldField4 = &fieldUpdateTemplateFieldField4
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField4
		return nil
	}

	var fieldUpdateTemplateFieldField5 FieldUpdateTemplateFieldField5 = FieldUpdateTemplateFieldField5{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldField5, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldField5 = &fieldUpdateTemplateFieldField5
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField5
		return nil
	}

	var fieldUpdateTemplateFieldField6 FieldUpdateTemplateFieldField6 = FieldUpdateTemplateFieldField6{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldField6, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldField6 = &fieldUpdateTemplateFieldField6
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField6
		return nil
	}

	var fieldUpdateTemplateFieldField7 FieldUpdateTemplateFieldField7 = FieldUpdateTemplateFieldField7{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldField7, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldField7 = &fieldUpdateTemplateFieldField7
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField7
		return nil
	}

	var fieldUpdateTemplateFieldField8 FieldUpdateTemplateFieldField8 = FieldUpdateTemplateFieldField8{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldField8, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldField8 = &fieldUpdateTemplateFieldField8
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField8
		return nil
	}

	var fieldUpdateTemplateFieldField9 FieldUpdateTemplateFieldField9 = FieldUpdateTemplateFieldField9{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldField9, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldField9 = &fieldUpdateTemplateFieldField9
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField9
		return nil
	}

	var fieldUpdateTemplateFieldField10 FieldUpdateTemplateFieldField10 = FieldUpdateTemplateFieldField10{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldField10, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldField10 = &fieldUpdateTemplateFieldField10
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField10
		return nil
	}

	var fieldUpdateTemplateFieldField11 FieldUpdateTemplateFieldField11 = FieldUpdateTemplateFieldField11{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldField11, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldField11 = &fieldUpdateTemplateFieldField11
		u.Type = FieldUpdateTemplateFieldFieldUnionTypeFieldUpdateTemplateFieldField11
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldUpdateTemplateFieldField", string(data))
}

func (u FieldUpdateTemplateFieldField) MarshalJSON() ([]byte, error) {
	if u.FieldUpdateTemplateFieldField1 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldField1, "", true)
	}

	if u.FieldUpdateTemplateFieldField2 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldField2, "", true)
	}

	if u.FieldUpdateTemplateFieldField3 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldField3, "", true)
	}

	if u.FieldUpdateTemplateFieldField4 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldField4, "", true)
	}

	if u.FieldUpdateTemplateFieldField5 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldField5, "", true)
	}

	if u.FieldUpdateTemplateFieldField6 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldField6, "", true)
	}

	if u.FieldUpdateTemplateFieldField7 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldField7, "", true)
	}

	if u.FieldUpdateTemplateFieldField8 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldField8, "", true)
	}

	if u.FieldUpdateTemplateFieldField9 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldField9, "", true)
	}

	if u.FieldUpdateTemplateFieldField10 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldField10, "", true)
	}

	if u.FieldUpdateTemplateFieldField11 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldField11, "", true)
	}

	return nil, errors.New("could not marshal union type FieldUpdateTemplateFieldField: all fields are null")
}

type FieldUpdateTemplateFieldRequestBody struct {
	TemplateID float64                       `json:"templateId"`
	Field      FieldUpdateTemplateFieldField `json:"field"`
}

func (o *FieldUpdateTemplateFieldRequestBody) GetTemplateID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TemplateID
}

func (o *FieldUpdateTemplateFieldRequestBody) GetField() FieldUpdateTemplateFieldField {
	if o == nil {
		return FieldUpdateTemplateFieldField{}
	}
	return o.Field
}

type FieldUpdateTemplateFieldType string

const (
	FieldUpdateTemplateFieldTypeSignature     FieldUpdateTemplateFieldType = "SIGNATURE"
	FieldUpdateTemplateFieldTypeFreeSignature FieldUpdateTemplateFieldType = "FREE_SIGNATURE"
	FieldUpdateTemplateFieldTypeInitials      FieldUpdateTemplateFieldType = "INITIALS"
	FieldUpdateTemplateFieldTypeName          FieldUpdateTemplateFieldType = "NAME"
	FieldUpdateTemplateFieldTypeEmail         FieldUpdateTemplateFieldType = "EMAIL"
	FieldUpdateTemplateFieldTypeDate          FieldUpdateTemplateFieldType = "DATE"
	FieldUpdateTemplateFieldTypeText          FieldUpdateTemplateFieldType = "TEXT"
	FieldUpdateTemplateFieldTypeNumber        FieldUpdateTemplateFieldType = "NUMBER"
	FieldUpdateTemplateFieldTypeRadio         FieldUpdateTemplateFieldType = "RADIO"
	FieldUpdateTemplateFieldTypeCheckbox      FieldUpdateTemplateFieldType = "CHECKBOX"
	FieldUpdateTemplateFieldTypeDropdown      FieldUpdateTemplateFieldType = "DROPDOWN"
)

func (e FieldUpdateTemplateFieldType) ToPointer() *FieldUpdateTemplateFieldType {
	return &e
}
func (e *FieldUpdateTemplateFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldUpdateTemplateFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldType: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type string

const (
	FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9TypeDropdown FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type = "dropdown"
)

func (e FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type) ToPointer() *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponseValues struct {
	Value string `json:"value"`
}

func (o *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponseValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldFieldMeta9 struct {
	Label        *string                                                                                     `json:"label,omitempty"`
	Placeholder  *string                                                                                     `json:"placeholder,omitempty"`
	Required     *bool                                                                                       `json:"required,omitempty"`
	ReadOnly     *bool                                                                                       `json:"readOnly,omitempty"`
	Type         FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type `json:"type"`
	Values       []FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponseValues                            `json:"values,omitempty"`
	DefaultValue *string                                                                                     `json:"defaultValue,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldMeta9) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMeta9) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMeta9) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMeta9) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMeta9) GetType() FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMeta9) GetValues() []FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponseValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateTemplateFieldFieldMeta9) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type string

const (
	FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8TypeCheckbox FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type = "checkbox"
)

func (e FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type) ToPointer() *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMetaTemplatesFieldsValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldFieldMeta8 struct {
	Label            *string                                                                                     `json:"label,omitempty"`
	Placeholder      *string                                                                                     `json:"placeholder,omitempty"`
	Required         *bool                                                                                       `json:"required,omitempty"`
	ReadOnly         *bool                                                                                       `json:"readOnly,omitempty"`
	Type             FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type `json:"type"`
	Values           []FieldUpdateTemplateFieldFieldMetaTemplatesFieldsValues                                    `json:"values,omitempty"`
	ValidationRule   *string                                                                                     `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                                    `json:"validationLength,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldMeta8) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMeta8) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMeta8) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMeta8) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMeta8) GetType() FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMeta8) GetValues() []FieldUpdateTemplateFieldFieldMetaTemplatesFieldsValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateTemplateFieldFieldMeta8) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldUpdateTemplateFieldFieldMeta8) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type string

const (
	FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7TypeRadio FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type = "radio"
)

func (e FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type) ToPointer() *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMetaValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *FieldUpdateTemplateFieldFieldMetaValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldFieldMetaValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateTemplateFieldFieldMetaValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldFieldMeta7 struct {
	Label       *string                                                                                     `json:"label,omitempty"`
	Placeholder *string                                                                                     `json:"placeholder,omitempty"`
	Required    *bool                                                                                       `json:"required,omitempty"`
	ReadOnly    *bool                                                                                       `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type `json:"type"`
	Values      []FieldUpdateTemplateFieldFieldMetaValues                                                   `json:"values,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldMeta7) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMeta7) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMeta7) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMeta7) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMeta7) GetType() FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMeta7) GetValues() []FieldUpdateTemplateFieldFieldMetaValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType string

const (
	FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyTypeNumber FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType = "number"
)

func (e FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType) ToPointer() *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMeta6 struct {
	Label        *string                                                                                    `json:"label,omitempty"`
	Placeholder  *string                                                                                    `json:"placeholder,omitempty"`
	Required     *bool                                                                                      `json:"required,omitempty"`
	ReadOnly     *bool                                                                                      `json:"readOnly,omitempty"`
	Type         FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType `json:"type"`
	NumberFormat *string                                                                                    `json:"numberFormat,omitempty"`
	Value        *string                                                                                    `json:"value,omitempty"`
	MinValue     *float64                                                                                   `json:"minValue,omitempty"`
	MaxValue     *float64                                                                                   `json:"maxValue,omitempty"`
	FontSize     *float64                                                                                   `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldMeta6) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMeta6) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMeta6) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMeta6) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMeta6) GetType() FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMeta6) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldUpdateTemplateFieldFieldMeta6) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldUpdateTemplateFieldFieldMeta6) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldUpdateTemplateFieldFieldMeta6) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldUpdateTemplateFieldFieldMeta6) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType string

const (
	FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONTypeText FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType = "text"
)

func (e FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType) ToPointer() *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMeta5 struct {
	Label          *string                                                                        `json:"label,omitempty"`
	Placeholder    *string                                                                        `json:"placeholder,omitempty"`
	Required       *bool                                                                          `json:"required,omitempty"`
	ReadOnly       *bool                                                                          `json:"readOnly,omitempty"`
	Type           FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType `json:"type"`
	Text           *string                                                                        `json:"text,omitempty"`
	CharacterLimit *float64                                                                       `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                       `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldMeta5) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMeta5) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMeta5) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMeta5) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMeta5) GetType() FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMeta5) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldUpdateTemplateFieldFieldMeta5) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldUpdateTemplateFieldFieldMeta5) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200Type string

const (
	FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200TypeDate FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200Type = "date"
)

func (e FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200Type) ToPointer() *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200Type {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200Type: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMeta4 struct {
	Label       *string                                                         `json:"label,omitempty"`
	Placeholder *string                                                         `json:"placeholder,omitempty"`
	Required    *bool                                                           `json:"required,omitempty"`
	ReadOnly    *bool                                                           `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200Type `json:"type"`
	FontSize    *float64                                                        `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldMeta4) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMeta4) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMeta4) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMeta4) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMeta4) GetType() FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200Type {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponse200Type("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMeta4) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponseType string

const (
	FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponseTypeEmail FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponseType = "email"
)

func (e FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponseType) ToPointer() *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponseType {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponseType: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMeta3 struct {
	Label       *string                                                      `json:"label,omitempty"`
	Placeholder *string                                                      `json:"placeholder,omitempty"`
	Required    *bool                                                        `json:"required,omitempty"`
	ReadOnly    *bool                                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponseType `json:"type"`
	FontSize    *float64                                                     `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldMeta3) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMeta3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMeta3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMeta3) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMeta3) GetType() FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponseType {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaTemplatesFieldsResponseType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMeta3) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldFieldMetaTemplatesFieldsType string

const (
	FieldUpdateTemplateFieldFieldMetaTemplatesFieldsTypeName FieldUpdateTemplateFieldFieldMetaTemplatesFieldsType = "name"
)

func (e FieldUpdateTemplateFieldFieldMetaTemplatesFieldsType) ToPointer() *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsType {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaTemplatesFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldUpdateTemplateFieldFieldMetaTemplatesFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaTemplatesFieldsType: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMeta2 struct {
	Label       *string                                              `json:"label,omitempty"`
	Placeholder *string                                              `json:"placeholder,omitempty"`
	Required    *bool                                                `json:"required,omitempty"`
	ReadOnly    *bool                                                `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldFieldMetaTemplatesFieldsType `json:"type"`
	FontSize    *float64                                             `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldMeta2) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMeta2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMeta2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMeta2) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMeta2) GetType() FieldUpdateTemplateFieldFieldMetaTemplatesFieldsType {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaTemplatesFieldsType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMeta2) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldFieldMetaType string

const (
	FieldUpdateTemplateFieldFieldMetaTypeInitials FieldUpdateTemplateFieldFieldMetaType = "initials"
)

func (e FieldUpdateTemplateFieldFieldMetaType) ToPointer() *FieldUpdateTemplateFieldFieldMetaType {
	return &e
}
func (e *FieldUpdateTemplateFieldFieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldUpdateTemplateFieldFieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldFieldMetaType: %v", v)
	}
}

type FieldUpdateTemplateFieldFieldMeta1 struct {
	Label       *string                               `json:"label,omitempty"`
	Placeholder *string                               `json:"placeholder,omitempty"`
	Required    *bool                                 `json:"required,omitempty"`
	ReadOnly    *bool                                 `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldFieldMetaType `json:"type"`
	FontSize    *float64                              `json:"fontSize,omitempty"`
}

func (o *FieldUpdateTemplateFieldFieldMeta1) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldFieldMeta1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldFieldMeta1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldFieldMeta1) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldFieldMeta1) GetType() FieldUpdateTemplateFieldFieldMetaType {
	if o == nil {
		return FieldUpdateTemplateFieldFieldMetaType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldFieldMeta1) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type FieldUpdateTemplateFieldFieldMetaUnionType string

const (
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta1 FieldUpdateTemplateFieldFieldMetaUnionType = "field-updateTemplateField_fieldMeta_1"
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta2 FieldUpdateTemplateFieldFieldMetaUnionType = "field-updateTemplateField_fieldMeta_2"
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta3 FieldUpdateTemplateFieldFieldMetaUnionType = "field-updateTemplateField_fieldMeta_3"
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta4 FieldUpdateTemplateFieldFieldMetaUnionType = "field-updateTemplateField_fieldMeta_4"
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta5 FieldUpdateTemplateFieldFieldMetaUnionType = "field-updateTemplateField_fieldMeta_5"
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta6 FieldUpdateTemplateFieldFieldMetaUnionType = "field-updateTemplateField_fieldMeta_6"
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta7 FieldUpdateTemplateFieldFieldMetaUnionType = "field-updateTemplateField_fieldMeta_7"
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta8 FieldUpdateTemplateFieldFieldMetaUnionType = "field-updateTemplateField_fieldMeta_8"
	FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta9 FieldUpdateTemplateFieldFieldMetaUnionType = "field-updateTemplateField_fieldMeta_9"
)

type FieldUpdateTemplateFieldFieldMeta struct {
	FieldUpdateTemplateFieldFieldMeta1 *FieldUpdateTemplateFieldFieldMeta1 `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldMeta2 *FieldUpdateTemplateFieldFieldMeta2 `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldMeta3 *FieldUpdateTemplateFieldFieldMeta3 `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldMeta4 *FieldUpdateTemplateFieldFieldMeta4 `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldMeta5 *FieldUpdateTemplateFieldFieldMeta5 `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldMeta6 *FieldUpdateTemplateFieldFieldMeta6 `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldMeta7 *FieldUpdateTemplateFieldFieldMeta7 `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldMeta8 *FieldUpdateTemplateFieldFieldMeta8 `queryParam:"inline"`
	FieldUpdateTemplateFieldFieldMeta9 *FieldUpdateTemplateFieldFieldMeta9 `queryParam:"inline"`

	Type FieldUpdateTemplateFieldFieldMetaUnionType
}

func CreateFieldUpdateTemplateFieldFieldMetaFieldUpdateTemplateFieldFieldMeta1(fieldUpdateTemplateFieldFieldMeta1 FieldUpdateTemplateFieldFieldMeta1) FieldUpdateTemplateFieldFieldMeta {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta1

	return FieldUpdateTemplateFieldFieldMeta{
		FieldUpdateTemplateFieldFieldMeta1: &fieldUpdateTemplateFieldFieldMeta1,
		Type:                               typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldMetaFieldUpdateTemplateFieldFieldMeta2(fieldUpdateTemplateFieldFieldMeta2 FieldUpdateTemplateFieldFieldMeta2) FieldUpdateTemplateFieldFieldMeta {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta2

	return FieldUpdateTemplateFieldFieldMeta{
		FieldUpdateTemplateFieldFieldMeta2: &fieldUpdateTemplateFieldFieldMeta2,
		Type:                               typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldMetaFieldUpdateTemplateFieldFieldMeta3(fieldUpdateTemplateFieldFieldMeta3 FieldUpdateTemplateFieldFieldMeta3) FieldUpdateTemplateFieldFieldMeta {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta3

	return FieldUpdateTemplateFieldFieldMeta{
		FieldUpdateTemplateFieldFieldMeta3: &fieldUpdateTemplateFieldFieldMeta3,
		Type:                               typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldMetaFieldUpdateTemplateFieldFieldMeta4(fieldUpdateTemplateFieldFieldMeta4 FieldUpdateTemplateFieldFieldMeta4) FieldUpdateTemplateFieldFieldMeta {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta4

	return FieldUpdateTemplateFieldFieldMeta{
		FieldUpdateTemplateFieldFieldMeta4: &fieldUpdateTemplateFieldFieldMeta4,
		Type:                               typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldMetaFieldUpdateTemplateFieldFieldMeta5(fieldUpdateTemplateFieldFieldMeta5 FieldUpdateTemplateFieldFieldMeta5) FieldUpdateTemplateFieldFieldMeta {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta5

	return FieldUpdateTemplateFieldFieldMeta{
		FieldUpdateTemplateFieldFieldMeta5: &fieldUpdateTemplateFieldFieldMeta5,
		Type:                               typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldMetaFieldUpdateTemplateFieldFieldMeta6(fieldUpdateTemplateFieldFieldMeta6 FieldUpdateTemplateFieldFieldMeta6) FieldUpdateTemplateFieldFieldMeta {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta6

	return FieldUpdateTemplateFieldFieldMeta{
		FieldUpdateTemplateFieldFieldMeta6: &fieldUpdateTemplateFieldFieldMeta6,
		Type:                               typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldMetaFieldUpdateTemplateFieldFieldMeta7(fieldUpdateTemplateFieldFieldMeta7 FieldUpdateTemplateFieldFieldMeta7) FieldUpdateTemplateFieldFieldMeta {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta7

	return FieldUpdateTemplateFieldFieldMeta{
		FieldUpdateTemplateFieldFieldMeta7: &fieldUpdateTemplateFieldFieldMeta7,
		Type:                               typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldMetaFieldUpdateTemplateFieldFieldMeta8(fieldUpdateTemplateFieldFieldMeta8 FieldUpdateTemplateFieldFieldMeta8) FieldUpdateTemplateFieldFieldMeta {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta8

	return FieldUpdateTemplateFieldFieldMeta{
		FieldUpdateTemplateFieldFieldMeta8: &fieldUpdateTemplateFieldFieldMeta8,
		Type:                               typ,
	}
}

func CreateFieldUpdateTemplateFieldFieldMetaFieldUpdateTemplateFieldFieldMeta9(fieldUpdateTemplateFieldFieldMeta9 FieldUpdateTemplateFieldFieldMeta9) FieldUpdateTemplateFieldFieldMeta {
	typ := FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta9

	return FieldUpdateTemplateFieldFieldMeta{
		FieldUpdateTemplateFieldFieldMeta9: &fieldUpdateTemplateFieldFieldMeta9,
		Type:                               typ,
	}
}

func (u *FieldUpdateTemplateFieldFieldMeta) UnmarshalJSON(data []byte) error {

	var fieldUpdateTemplateFieldFieldMeta1 FieldUpdateTemplateFieldFieldMeta1 = FieldUpdateTemplateFieldFieldMeta1{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMeta1, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldFieldMeta1 = &fieldUpdateTemplateFieldFieldMeta1
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta1
		return nil
	}

	var fieldUpdateTemplateFieldFieldMeta2 FieldUpdateTemplateFieldFieldMeta2 = FieldUpdateTemplateFieldFieldMeta2{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMeta2, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldFieldMeta2 = &fieldUpdateTemplateFieldFieldMeta2
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta2
		return nil
	}

	var fieldUpdateTemplateFieldFieldMeta3 FieldUpdateTemplateFieldFieldMeta3 = FieldUpdateTemplateFieldFieldMeta3{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMeta3, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldFieldMeta3 = &fieldUpdateTemplateFieldFieldMeta3
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta3
		return nil
	}

	var fieldUpdateTemplateFieldFieldMeta4 FieldUpdateTemplateFieldFieldMeta4 = FieldUpdateTemplateFieldFieldMeta4{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMeta4, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldFieldMeta4 = &fieldUpdateTemplateFieldFieldMeta4
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta4
		return nil
	}

	var fieldUpdateTemplateFieldFieldMeta7 FieldUpdateTemplateFieldFieldMeta7 = FieldUpdateTemplateFieldFieldMeta7{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMeta7, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldFieldMeta7 = &fieldUpdateTemplateFieldFieldMeta7
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta7
		return nil
	}

	var fieldUpdateTemplateFieldFieldMeta9 FieldUpdateTemplateFieldFieldMeta9 = FieldUpdateTemplateFieldFieldMeta9{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMeta9, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldFieldMeta9 = &fieldUpdateTemplateFieldFieldMeta9
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta9
		return nil
	}

	var fieldUpdateTemplateFieldFieldMeta5 FieldUpdateTemplateFieldFieldMeta5 = FieldUpdateTemplateFieldFieldMeta5{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMeta5, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldFieldMeta5 = &fieldUpdateTemplateFieldFieldMeta5
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta5
		return nil
	}

	var fieldUpdateTemplateFieldFieldMeta8 FieldUpdateTemplateFieldFieldMeta8 = FieldUpdateTemplateFieldFieldMeta8{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMeta8, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldFieldMeta8 = &fieldUpdateTemplateFieldFieldMeta8
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta8
		return nil
	}

	var fieldUpdateTemplateFieldFieldMeta6 FieldUpdateTemplateFieldFieldMeta6 = FieldUpdateTemplateFieldFieldMeta6{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldFieldMeta6, "", true, true); err == nil {
		u.FieldUpdateTemplateFieldFieldMeta6 = &fieldUpdateTemplateFieldFieldMeta6
		u.Type = FieldUpdateTemplateFieldFieldMetaUnionTypeFieldUpdateTemplateFieldFieldMeta6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldUpdateTemplateFieldFieldMeta", string(data))
}

func (u FieldUpdateTemplateFieldFieldMeta) MarshalJSON() ([]byte, error) {
	if u.FieldUpdateTemplateFieldFieldMeta1 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMeta1, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldMeta2 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMeta2, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldMeta3 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMeta3, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldMeta4 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMeta4, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldMeta5 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMeta5, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldMeta6 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMeta6, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldMeta7 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMeta7, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldMeta8 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMeta8, "", true)
	}

	if u.FieldUpdateTemplateFieldFieldMeta9 != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldFieldMeta9, "", true)
	}

	return nil, errors.New("could not marshal union type FieldUpdateTemplateFieldFieldMeta: all fields are null")
}

// FieldUpdateTemplateFieldResponseBody - Successful response
type FieldUpdateTemplateFieldResponseBody struct {
	Type        FieldUpdateTemplateFieldType `json:"type"`
	ID          int64                        `json:"id"`
	SecondaryID string                       `json:"secondaryId"`
	DocumentID  *int64                       `json:"documentId"`
	TemplateID  *int64                       `json:"templateId"`
	RecipientID int64                        `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                            `json:"page"`
	PositionX  any                                `json:"positionX,omitempty"`
	PositionY  any                                `json:"positionY,omitempty"`
	Width      any                                `json:"width,omitempty"`
	Height     any                                `json:"height,omitempty"`
	CustomText string                             `json:"customText"`
	Inserted   bool                               `json:"inserted"`
	FieldMeta  *FieldUpdateTemplateFieldFieldMeta `json:"fieldMeta"`
}

func (o *FieldUpdateTemplateFieldResponseBody) GetType() FieldUpdateTemplateFieldType {
	if o == nil {
		return FieldUpdateTemplateFieldType("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldResponseBody) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldResponseBody) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *FieldUpdateTemplateFieldResponseBody) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *FieldUpdateTemplateFieldResponseBody) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *FieldUpdateTemplateFieldResponseBody) GetRecipientID() int64 {
	if o == nil {
		return 0
	}
	return o.RecipientID
}

func (o *FieldUpdateTemplateFieldResponseBody) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *FieldUpdateTemplateFieldResponseBody) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *FieldUpdateTemplateFieldResponseBody) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *FieldUpdateTemplateFieldResponseBody) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldResponseBody) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *FieldUpdateTemplateFieldResponseBody) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *FieldUpdateTemplateFieldResponseBody) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *FieldUpdateTemplateFieldResponseBody) GetFieldMeta() *FieldUpdateTemplateFieldFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

type FieldUpdateTemplateFieldResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldUpdateTemplateFieldResponseBody
}

func (o *FieldUpdateTemplateFieldResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FieldUpdateTemplateFieldResponse) GetObject() *FieldUpdateTemplateFieldResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
