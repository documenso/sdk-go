// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldCreateTemplateFieldTypeDropdownRequest1 string

const (
	FieldCreateTemplateFieldTypeDropdownRequest1Dropdown FieldCreateTemplateFieldTypeDropdownRequest1 = "DROPDOWN"
)

func (e FieldCreateTemplateFieldTypeDropdownRequest1) ToPointer() *FieldCreateTemplateFieldTypeDropdownRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeDropdownRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = FieldCreateTemplateFieldTypeDropdownRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeDropdownRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldTypeDropdownRequest2 string

const (
	FieldCreateTemplateFieldTypeDropdownRequest2Dropdown FieldCreateTemplateFieldTypeDropdownRequest2 = "dropdown"
)

func (e FieldCreateTemplateFieldTypeDropdownRequest2) ToPointer() *FieldCreateTemplateFieldTypeDropdownRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeDropdownRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateTemplateFieldTypeDropdownRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeDropdownRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldValueDropdown struct {
	Value string `json:"value"`
}

func (f FieldCreateTemplateFieldValueDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldValueDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldValueDropdown) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldCreateTemplateFieldFieldMetaDropdownRequest struct {
	Label        *string                                      `json:"label,omitempty"`
	Placeholder  *string                                      `json:"placeholder,omitempty"`
	Required     *bool                                        `json:"required,omitempty"`
	ReadOnly     *bool                                        `json:"readOnly,omitempty"`
	Type         FieldCreateTemplateFieldTypeDropdownRequest2 `json:"type"`
	Values       []FieldCreateTemplateFieldValueDropdown      `json:"values,omitempty"`
	DefaultValue *string                                      `json:"defaultValue,omitempty"`
}

func (f FieldCreateTemplateFieldFieldMetaDropdownRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaDropdownRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaDropdownRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaDropdownRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaDropdownRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaDropdownRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaDropdownRequest) GetType() FieldCreateTemplateFieldTypeDropdownRequest2 {
	if f == nil {
		return FieldCreateTemplateFieldTypeDropdownRequest2("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaDropdownRequest) GetValues() []FieldCreateTemplateFieldValueDropdown {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldCreateTemplateFieldFieldMetaDropdownRequest) GetDefaultValue() *string {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

type FieldCreateTemplateFieldFieldDropdown struct {
	Type      FieldCreateTemplateFieldTypeDropdownRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldMetaDropdownRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldFieldDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldDropdown) GetType() FieldCreateTemplateFieldTypeDropdownRequest1 {
	if f == nil {
		return FieldCreateTemplateFieldTypeDropdownRequest1("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldDropdown) GetFieldMeta() *FieldCreateTemplateFieldFieldMetaDropdownRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateTemplateFieldFieldDropdown) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateTemplateFieldFieldDropdown) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateTemplateFieldFieldDropdown) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateTemplateFieldFieldDropdown) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateTemplateFieldFieldDropdown) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateTemplateFieldFieldDropdown) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateTemplateFieldTypeCheckboxRequest1 string

const (
	FieldCreateTemplateFieldTypeCheckboxRequest1Checkbox FieldCreateTemplateFieldTypeCheckboxRequest1 = "CHECKBOX"
)

func (e FieldCreateTemplateFieldTypeCheckboxRequest1) ToPointer() *FieldCreateTemplateFieldTypeCheckboxRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeCheckboxRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = FieldCreateTemplateFieldTypeCheckboxRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeCheckboxRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldTypeCheckboxRequest2 string

const (
	FieldCreateTemplateFieldTypeCheckboxRequest2Checkbox FieldCreateTemplateFieldTypeCheckboxRequest2 = "checkbox"
)

func (e FieldCreateTemplateFieldTypeCheckboxRequest2) ToPointer() *FieldCreateTemplateFieldTypeCheckboxRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeCheckboxRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateTemplateFieldTypeCheckboxRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeCheckboxRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldValueCheckbox struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldCreateTemplateFieldValueCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldValueCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldValueCheckbox) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldCreateTemplateFieldValueCheckbox) GetChecked() bool {
	if f == nil {
		return false
	}
	return f.Checked
}

func (f *FieldCreateTemplateFieldValueCheckbox) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldCreateTemplateFieldDirectionRequest string

const (
	FieldCreateTemplateFieldDirectionRequestVertical   FieldCreateTemplateFieldDirectionRequest = "vertical"
	FieldCreateTemplateFieldDirectionRequestHorizontal FieldCreateTemplateFieldDirectionRequest = "horizontal"
)

func (e FieldCreateTemplateFieldDirectionRequest) ToPointer() *FieldCreateTemplateFieldDirectionRequest {
	return &e
}
func (e *FieldCreateTemplateFieldDirectionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vertical":
		fallthrough
	case "horizontal":
		*e = FieldCreateTemplateFieldDirectionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldDirectionRequest: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaCheckboxRequest struct {
	Label            *string                                      `json:"label,omitempty"`
	Placeholder      *string                                      `json:"placeholder,omitempty"`
	Required         *bool                                        `json:"required,omitempty"`
	ReadOnly         *bool                                        `json:"readOnly,omitempty"`
	Type             FieldCreateTemplateFieldTypeCheckboxRequest2 `json:"type"`
	Values           []FieldCreateTemplateFieldValueCheckbox      `json:"values,omitempty"`
	ValidationRule   *string                                      `json:"validationRule,omitempty"`
	ValidationLength *float64                                     `json:"validationLength,omitempty"`
	Direction        *FieldCreateTemplateFieldDirectionRequest    `default:"vertical" json:"direction"`
}

func (f FieldCreateTemplateFieldFieldMetaCheckboxRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxRequest) GetType() FieldCreateTemplateFieldTypeCheckboxRequest2 {
	if f == nil {
		return FieldCreateTemplateFieldTypeCheckboxRequest2("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxRequest) GetValues() []FieldCreateTemplateFieldValueCheckbox {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxRequest) GetValidationRule() *string {
	if f == nil {
		return nil
	}
	return f.ValidationRule
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxRequest) GetValidationLength() *float64 {
	if f == nil {
		return nil
	}
	return f.ValidationLength
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxRequest) GetDirection() *FieldCreateTemplateFieldDirectionRequest {
	if f == nil {
		return nil
	}
	return f.Direction
}

type FieldCreateTemplateFieldFieldCheckbox struct {
	Type      FieldCreateTemplateFieldTypeCheckboxRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldMetaCheckboxRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldFieldCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldCheckbox) GetType() FieldCreateTemplateFieldTypeCheckboxRequest1 {
	if f == nil {
		return FieldCreateTemplateFieldTypeCheckboxRequest1("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldCheckbox) GetFieldMeta() *FieldCreateTemplateFieldFieldMetaCheckboxRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateTemplateFieldFieldCheckbox) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateTemplateFieldFieldCheckbox) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateTemplateFieldFieldCheckbox) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateTemplateFieldFieldCheckbox) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateTemplateFieldFieldCheckbox) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateTemplateFieldFieldCheckbox) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateTemplateFieldTypeRadioRequest1 string

const (
	FieldCreateTemplateFieldTypeRadioRequest1Radio FieldCreateTemplateFieldTypeRadioRequest1 = "RADIO"
)

func (e FieldCreateTemplateFieldTypeRadioRequest1) ToPointer() *FieldCreateTemplateFieldTypeRadioRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeRadioRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = FieldCreateTemplateFieldTypeRadioRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeRadioRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldTypeRadioRequest2 string

const (
	FieldCreateTemplateFieldTypeRadioRequest2Radio FieldCreateTemplateFieldTypeRadioRequest2 = "radio"
)

func (e FieldCreateTemplateFieldTypeRadioRequest2) ToPointer() *FieldCreateTemplateFieldTypeRadioRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeRadioRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateTemplateFieldTypeRadioRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeRadioRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldValueRadio struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldCreateTemplateFieldValueRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldValueRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldValueRadio) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldCreateTemplateFieldValueRadio) GetChecked() bool {
	if f == nil {
		return false
	}
	return f.Checked
}

func (f *FieldCreateTemplateFieldValueRadio) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldCreateTemplateFieldFieldMetaRadioRequest struct {
	Label       *string                                   `json:"label,omitempty"`
	Placeholder *string                                   `json:"placeholder,omitempty"`
	Required    *bool                                     `json:"required,omitempty"`
	ReadOnly    *bool                                     `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldTypeRadioRequest2 `json:"type"`
	Values      []FieldCreateTemplateFieldValueRadio      `json:"values,omitempty"`
}

func (f FieldCreateTemplateFieldFieldMetaRadioRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaRadioRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaRadioRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaRadioRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaRadioRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaRadioRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaRadioRequest) GetType() FieldCreateTemplateFieldTypeRadioRequest2 {
	if f == nil {
		return FieldCreateTemplateFieldTypeRadioRequest2("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaRadioRequest) GetValues() []FieldCreateTemplateFieldValueRadio {
	if f == nil {
		return nil
	}
	return f.Values
}

type FieldCreateTemplateFieldFieldRadio struct {
	Type      FieldCreateTemplateFieldTypeRadioRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldMetaRadioRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldFieldRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldRadio) GetType() FieldCreateTemplateFieldTypeRadioRequest1 {
	if f == nil {
		return FieldCreateTemplateFieldTypeRadioRequest1("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldRadio) GetFieldMeta() *FieldCreateTemplateFieldFieldMetaRadioRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateTemplateFieldFieldRadio) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateTemplateFieldFieldRadio) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateTemplateFieldFieldRadio) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateTemplateFieldFieldRadio) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateTemplateFieldFieldRadio) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateTemplateFieldFieldRadio) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateTemplateFieldTypeNumberRequest1 string

const (
	FieldCreateTemplateFieldTypeNumberRequest1Number FieldCreateTemplateFieldTypeNumberRequest1 = "NUMBER"
)

func (e FieldCreateTemplateFieldTypeNumberRequest1) ToPointer() *FieldCreateTemplateFieldTypeNumberRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeNumberRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = FieldCreateTemplateFieldTypeNumberRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeNumberRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldTypeNumberRequest2 string

const (
	FieldCreateTemplateFieldTypeNumberRequest2Number FieldCreateTemplateFieldTypeNumberRequest2 = "number"
)

func (e FieldCreateTemplateFieldTypeNumberRequest2) ToPointer() *FieldCreateTemplateFieldTypeNumberRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeNumberRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateTemplateFieldTypeNumberRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeNumberRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldTextAlignNumber string

const (
	FieldCreateTemplateFieldTextAlignNumberLeft   FieldCreateTemplateFieldTextAlignNumber = "left"
	FieldCreateTemplateFieldTextAlignNumberCenter FieldCreateTemplateFieldTextAlignNumber = "center"
	FieldCreateTemplateFieldTextAlignNumberRight  FieldCreateTemplateFieldTextAlignNumber = "right"
)

func (e FieldCreateTemplateFieldTextAlignNumber) ToPointer() *FieldCreateTemplateFieldTextAlignNumber {
	return &e
}
func (e *FieldCreateTemplateFieldTextAlignNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldTextAlignNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTextAlignNumber: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaNumberRequest struct {
	Label        *string                                    `json:"label,omitempty"`
	Placeholder  *string                                    `json:"placeholder,omitempty"`
	Required     *bool                                      `json:"required,omitempty"`
	ReadOnly     *bool                                      `json:"readOnly,omitempty"`
	Type         FieldCreateTemplateFieldTypeNumberRequest2 `json:"type"`
	NumberFormat *string                                    `json:"numberFormat,omitempty"`
	Value        *string                                    `json:"value,omitempty"`
	MinValue     *float64                                   `json:"minValue,omitempty"`
	MaxValue     *float64                                   `json:"maxValue,omitempty"`
	FontSize     *float64                                   `json:"fontSize,omitempty"`
	TextAlign    *FieldCreateTemplateFieldTextAlignNumber   `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldFieldMetaNumberRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaNumberRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaNumberRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaNumberRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaNumberRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaNumberRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaNumberRequest) GetType() FieldCreateTemplateFieldTypeNumberRequest2 {
	if f == nil {
		return FieldCreateTemplateFieldTypeNumberRequest2("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaNumberRequest) GetNumberFormat() *string {
	if f == nil {
		return nil
	}
	return f.NumberFormat
}

func (f *FieldCreateTemplateFieldFieldMetaNumberRequest) GetValue() *string {
	if f == nil {
		return nil
	}
	return f.Value
}

func (f *FieldCreateTemplateFieldFieldMetaNumberRequest) GetMinValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MinValue
}

func (f *FieldCreateTemplateFieldFieldMetaNumberRequest) GetMaxValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MaxValue
}

func (f *FieldCreateTemplateFieldFieldMetaNumberRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateTemplateFieldFieldMetaNumberRequest) GetTextAlign() *FieldCreateTemplateFieldTextAlignNumber {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateTemplateFieldFieldNumber struct {
	Type      FieldCreateTemplateFieldTypeNumberRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldMetaNumberRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldFieldNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldNumber) GetType() FieldCreateTemplateFieldTypeNumberRequest1 {
	if f == nil {
		return FieldCreateTemplateFieldTypeNumberRequest1("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldNumber) GetFieldMeta() *FieldCreateTemplateFieldFieldMetaNumberRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateTemplateFieldFieldNumber) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateTemplateFieldFieldNumber) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateTemplateFieldFieldNumber) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateTemplateFieldFieldNumber) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateTemplateFieldFieldNumber) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateTemplateFieldFieldNumber) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateTemplateFieldTypeTextRequest1 string

const (
	FieldCreateTemplateFieldTypeTextRequest1Text FieldCreateTemplateFieldTypeTextRequest1 = "TEXT"
)

func (e FieldCreateTemplateFieldTypeTextRequest1) ToPointer() *FieldCreateTemplateFieldTypeTextRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeTextRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = FieldCreateTemplateFieldTypeTextRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeTextRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldTypeTextRequest2 string

const (
	FieldCreateTemplateFieldTypeTextRequest2Text FieldCreateTemplateFieldTypeTextRequest2 = "text"
)

func (e FieldCreateTemplateFieldTypeTextRequest2) ToPointer() *FieldCreateTemplateFieldTypeTextRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeTextRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateTemplateFieldTypeTextRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeTextRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldTextAlignText string

const (
	FieldCreateTemplateFieldTextAlignTextLeft   FieldCreateTemplateFieldTextAlignText = "left"
	FieldCreateTemplateFieldTextAlignTextCenter FieldCreateTemplateFieldTextAlignText = "center"
	FieldCreateTemplateFieldTextAlignTextRight  FieldCreateTemplateFieldTextAlignText = "right"
)

func (e FieldCreateTemplateFieldTextAlignText) ToPointer() *FieldCreateTemplateFieldTextAlignText {
	return &e
}
func (e *FieldCreateTemplateFieldTextAlignText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldTextAlignText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTextAlignText: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaTextRequest struct {
	Label          *string                                  `json:"label,omitempty"`
	Placeholder    *string                                  `json:"placeholder,omitempty"`
	Required       *bool                                    `json:"required,omitempty"`
	ReadOnly       *bool                                    `json:"readOnly,omitempty"`
	Type           FieldCreateTemplateFieldTypeTextRequest2 `json:"type"`
	Text           *string                                  `json:"text,omitempty"`
	CharacterLimit *float64                                 `json:"characterLimit,omitempty"`
	FontSize       *float64                                 `json:"fontSize,omitempty"`
	TextAlign      *FieldCreateTemplateFieldTextAlignText   `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldFieldMetaTextRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaTextRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaTextRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaTextRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaTextRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaTextRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaTextRequest) GetType() FieldCreateTemplateFieldTypeTextRequest2 {
	if f == nil {
		return FieldCreateTemplateFieldTypeTextRequest2("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaTextRequest) GetText() *string {
	if f == nil {
		return nil
	}
	return f.Text
}

func (f *FieldCreateTemplateFieldFieldMetaTextRequest) GetCharacterLimit() *float64 {
	if f == nil {
		return nil
	}
	return f.CharacterLimit
}

func (f *FieldCreateTemplateFieldFieldMetaTextRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateTemplateFieldFieldMetaTextRequest) GetTextAlign() *FieldCreateTemplateFieldTextAlignText {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateTemplateFieldFieldText struct {
	Type      FieldCreateTemplateFieldTypeTextRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldMetaTextRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldFieldText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldText) GetType() FieldCreateTemplateFieldTypeTextRequest1 {
	if f == nil {
		return FieldCreateTemplateFieldTypeTextRequest1("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldText) GetFieldMeta() *FieldCreateTemplateFieldFieldMetaTextRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateTemplateFieldFieldText) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateTemplateFieldFieldText) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateTemplateFieldFieldText) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateTemplateFieldFieldText) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateTemplateFieldFieldText) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateTemplateFieldFieldText) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateTemplateFieldTypeDateRequest1 string

const (
	FieldCreateTemplateFieldTypeDateRequest1Date FieldCreateTemplateFieldTypeDateRequest1 = "DATE"
)

func (e FieldCreateTemplateFieldTypeDateRequest1) ToPointer() *FieldCreateTemplateFieldTypeDateRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeDateRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = FieldCreateTemplateFieldTypeDateRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeDateRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldTypeDateRequest2 string

const (
	FieldCreateTemplateFieldTypeDateRequest2Date FieldCreateTemplateFieldTypeDateRequest2 = "date"
)

func (e FieldCreateTemplateFieldTypeDateRequest2) ToPointer() *FieldCreateTemplateFieldTypeDateRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeDateRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateTemplateFieldTypeDateRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeDateRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldTextAlignDate string

const (
	FieldCreateTemplateFieldTextAlignDateLeft   FieldCreateTemplateFieldTextAlignDate = "left"
	FieldCreateTemplateFieldTextAlignDateCenter FieldCreateTemplateFieldTextAlignDate = "center"
	FieldCreateTemplateFieldTextAlignDateRight  FieldCreateTemplateFieldTextAlignDate = "right"
)

func (e FieldCreateTemplateFieldTextAlignDate) ToPointer() *FieldCreateTemplateFieldTextAlignDate {
	return &e
}
func (e *FieldCreateTemplateFieldTextAlignDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldTextAlignDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTextAlignDate: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaDateRequest struct {
	Label       *string                                  `json:"label,omitempty"`
	Placeholder *string                                  `json:"placeholder,omitempty"`
	Required    *bool                                    `json:"required,omitempty"`
	ReadOnly    *bool                                    `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldTypeDateRequest2 `json:"type"`
	FontSize    *float64                                 `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateTemplateFieldTextAlignDate   `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldFieldMetaDateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaDateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaDateRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaDateRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaDateRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaDateRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaDateRequest) GetType() FieldCreateTemplateFieldTypeDateRequest2 {
	if f == nil {
		return FieldCreateTemplateFieldTypeDateRequest2("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaDateRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateTemplateFieldFieldMetaDateRequest) GetTextAlign() *FieldCreateTemplateFieldTextAlignDate {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateTemplateFieldFieldDate struct {
	Type      FieldCreateTemplateFieldTypeDateRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldMetaDateRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldFieldDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldDate) GetType() FieldCreateTemplateFieldTypeDateRequest1 {
	if f == nil {
		return FieldCreateTemplateFieldTypeDateRequest1("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldDate) GetFieldMeta() *FieldCreateTemplateFieldFieldMetaDateRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateTemplateFieldFieldDate) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateTemplateFieldFieldDate) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateTemplateFieldFieldDate) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateTemplateFieldFieldDate) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateTemplateFieldFieldDate) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateTemplateFieldFieldDate) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateTemplateFieldTypeEmailRequest1 string

const (
	FieldCreateTemplateFieldTypeEmailRequest1Email FieldCreateTemplateFieldTypeEmailRequest1 = "EMAIL"
)

func (e FieldCreateTemplateFieldTypeEmailRequest1) ToPointer() *FieldCreateTemplateFieldTypeEmailRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeEmailRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = FieldCreateTemplateFieldTypeEmailRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeEmailRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldTypeEmailRequest2 string

const (
	FieldCreateTemplateFieldTypeEmailRequest2Email FieldCreateTemplateFieldTypeEmailRequest2 = "email"
)

func (e FieldCreateTemplateFieldTypeEmailRequest2) ToPointer() *FieldCreateTemplateFieldTypeEmailRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeEmailRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateTemplateFieldTypeEmailRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeEmailRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldTextAlignEmail string

const (
	FieldCreateTemplateFieldTextAlignEmailLeft   FieldCreateTemplateFieldTextAlignEmail = "left"
	FieldCreateTemplateFieldTextAlignEmailCenter FieldCreateTemplateFieldTextAlignEmail = "center"
	FieldCreateTemplateFieldTextAlignEmailRight  FieldCreateTemplateFieldTextAlignEmail = "right"
)

func (e FieldCreateTemplateFieldTextAlignEmail) ToPointer() *FieldCreateTemplateFieldTextAlignEmail {
	return &e
}
func (e *FieldCreateTemplateFieldTextAlignEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldTextAlignEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTextAlignEmail: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaEmailRequest struct {
	Label       *string                                   `json:"label,omitempty"`
	Placeholder *string                                   `json:"placeholder,omitempty"`
	Required    *bool                                     `json:"required,omitempty"`
	ReadOnly    *bool                                     `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldTypeEmailRequest2 `json:"type"`
	FontSize    *float64                                  `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateTemplateFieldTextAlignEmail   `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldFieldMetaEmailRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaEmailRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaEmailRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaEmailRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaEmailRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaEmailRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaEmailRequest) GetType() FieldCreateTemplateFieldTypeEmailRequest2 {
	if f == nil {
		return FieldCreateTemplateFieldTypeEmailRequest2("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaEmailRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateTemplateFieldFieldMetaEmailRequest) GetTextAlign() *FieldCreateTemplateFieldTextAlignEmail {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateTemplateFieldFieldEmail struct {
	Type      FieldCreateTemplateFieldTypeEmailRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldMetaEmailRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldFieldEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldEmail) GetType() FieldCreateTemplateFieldTypeEmailRequest1 {
	if f == nil {
		return FieldCreateTemplateFieldTypeEmailRequest1("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldEmail) GetFieldMeta() *FieldCreateTemplateFieldFieldMetaEmailRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateTemplateFieldFieldEmail) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateTemplateFieldFieldEmail) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateTemplateFieldFieldEmail) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateTemplateFieldFieldEmail) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateTemplateFieldFieldEmail) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateTemplateFieldFieldEmail) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateTemplateFieldTypeNameRequest1 string

const (
	FieldCreateTemplateFieldTypeNameRequest1Name FieldCreateTemplateFieldTypeNameRequest1 = "NAME"
)

func (e FieldCreateTemplateFieldTypeNameRequest1) ToPointer() *FieldCreateTemplateFieldTypeNameRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeNameRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = FieldCreateTemplateFieldTypeNameRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeNameRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldTypeNameRequest2 string

const (
	FieldCreateTemplateFieldTypeNameRequest2Name FieldCreateTemplateFieldTypeNameRequest2 = "name"
)

func (e FieldCreateTemplateFieldTypeNameRequest2) ToPointer() *FieldCreateTemplateFieldTypeNameRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeNameRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateTemplateFieldTypeNameRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeNameRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldTextAlignName string

const (
	FieldCreateTemplateFieldTextAlignNameLeft   FieldCreateTemplateFieldTextAlignName = "left"
	FieldCreateTemplateFieldTextAlignNameCenter FieldCreateTemplateFieldTextAlignName = "center"
	FieldCreateTemplateFieldTextAlignNameRight  FieldCreateTemplateFieldTextAlignName = "right"
)

func (e FieldCreateTemplateFieldTextAlignName) ToPointer() *FieldCreateTemplateFieldTextAlignName {
	return &e
}
func (e *FieldCreateTemplateFieldTextAlignName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldTextAlignName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTextAlignName: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaNameRequest struct {
	Label       *string                                  `json:"label,omitempty"`
	Placeholder *string                                  `json:"placeholder,omitempty"`
	Required    *bool                                    `json:"required,omitempty"`
	ReadOnly    *bool                                    `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldTypeNameRequest2 `json:"type"`
	FontSize    *float64                                 `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateTemplateFieldTextAlignName   `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldFieldMetaNameRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaNameRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaNameRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaNameRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaNameRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaNameRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaNameRequest) GetType() FieldCreateTemplateFieldTypeNameRequest2 {
	if f == nil {
		return FieldCreateTemplateFieldTypeNameRequest2("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaNameRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateTemplateFieldFieldMetaNameRequest) GetTextAlign() *FieldCreateTemplateFieldTextAlignName {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateTemplateFieldFieldName struct {
	Type      FieldCreateTemplateFieldTypeNameRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldMetaNameRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldFieldName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldName) GetType() FieldCreateTemplateFieldTypeNameRequest1 {
	if f == nil {
		return FieldCreateTemplateFieldTypeNameRequest1("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldName) GetFieldMeta() *FieldCreateTemplateFieldFieldMetaNameRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateTemplateFieldFieldName) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateTemplateFieldFieldName) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateTemplateFieldFieldName) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateTemplateFieldFieldName) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateTemplateFieldFieldName) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateTemplateFieldFieldName) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateTemplateFieldTypeInitialsRequest1 string

const (
	FieldCreateTemplateFieldTypeInitialsRequest1Initials FieldCreateTemplateFieldTypeInitialsRequest1 = "INITIALS"
)

func (e FieldCreateTemplateFieldTypeInitialsRequest1) ToPointer() *FieldCreateTemplateFieldTypeInitialsRequest1 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeInitialsRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = FieldCreateTemplateFieldTypeInitialsRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeInitialsRequest1: %v", v)
	}
}

type FieldCreateTemplateFieldTypeInitialsRequest2 string

const (
	FieldCreateTemplateFieldTypeInitialsRequest2Initials FieldCreateTemplateFieldTypeInitialsRequest2 = "initials"
)

func (e FieldCreateTemplateFieldTypeInitialsRequest2) ToPointer() *FieldCreateTemplateFieldTypeInitialsRequest2 {
	return &e
}
func (e *FieldCreateTemplateFieldTypeInitialsRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateTemplateFieldTypeInitialsRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeInitialsRequest2: %v", v)
	}
}

type FieldCreateTemplateFieldTextAlignInitials string

const (
	FieldCreateTemplateFieldTextAlignInitialsLeft   FieldCreateTemplateFieldTextAlignInitials = "left"
	FieldCreateTemplateFieldTextAlignInitialsCenter FieldCreateTemplateFieldTextAlignInitials = "center"
	FieldCreateTemplateFieldTextAlignInitialsRight  FieldCreateTemplateFieldTextAlignInitials = "right"
)

func (e FieldCreateTemplateFieldTextAlignInitials) ToPointer() *FieldCreateTemplateFieldTextAlignInitials {
	return &e
}
func (e *FieldCreateTemplateFieldTextAlignInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldTextAlignInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTextAlignInitials: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaInitialsRequest struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldTypeInitialsRequest2 `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateTemplateFieldTextAlignInitials   `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldFieldMetaInitialsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaInitialsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaInitialsRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaInitialsRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaInitialsRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaInitialsRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaInitialsRequest) GetType() FieldCreateTemplateFieldTypeInitialsRequest2 {
	if f == nil {
		return FieldCreateTemplateFieldTypeInitialsRequest2("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaInitialsRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateTemplateFieldFieldMetaInitialsRequest) GetTextAlign() *FieldCreateTemplateFieldTextAlignInitials {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateTemplateFieldFieldInitials struct {
	Type      FieldCreateTemplateFieldTypeInitialsRequest1      `json:"type"`
	FieldMeta *FieldCreateTemplateFieldFieldMetaInitialsRequest `json:"fieldMeta,omitempty"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldFieldInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldInitials) GetType() FieldCreateTemplateFieldTypeInitialsRequest1 {
	if f == nil {
		return FieldCreateTemplateFieldTypeInitialsRequest1("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldInitials) GetFieldMeta() *FieldCreateTemplateFieldFieldMetaInitialsRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateTemplateFieldFieldInitials) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateTemplateFieldFieldInitials) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateTemplateFieldFieldInitials) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateTemplateFieldFieldInitials) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateTemplateFieldFieldInitials) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateTemplateFieldFieldInitials) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateTemplateFieldTypeFreeSignature string

const (
	FieldCreateTemplateFieldTypeFreeSignatureFreeSignature FieldCreateTemplateFieldTypeFreeSignature = "FREE_SIGNATURE"
)

func (e FieldCreateTemplateFieldTypeFreeSignature) ToPointer() *FieldCreateTemplateFieldTypeFreeSignature {
	return &e
}
func (e *FieldCreateTemplateFieldTypeFreeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldCreateTemplateFieldTypeFreeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeFreeSignature: %v", v)
	}
}

type FieldCreateTemplateFieldFieldFreeSignature struct {
	Type FieldCreateTemplateFieldTypeFreeSignature `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldFieldFreeSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldFreeSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldFreeSignature) GetType() FieldCreateTemplateFieldTypeFreeSignature {
	if f == nil {
		return FieldCreateTemplateFieldTypeFreeSignature("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldFreeSignature) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateTemplateFieldFieldFreeSignature) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateTemplateFieldFieldFreeSignature) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateTemplateFieldFieldFreeSignature) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateTemplateFieldFieldFreeSignature) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateTemplateFieldFieldFreeSignature) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateTemplateFieldTypeSignature string

const (
	FieldCreateTemplateFieldTypeSignatureSignature FieldCreateTemplateFieldTypeSignature = "SIGNATURE"
)

func (e FieldCreateTemplateFieldTypeSignature) ToPointer() *FieldCreateTemplateFieldTypeSignature {
	return &e
}
func (e *FieldCreateTemplateFieldTypeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = FieldCreateTemplateFieldTypeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeSignature: %v", v)
	}
}

type FieldCreateTemplateFieldFieldSignature struct {
	Type FieldCreateTemplateFieldTypeSignature `json:"type"`
	// The ID of the recipient to create the field for.
	RecipientID float64 `json:"recipientId"`
	// The page number the field will be on.
	PageNumber float64 `json:"pageNumber"`
	// The X coordinate of where the field will be placed.
	PageX float64 `json:"pageX"`
	// The Y coordinate of where the field will be placed.
	PageY float64 `json:"pageY"`
	// The width of the field.
	Width float64 `json:"width"`
	// The height of the field.
	Height float64 `json:"height"`
}

func (f FieldCreateTemplateFieldFieldSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "recipientId", "pageNumber", "pageX", "pageY", "width", "height"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldSignature) GetType() FieldCreateTemplateFieldTypeSignature {
	if f == nil {
		return FieldCreateTemplateFieldTypeSignature("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldSignature) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateTemplateFieldFieldSignature) GetPageNumber() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageNumber
}

func (f *FieldCreateTemplateFieldFieldSignature) GetPageX() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageX
}

func (f *FieldCreateTemplateFieldFieldSignature) GetPageY() float64 {
	if f == nil {
		return 0.0
	}
	return f.PageY
}

func (f *FieldCreateTemplateFieldFieldSignature) GetWidth() float64 {
	if f == nil {
		return 0.0
	}
	return f.Width
}

func (f *FieldCreateTemplateFieldFieldSignature) GetHeight() float64 {
	if f == nil {
		return 0.0
	}
	return f.Height
}

type FieldCreateTemplateFieldFieldUnionType string

const (
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldSignature     FieldCreateTemplateFieldFieldUnionType = "field_createTemplateField_field_Signature"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldFreeSignature FieldCreateTemplateFieldFieldUnionType = "field_createTemplateField_field_FreeSignature"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldInitials      FieldCreateTemplateFieldFieldUnionType = "field_createTemplateField_field_Initials"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldName          FieldCreateTemplateFieldFieldUnionType = "field_createTemplateField_field_Name"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldEmail         FieldCreateTemplateFieldFieldUnionType = "field_createTemplateField_field_Email"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldDate          FieldCreateTemplateFieldFieldUnionType = "field_createTemplateField_field_Date"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldText          FieldCreateTemplateFieldFieldUnionType = "field_createTemplateField_field_Text"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldNumber        FieldCreateTemplateFieldFieldUnionType = "field_createTemplateField_field_Number"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldRadio         FieldCreateTemplateFieldFieldUnionType = "field_createTemplateField_field_Radio"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldCheckbox      FieldCreateTemplateFieldFieldUnionType = "field_createTemplateField_field_Checkbox"
	FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldDropdown      FieldCreateTemplateFieldFieldUnionType = "field_createTemplateField_field_Dropdown"
)

type FieldCreateTemplateFieldFieldUnion struct {
	FieldCreateTemplateFieldFieldSignature     *FieldCreateTemplateFieldFieldSignature     `queryParam:"inline,name=field"`
	FieldCreateTemplateFieldFieldFreeSignature *FieldCreateTemplateFieldFieldFreeSignature `queryParam:"inline,name=field"`
	FieldCreateTemplateFieldFieldInitials      *FieldCreateTemplateFieldFieldInitials      `queryParam:"inline,name=field"`
	FieldCreateTemplateFieldFieldName          *FieldCreateTemplateFieldFieldName          `queryParam:"inline,name=field"`
	FieldCreateTemplateFieldFieldEmail         *FieldCreateTemplateFieldFieldEmail         `queryParam:"inline,name=field"`
	FieldCreateTemplateFieldFieldDate          *FieldCreateTemplateFieldFieldDate          `queryParam:"inline,name=field"`
	FieldCreateTemplateFieldFieldText          *FieldCreateTemplateFieldFieldText          `queryParam:"inline,name=field"`
	FieldCreateTemplateFieldFieldNumber        *FieldCreateTemplateFieldFieldNumber        `queryParam:"inline,name=field"`
	FieldCreateTemplateFieldFieldRadio         *FieldCreateTemplateFieldFieldRadio         `queryParam:"inline,name=field"`
	FieldCreateTemplateFieldFieldCheckbox      *FieldCreateTemplateFieldFieldCheckbox      `queryParam:"inline,name=field"`
	FieldCreateTemplateFieldFieldDropdown      *FieldCreateTemplateFieldFieldDropdown      `queryParam:"inline,name=field"`

	Type FieldCreateTemplateFieldFieldUnionType
}

func CreateFieldCreateTemplateFieldFieldUnionFieldCreateTemplateFieldFieldSignature(fieldCreateTemplateFieldFieldSignature FieldCreateTemplateFieldFieldSignature) FieldCreateTemplateFieldFieldUnion {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldSignature

	return FieldCreateTemplateFieldFieldUnion{
		FieldCreateTemplateFieldFieldSignature: &fieldCreateTemplateFieldFieldSignature,
		Type:                                   typ,
	}
}

func CreateFieldCreateTemplateFieldFieldUnionFieldCreateTemplateFieldFieldFreeSignature(fieldCreateTemplateFieldFieldFreeSignature FieldCreateTemplateFieldFieldFreeSignature) FieldCreateTemplateFieldFieldUnion {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldFreeSignature

	return FieldCreateTemplateFieldFieldUnion{
		FieldCreateTemplateFieldFieldFreeSignature: &fieldCreateTemplateFieldFieldFreeSignature,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldFieldUnionFieldCreateTemplateFieldFieldInitials(fieldCreateTemplateFieldFieldInitials FieldCreateTemplateFieldFieldInitials) FieldCreateTemplateFieldFieldUnion {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldInitials

	return FieldCreateTemplateFieldFieldUnion{
		FieldCreateTemplateFieldFieldInitials: &fieldCreateTemplateFieldFieldInitials,
		Type:                                  typ,
	}
}

func CreateFieldCreateTemplateFieldFieldUnionFieldCreateTemplateFieldFieldName(fieldCreateTemplateFieldFieldName FieldCreateTemplateFieldFieldName) FieldCreateTemplateFieldFieldUnion {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldName

	return FieldCreateTemplateFieldFieldUnion{
		FieldCreateTemplateFieldFieldName: &fieldCreateTemplateFieldFieldName,
		Type:                              typ,
	}
}

func CreateFieldCreateTemplateFieldFieldUnionFieldCreateTemplateFieldFieldEmail(fieldCreateTemplateFieldFieldEmail FieldCreateTemplateFieldFieldEmail) FieldCreateTemplateFieldFieldUnion {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldEmail

	return FieldCreateTemplateFieldFieldUnion{
		FieldCreateTemplateFieldFieldEmail: &fieldCreateTemplateFieldFieldEmail,
		Type:                               typ,
	}
}

func CreateFieldCreateTemplateFieldFieldUnionFieldCreateTemplateFieldFieldDate(fieldCreateTemplateFieldFieldDate FieldCreateTemplateFieldFieldDate) FieldCreateTemplateFieldFieldUnion {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldDate

	return FieldCreateTemplateFieldFieldUnion{
		FieldCreateTemplateFieldFieldDate: &fieldCreateTemplateFieldFieldDate,
		Type:                              typ,
	}
}

func CreateFieldCreateTemplateFieldFieldUnionFieldCreateTemplateFieldFieldText(fieldCreateTemplateFieldFieldText FieldCreateTemplateFieldFieldText) FieldCreateTemplateFieldFieldUnion {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldText

	return FieldCreateTemplateFieldFieldUnion{
		FieldCreateTemplateFieldFieldText: &fieldCreateTemplateFieldFieldText,
		Type:                              typ,
	}
}

func CreateFieldCreateTemplateFieldFieldUnionFieldCreateTemplateFieldFieldNumber(fieldCreateTemplateFieldFieldNumber FieldCreateTemplateFieldFieldNumber) FieldCreateTemplateFieldFieldUnion {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldNumber

	return FieldCreateTemplateFieldFieldUnion{
		FieldCreateTemplateFieldFieldNumber: &fieldCreateTemplateFieldFieldNumber,
		Type:                                typ,
	}
}

func CreateFieldCreateTemplateFieldFieldUnionFieldCreateTemplateFieldFieldRadio(fieldCreateTemplateFieldFieldRadio FieldCreateTemplateFieldFieldRadio) FieldCreateTemplateFieldFieldUnion {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldRadio

	return FieldCreateTemplateFieldFieldUnion{
		FieldCreateTemplateFieldFieldRadio: &fieldCreateTemplateFieldFieldRadio,
		Type:                               typ,
	}
}

func CreateFieldCreateTemplateFieldFieldUnionFieldCreateTemplateFieldFieldCheckbox(fieldCreateTemplateFieldFieldCheckbox FieldCreateTemplateFieldFieldCheckbox) FieldCreateTemplateFieldFieldUnion {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldCheckbox

	return FieldCreateTemplateFieldFieldUnion{
		FieldCreateTemplateFieldFieldCheckbox: &fieldCreateTemplateFieldFieldCheckbox,
		Type:                                  typ,
	}
}

func CreateFieldCreateTemplateFieldFieldUnionFieldCreateTemplateFieldFieldDropdown(fieldCreateTemplateFieldFieldDropdown FieldCreateTemplateFieldFieldDropdown) FieldCreateTemplateFieldFieldUnion {
	typ := FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldDropdown

	return FieldCreateTemplateFieldFieldUnion{
		FieldCreateTemplateFieldFieldDropdown: &fieldCreateTemplateFieldFieldDropdown,
		Type:                                  typ,
	}
}

func (u *FieldCreateTemplateFieldFieldUnion) UnmarshalJSON(data []byte) error {

	var fieldCreateTemplateFieldFieldSignature FieldCreateTemplateFieldFieldSignature = FieldCreateTemplateFieldFieldSignature{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldSignature, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldSignature = &fieldCreateTemplateFieldFieldSignature
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldSignature
		return nil
	}

	var fieldCreateTemplateFieldFieldFreeSignature FieldCreateTemplateFieldFieldFreeSignature = FieldCreateTemplateFieldFieldFreeSignature{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldFreeSignature, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldFreeSignature = &fieldCreateTemplateFieldFieldFreeSignature
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldFreeSignature
		return nil
	}

	var fieldCreateTemplateFieldFieldInitials FieldCreateTemplateFieldFieldInitials = FieldCreateTemplateFieldFieldInitials{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldInitials, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldInitials = &fieldCreateTemplateFieldFieldInitials
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldInitials
		return nil
	}

	var fieldCreateTemplateFieldFieldName FieldCreateTemplateFieldFieldName = FieldCreateTemplateFieldFieldName{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldName, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldName = &fieldCreateTemplateFieldFieldName
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldName
		return nil
	}

	var fieldCreateTemplateFieldFieldEmail FieldCreateTemplateFieldFieldEmail = FieldCreateTemplateFieldFieldEmail{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldEmail, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldEmail = &fieldCreateTemplateFieldFieldEmail
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldEmail
		return nil
	}

	var fieldCreateTemplateFieldFieldDate FieldCreateTemplateFieldFieldDate = FieldCreateTemplateFieldFieldDate{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldDate, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldDate = &fieldCreateTemplateFieldFieldDate
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldDate
		return nil
	}

	var fieldCreateTemplateFieldFieldText FieldCreateTemplateFieldFieldText = FieldCreateTemplateFieldFieldText{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldText, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldText = &fieldCreateTemplateFieldFieldText
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldText
		return nil
	}

	var fieldCreateTemplateFieldFieldNumber FieldCreateTemplateFieldFieldNumber = FieldCreateTemplateFieldFieldNumber{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldNumber, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldNumber = &fieldCreateTemplateFieldFieldNumber
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldNumber
		return nil
	}

	var fieldCreateTemplateFieldFieldRadio FieldCreateTemplateFieldFieldRadio = FieldCreateTemplateFieldFieldRadio{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldRadio, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldRadio = &fieldCreateTemplateFieldFieldRadio
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldRadio
		return nil
	}

	var fieldCreateTemplateFieldFieldCheckbox FieldCreateTemplateFieldFieldCheckbox = FieldCreateTemplateFieldFieldCheckbox{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldCheckbox, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldCheckbox = &fieldCreateTemplateFieldFieldCheckbox
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldCheckbox
		return nil
	}

	var fieldCreateTemplateFieldFieldDropdown FieldCreateTemplateFieldFieldDropdown = FieldCreateTemplateFieldFieldDropdown{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldDropdown, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldDropdown = &fieldCreateTemplateFieldFieldDropdown
		u.Type = FieldCreateTemplateFieldFieldUnionTypeFieldCreateTemplateFieldFieldDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldCreateTemplateFieldFieldUnion", string(data))
}

func (u FieldCreateTemplateFieldFieldUnion) MarshalJSON() ([]byte, error) {
	if u.FieldCreateTemplateFieldFieldSignature != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldSignature, "", true)
	}

	if u.FieldCreateTemplateFieldFieldFreeSignature != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldFreeSignature, "", true)
	}

	if u.FieldCreateTemplateFieldFieldInitials != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldInitials, "", true)
	}

	if u.FieldCreateTemplateFieldFieldName != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldName, "", true)
	}

	if u.FieldCreateTemplateFieldFieldEmail != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldEmail, "", true)
	}

	if u.FieldCreateTemplateFieldFieldDate != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldDate, "", true)
	}

	if u.FieldCreateTemplateFieldFieldText != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldText, "", true)
	}

	if u.FieldCreateTemplateFieldFieldNumber != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldNumber, "", true)
	}

	if u.FieldCreateTemplateFieldFieldRadio != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldRadio, "", true)
	}

	if u.FieldCreateTemplateFieldFieldCheckbox != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldCheckbox, "", true)
	}

	if u.FieldCreateTemplateFieldFieldDropdown != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type FieldCreateTemplateFieldFieldUnion: all fields are null")
}

type FieldCreateTemplateFieldRequest struct {
	TemplateID float64                            `json:"templateId"`
	Field      FieldCreateTemplateFieldFieldUnion `json:"field"`
}

func (f *FieldCreateTemplateFieldRequest) GetTemplateID() float64 {
	if f == nil {
		return 0.0
	}
	return f.TemplateID
}

func (f *FieldCreateTemplateFieldRequest) GetField() FieldCreateTemplateFieldFieldUnion {
	if f == nil {
		return FieldCreateTemplateFieldFieldUnion{}
	}
	return f.Field
}

type FieldCreateTemplateFieldTypeResponse string

const (
	FieldCreateTemplateFieldTypeResponseSignature     FieldCreateTemplateFieldTypeResponse = "SIGNATURE"
	FieldCreateTemplateFieldTypeResponseFreeSignature FieldCreateTemplateFieldTypeResponse = "FREE_SIGNATURE"
	FieldCreateTemplateFieldTypeResponseInitials      FieldCreateTemplateFieldTypeResponse = "INITIALS"
	FieldCreateTemplateFieldTypeResponseName          FieldCreateTemplateFieldTypeResponse = "NAME"
	FieldCreateTemplateFieldTypeResponseEmail         FieldCreateTemplateFieldTypeResponse = "EMAIL"
	FieldCreateTemplateFieldTypeResponseDate          FieldCreateTemplateFieldTypeResponse = "DATE"
	FieldCreateTemplateFieldTypeResponseText          FieldCreateTemplateFieldTypeResponse = "TEXT"
	FieldCreateTemplateFieldTypeResponseNumber        FieldCreateTemplateFieldTypeResponse = "NUMBER"
	FieldCreateTemplateFieldTypeResponseRadio         FieldCreateTemplateFieldTypeResponse = "RADIO"
	FieldCreateTemplateFieldTypeResponseCheckbox      FieldCreateTemplateFieldTypeResponse = "CHECKBOX"
	FieldCreateTemplateFieldTypeResponseDropdown      FieldCreateTemplateFieldTypeResponse = "DROPDOWN"
)

func (e FieldCreateTemplateFieldTypeResponse) ToPointer() *FieldCreateTemplateFieldTypeResponse {
	return &e
}
func (e *FieldCreateTemplateFieldTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldCreateTemplateFieldTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTypeResponse: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaTypeDropdown string

const (
	FieldCreateTemplateFieldFieldMetaTypeDropdownDropdown FieldCreateTemplateFieldFieldMetaTypeDropdown = "dropdown"
)

func (e FieldCreateTemplateFieldFieldMetaTypeDropdown) ToPointer() *FieldCreateTemplateFieldFieldMetaTypeDropdown {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldCreateTemplateFieldFieldMetaTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaTypeDropdown: %v", v)
	}
}

type FieldCreateTemplateFieldValueResponse3 struct {
	Value string `json:"value"`
}

func (f FieldCreateTemplateFieldValueResponse3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldValueResponse3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldValueResponse3) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldCreateTemplateFieldFieldMetaDropdownResponse struct {
	Label        *string                                       `json:"label,omitempty"`
	Placeholder  *string                                       `json:"placeholder,omitempty"`
	Required     *bool                                         `json:"required,omitempty"`
	ReadOnly     *bool                                         `json:"readOnly,omitempty"`
	Type         FieldCreateTemplateFieldFieldMetaTypeDropdown `json:"type"`
	Values       []FieldCreateTemplateFieldValueResponse3      `json:"values,omitempty"`
	DefaultValue *string                                       `json:"defaultValue,omitempty"`
}

func (f FieldCreateTemplateFieldFieldMetaDropdownResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaDropdownResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaDropdownResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaDropdownResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaDropdownResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaDropdownResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaDropdownResponse) GetType() FieldCreateTemplateFieldFieldMetaTypeDropdown {
	if f == nil {
		return FieldCreateTemplateFieldFieldMetaTypeDropdown("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaDropdownResponse) GetValues() []FieldCreateTemplateFieldValueResponse3 {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldCreateTemplateFieldFieldMetaDropdownResponse) GetDefaultValue() *string {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

type FieldCreateTemplateFieldFieldMetaTypeCheckbox string

const (
	FieldCreateTemplateFieldFieldMetaTypeCheckboxCheckbox FieldCreateTemplateFieldFieldMetaTypeCheckbox = "checkbox"
)

func (e FieldCreateTemplateFieldFieldMetaTypeCheckbox) ToPointer() *FieldCreateTemplateFieldFieldMetaTypeCheckbox {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldCreateTemplateFieldFieldMetaTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaTypeCheckbox: %v", v)
	}
}

type FieldCreateTemplateFieldValueResponse2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldCreateTemplateFieldValueResponse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldValueResponse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldValueResponse2) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldCreateTemplateFieldValueResponse2) GetChecked() bool {
	if f == nil {
		return false
	}
	return f.Checked
}

func (f *FieldCreateTemplateFieldValueResponse2) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldCreateTemplateFieldDirectionResponse string

const (
	FieldCreateTemplateFieldDirectionResponseVertical   FieldCreateTemplateFieldDirectionResponse = "vertical"
	FieldCreateTemplateFieldDirectionResponseHorizontal FieldCreateTemplateFieldDirectionResponse = "horizontal"
)

func (e FieldCreateTemplateFieldDirectionResponse) ToPointer() *FieldCreateTemplateFieldDirectionResponse {
	return &e
}
func (e *FieldCreateTemplateFieldDirectionResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vertical":
		fallthrough
	case "horizontal":
		*e = FieldCreateTemplateFieldDirectionResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldDirectionResponse: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaCheckboxResponse struct {
	Label            *string                                       `json:"label,omitempty"`
	Placeholder      *string                                       `json:"placeholder,omitempty"`
	Required         *bool                                         `json:"required,omitempty"`
	ReadOnly         *bool                                         `json:"readOnly,omitempty"`
	Type             FieldCreateTemplateFieldFieldMetaTypeCheckbox `json:"type"`
	Values           []FieldCreateTemplateFieldValueResponse2      `json:"values,omitempty"`
	ValidationRule   *string                                       `json:"validationRule,omitempty"`
	ValidationLength *float64                                      `json:"validationLength,omitempty"`
	Direction        *FieldCreateTemplateFieldDirectionResponse    `default:"vertical" json:"direction"`
}

func (f FieldCreateTemplateFieldFieldMetaCheckboxResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxResponse) GetType() FieldCreateTemplateFieldFieldMetaTypeCheckbox {
	if f == nil {
		return FieldCreateTemplateFieldFieldMetaTypeCheckbox("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxResponse) GetValues() []FieldCreateTemplateFieldValueResponse2 {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxResponse) GetValidationRule() *string {
	if f == nil {
		return nil
	}
	return f.ValidationRule
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxResponse) GetValidationLength() *float64 {
	if f == nil {
		return nil
	}
	return f.ValidationLength
}

func (f *FieldCreateTemplateFieldFieldMetaCheckboxResponse) GetDirection() *FieldCreateTemplateFieldDirectionResponse {
	if f == nil {
		return nil
	}
	return f.Direction
}

type FieldCreateTemplateFieldFieldMetaTypeRadio string

const (
	FieldCreateTemplateFieldFieldMetaTypeRadioRadio FieldCreateTemplateFieldFieldMetaTypeRadio = "radio"
)

func (e FieldCreateTemplateFieldFieldMetaTypeRadio) ToPointer() *FieldCreateTemplateFieldFieldMetaTypeRadio {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldCreateTemplateFieldFieldMetaTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaTypeRadio: %v", v)
	}
}

type FieldCreateTemplateFieldValueResponse1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldCreateTemplateFieldValueResponse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldValueResponse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldValueResponse1) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldCreateTemplateFieldValueResponse1) GetChecked() bool {
	if f == nil {
		return false
	}
	return f.Checked
}

func (f *FieldCreateTemplateFieldValueResponse1) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldCreateTemplateFieldFieldMetaRadioResponse struct {
	Label       *string                                    `json:"label,omitempty"`
	Placeholder *string                                    `json:"placeholder,omitempty"`
	Required    *bool                                      `json:"required,omitempty"`
	ReadOnly    *bool                                      `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldFieldMetaTypeRadio `json:"type"`
	Values      []FieldCreateTemplateFieldValueResponse1   `json:"values,omitempty"`
}

func (f FieldCreateTemplateFieldFieldMetaRadioResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaRadioResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaRadioResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaRadioResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaRadioResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaRadioResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaRadioResponse) GetType() FieldCreateTemplateFieldFieldMetaTypeRadio {
	if f == nil {
		return FieldCreateTemplateFieldFieldMetaTypeRadio("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaRadioResponse) GetValues() []FieldCreateTemplateFieldValueResponse1 {
	if f == nil {
		return nil
	}
	return f.Values
}

type FieldCreateTemplateFieldFieldMetaTypeNumber string

const (
	FieldCreateTemplateFieldFieldMetaTypeNumberNumber FieldCreateTemplateFieldFieldMetaTypeNumber = "number"
)

func (e FieldCreateTemplateFieldFieldMetaTypeNumber) ToPointer() *FieldCreateTemplateFieldFieldMetaTypeNumber {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldCreateTemplateFieldFieldMetaTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaTypeNumber: %v", v)
	}
}

type FieldCreateTemplateFieldTextAlignResponse6 string

const (
	FieldCreateTemplateFieldTextAlignResponse6Left   FieldCreateTemplateFieldTextAlignResponse6 = "left"
	FieldCreateTemplateFieldTextAlignResponse6Center FieldCreateTemplateFieldTextAlignResponse6 = "center"
	FieldCreateTemplateFieldTextAlignResponse6Right  FieldCreateTemplateFieldTextAlignResponse6 = "right"
)

func (e FieldCreateTemplateFieldTextAlignResponse6) ToPointer() *FieldCreateTemplateFieldTextAlignResponse6 {
	return &e
}
func (e *FieldCreateTemplateFieldTextAlignResponse6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldTextAlignResponse6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTextAlignResponse6: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaNumberResponse struct {
	Label        *string                                     `json:"label,omitempty"`
	Placeholder  *string                                     `json:"placeholder,omitempty"`
	Required     *bool                                       `json:"required,omitempty"`
	ReadOnly     *bool                                       `json:"readOnly,omitempty"`
	Type         FieldCreateTemplateFieldFieldMetaTypeNumber `json:"type"`
	NumberFormat *string                                     `json:"numberFormat,omitempty"`
	Value        *string                                     `json:"value,omitempty"`
	MinValue     *float64                                    `json:"minValue,omitempty"`
	MaxValue     *float64                                    `json:"maxValue,omitempty"`
	FontSize     *float64                                    `json:"fontSize,omitempty"`
	TextAlign    *FieldCreateTemplateFieldTextAlignResponse6 `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldFieldMetaNumberResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaNumberResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaNumberResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaNumberResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaNumberResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaNumberResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaNumberResponse) GetType() FieldCreateTemplateFieldFieldMetaTypeNumber {
	if f == nil {
		return FieldCreateTemplateFieldFieldMetaTypeNumber("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaNumberResponse) GetNumberFormat() *string {
	if f == nil {
		return nil
	}
	return f.NumberFormat
}

func (f *FieldCreateTemplateFieldFieldMetaNumberResponse) GetValue() *string {
	if f == nil {
		return nil
	}
	return f.Value
}

func (f *FieldCreateTemplateFieldFieldMetaNumberResponse) GetMinValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MinValue
}

func (f *FieldCreateTemplateFieldFieldMetaNumberResponse) GetMaxValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MaxValue
}

func (f *FieldCreateTemplateFieldFieldMetaNumberResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateTemplateFieldFieldMetaNumberResponse) GetTextAlign() *FieldCreateTemplateFieldTextAlignResponse6 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateTemplateFieldFieldMetaTypeText string

const (
	FieldCreateTemplateFieldFieldMetaTypeTextText FieldCreateTemplateFieldFieldMetaTypeText = "text"
)

func (e FieldCreateTemplateFieldFieldMetaTypeText) ToPointer() *FieldCreateTemplateFieldFieldMetaTypeText {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldCreateTemplateFieldFieldMetaTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaTypeText: %v", v)
	}
}

type FieldCreateTemplateFieldTextAlignResponse5 string

const (
	FieldCreateTemplateFieldTextAlignResponse5Left   FieldCreateTemplateFieldTextAlignResponse5 = "left"
	FieldCreateTemplateFieldTextAlignResponse5Center FieldCreateTemplateFieldTextAlignResponse5 = "center"
	FieldCreateTemplateFieldTextAlignResponse5Right  FieldCreateTemplateFieldTextAlignResponse5 = "right"
)

func (e FieldCreateTemplateFieldTextAlignResponse5) ToPointer() *FieldCreateTemplateFieldTextAlignResponse5 {
	return &e
}
func (e *FieldCreateTemplateFieldTextAlignResponse5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldTextAlignResponse5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTextAlignResponse5: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaTextResponse struct {
	Label          *string                                     `json:"label,omitempty"`
	Placeholder    *string                                     `json:"placeholder,omitempty"`
	Required       *bool                                       `json:"required,omitempty"`
	ReadOnly       *bool                                       `json:"readOnly,omitempty"`
	Type           FieldCreateTemplateFieldFieldMetaTypeText   `json:"type"`
	Text           *string                                     `json:"text,omitempty"`
	CharacterLimit *float64                                    `json:"characterLimit,omitempty"`
	FontSize       *float64                                    `json:"fontSize,omitempty"`
	TextAlign      *FieldCreateTemplateFieldTextAlignResponse5 `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldFieldMetaTextResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaTextResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaTextResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaTextResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaTextResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaTextResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaTextResponse) GetType() FieldCreateTemplateFieldFieldMetaTypeText {
	if f == nil {
		return FieldCreateTemplateFieldFieldMetaTypeText("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaTextResponse) GetText() *string {
	if f == nil {
		return nil
	}
	return f.Text
}

func (f *FieldCreateTemplateFieldFieldMetaTextResponse) GetCharacterLimit() *float64 {
	if f == nil {
		return nil
	}
	return f.CharacterLimit
}

func (f *FieldCreateTemplateFieldFieldMetaTextResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateTemplateFieldFieldMetaTextResponse) GetTextAlign() *FieldCreateTemplateFieldTextAlignResponse5 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateTemplateFieldFieldMetaTypeDate string

const (
	FieldCreateTemplateFieldFieldMetaTypeDateDate FieldCreateTemplateFieldFieldMetaTypeDate = "date"
)

func (e FieldCreateTemplateFieldFieldMetaTypeDate) ToPointer() *FieldCreateTemplateFieldFieldMetaTypeDate {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldCreateTemplateFieldFieldMetaTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaTypeDate: %v", v)
	}
}

type FieldCreateTemplateFieldTextAlignResponse4 string

const (
	FieldCreateTemplateFieldTextAlignResponse4Left   FieldCreateTemplateFieldTextAlignResponse4 = "left"
	FieldCreateTemplateFieldTextAlignResponse4Center FieldCreateTemplateFieldTextAlignResponse4 = "center"
	FieldCreateTemplateFieldTextAlignResponse4Right  FieldCreateTemplateFieldTextAlignResponse4 = "right"
)

func (e FieldCreateTemplateFieldTextAlignResponse4) ToPointer() *FieldCreateTemplateFieldTextAlignResponse4 {
	return &e
}
func (e *FieldCreateTemplateFieldTextAlignResponse4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldTextAlignResponse4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTextAlignResponse4: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaDateResponse struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldFieldMetaTypeDate   `json:"type"`
	FontSize    *float64                                    `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateTemplateFieldTextAlignResponse4 `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldFieldMetaDateResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaDateResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaDateResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaDateResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaDateResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaDateResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaDateResponse) GetType() FieldCreateTemplateFieldFieldMetaTypeDate {
	if f == nil {
		return FieldCreateTemplateFieldFieldMetaTypeDate("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaDateResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateTemplateFieldFieldMetaDateResponse) GetTextAlign() *FieldCreateTemplateFieldTextAlignResponse4 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateTemplateFieldFieldMetaTypeEmail string

const (
	FieldCreateTemplateFieldFieldMetaTypeEmailEmail FieldCreateTemplateFieldFieldMetaTypeEmail = "email"
)

func (e FieldCreateTemplateFieldFieldMetaTypeEmail) ToPointer() *FieldCreateTemplateFieldFieldMetaTypeEmail {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldCreateTemplateFieldFieldMetaTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaTypeEmail: %v", v)
	}
}

type FieldCreateTemplateFieldTextAlignResponse3 string

const (
	FieldCreateTemplateFieldTextAlignResponse3Left   FieldCreateTemplateFieldTextAlignResponse3 = "left"
	FieldCreateTemplateFieldTextAlignResponse3Center FieldCreateTemplateFieldTextAlignResponse3 = "center"
	FieldCreateTemplateFieldTextAlignResponse3Right  FieldCreateTemplateFieldTextAlignResponse3 = "right"
)

func (e FieldCreateTemplateFieldTextAlignResponse3) ToPointer() *FieldCreateTemplateFieldTextAlignResponse3 {
	return &e
}
func (e *FieldCreateTemplateFieldTextAlignResponse3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldTextAlignResponse3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTextAlignResponse3: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaEmailResponse struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldFieldMetaTypeEmail  `json:"type"`
	FontSize    *float64                                    `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateTemplateFieldTextAlignResponse3 `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldFieldMetaEmailResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaEmailResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaEmailResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaEmailResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaEmailResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaEmailResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaEmailResponse) GetType() FieldCreateTemplateFieldFieldMetaTypeEmail {
	if f == nil {
		return FieldCreateTemplateFieldFieldMetaTypeEmail("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaEmailResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateTemplateFieldFieldMetaEmailResponse) GetTextAlign() *FieldCreateTemplateFieldTextAlignResponse3 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateTemplateFieldFieldMetaTypeName string

const (
	FieldCreateTemplateFieldFieldMetaTypeNameName FieldCreateTemplateFieldFieldMetaTypeName = "name"
)

func (e FieldCreateTemplateFieldFieldMetaTypeName) ToPointer() *FieldCreateTemplateFieldFieldMetaTypeName {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldCreateTemplateFieldFieldMetaTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaTypeName: %v", v)
	}
}

type FieldCreateTemplateFieldTextAlignResponse2 string

const (
	FieldCreateTemplateFieldTextAlignResponse2Left   FieldCreateTemplateFieldTextAlignResponse2 = "left"
	FieldCreateTemplateFieldTextAlignResponse2Center FieldCreateTemplateFieldTextAlignResponse2 = "center"
	FieldCreateTemplateFieldTextAlignResponse2Right  FieldCreateTemplateFieldTextAlignResponse2 = "right"
)

func (e FieldCreateTemplateFieldTextAlignResponse2) ToPointer() *FieldCreateTemplateFieldTextAlignResponse2 {
	return &e
}
func (e *FieldCreateTemplateFieldTextAlignResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldTextAlignResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTextAlignResponse2: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaNameResponse struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldFieldMetaTypeName   `json:"type"`
	FontSize    *float64                                    `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateTemplateFieldTextAlignResponse2 `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldFieldMetaNameResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaNameResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaNameResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaNameResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaNameResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaNameResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaNameResponse) GetType() FieldCreateTemplateFieldFieldMetaTypeName {
	if f == nil {
		return FieldCreateTemplateFieldFieldMetaTypeName("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaNameResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateTemplateFieldFieldMetaNameResponse) GetTextAlign() *FieldCreateTemplateFieldTextAlignResponse2 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateTemplateFieldFieldMetaTypeInitials string

const (
	FieldCreateTemplateFieldFieldMetaTypeInitialsInitials FieldCreateTemplateFieldFieldMetaTypeInitials = "initials"
)

func (e FieldCreateTemplateFieldFieldMetaTypeInitials) ToPointer() *FieldCreateTemplateFieldFieldMetaTypeInitials {
	return &e
}
func (e *FieldCreateTemplateFieldFieldMetaTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldCreateTemplateFieldFieldMetaTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldFieldMetaTypeInitials: %v", v)
	}
}

type FieldCreateTemplateFieldTextAlignResponse1 string

const (
	FieldCreateTemplateFieldTextAlignResponse1Left   FieldCreateTemplateFieldTextAlignResponse1 = "left"
	FieldCreateTemplateFieldTextAlignResponse1Center FieldCreateTemplateFieldTextAlignResponse1 = "center"
	FieldCreateTemplateFieldTextAlignResponse1Right  FieldCreateTemplateFieldTextAlignResponse1 = "right"
)

func (e FieldCreateTemplateFieldTextAlignResponse1) ToPointer() *FieldCreateTemplateFieldTextAlignResponse1 {
	return &e
}
func (e *FieldCreateTemplateFieldTextAlignResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldCreateTemplateFieldTextAlignResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCreateTemplateFieldTextAlignResponse1: %v", v)
	}
}

type FieldCreateTemplateFieldFieldMetaInitialsResponse struct {
	Label       *string                                       `json:"label,omitempty"`
	Placeholder *string                                       `json:"placeholder,omitempty"`
	Required    *bool                                         `json:"required,omitempty"`
	ReadOnly    *bool                                         `json:"readOnly,omitempty"`
	Type        FieldCreateTemplateFieldFieldMetaTypeInitials `json:"type"`
	FontSize    *float64                                      `json:"fontSize,omitempty"`
	TextAlign   *FieldCreateTemplateFieldTextAlignResponse1   `json:"textAlign,omitempty"`
}

func (f FieldCreateTemplateFieldFieldMetaInitialsResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldCreateTemplateFieldFieldMetaInitialsResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldCreateTemplateFieldFieldMetaInitialsResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldCreateTemplateFieldFieldMetaInitialsResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldCreateTemplateFieldFieldMetaInitialsResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldCreateTemplateFieldFieldMetaInitialsResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldCreateTemplateFieldFieldMetaInitialsResponse) GetType() FieldCreateTemplateFieldFieldMetaTypeInitials {
	if f == nil {
		return FieldCreateTemplateFieldFieldMetaTypeInitials("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldFieldMetaInitialsResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldCreateTemplateFieldFieldMetaInitialsResponse) GetTextAlign() *FieldCreateTemplateFieldTextAlignResponse1 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldCreateTemplateFieldFieldMetaUnionType string

const (
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaInitialsResponse FieldCreateTemplateFieldFieldMetaUnionType = "field_createTemplateField_fieldMeta_Initials_response"
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaNameResponse     FieldCreateTemplateFieldFieldMetaUnionType = "field_createTemplateField_fieldMeta_Name_response"
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaEmailResponse    FieldCreateTemplateFieldFieldMetaUnionType = "field_createTemplateField_fieldMeta_Email_response"
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaDateResponse     FieldCreateTemplateFieldFieldMetaUnionType = "field_createTemplateField_fieldMeta_Date_response"
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaTextResponse     FieldCreateTemplateFieldFieldMetaUnionType = "field_createTemplateField_fieldMeta_Text_response"
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaNumberResponse   FieldCreateTemplateFieldFieldMetaUnionType = "field_createTemplateField_fieldMeta_Number_response"
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaRadioResponse    FieldCreateTemplateFieldFieldMetaUnionType = "field_createTemplateField_fieldMeta_Radio_response"
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaCheckboxResponse FieldCreateTemplateFieldFieldMetaUnionType = "field_createTemplateField_fieldMeta_Checkbox_response"
	FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaDropdownResponse FieldCreateTemplateFieldFieldMetaUnionType = "field_createTemplateField_fieldMeta_Dropdown_response"
)

type FieldCreateTemplateFieldFieldMetaUnion struct {
	FieldCreateTemplateFieldFieldMetaInitialsResponse *FieldCreateTemplateFieldFieldMetaInitialsResponse `queryParam:"inline,name=fieldMeta"`
	FieldCreateTemplateFieldFieldMetaNameResponse     *FieldCreateTemplateFieldFieldMetaNameResponse     `queryParam:"inline,name=fieldMeta"`
	FieldCreateTemplateFieldFieldMetaEmailResponse    *FieldCreateTemplateFieldFieldMetaEmailResponse    `queryParam:"inline,name=fieldMeta"`
	FieldCreateTemplateFieldFieldMetaDateResponse     *FieldCreateTemplateFieldFieldMetaDateResponse     `queryParam:"inline,name=fieldMeta"`
	FieldCreateTemplateFieldFieldMetaTextResponse     *FieldCreateTemplateFieldFieldMetaTextResponse     `queryParam:"inline,name=fieldMeta"`
	FieldCreateTemplateFieldFieldMetaNumberResponse   *FieldCreateTemplateFieldFieldMetaNumberResponse   `queryParam:"inline,name=fieldMeta"`
	FieldCreateTemplateFieldFieldMetaRadioResponse    *FieldCreateTemplateFieldFieldMetaRadioResponse    `queryParam:"inline,name=fieldMeta"`
	FieldCreateTemplateFieldFieldMetaCheckboxResponse *FieldCreateTemplateFieldFieldMetaCheckboxResponse `queryParam:"inline,name=fieldMeta"`
	FieldCreateTemplateFieldFieldMetaDropdownResponse *FieldCreateTemplateFieldFieldMetaDropdownResponse `queryParam:"inline,name=fieldMeta"`

	Type FieldCreateTemplateFieldFieldMetaUnionType
}

func CreateFieldCreateTemplateFieldFieldMetaUnionFieldCreateTemplateFieldFieldMetaInitialsResponse(fieldCreateTemplateFieldFieldMetaInitialsResponse FieldCreateTemplateFieldFieldMetaInitialsResponse) FieldCreateTemplateFieldFieldMetaUnion {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaInitialsResponse

	return FieldCreateTemplateFieldFieldMetaUnion{
		FieldCreateTemplateFieldFieldMetaInitialsResponse: &fieldCreateTemplateFieldFieldMetaInitialsResponse,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldFieldMetaUnionFieldCreateTemplateFieldFieldMetaNameResponse(fieldCreateTemplateFieldFieldMetaNameResponse FieldCreateTemplateFieldFieldMetaNameResponse) FieldCreateTemplateFieldFieldMetaUnion {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaNameResponse

	return FieldCreateTemplateFieldFieldMetaUnion{
		FieldCreateTemplateFieldFieldMetaNameResponse: &fieldCreateTemplateFieldFieldMetaNameResponse,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldFieldMetaUnionFieldCreateTemplateFieldFieldMetaEmailResponse(fieldCreateTemplateFieldFieldMetaEmailResponse FieldCreateTemplateFieldFieldMetaEmailResponse) FieldCreateTemplateFieldFieldMetaUnion {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaEmailResponse

	return FieldCreateTemplateFieldFieldMetaUnion{
		FieldCreateTemplateFieldFieldMetaEmailResponse: &fieldCreateTemplateFieldFieldMetaEmailResponse,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldFieldMetaUnionFieldCreateTemplateFieldFieldMetaDateResponse(fieldCreateTemplateFieldFieldMetaDateResponse FieldCreateTemplateFieldFieldMetaDateResponse) FieldCreateTemplateFieldFieldMetaUnion {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaDateResponse

	return FieldCreateTemplateFieldFieldMetaUnion{
		FieldCreateTemplateFieldFieldMetaDateResponse: &fieldCreateTemplateFieldFieldMetaDateResponse,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldFieldMetaUnionFieldCreateTemplateFieldFieldMetaTextResponse(fieldCreateTemplateFieldFieldMetaTextResponse FieldCreateTemplateFieldFieldMetaTextResponse) FieldCreateTemplateFieldFieldMetaUnion {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaTextResponse

	return FieldCreateTemplateFieldFieldMetaUnion{
		FieldCreateTemplateFieldFieldMetaTextResponse: &fieldCreateTemplateFieldFieldMetaTextResponse,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldFieldMetaUnionFieldCreateTemplateFieldFieldMetaNumberResponse(fieldCreateTemplateFieldFieldMetaNumberResponse FieldCreateTemplateFieldFieldMetaNumberResponse) FieldCreateTemplateFieldFieldMetaUnion {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaNumberResponse

	return FieldCreateTemplateFieldFieldMetaUnion{
		FieldCreateTemplateFieldFieldMetaNumberResponse: &fieldCreateTemplateFieldFieldMetaNumberResponse,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldFieldMetaUnionFieldCreateTemplateFieldFieldMetaRadioResponse(fieldCreateTemplateFieldFieldMetaRadioResponse FieldCreateTemplateFieldFieldMetaRadioResponse) FieldCreateTemplateFieldFieldMetaUnion {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaRadioResponse

	return FieldCreateTemplateFieldFieldMetaUnion{
		FieldCreateTemplateFieldFieldMetaRadioResponse: &fieldCreateTemplateFieldFieldMetaRadioResponse,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldFieldMetaUnionFieldCreateTemplateFieldFieldMetaCheckboxResponse(fieldCreateTemplateFieldFieldMetaCheckboxResponse FieldCreateTemplateFieldFieldMetaCheckboxResponse) FieldCreateTemplateFieldFieldMetaUnion {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaCheckboxResponse

	return FieldCreateTemplateFieldFieldMetaUnion{
		FieldCreateTemplateFieldFieldMetaCheckboxResponse: &fieldCreateTemplateFieldFieldMetaCheckboxResponse,
		Type: typ,
	}
}

func CreateFieldCreateTemplateFieldFieldMetaUnionFieldCreateTemplateFieldFieldMetaDropdownResponse(fieldCreateTemplateFieldFieldMetaDropdownResponse FieldCreateTemplateFieldFieldMetaDropdownResponse) FieldCreateTemplateFieldFieldMetaUnion {
	typ := FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaDropdownResponse

	return FieldCreateTemplateFieldFieldMetaUnion{
		FieldCreateTemplateFieldFieldMetaDropdownResponse: &fieldCreateTemplateFieldFieldMetaDropdownResponse,
		Type: typ,
	}
}

func (u *FieldCreateTemplateFieldFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var fieldCreateTemplateFieldFieldMetaInitialsResponse FieldCreateTemplateFieldFieldMetaInitialsResponse = FieldCreateTemplateFieldFieldMetaInitialsResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMetaInitialsResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldMetaInitialsResponse = &fieldCreateTemplateFieldFieldMetaInitialsResponse
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaInitialsResponse
		return nil
	}

	var fieldCreateTemplateFieldFieldMetaNameResponse FieldCreateTemplateFieldFieldMetaNameResponse = FieldCreateTemplateFieldFieldMetaNameResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMetaNameResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldMetaNameResponse = &fieldCreateTemplateFieldFieldMetaNameResponse
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaNameResponse
		return nil
	}

	var fieldCreateTemplateFieldFieldMetaEmailResponse FieldCreateTemplateFieldFieldMetaEmailResponse = FieldCreateTemplateFieldFieldMetaEmailResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMetaEmailResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldMetaEmailResponse = &fieldCreateTemplateFieldFieldMetaEmailResponse
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaEmailResponse
		return nil
	}

	var fieldCreateTemplateFieldFieldMetaDateResponse FieldCreateTemplateFieldFieldMetaDateResponse = FieldCreateTemplateFieldFieldMetaDateResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMetaDateResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldMetaDateResponse = &fieldCreateTemplateFieldFieldMetaDateResponse
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaDateResponse
		return nil
	}

	var fieldCreateTemplateFieldFieldMetaTextResponse FieldCreateTemplateFieldFieldMetaTextResponse = FieldCreateTemplateFieldFieldMetaTextResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMetaTextResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldMetaTextResponse = &fieldCreateTemplateFieldFieldMetaTextResponse
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaTextResponse
		return nil
	}

	var fieldCreateTemplateFieldFieldMetaNumberResponse FieldCreateTemplateFieldFieldMetaNumberResponse = FieldCreateTemplateFieldFieldMetaNumberResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMetaNumberResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldMetaNumberResponse = &fieldCreateTemplateFieldFieldMetaNumberResponse
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaNumberResponse
		return nil
	}

	var fieldCreateTemplateFieldFieldMetaRadioResponse FieldCreateTemplateFieldFieldMetaRadioResponse = FieldCreateTemplateFieldFieldMetaRadioResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMetaRadioResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldMetaRadioResponse = &fieldCreateTemplateFieldFieldMetaRadioResponse
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaRadioResponse
		return nil
	}

	var fieldCreateTemplateFieldFieldMetaCheckboxResponse FieldCreateTemplateFieldFieldMetaCheckboxResponse = FieldCreateTemplateFieldFieldMetaCheckboxResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMetaCheckboxResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldMetaCheckboxResponse = &fieldCreateTemplateFieldFieldMetaCheckboxResponse
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaCheckboxResponse
		return nil
	}

	var fieldCreateTemplateFieldFieldMetaDropdownResponse FieldCreateTemplateFieldFieldMetaDropdownResponse = FieldCreateTemplateFieldFieldMetaDropdownResponse{}
	if err := utils.UnmarshalJSON(data, &fieldCreateTemplateFieldFieldMetaDropdownResponse, "", true, nil); err == nil {
		u.FieldCreateTemplateFieldFieldMetaDropdownResponse = &fieldCreateTemplateFieldFieldMetaDropdownResponse
		u.Type = FieldCreateTemplateFieldFieldMetaUnionTypeFieldCreateTemplateFieldFieldMetaDropdownResponse
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldCreateTemplateFieldFieldMetaUnion", string(data))
}

func (u FieldCreateTemplateFieldFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.FieldCreateTemplateFieldFieldMetaInitialsResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMetaInitialsResponse, "", true)
	}

	if u.FieldCreateTemplateFieldFieldMetaNameResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMetaNameResponse, "", true)
	}

	if u.FieldCreateTemplateFieldFieldMetaEmailResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMetaEmailResponse, "", true)
	}

	if u.FieldCreateTemplateFieldFieldMetaDateResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMetaDateResponse, "", true)
	}

	if u.FieldCreateTemplateFieldFieldMetaTextResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMetaTextResponse, "", true)
	}

	if u.FieldCreateTemplateFieldFieldMetaNumberResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMetaNumberResponse, "", true)
	}

	if u.FieldCreateTemplateFieldFieldMetaRadioResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMetaRadioResponse, "", true)
	}

	if u.FieldCreateTemplateFieldFieldMetaCheckboxResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMetaCheckboxResponse, "", true)
	}

	if u.FieldCreateTemplateFieldFieldMetaDropdownResponse != nil {
		return utils.MarshalJSON(u.FieldCreateTemplateFieldFieldMetaDropdownResponse, "", true)
	}

	return nil, errors.New("could not marshal union type FieldCreateTemplateFieldFieldMetaUnion: all fields are null")
}

// FieldCreateTemplateFieldResponseBody - Successful response
type FieldCreateTemplateFieldResponseBody struct {
	EnvelopeID     string                               `json:"envelopeId"`
	EnvelopeItemID string                               `json:"envelopeItemId"`
	Type           FieldCreateTemplateFieldTypeResponse `json:"type"`
	ID             float64                              `json:"id"`
	SecondaryID    string                               `json:"secondaryId"`
	RecipientID    float64                              `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                                 `json:"page"`
	PositionX  any                                     `json:"positionX,omitempty"`
	PositionY  any                                     `json:"positionY,omitempty"`
	Width      any                                     `json:"width,omitempty"`
	Height     any                                     `json:"height,omitempty"`
	CustomText string                                  `json:"customText"`
	Inserted   bool                                    `json:"inserted"`
	FieldMeta  *FieldCreateTemplateFieldFieldMetaUnion `json:"fieldMeta"`
	DocumentID *float64                                `json:"documentId,omitempty"`
	TemplateID *float64                                `json:"templateId,omitempty"`
}

func (f *FieldCreateTemplateFieldResponseBody) GetEnvelopeID() string {
	if f == nil {
		return ""
	}
	return f.EnvelopeID
}

func (f *FieldCreateTemplateFieldResponseBody) GetEnvelopeItemID() string {
	if f == nil {
		return ""
	}
	return f.EnvelopeItemID
}

func (f *FieldCreateTemplateFieldResponseBody) GetType() FieldCreateTemplateFieldTypeResponse {
	if f == nil {
		return FieldCreateTemplateFieldTypeResponse("")
	}
	return f.Type
}

func (f *FieldCreateTemplateFieldResponseBody) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldCreateTemplateFieldResponseBody) GetSecondaryID() string {
	if f == nil {
		return ""
	}
	return f.SecondaryID
}

func (f *FieldCreateTemplateFieldResponseBody) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldCreateTemplateFieldResponseBody) GetPage() float64 {
	if f == nil {
		return 0.0
	}
	return f.Page
}

func (f *FieldCreateTemplateFieldResponseBody) GetPositionX() any {
	if f == nil {
		return nil
	}
	return f.PositionX
}

func (f *FieldCreateTemplateFieldResponseBody) GetPositionY() any {
	if f == nil {
		return nil
	}
	return f.PositionY
}

func (f *FieldCreateTemplateFieldResponseBody) GetWidth() any {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FieldCreateTemplateFieldResponseBody) GetHeight() any {
	if f == nil {
		return nil
	}
	return f.Height
}

func (f *FieldCreateTemplateFieldResponseBody) GetCustomText() string {
	if f == nil {
		return ""
	}
	return f.CustomText
}

func (f *FieldCreateTemplateFieldResponseBody) GetInserted() bool {
	if f == nil {
		return false
	}
	return f.Inserted
}

func (f *FieldCreateTemplateFieldResponseBody) GetFieldMeta() *FieldCreateTemplateFieldFieldMetaUnion {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldCreateTemplateFieldResponseBody) GetDocumentID() *float64 {
	if f == nil {
		return nil
	}
	return f.DocumentID
}

func (f *FieldCreateTemplateFieldResponseBody) GetTemplateID() *float64 {
	if f == nil {
		return nil
	}
	return f.TemplateID
}

type FieldCreateTemplateFieldResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldCreateTemplateFieldResponseBody
}

func (f *FieldCreateTemplateFieldResponse) GetHTTPMeta() components.HTTPMetadata {
	if f == nil {
		return components.HTTPMetadata{}
	}
	return f.HTTPMeta
}

func (f *FieldCreateTemplateFieldResponse) GetObject() *FieldCreateTemplateFieldResponseBody {
	if f == nil {
		return nil
	}
	return f.Object
}
