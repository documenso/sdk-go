// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type TemplateCreateDocumentFromTemplateRecipients struct {
	// The ID of the recipient in the template.
	ID    float64 `json:"id"`
	Email string  `json:"email"`
	Name  *string `json:"name,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateRecipients) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateCreateDocumentFromTemplateRecipients) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *TemplateCreateDocumentFromTemplateRecipients) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type TemplateCreateDocumentFromTemplateRequestBody struct {
	TemplateID float64 `json:"templateId"`
	// The information of the recipients to create the document with.
	Recipients []TemplateCreateDocumentFromTemplateRecipients `json:"recipients"`
	// Whether to create the document as pending and distribute it to recipients.
	DistributeDocument *bool `json:"distributeDocument,omitempty"`
	// The data ID of an alternative PDF to use when creating the document. If not provided, the PDF attached to the template will be used.
	CustomDocumentDataID *string `json:"customDocumentDataId,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateRequestBody) GetTemplateID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TemplateID
}

func (o *TemplateCreateDocumentFromTemplateRequestBody) GetRecipients() []TemplateCreateDocumentFromTemplateRecipients {
	if o == nil {
		return []TemplateCreateDocumentFromTemplateRecipients{}
	}
	return o.Recipients
}

func (o *TemplateCreateDocumentFromTemplateRequestBody) GetDistributeDocument() *bool {
	if o == nil {
		return nil
	}
	return o.DistributeDocument
}

func (o *TemplateCreateDocumentFromTemplateRequestBody) GetCustomDocumentDataID() *string {
	if o == nil {
		return nil
	}
	return o.CustomDocumentDataID
}

type TemplateCreateDocumentFromTemplateVisibility string

const (
	TemplateCreateDocumentFromTemplateVisibilityEveryone        TemplateCreateDocumentFromTemplateVisibility = "EVERYONE"
	TemplateCreateDocumentFromTemplateVisibilityManagerAndAbove TemplateCreateDocumentFromTemplateVisibility = "MANAGER_AND_ABOVE"
	TemplateCreateDocumentFromTemplateVisibilityAdmin           TemplateCreateDocumentFromTemplateVisibility = "ADMIN"
)

func (e TemplateCreateDocumentFromTemplateVisibility) ToPointer() *TemplateCreateDocumentFromTemplateVisibility {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = TemplateCreateDocumentFromTemplateVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateVisibility: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateStatus string

const (
	TemplateCreateDocumentFromTemplateStatusDraft     TemplateCreateDocumentFromTemplateStatus = "DRAFT"
	TemplateCreateDocumentFromTemplateStatusPending   TemplateCreateDocumentFromTemplateStatus = "PENDING"
	TemplateCreateDocumentFromTemplateStatusCompleted TemplateCreateDocumentFromTemplateStatus = "COMPLETED"
)

func (e TemplateCreateDocumentFromTemplateStatus) ToPointer() *TemplateCreateDocumentFromTemplateStatus {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "PENDING":
		fallthrough
	case "COMPLETED":
		*e = TemplateCreateDocumentFromTemplateStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateStatus: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateSource string

const (
	TemplateCreateDocumentFromTemplateSourceDocument           TemplateCreateDocumentFromTemplateSource = "DOCUMENT"
	TemplateCreateDocumentFromTemplateSourceTemplate           TemplateCreateDocumentFromTemplateSource = "TEMPLATE"
	TemplateCreateDocumentFromTemplateSourceTemplateDirectLink TemplateCreateDocumentFromTemplateSource = "TEMPLATE_DIRECT_LINK"
)

func (e TemplateCreateDocumentFromTemplateSource) ToPointer() *TemplateCreateDocumentFromTemplateSource {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEMPLATE":
		fallthrough
	case "TEMPLATE_DIRECT_LINK":
		*e = TemplateCreateDocumentFromTemplateSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateSource: %v", v)
	}
}

// TemplateCreateDocumentFromTemplateGlobalAccessAuth - The type of authentication required for the recipient to access the document.
type TemplateCreateDocumentFromTemplateGlobalAccessAuth string

const (
	TemplateCreateDocumentFromTemplateGlobalAccessAuthAccount TemplateCreateDocumentFromTemplateGlobalAccessAuth = "ACCOUNT"
)

func (e TemplateCreateDocumentFromTemplateGlobalAccessAuth) ToPointer() *TemplateCreateDocumentFromTemplateGlobalAccessAuth {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateGlobalAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = TemplateCreateDocumentFromTemplateGlobalAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateGlobalAccessAuth: %v", v)
	}
}

// TemplateCreateDocumentFromTemplateGlobalActionAuth - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type TemplateCreateDocumentFromTemplateGlobalActionAuth string

const (
	TemplateCreateDocumentFromTemplateGlobalActionAuthAccount       TemplateCreateDocumentFromTemplateGlobalActionAuth = "ACCOUNT"
	TemplateCreateDocumentFromTemplateGlobalActionAuthPasskey       TemplateCreateDocumentFromTemplateGlobalActionAuth = "PASSKEY"
	TemplateCreateDocumentFromTemplateGlobalActionAuthTwoFactorAuth TemplateCreateDocumentFromTemplateGlobalActionAuth = "TWO_FACTOR_AUTH"
)

func (e TemplateCreateDocumentFromTemplateGlobalActionAuth) ToPointer() *TemplateCreateDocumentFromTemplateGlobalActionAuth {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateGlobalActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = TemplateCreateDocumentFromTemplateGlobalActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateGlobalActionAuth: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	GlobalAccessAuth *TemplateCreateDocumentFromTemplateGlobalAccessAuth `json:"globalAccessAuth"`
	// The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
	GlobalActionAuth *TemplateCreateDocumentFromTemplateGlobalActionAuth `json:"globalActionAuth"`
}

func (o *TemplateCreateDocumentFromTemplateAuthOptions) GetGlobalAccessAuth() *TemplateCreateDocumentFromTemplateGlobalAccessAuth {
	if o == nil {
		return nil
	}
	return o.GlobalAccessAuth
}

func (o *TemplateCreateDocumentFromTemplateAuthOptions) GetGlobalActionAuth() *TemplateCreateDocumentFromTemplateGlobalActionAuth {
	if o == nil {
		return nil
	}
	return o.GlobalActionAuth
}

type TemplateCreateDocumentFromTemplateFormValuesType string

const (
	TemplateCreateDocumentFromTemplateFormValuesTypeStr     TemplateCreateDocumentFromTemplateFormValuesType = "str"
	TemplateCreateDocumentFromTemplateFormValuesTypeBoolean TemplateCreateDocumentFromTemplateFormValuesType = "boolean"
	TemplateCreateDocumentFromTemplateFormValuesTypeNumber  TemplateCreateDocumentFromTemplateFormValuesType = "number"
)

type TemplateCreateDocumentFromTemplateFormValues struct {
	Str     *string  `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`
	Number  *float64 `queryParam:"inline"`

	Type TemplateCreateDocumentFromTemplateFormValuesType
}

func CreateTemplateCreateDocumentFromTemplateFormValuesStr(str string) TemplateCreateDocumentFromTemplateFormValues {
	typ := TemplateCreateDocumentFromTemplateFormValuesTypeStr

	return TemplateCreateDocumentFromTemplateFormValues{
		Str:  &str,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFormValuesBoolean(boolean bool) TemplateCreateDocumentFromTemplateFormValues {
	typ := TemplateCreateDocumentFromTemplateFormValuesTypeBoolean

	return TemplateCreateDocumentFromTemplateFormValues{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFormValuesNumber(number float64) TemplateCreateDocumentFromTemplateFormValues {
	typ := TemplateCreateDocumentFromTemplateFormValuesTypeNumber

	return TemplateCreateDocumentFromTemplateFormValues{
		Number: &number,
		Type:   typ,
	}
}

func (u *TemplateCreateDocumentFromTemplateFormValues) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TemplateCreateDocumentFromTemplateFormValuesTypeStr
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = TemplateCreateDocumentFromTemplateFormValuesTypeBoolean
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = TemplateCreateDocumentFromTemplateFormValuesTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TemplateCreateDocumentFromTemplateFormValues", string(data))
}

func (u TemplateCreateDocumentFromTemplateFormValues) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type TemplateCreateDocumentFromTemplateFormValues: all fields are null")
}

type TemplateCreateDocumentFromTemplateType string

const (
	TemplateCreateDocumentFromTemplateTypeS3Path  TemplateCreateDocumentFromTemplateType = "S3_PATH"
	TemplateCreateDocumentFromTemplateTypeBytes   TemplateCreateDocumentFromTemplateType = "BYTES"
	TemplateCreateDocumentFromTemplateTypeBytes64 TemplateCreateDocumentFromTemplateType = "BYTES_64"
)

func (e TemplateCreateDocumentFromTemplateType) ToPointer() *TemplateCreateDocumentFromTemplateType {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3_PATH":
		fallthrough
	case "BYTES":
		fallthrough
	case "BYTES_64":
		*e = TemplateCreateDocumentFromTemplateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateType: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateDocumentData struct {
	Type        TemplateCreateDocumentFromTemplateType `json:"type"`
	ID          string                                 `json:"id"`
	Data        string                                 `json:"data"`
	InitialData string                                 `json:"initialData"`
}

func (o *TemplateCreateDocumentFromTemplateDocumentData) GetType() TemplateCreateDocumentFromTemplateType {
	if o == nil {
		return TemplateCreateDocumentFromTemplateType("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateDocumentData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TemplateCreateDocumentFromTemplateDocumentData) GetData() string {
	if o == nil {
		return ""
	}
	return o.Data
}

func (o *TemplateCreateDocumentFromTemplateDocumentData) GetInitialData() string {
	if o == nil {
		return ""
	}
	return o.InitialData
}

type TemplateCreateDocumentFromTemplateSigningOrder string

const (
	TemplateCreateDocumentFromTemplateSigningOrderParallel   TemplateCreateDocumentFromTemplateSigningOrder = "PARALLEL"
	TemplateCreateDocumentFromTemplateSigningOrderSequential TemplateCreateDocumentFromTemplateSigningOrder = "SEQUENTIAL"
)

func (e TemplateCreateDocumentFromTemplateSigningOrder) ToPointer() *TemplateCreateDocumentFromTemplateSigningOrder {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateSigningOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARALLEL":
		fallthrough
	case "SEQUENTIAL":
		*e = TemplateCreateDocumentFromTemplateSigningOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateSigningOrder: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateDistributionMethod string

const (
	TemplateCreateDocumentFromTemplateDistributionMethodEmail TemplateCreateDocumentFromTemplateDistributionMethod = "EMAIL"
	TemplateCreateDocumentFromTemplateDistributionMethodNone  TemplateCreateDocumentFromTemplateDistributionMethod = "NONE"
)

func (e TemplateCreateDocumentFromTemplateDistributionMethod) ToPointer() *TemplateCreateDocumentFromTemplateDistributionMethod {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateDistributionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = TemplateCreateDocumentFromTemplateDistributionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateDistributionMethod: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateEmailSettings struct {
	// Whether to send an email to all recipients that the document is ready for them to sign.
	RecipientSigningRequest *bool `default:"true" json:"recipientSigningRequest"`
	// Whether to send an email to the recipient who was removed from a pending document.
	RecipientRemoved *bool `default:"true" json:"recipientRemoved"`
	// Whether to send an email to the document owner when a recipient has signed the document.
	RecipientSigned *bool `default:"true" json:"recipientSigned"`
	// Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
	DocumentPending *bool `default:"true" json:"documentPending"`
	// Whether to send an email to all recipients when the document is complete.
	DocumentCompleted *bool `default:"true" json:"documentCompleted"`
	// Whether to send an email to all recipients if a pending document has been deleted.
	DocumentDeleted *bool `default:"true" json:"documentDeleted"`
	// Whether to send an email to the document owner when the document is complete.
	OwnerDocumentCompleted *bool `default:"true" json:"ownerDocumentCompleted"`
}

func (t TemplateCreateDocumentFromTemplateEmailSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TemplateCreateDocumentFromTemplateEmailSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TemplateCreateDocumentFromTemplateEmailSettings) GetRecipientSigningRequest() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigningRequest
}

func (o *TemplateCreateDocumentFromTemplateEmailSettings) GetRecipientRemoved() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientRemoved
}

func (o *TemplateCreateDocumentFromTemplateEmailSettings) GetRecipientSigned() *bool {
	if o == nil {
		return nil
	}
	return o.RecipientSigned
}

func (o *TemplateCreateDocumentFromTemplateEmailSettings) GetDocumentPending() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentPending
}

func (o *TemplateCreateDocumentFromTemplateEmailSettings) GetDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentCompleted
}

func (o *TemplateCreateDocumentFromTemplateEmailSettings) GetDocumentDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.DocumentDeleted
}

func (o *TemplateCreateDocumentFromTemplateEmailSettings) GetOwnerDocumentCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.OwnerDocumentCompleted
}

type TemplateCreateDocumentFromTemplateDocumentMeta struct {
	SigningOrder          TemplateCreateDocumentFromTemplateSigningOrder       `json:"signingOrder"`
	DistributionMethod    TemplateCreateDocumentFromTemplateDistributionMethod `json:"distributionMethod"`
	ID                    string                                               `json:"id"`
	Subject               *string                                              `json:"subject"`
	Message               *string                                              `json:"message"`
	Timezone              *string                                              `json:"timezone"`
	Password              *string                                              `json:"password"`
	DateFormat            *string                                              `json:"dateFormat"`
	DocumentID            int64                                                `json:"documentId"`
	RedirectURL           *string                                              `json:"redirectUrl"`
	TypedSignatureEnabled bool                                                 `json:"typedSignatureEnabled"`
	Language              string                                               `json:"language"`
	EmailSettings         *TemplateCreateDocumentFromTemplateEmailSettings     `json:"emailSettings"`
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetSigningOrder() TemplateCreateDocumentFromTemplateSigningOrder {
	if o == nil {
		return TemplateCreateDocumentFromTemplateSigningOrder("")
	}
	return o.SigningOrder
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetDistributionMethod() TemplateCreateDocumentFromTemplateDistributionMethod {
	if o == nil {
		return TemplateCreateDocumentFromTemplateDistributionMethod("")
	}
	return o.DistributionMethod
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetDateFormat() *string {
	if o == nil {
		return nil
	}
	return o.DateFormat
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetDocumentID() int64 {
	if o == nil {
		return 0
	}
	return o.DocumentID
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetTypedSignatureEnabled() bool {
	if o == nil {
		return false
	}
	return o.TypedSignatureEnabled
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetLanguage() string {
	if o == nil {
		return ""
	}
	return o.Language
}

func (o *TemplateCreateDocumentFromTemplateDocumentMeta) GetEmailSettings() *TemplateCreateDocumentFromTemplateEmailSettings {
	if o == nil {
		return nil
	}
	return o.EmailSettings
}

type TemplateCreateDocumentFromTemplateRole string

const (
	TemplateCreateDocumentFromTemplateRoleCc       TemplateCreateDocumentFromTemplateRole = "CC"
	TemplateCreateDocumentFromTemplateRoleSigner   TemplateCreateDocumentFromTemplateRole = "SIGNER"
	TemplateCreateDocumentFromTemplateRoleViewer   TemplateCreateDocumentFromTemplateRole = "VIEWER"
	TemplateCreateDocumentFromTemplateRoleApprover TemplateCreateDocumentFromTemplateRole = "APPROVER"
)

func (e TemplateCreateDocumentFromTemplateRole) ToPointer() *TemplateCreateDocumentFromTemplateRole {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		*e = TemplateCreateDocumentFromTemplateRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateRole: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateReadStatus string

const (
	TemplateCreateDocumentFromTemplateReadStatusNotOpened TemplateCreateDocumentFromTemplateReadStatus = "NOT_OPENED"
	TemplateCreateDocumentFromTemplateReadStatusOpened    TemplateCreateDocumentFromTemplateReadStatus = "OPENED"
)

func (e TemplateCreateDocumentFromTemplateReadStatus) ToPointer() *TemplateCreateDocumentFromTemplateReadStatus {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = TemplateCreateDocumentFromTemplateReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateReadStatus: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateSigningStatus string

const (
	TemplateCreateDocumentFromTemplateSigningStatusNotSigned TemplateCreateDocumentFromTemplateSigningStatus = "NOT_SIGNED"
	TemplateCreateDocumentFromTemplateSigningStatusSigned    TemplateCreateDocumentFromTemplateSigningStatus = "SIGNED"
	TemplateCreateDocumentFromTemplateSigningStatusRejected  TemplateCreateDocumentFromTemplateSigningStatus = "REJECTED"
)

func (e TemplateCreateDocumentFromTemplateSigningStatus) ToPointer() *TemplateCreateDocumentFromTemplateSigningStatus {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = TemplateCreateDocumentFromTemplateSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateSigningStatus: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateSendStatus string

const (
	TemplateCreateDocumentFromTemplateSendStatusNotSent TemplateCreateDocumentFromTemplateSendStatus = "NOT_SENT"
	TemplateCreateDocumentFromTemplateSendStatusSent    TemplateCreateDocumentFromTemplateSendStatus = "SENT"
)

func (e TemplateCreateDocumentFromTemplateSendStatus) ToPointer() *TemplateCreateDocumentFromTemplateSendStatus {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = TemplateCreateDocumentFromTemplateSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateSendStatus: %v", v)
	}
}

// TemplateCreateDocumentFromTemplateAccessAuth - The type of authentication required for the recipient to access the document.
type TemplateCreateDocumentFromTemplateAccessAuth string

const (
	TemplateCreateDocumentFromTemplateAccessAuthAccount TemplateCreateDocumentFromTemplateAccessAuth = "ACCOUNT"
)

func (e TemplateCreateDocumentFromTemplateAccessAuth) ToPointer() *TemplateCreateDocumentFromTemplateAccessAuth {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = TemplateCreateDocumentFromTemplateAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateAccessAuth: %v", v)
	}
}

// TemplateCreateDocumentFromTemplateActionAuth - The type of authentication required for the recipient to sign the document.
type TemplateCreateDocumentFromTemplateActionAuth string

const (
	TemplateCreateDocumentFromTemplateActionAuthAccount       TemplateCreateDocumentFromTemplateActionAuth = "ACCOUNT"
	TemplateCreateDocumentFromTemplateActionAuthPasskey       TemplateCreateDocumentFromTemplateActionAuth = "PASSKEY"
	TemplateCreateDocumentFromTemplateActionAuthTwoFactorAuth TemplateCreateDocumentFromTemplateActionAuth = "TWO_FACTOR_AUTH"
	TemplateCreateDocumentFromTemplateActionAuthExplicitNone  TemplateCreateDocumentFromTemplateActionAuth = "EXPLICIT_NONE"
)

func (e TemplateCreateDocumentFromTemplateActionAuth) ToPointer() *TemplateCreateDocumentFromTemplateActionAuth {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "EXPLICIT_NONE":
		*e = TemplateCreateDocumentFromTemplateActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateActionAuth: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateTemplatesAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	AccessAuth *TemplateCreateDocumentFromTemplateAccessAuth `json:"accessAuth"`
	// The type of authentication required for the recipient to sign the document.
	ActionAuth *TemplateCreateDocumentFromTemplateActionAuth `json:"actionAuth"`
}

func (o *TemplateCreateDocumentFromTemplateTemplatesAuthOptions) GetAccessAuth() *TemplateCreateDocumentFromTemplateAccessAuth {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *TemplateCreateDocumentFromTemplateTemplatesAuthOptions) GetActionAuth() *TemplateCreateDocumentFromTemplateActionAuth {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

type TemplateCreateDocumentFromTemplateTemplatesRecipients struct {
	Role              TemplateCreateDocumentFromTemplateRole                  `json:"role"`
	ReadStatus        TemplateCreateDocumentFromTemplateReadStatus            `json:"readStatus"`
	SigningStatus     TemplateCreateDocumentFromTemplateSigningStatus         `json:"signingStatus"`
	SendStatus        TemplateCreateDocumentFromTemplateSendStatus            `json:"sendStatus"`
	ID                int64                                                   `json:"id"`
	DocumentID        *int64                                                  `json:"documentId"`
	TemplateID        *int64                                                  `json:"templateId"`
	Email             string                                                  `json:"email"`
	Name              string                                                  `json:"name"`
	Token             string                                                  `json:"token"`
	DocumentDeletedAt *string                                                 `json:"documentDeletedAt"`
	Expired           *string                                                 `json:"expired"`
	SignedAt          *string                                                 `json:"signedAt"`
	AuthOptions       *TemplateCreateDocumentFromTemplateTemplatesAuthOptions `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
}

func (o *TemplateCreateDocumentFromTemplateTemplatesRecipients) GetRole() TemplateCreateDocumentFromTemplateRole {
	if o == nil {
		return TemplateCreateDocumentFromTemplateRole("")
	}
	return o.Role
}

func (o *TemplateCreateDocumentFromTemplateTemplatesRecipients) GetReadStatus() TemplateCreateDocumentFromTemplateReadStatus {
	if o == nil {
		return TemplateCreateDocumentFromTemplateReadStatus("")
	}
	return o.ReadStatus
}

func (o *TemplateCreateDocumentFromTemplateTemplatesRecipients) GetSigningStatus() TemplateCreateDocumentFromTemplateSigningStatus {
	if o == nil {
		return TemplateCreateDocumentFromTemplateSigningStatus("")
	}
	return o.SigningStatus
}

func (o *TemplateCreateDocumentFromTemplateTemplatesRecipients) GetSendStatus() TemplateCreateDocumentFromTemplateSendStatus {
	if o == nil {
		return TemplateCreateDocumentFromTemplateSendStatus("")
	}
	return o.SendStatus
}

func (o *TemplateCreateDocumentFromTemplateTemplatesRecipients) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *TemplateCreateDocumentFromTemplateTemplatesRecipients) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *TemplateCreateDocumentFromTemplateTemplatesRecipients) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *TemplateCreateDocumentFromTemplateTemplatesRecipients) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *TemplateCreateDocumentFromTemplateTemplatesRecipients) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TemplateCreateDocumentFromTemplateTemplatesRecipients) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *TemplateCreateDocumentFromTemplateTemplatesRecipients) GetDocumentDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DocumentDeletedAt
}

func (o *TemplateCreateDocumentFromTemplateTemplatesRecipients) GetExpired() *string {
	if o == nil {
		return nil
	}
	return o.Expired
}

func (o *TemplateCreateDocumentFromTemplateTemplatesRecipients) GetSignedAt() *string {
	if o == nil {
		return nil
	}
	return o.SignedAt
}

func (o *TemplateCreateDocumentFromTemplateTemplatesRecipients) GetAuthOptions() *TemplateCreateDocumentFromTemplateTemplatesAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *TemplateCreateDocumentFromTemplateTemplatesRecipients) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *TemplateCreateDocumentFromTemplateTemplatesRecipients) GetRejectionReason() *string {
	if o == nil {
		return nil
	}
	return o.RejectionReason
}

type TemplateCreateDocumentFromTemplateTemplatesType string

const (
	TemplateCreateDocumentFromTemplateTemplatesTypeSignature     TemplateCreateDocumentFromTemplateTemplatesType = "SIGNATURE"
	TemplateCreateDocumentFromTemplateTemplatesTypeFreeSignature TemplateCreateDocumentFromTemplateTemplatesType = "FREE_SIGNATURE"
	TemplateCreateDocumentFromTemplateTemplatesTypeInitials      TemplateCreateDocumentFromTemplateTemplatesType = "INITIALS"
	TemplateCreateDocumentFromTemplateTemplatesTypeName          TemplateCreateDocumentFromTemplateTemplatesType = "NAME"
	TemplateCreateDocumentFromTemplateTemplatesTypeEmail         TemplateCreateDocumentFromTemplateTemplatesType = "EMAIL"
	TemplateCreateDocumentFromTemplateTemplatesTypeDate          TemplateCreateDocumentFromTemplateTemplatesType = "DATE"
	TemplateCreateDocumentFromTemplateTemplatesTypeText          TemplateCreateDocumentFromTemplateTemplatesType = "TEXT"
	TemplateCreateDocumentFromTemplateTemplatesTypeNumber        TemplateCreateDocumentFromTemplateTemplatesType = "NUMBER"
	TemplateCreateDocumentFromTemplateTemplatesTypeRadio         TemplateCreateDocumentFromTemplateTemplatesType = "RADIO"
	TemplateCreateDocumentFromTemplateTemplatesTypeCheckbox      TemplateCreateDocumentFromTemplateTemplatesType = "CHECKBOX"
	TemplateCreateDocumentFromTemplateTemplatesTypeDropdown      TemplateCreateDocumentFromTemplateTemplatesType = "DROPDOWN"
)

func (e TemplateCreateDocumentFromTemplateTemplatesType) ToPointer() *TemplateCreateDocumentFromTemplateTemplatesType {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateTemplatesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = TemplateCreateDocumentFromTemplateTemplatesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateTemplatesType: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type string

const (
	TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9TypeDropdown TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type = "dropdown"
)

func (e TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type) ToPointer() *TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues struct {
	Value string `json:"value"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateCreateDocumentFromTemplateFieldMeta9 struct {
	Label        *string                                                                                               `json:"label,omitempty"`
	Placeholder  *string                                                                                               `json:"placeholder,omitempty"`
	Required     *bool                                                                                                 `json:"required,omitempty"`
	ReadOnly     *bool                                                                                                 `json:"readOnly,omitempty"`
	Type         TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type `json:"type"`
	Values       []TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues                                  `json:"values,omitempty"`
	DefaultValue *string                                                                                               `json:"defaultValue,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta9) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta9) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta9) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta9) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta9) GetType() TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type {
	if o == nil {
		return TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta9) GetValues() []TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta9) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type string

const (
	TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8TypeCheckbox TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type = "checkbox"
)

func (e TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type) ToPointer() *TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateCreateDocumentFromTemplateFieldMeta8 struct {
	Label            *string                                                                                               `json:"label,omitempty"`
	Placeholder      *string                                                                                               `json:"placeholder,omitempty"`
	Required         *bool                                                                                                 `json:"required,omitempty"`
	ReadOnly         *bool                                                                                                 `json:"readOnly,omitempty"`
	Type             TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type `json:"type"`
	Values           []TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues                                          `json:"values,omitempty"`
	ValidationRule   *string                                                                                               `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                                              `json:"validationLength,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta8) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta8) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta8) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta8) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta8) GetType() TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type {
	if o == nil {
		return TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta8) GetValues() []TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta8) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta8) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType string

const (
	TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsTypeRadio TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType = "radio"
)

func (e TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType) ToPointer() *TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateFieldMetaValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *TemplateCreateDocumentFromTemplateFieldMetaValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateCreateDocumentFromTemplateFieldMeta7 struct {
	Label       *string                                                                                              `json:"label,omitempty"`
	Placeholder *string                                                                                              `json:"placeholder,omitempty"`
	Required    *bool                                                                                                `json:"required,omitempty"`
	ReadOnly    *bool                                                                                                `json:"readOnly,omitempty"`
	Type        TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType `json:"type"`
	Values      []TemplateCreateDocumentFromTemplateFieldMetaValues                                                  `json:"values,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta7) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta7) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta7) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta7) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta7) GetType() TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType {
	if o == nil {
		return TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta7) GetValues() []TemplateCreateDocumentFromTemplateFieldMetaValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType string

const (
	TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyTypeNumber TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType = "number"
)

func (e TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType) ToPointer() *TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateFieldMeta6 struct {
	Label        *string                                                                                        `json:"label,omitempty"`
	Placeholder  *string                                                                                        `json:"placeholder,omitempty"`
	Required     *bool                                                                                          `json:"required,omitempty"`
	ReadOnly     *bool                                                                                          `json:"readOnly,omitempty"`
	Type         TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType `json:"type"`
	NumberFormat *string                                                                                        `json:"numberFormat,omitempty"`
	Value        *string                                                                                        `json:"value,omitempty"`
	MinValue     *float64                                                                                       `json:"minValue,omitempty"`
	MaxValue     *float64                                                                                       `json:"maxValue,omitempty"`
	FontSize     *float64                                                                                       `json:"fontSize,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta6) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta6) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta6) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta6) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta6) GetType() TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta6) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta6) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta6) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta6) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta6) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType string

const (
	TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONTypeText TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType = "text"
)

func (e TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType) ToPointer() *TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateFieldMeta5 struct {
	Label          *string                                                                            `json:"label,omitempty"`
	Placeholder    *string                                                                            `json:"placeholder,omitempty"`
	Required       *bool                                                                              `json:"required,omitempty"`
	ReadOnly       *bool                                                                              `json:"readOnly,omitempty"`
	Type           TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType `json:"type"`
	Text           *string                                                                            `json:"text,omitempty"`
	CharacterLimit *float64                                                                           `json:"characterLimit,omitempty"`
	FontSize       *float64                                                                           `json:"fontSize,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta5) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta5) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta5) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta5) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta5) GetType() TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType {
	if o == nil {
		return TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta5) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta5) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta5) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type string

const (
	TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200TypeDate TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type = "date"
)

func (e TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type) ToPointer() *TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateFieldMeta4 struct {
	Label       *string                                                             `json:"label,omitempty"`
	Placeholder *string                                                             `json:"placeholder,omitempty"`
	Required    *bool                                                               `json:"required,omitempty"`
	ReadOnly    *bool                                                               `json:"readOnly,omitempty"`
	Type        TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type `json:"type"`
	FontSize    *float64                                                            `json:"fontSize,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta4) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta4) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta4) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta4) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta4) GetType() TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type {
	if o == nil {
		return TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta4) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType string

const (
	TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseTypeEmail TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType = "email"
)

func (e TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType) ToPointer() *TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateFieldMeta3 struct {
	Label       *string                                                          `json:"label,omitempty"`
	Placeholder *string                                                          `json:"placeholder,omitempty"`
	Required    *bool                                                            `json:"required,omitempty"`
	ReadOnly    *bool                                                            `json:"readOnly,omitempty"`
	Type        TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType `json:"type"`
	FontSize    *float64                                                         `json:"fontSize,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta3) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta3) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta3) GetType() TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType {
	if o == nil {
		return TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta3) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateCreateDocumentFromTemplateFieldMetaTemplatesType string

const (
	TemplateCreateDocumentFromTemplateFieldMetaTemplatesTypeName TemplateCreateDocumentFromTemplateFieldMetaTemplatesType = "name"
)

func (e TemplateCreateDocumentFromTemplateFieldMetaTemplatesType) ToPointer() *TemplateCreateDocumentFromTemplateFieldMetaTemplatesType {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateFieldMetaTemplatesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = TemplateCreateDocumentFromTemplateFieldMetaTemplatesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateFieldMetaTemplatesType: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateFieldMeta2 struct {
	Label       *string                                                  `json:"label,omitempty"`
	Placeholder *string                                                  `json:"placeholder,omitempty"`
	Required    *bool                                                    `json:"required,omitempty"`
	ReadOnly    *bool                                                    `json:"readOnly,omitempty"`
	Type        TemplateCreateDocumentFromTemplateFieldMetaTemplatesType `json:"type"`
	FontSize    *float64                                                 `json:"fontSize,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta2) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta2) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta2) GetType() TemplateCreateDocumentFromTemplateFieldMetaTemplatesType {
	if o == nil {
		return TemplateCreateDocumentFromTemplateFieldMetaTemplatesType("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta2) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateCreateDocumentFromTemplateFieldMetaType string

const (
	TemplateCreateDocumentFromTemplateFieldMetaTypeInitials TemplateCreateDocumentFromTemplateFieldMetaType = "initials"
)

func (e TemplateCreateDocumentFromTemplateFieldMetaType) ToPointer() *TemplateCreateDocumentFromTemplateFieldMetaType {
	return &e
}
func (e *TemplateCreateDocumentFromTemplateFieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = TemplateCreateDocumentFromTemplateFieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateCreateDocumentFromTemplateFieldMetaType: %v", v)
	}
}

type TemplateCreateDocumentFromTemplateFieldMeta1 struct {
	Label       *string                                         `json:"label,omitempty"`
	Placeholder *string                                         `json:"placeholder,omitempty"`
	Required    *bool                                           `json:"required,omitempty"`
	ReadOnly    *bool                                           `json:"readOnly,omitempty"`
	Type        TemplateCreateDocumentFromTemplateFieldMetaType `json:"type"`
	FontSize    *float64                                        `json:"fontSize,omitempty"`
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta1) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta1) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta1) GetType() TemplateCreateDocumentFromTemplateFieldMetaType {
	if o == nil {
		return TemplateCreateDocumentFromTemplateFieldMetaType("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFieldMeta1) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateCreateDocumentFromTemplateFieldMetaUnionType string

const (
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta1 TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template-createDocumentFromTemplate_fieldMeta_1"
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta2 TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template-createDocumentFromTemplate_fieldMeta_2"
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta3 TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template-createDocumentFromTemplate_fieldMeta_3"
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta4 TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template-createDocumentFromTemplate_fieldMeta_4"
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta5 TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template-createDocumentFromTemplate_fieldMeta_5"
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta6 TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template-createDocumentFromTemplate_fieldMeta_6"
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta7 TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template-createDocumentFromTemplate_fieldMeta_7"
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta8 TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template-createDocumentFromTemplate_fieldMeta_8"
	TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta9 TemplateCreateDocumentFromTemplateFieldMetaUnionType = "template-createDocumentFromTemplate_fieldMeta_9"
)

type TemplateCreateDocumentFromTemplateFieldMeta struct {
	TemplateCreateDocumentFromTemplateFieldMeta1 *TemplateCreateDocumentFromTemplateFieldMeta1 `queryParam:"inline"`
	TemplateCreateDocumentFromTemplateFieldMeta2 *TemplateCreateDocumentFromTemplateFieldMeta2 `queryParam:"inline"`
	TemplateCreateDocumentFromTemplateFieldMeta3 *TemplateCreateDocumentFromTemplateFieldMeta3 `queryParam:"inline"`
	TemplateCreateDocumentFromTemplateFieldMeta4 *TemplateCreateDocumentFromTemplateFieldMeta4 `queryParam:"inline"`
	TemplateCreateDocumentFromTemplateFieldMeta5 *TemplateCreateDocumentFromTemplateFieldMeta5 `queryParam:"inline"`
	TemplateCreateDocumentFromTemplateFieldMeta6 *TemplateCreateDocumentFromTemplateFieldMeta6 `queryParam:"inline"`
	TemplateCreateDocumentFromTemplateFieldMeta7 *TemplateCreateDocumentFromTemplateFieldMeta7 `queryParam:"inline"`
	TemplateCreateDocumentFromTemplateFieldMeta8 *TemplateCreateDocumentFromTemplateFieldMeta8 `queryParam:"inline"`
	TemplateCreateDocumentFromTemplateFieldMeta9 *TemplateCreateDocumentFromTemplateFieldMeta9 `queryParam:"inline"`

	Type TemplateCreateDocumentFromTemplateFieldMetaUnionType
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaTemplateCreateDocumentFromTemplateFieldMeta1(templateCreateDocumentFromTemplateFieldMeta1 TemplateCreateDocumentFromTemplateFieldMeta1) TemplateCreateDocumentFromTemplateFieldMeta {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta1

	return TemplateCreateDocumentFromTemplateFieldMeta{
		TemplateCreateDocumentFromTemplateFieldMeta1: &templateCreateDocumentFromTemplateFieldMeta1,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaTemplateCreateDocumentFromTemplateFieldMeta2(templateCreateDocumentFromTemplateFieldMeta2 TemplateCreateDocumentFromTemplateFieldMeta2) TemplateCreateDocumentFromTemplateFieldMeta {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta2

	return TemplateCreateDocumentFromTemplateFieldMeta{
		TemplateCreateDocumentFromTemplateFieldMeta2: &templateCreateDocumentFromTemplateFieldMeta2,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaTemplateCreateDocumentFromTemplateFieldMeta3(templateCreateDocumentFromTemplateFieldMeta3 TemplateCreateDocumentFromTemplateFieldMeta3) TemplateCreateDocumentFromTemplateFieldMeta {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta3

	return TemplateCreateDocumentFromTemplateFieldMeta{
		TemplateCreateDocumentFromTemplateFieldMeta3: &templateCreateDocumentFromTemplateFieldMeta3,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaTemplateCreateDocumentFromTemplateFieldMeta4(templateCreateDocumentFromTemplateFieldMeta4 TemplateCreateDocumentFromTemplateFieldMeta4) TemplateCreateDocumentFromTemplateFieldMeta {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta4

	return TemplateCreateDocumentFromTemplateFieldMeta{
		TemplateCreateDocumentFromTemplateFieldMeta4: &templateCreateDocumentFromTemplateFieldMeta4,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaTemplateCreateDocumentFromTemplateFieldMeta5(templateCreateDocumentFromTemplateFieldMeta5 TemplateCreateDocumentFromTemplateFieldMeta5) TemplateCreateDocumentFromTemplateFieldMeta {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta5

	return TemplateCreateDocumentFromTemplateFieldMeta{
		TemplateCreateDocumentFromTemplateFieldMeta5: &templateCreateDocumentFromTemplateFieldMeta5,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaTemplateCreateDocumentFromTemplateFieldMeta6(templateCreateDocumentFromTemplateFieldMeta6 TemplateCreateDocumentFromTemplateFieldMeta6) TemplateCreateDocumentFromTemplateFieldMeta {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta6

	return TemplateCreateDocumentFromTemplateFieldMeta{
		TemplateCreateDocumentFromTemplateFieldMeta6: &templateCreateDocumentFromTemplateFieldMeta6,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaTemplateCreateDocumentFromTemplateFieldMeta7(templateCreateDocumentFromTemplateFieldMeta7 TemplateCreateDocumentFromTemplateFieldMeta7) TemplateCreateDocumentFromTemplateFieldMeta {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta7

	return TemplateCreateDocumentFromTemplateFieldMeta{
		TemplateCreateDocumentFromTemplateFieldMeta7: &templateCreateDocumentFromTemplateFieldMeta7,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaTemplateCreateDocumentFromTemplateFieldMeta8(templateCreateDocumentFromTemplateFieldMeta8 TemplateCreateDocumentFromTemplateFieldMeta8) TemplateCreateDocumentFromTemplateFieldMeta {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta8

	return TemplateCreateDocumentFromTemplateFieldMeta{
		TemplateCreateDocumentFromTemplateFieldMeta8: &templateCreateDocumentFromTemplateFieldMeta8,
		Type: typ,
	}
}

func CreateTemplateCreateDocumentFromTemplateFieldMetaTemplateCreateDocumentFromTemplateFieldMeta9(templateCreateDocumentFromTemplateFieldMeta9 TemplateCreateDocumentFromTemplateFieldMeta9) TemplateCreateDocumentFromTemplateFieldMeta {
	typ := TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta9

	return TemplateCreateDocumentFromTemplateFieldMeta{
		TemplateCreateDocumentFromTemplateFieldMeta9: &templateCreateDocumentFromTemplateFieldMeta9,
		Type: typ,
	}
}

func (u *TemplateCreateDocumentFromTemplateFieldMeta) UnmarshalJSON(data []byte) error {

	var templateCreateDocumentFromTemplateFieldMeta1 TemplateCreateDocumentFromTemplateFieldMeta1 = TemplateCreateDocumentFromTemplateFieldMeta1{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMeta1, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMeta1 = &templateCreateDocumentFromTemplateFieldMeta1
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta1
		return nil
	}

	var templateCreateDocumentFromTemplateFieldMeta2 TemplateCreateDocumentFromTemplateFieldMeta2 = TemplateCreateDocumentFromTemplateFieldMeta2{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMeta2, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMeta2 = &templateCreateDocumentFromTemplateFieldMeta2
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta2
		return nil
	}

	var templateCreateDocumentFromTemplateFieldMeta3 TemplateCreateDocumentFromTemplateFieldMeta3 = TemplateCreateDocumentFromTemplateFieldMeta3{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMeta3, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMeta3 = &templateCreateDocumentFromTemplateFieldMeta3
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta3
		return nil
	}

	var templateCreateDocumentFromTemplateFieldMeta4 TemplateCreateDocumentFromTemplateFieldMeta4 = TemplateCreateDocumentFromTemplateFieldMeta4{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMeta4, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMeta4 = &templateCreateDocumentFromTemplateFieldMeta4
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta4
		return nil
	}

	var templateCreateDocumentFromTemplateFieldMeta7 TemplateCreateDocumentFromTemplateFieldMeta7 = TemplateCreateDocumentFromTemplateFieldMeta7{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMeta7, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMeta7 = &templateCreateDocumentFromTemplateFieldMeta7
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta7
		return nil
	}

	var templateCreateDocumentFromTemplateFieldMeta9 TemplateCreateDocumentFromTemplateFieldMeta9 = TemplateCreateDocumentFromTemplateFieldMeta9{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMeta9, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMeta9 = &templateCreateDocumentFromTemplateFieldMeta9
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta9
		return nil
	}

	var templateCreateDocumentFromTemplateFieldMeta5 TemplateCreateDocumentFromTemplateFieldMeta5 = TemplateCreateDocumentFromTemplateFieldMeta5{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMeta5, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMeta5 = &templateCreateDocumentFromTemplateFieldMeta5
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta5
		return nil
	}

	var templateCreateDocumentFromTemplateFieldMeta8 TemplateCreateDocumentFromTemplateFieldMeta8 = TemplateCreateDocumentFromTemplateFieldMeta8{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMeta8, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMeta8 = &templateCreateDocumentFromTemplateFieldMeta8
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta8
		return nil
	}

	var templateCreateDocumentFromTemplateFieldMeta6 TemplateCreateDocumentFromTemplateFieldMeta6 = TemplateCreateDocumentFromTemplateFieldMeta6{}
	if err := utils.UnmarshalJSON(data, &templateCreateDocumentFromTemplateFieldMeta6, "", true, true); err == nil {
		u.TemplateCreateDocumentFromTemplateFieldMeta6 = &templateCreateDocumentFromTemplateFieldMeta6
		u.Type = TemplateCreateDocumentFromTemplateFieldMetaUnionTypeTemplateCreateDocumentFromTemplateFieldMeta6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TemplateCreateDocumentFromTemplateFieldMeta", string(data))
}

func (u TemplateCreateDocumentFromTemplateFieldMeta) MarshalJSON() ([]byte, error) {
	if u.TemplateCreateDocumentFromTemplateFieldMeta1 != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMeta1, "", true)
	}

	if u.TemplateCreateDocumentFromTemplateFieldMeta2 != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMeta2, "", true)
	}

	if u.TemplateCreateDocumentFromTemplateFieldMeta3 != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMeta3, "", true)
	}

	if u.TemplateCreateDocumentFromTemplateFieldMeta4 != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMeta4, "", true)
	}

	if u.TemplateCreateDocumentFromTemplateFieldMeta5 != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMeta5, "", true)
	}

	if u.TemplateCreateDocumentFromTemplateFieldMeta6 != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMeta6, "", true)
	}

	if u.TemplateCreateDocumentFromTemplateFieldMeta7 != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMeta7, "", true)
	}

	if u.TemplateCreateDocumentFromTemplateFieldMeta8 != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMeta8, "", true)
	}

	if u.TemplateCreateDocumentFromTemplateFieldMeta9 != nil {
		return utils.MarshalJSON(u.TemplateCreateDocumentFromTemplateFieldMeta9, "", true)
	}

	return nil, errors.New("could not marshal union type TemplateCreateDocumentFromTemplateFieldMeta: all fields are null")
}

type TemplateCreateDocumentFromTemplateFields struct {
	Type        TemplateCreateDocumentFromTemplateTemplatesType `json:"type"`
	ID          int64                                           `json:"id"`
	SecondaryID string                                          `json:"secondaryId"`
	DocumentID  *int64                                          `json:"documentId"`
	TemplateID  *int64                                          `json:"templateId"`
	RecipientID int64                                           `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                                      `json:"page"`
	PositionX  any                                          `json:"positionX,omitempty"`
	PositionY  any                                          `json:"positionY,omitempty"`
	Width      any                                          `json:"width,omitempty"`
	Height     any                                          `json:"height,omitempty"`
	CustomText string                                       `json:"customText"`
	Inserted   bool                                         `json:"inserted"`
	FieldMeta  *TemplateCreateDocumentFromTemplateFieldMeta `json:"fieldMeta"`
}

func (o *TemplateCreateDocumentFromTemplateFields) GetType() TemplateCreateDocumentFromTemplateTemplatesType {
	if o == nil {
		return TemplateCreateDocumentFromTemplateTemplatesType("")
	}
	return o.Type
}

func (o *TemplateCreateDocumentFromTemplateFields) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *TemplateCreateDocumentFromTemplateFields) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *TemplateCreateDocumentFromTemplateFields) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *TemplateCreateDocumentFromTemplateFields) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *TemplateCreateDocumentFromTemplateFields) GetRecipientID() int64 {
	if o == nil {
		return 0
	}
	return o.RecipientID
}

func (o *TemplateCreateDocumentFromTemplateFields) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *TemplateCreateDocumentFromTemplateFields) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *TemplateCreateDocumentFromTemplateFields) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *TemplateCreateDocumentFromTemplateFields) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *TemplateCreateDocumentFromTemplateFields) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *TemplateCreateDocumentFromTemplateFields) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *TemplateCreateDocumentFromTemplateFields) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *TemplateCreateDocumentFromTemplateFields) GetFieldMeta() *TemplateCreateDocumentFromTemplateFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

// TemplateCreateDocumentFromTemplateResponseBody - Successful response
type TemplateCreateDocumentFromTemplateResponseBody struct {
	Visibility TemplateCreateDocumentFromTemplateVisibility `json:"visibility"`
	Status     TemplateCreateDocumentFromTemplateStatus     `json:"status"`
	Source     TemplateCreateDocumentFromTemplateSource     `json:"source"`
	ID         int64                                        `json:"id"`
	// A custom external ID you can use to identify the document.
	ExternalID *string `json:"externalId"`
	// The ID of the user that created this document.
	UserID         float64                                                 `json:"userId"`
	AuthOptions    *TemplateCreateDocumentFromTemplateAuthOptions          `json:"authOptions"`
	FormValues     map[string]TemplateCreateDocumentFromTemplateFormValues `json:"formValues"`
	Title          string                                                  `json:"title"`
	DocumentDataID string                                                  `json:"documentDataId"`
	CreatedAt      string                                                  `json:"createdAt"`
	UpdatedAt      string                                                  `json:"updatedAt"`
	CompletedAt    *string                                                 `json:"completedAt"`
	DeletedAt      *string                                                 `json:"deletedAt"`
	TeamID         *int64                                                  `json:"teamId"`
	TemplateID     *int64                                                  `json:"templateId"`
	DocumentData   TemplateCreateDocumentFromTemplateDocumentData          `json:"documentData"`
	DocumentMeta   *TemplateCreateDocumentFromTemplateDocumentMeta         `json:"documentMeta"`
	Recipients     []TemplateCreateDocumentFromTemplateTemplatesRecipients `json:"recipients"`
	Fields         []TemplateCreateDocumentFromTemplateFields              `json:"fields"`
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetVisibility() TemplateCreateDocumentFromTemplateVisibility {
	if o == nil {
		return TemplateCreateDocumentFromTemplateVisibility("")
	}
	return o.Visibility
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetStatus() TemplateCreateDocumentFromTemplateStatus {
	if o == nil {
		return TemplateCreateDocumentFromTemplateStatus("")
	}
	return o.Status
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetSource() TemplateCreateDocumentFromTemplateSource {
	if o == nil {
		return TemplateCreateDocumentFromTemplateSource("")
	}
	return o.Source
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetUserID() float64 {
	if o == nil {
		return 0.0
	}
	return o.UserID
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetAuthOptions() *TemplateCreateDocumentFromTemplateAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetFormValues() map[string]TemplateCreateDocumentFromTemplateFormValues {
	if o == nil {
		return nil
	}
	return o.FormValues
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetDocumentDataID() string {
	if o == nil {
		return ""
	}
	return o.DocumentDataID
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetCompletedAt() *string {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetTeamID() *int64 {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetDocumentData() TemplateCreateDocumentFromTemplateDocumentData {
	if o == nil {
		return TemplateCreateDocumentFromTemplateDocumentData{}
	}
	return o.DocumentData
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetDocumentMeta() *TemplateCreateDocumentFromTemplateDocumentMeta {
	if o == nil {
		return nil
	}
	return o.DocumentMeta
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetRecipients() []TemplateCreateDocumentFromTemplateTemplatesRecipients {
	if o == nil {
		return []TemplateCreateDocumentFromTemplateTemplatesRecipients{}
	}
	return o.Recipients
}

func (o *TemplateCreateDocumentFromTemplateResponseBody) GetFields() []TemplateCreateDocumentFromTemplateFields {
	if o == nil {
		return []TemplateCreateDocumentFromTemplateFields{}
	}
	return o.Fields
}

type TemplateCreateDocumentFromTemplateResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *TemplateCreateDocumentFromTemplateResponseBody
}

func (o *TemplateCreateDocumentFromTemplateResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *TemplateCreateDocumentFromTemplateResponse) GetObject() *TemplateCreateDocumentFromTemplateResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
