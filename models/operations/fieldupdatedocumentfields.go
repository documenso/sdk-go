// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldUpdateDocumentFieldsTypeDropdownRequest1 string

const (
	FieldUpdateDocumentFieldsTypeDropdownRequest1Dropdown FieldUpdateDocumentFieldsTypeDropdownRequest1 = "DROPDOWN"
)

func (e FieldUpdateDocumentFieldsTypeDropdownRequest1) ToPointer() *FieldUpdateDocumentFieldsTypeDropdownRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeDropdownRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = FieldUpdateDocumentFieldsTypeDropdownRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeDropdownRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldsTypeDropdownRequest2 string

const (
	FieldUpdateDocumentFieldsTypeDropdownRequest2Dropdown FieldUpdateDocumentFieldsTypeDropdownRequest2 = "dropdown"
)

func (e FieldUpdateDocumentFieldsTypeDropdownRequest2) ToPointer() *FieldUpdateDocumentFieldsTypeDropdownRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeDropdownRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldUpdateDocumentFieldsTypeDropdownRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeDropdownRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldsValueDropdown struct {
	Value string `json:"value"`
}

func (f FieldUpdateDocumentFieldsValueDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsValueDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsValueDropdown) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldUpdateDocumentFieldsFieldMetaDropdownRequest struct {
	Label        *string                                       `json:"label,omitempty"`
	Placeholder  *string                                       `json:"placeholder,omitempty"`
	Required     *bool                                         `json:"required,omitempty"`
	ReadOnly     *bool                                         `json:"readOnly,omitempty"`
	Type         FieldUpdateDocumentFieldsTypeDropdownRequest2 `json:"type"`
	Values       []FieldUpdateDocumentFieldsValueDropdown      `json:"values,omitempty"`
	DefaultValue *string                                       `json:"defaultValue,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldMetaDropdownRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaDropdownRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaDropdownRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaDropdownRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaDropdownRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaDropdownRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaDropdownRequest) GetType() FieldUpdateDocumentFieldsTypeDropdownRequest2 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeDropdownRequest2("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaDropdownRequest) GetValues() []FieldUpdateDocumentFieldsValueDropdown {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldUpdateDocumentFieldsFieldMetaDropdownRequest) GetDefaultValue() *string {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

type FieldUpdateDocumentFieldsFieldDropdown struct {
	Type      FieldUpdateDocumentFieldsTypeDropdownRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldMetaDropdownRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldDropdown) GetType() FieldUpdateDocumentFieldsTypeDropdownRequest1 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeDropdownRequest1("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldDropdown) GetFieldMeta() *FieldUpdateDocumentFieldsFieldMetaDropdownRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldUpdateDocumentFieldsFieldDropdown) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldUpdateDocumentFieldsFieldDropdown) GetPageNumber() *float64 {
	if f == nil {
		return nil
	}
	return f.PageNumber
}

func (f *FieldUpdateDocumentFieldsFieldDropdown) GetPageX() *float64 {
	if f == nil {
		return nil
	}
	return f.PageX
}

func (f *FieldUpdateDocumentFieldsFieldDropdown) GetPageY() *float64 {
	if f == nil {
		return nil
	}
	return f.PageY
}

func (f *FieldUpdateDocumentFieldsFieldDropdown) GetWidth() *float64 {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FieldUpdateDocumentFieldsFieldDropdown) GetHeight() *float64 {
	if f == nil {
		return nil
	}
	return f.Height
}

type FieldUpdateDocumentFieldsTypeCheckboxRequest1 string

const (
	FieldUpdateDocumentFieldsTypeCheckboxRequest1Checkbox FieldUpdateDocumentFieldsTypeCheckboxRequest1 = "CHECKBOX"
)

func (e FieldUpdateDocumentFieldsTypeCheckboxRequest1) ToPointer() *FieldUpdateDocumentFieldsTypeCheckboxRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeCheckboxRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = FieldUpdateDocumentFieldsTypeCheckboxRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeCheckboxRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldsTypeCheckboxRequest2 string

const (
	FieldUpdateDocumentFieldsTypeCheckboxRequest2Checkbox FieldUpdateDocumentFieldsTypeCheckboxRequest2 = "checkbox"
)

func (e FieldUpdateDocumentFieldsTypeCheckboxRequest2) ToPointer() *FieldUpdateDocumentFieldsTypeCheckboxRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeCheckboxRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldUpdateDocumentFieldsTypeCheckboxRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeCheckboxRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldsValueCheckbox struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldUpdateDocumentFieldsValueCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsValueCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsValueCheckbox) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldUpdateDocumentFieldsValueCheckbox) GetChecked() bool {
	if f == nil {
		return false
	}
	return f.Checked
}

func (f *FieldUpdateDocumentFieldsValueCheckbox) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldUpdateDocumentFieldsDirectionRequest string

const (
	FieldUpdateDocumentFieldsDirectionRequestVertical   FieldUpdateDocumentFieldsDirectionRequest = "vertical"
	FieldUpdateDocumentFieldsDirectionRequestHorizontal FieldUpdateDocumentFieldsDirectionRequest = "horizontal"
)

func (e FieldUpdateDocumentFieldsDirectionRequest) ToPointer() *FieldUpdateDocumentFieldsDirectionRequest {
	return &e
}
func (e *FieldUpdateDocumentFieldsDirectionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vertical":
		fallthrough
	case "horizontal":
		*e = FieldUpdateDocumentFieldsDirectionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsDirectionRequest: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaCheckboxRequest struct {
	Label            *string                                       `json:"label,omitempty"`
	Placeholder      *string                                       `json:"placeholder,omitempty"`
	Required         *bool                                         `json:"required,omitempty"`
	ReadOnly         *bool                                         `json:"readOnly,omitempty"`
	Type             FieldUpdateDocumentFieldsTypeCheckboxRequest2 `json:"type"`
	Values           []FieldUpdateDocumentFieldsValueCheckbox      `json:"values,omitempty"`
	ValidationRule   *string                                       `json:"validationRule,omitempty"`
	ValidationLength *float64                                      `json:"validationLength,omitempty"`
	Direction        *FieldUpdateDocumentFieldsDirectionRequest    `default:"vertical" json:"direction"`
}

func (f FieldUpdateDocumentFieldsFieldMetaCheckboxRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxRequest) GetType() FieldUpdateDocumentFieldsTypeCheckboxRequest2 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeCheckboxRequest2("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxRequest) GetValues() []FieldUpdateDocumentFieldsValueCheckbox {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxRequest) GetValidationRule() *string {
	if f == nil {
		return nil
	}
	return f.ValidationRule
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxRequest) GetValidationLength() *float64 {
	if f == nil {
		return nil
	}
	return f.ValidationLength
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxRequest) GetDirection() *FieldUpdateDocumentFieldsDirectionRequest {
	if f == nil {
		return nil
	}
	return f.Direction
}

type FieldUpdateDocumentFieldsFieldCheckbox struct {
	Type      FieldUpdateDocumentFieldsTypeCheckboxRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldMetaCheckboxRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldCheckbox) GetType() FieldUpdateDocumentFieldsTypeCheckboxRequest1 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeCheckboxRequest1("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldCheckbox) GetFieldMeta() *FieldUpdateDocumentFieldsFieldMetaCheckboxRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldUpdateDocumentFieldsFieldCheckbox) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldUpdateDocumentFieldsFieldCheckbox) GetPageNumber() *float64 {
	if f == nil {
		return nil
	}
	return f.PageNumber
}

func (f *FieldUpdateDocumentFieldsFieldCheckbox) GetPageX() *float64 {
	if f == nil {
		return nil
	}
	return f.PageX
}

func (f *FieldUpdateDocumentFieldsFieldCheckbox) GetPageY() *float64 {
	if f == nil {
		return nil
	}
	return f.PageY
}

func (f *FieldUpdateDocumentFieldsFieldCheckbox) GetWidth() *float64 {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FieldUpdateDocumentFieldsFieldCheckbox) GetHeight() *float64 {
	if f == nil {
		return nil
	}
	return f.Height
}

type FieldUpdateDocumentFieldsTypeRadioRequest1 string

const (
	FieldUpdateDocumentFieldsTypeRadioRequest1Radio FieldUpdateDocumentFieldsTypeRadioRequest1 = "RADIO"
)

func (e FieldUpdateDocumentFieldsTypeRadioRequest1) ToPointer() *FieldUpdateDocumentFieldsTypeRadioRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeRadioRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = FieldUpdateDocumentFieldsTypeRadioRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeRadioRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldsTypeRadioRequest2 string

const (
	FieldUpdateDocumentFieldsTypeRadioRequest2Radio FieldUpdateDocumentFieldsTypeRadioRequest2 = "radio"
)

func (e FieldUpdateDocumentFieldsTypeRadioRequest2) ToPointer() *FieldUpdateDocumentFieldsTypeRadioRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeRadioRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldUpdateDocumentFieldsTypeRadioRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeRadioRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldsValueRadio struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldUpdateDocumentFieldsValueRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsValueRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsValueRadio) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldUpdateDocumentFieldsValueRadio) GetChecked() bool {
	if f == nil {
		return false
	}
	return f.Checked
}

func (f *FieldUpdateDocumentFieldsValueRadio) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldUpdateDocumentFieldsFieldMetaRadioRequest struct {
	Label       *string                                    `json:"label,omitempty"`
	Placeholder *string                                    `json:"placeholder,omitempty"`
	Required    *bool                                      `json:"required,omitempty"`
	ReadOnly    *bool                                      `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsTypeRadioRequest2 `json:"type"`
	Values      []FieldUpdateDocumentFieldsValueRadio      `json:"values,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldMetaRadioRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaRadioRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaRadioRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaRadioRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaRadioRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaRadioRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaRadioRequest) GetType() FieldUpdateDocumentFieldsTypeRadioRequest2 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeRadioRequest2("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaRadioRequest) GetValues() []FieldUpdateDocumentFieldsValueRadio {
	if f == nil {
		return nil
	}
	return f.Values
}

type FieldUpdateDocumentFieldsFieldRadio struct {
	Type      FieldUpdateDocumentFieldsTypeRadioRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldMetaRadioRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldRadio) GetType() FieldUpdateDocumentFieldsTypeRadioRequest1 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeRadioRequest1("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldRadio) GetFieldMeta() *FieldUpdateDocumentFieldsFieldMetaRadioRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldUpdateDocumentFieldsFieldRadio) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldUpdateDocumentFieldsFieldRadio) GetPageNumber() *float64 {
	if f == nil {
		return nil
	}
	return f.PageNumber
}

func (f *FieldUpdateDocumentFieldsFieldRadio) GetPageX() *float64 {
	if f == nil {
		return nil
	}
	return f.PageX
}

func (f *FieldUpdateDocumentFieldsFieldRadio) GetPageY() *float64 {
	if f == nil {
		return nil
	}
	return f.PageY
}

func (f *FieldUpdateDocumentFieldsFieldRadio) GetWidth() *float64 {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FieldUpdateDocumentFieldsFieldRadio) GetHeight() *float64 {
	if f == nil {
		return nil
	}
	return f.Height
}

type FieldUpdateDocumentFieldsTypeNumberRequest1 string

const (
	FieldUpdateDocumentFieldsTypeNumberRequest1Number FieldUpdateDocumentFieldsTypeNumberRequest1 = "NUMBER"
)

func (e FieldUpdateDocumentFieldsTypeNumberRequest1) ToPointer() *FieldUpdateDocumentFieldsTypeNumberRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeNumberRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = FieldUpdateDocumentFieldsTypeNumberRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeNumberRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldsTypeNumberRequest2 string

const (
	FieldUpdateDocumentFieldsTypeNumberRequest2Number FieldUpdateDocumentFieldsTypeNumberRequest2 = "number"
)

func (e FieldUpdateDocumentFieldsTypeNumberRequest2) ToPointer() *FieldUpdateDocumentFieldsTypeNumberRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeNumberRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldUpdateDocumentFieldsTypeNumberRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeNumberRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldsTextAlignNumber string

const (
	FieldUpdateDocumentFieldsTextAlignNumberLeft   FieldUpdateDocumentFieldsTextAlignNumber = "left"
	FieldUpdateDocumentFieldsTextAlignNumberCenter FieldUpdateDocumentFieldsTextAlignNumber = "center"
	FieldUpdateDocumentFieldsTextAlignNumberRight  FieldUpdateDocumentFieldsTextAlignNumber = "right"
)

func (e FieldUpdateDocumentFieldsTextAlignNumber) ToPointer() *FieldUpdateDocumentFieldsTextAlignNumber {
	return &e
}
func (e *FieldUpdateDocumentFieldsTextAlignNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldsTextAlignNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTextAlignNumber: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaNumberRequest struct {
	Label        *string                                     `json:"label,omitempty"`
	Placeholder  *string                                     `json:"placeholder,omitempty"`
	Required     *bool                                       `json:"required,omitempty"`
	ReadOnly     *bool                                       `json:"readOnly,omitempty"`
	Type         FieldUpdateDocumentFieldsTypeNumberRequest2 `json:"type"`
	NumberFormat *string                                     `json:"numberFormat,omitempty"`
	Value        *string                                     `json:"value,omitempty"`
	MinValue     *float64                                    `json:"minValue,omitempty"`
	MaxValue     *float64                                    `json:"maxValue,omitempty"`
	FontSize     *float64                                    `json:"fontSize,omitempty"`
	TextAlign    *FieldUpdateDocumentFieldsTextAlignNumber   `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldMetaNumberRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberRequest) GetType() FieldUpdateDocumentFieldsTypeNumberRequest2 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeNumberRequest2("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberRequest) GetNumberFormat() *string {
	if f == nil {
		return nil
	}
	return f.NumberFormat
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberRequest) GetValue() *string {
	if f == nil {
		return nil
	}
	return f.Value
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberRequest) GetMinValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MinValue
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberRequest) GetMaxValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MaxValue
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberRequest) GetTextAlign() *FieldUpdateDocumentFieldsTextAlignNumber {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldUpdateDocumentFieldsFieldNumber struct {
	Type      FieldUpdateDocumentFieldsTypeNumberRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldMetaNumberRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldNumber) GetType() FieldUpdateDocumentFieldsTypeNumberRequest1 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeNumberRequest1("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldNumber) GetFieldMeta() *FieldUpdateDocumentFieldsFieldMetaNumberRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldUpdateDocumentFieldsFieldNumber) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldUpdateDocumentFieldsFieldNumber) GetPageNumber() *float64 {
	if f == nil {
		return nil
	}
	return f.PageNumber
}

func (f *FieldUpdateDocumentFieldsFieldNumber) GetPageX() *float64 {
	if f == nil {
		return nil
	}
	return f.PageX
}

func (f *FieldUpdateDocumentFieldsFieldNumber) GetPageY() *float64 {
	if f == nil {
		return nil
	}
	return f.PageY
}

func (f *FieldUpdateDocumentFieldsFieldNumber) GetWidth() *float64 {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FieldUpdateDocumentFieldsFieldNumber) GetHeight() *float64 {
	if f == nil {
		return nil
	}
	return f.Height
}

type FieldUpdateDocumentFieldsTypeTextRequest1 string

const (
	FieldUpdateDocumentFieldsTypeTextRequest1Text FieldUpdateDocumentFieldsTypeTextRequest1 = "TEXT"
)

func (e FieldUpdateDocumentFieldsTypeTextRequest1) ToPointer() *FieldUpdateDocumentFieldsTypeTextRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeTextRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = FieldUpdateDocumentFieldsTypeTextRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeTextRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldsTypeTextRequest2 string

const (
	FieldUpdateDocumentFieldsTypeTextRequest2Text FieldUpdateDocumentFieldsTypeTextRequest2 = "text"
)

func (e FieldUpdateDocumentFieldsTypeTextRequest2) ToPointer() *FieldUpdateDocumentFieldsTypeTextRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeTextRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldUpdateDocumentFieldsTypeTextRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeTextRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldsTextAlignText string

const (
	FieldUpdateDocumentFieldsTextAlignTextLeft   FieldUpdateDocumentFieldsTextAlignText = "left"
	FieldUpdateDocumentFieldsTextAlignTextCenter FieldUpdateDocumentFieldsTextAlignText = "center"
	FieldUpdateDocumentFieldsTextAlignTextRight  FieldUpdateDocumentFieldsTextAlignText = "right"
)

func (e FieldUpdateDocumentFieldsTextAlignText) ToPointer() *FieldUpdateDocumentFieldsTextAlignText {
	return &e
}
func (e *FieldUpdateDocumentFieldsTextAlignText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldsTextAlignText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTextAlignText: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaTextRequest struct {
	Label          *string                                   `json:"label,omitempty"`
	Placeholder    *string                                   `json:"placeholder,omitempty"`
	Required       *bool                                     `json:"required,omitempty"`
	ReadOnly       *bool                                     `json:"readOnly,omitempty"`
	Type           FieldUpdateDocumentFieldsTypeTextRequest2 `json:"type"`
	Text           *string                                   `json:"text,omitempty"`
	CharacterLimit *float64                                  `json:"characterLimit,omitempty"`
	FontSize       *float64                                  `json:"fontSize,omitempty"`
	TextAlign      *FieldUpdateDocumentFieldsTextAlignText   `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldMetaTextRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextRequest) GetType() FieldUpdateDocumentFieldsTypeTextRequest2 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeTextRequest2("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextRequest) GetText() *string {
	if f == nil {
		return nil
	}
	return f.Text
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextRequest) GetCharacterLimit() *float64 {
	if f == nil {
		return nil
	}
	return f.CharacterLimit
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextRequest) GetTextAlign() *FieldUpdateDocumentFieldsTextAlignText {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldUpdateDocumentFieldsFieldText struct {
	Type      FieldUpdateDocumentFieldsTypeTextRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldMetaTextRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldText) GetType() FieldUpdateDocumentFieldsTypeTextRequest1 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeTextRequest1("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldText) GetFieldMeta() *FieldUpdateDocumentFieldsFieldMetaTextRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldUpdateDocumentFieldsFieldText) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldUpdateDocumentFieldsFieldText) GetPageNumber() *float64 {
	if f == nil {
		return nil
	}
	return f.PageNumber
}

func (f *FieldUpdateDocumentFieldsFieldText) GetPageX() *float64 {
	if f == nil {
		return nil
	}
	return f.PageX
}

func (f *FieldUpdateDocumentFieldsFieldText) GetPageY() *float64 {
	if f == nil {
		return nil
	}
	return f.PageY
}

func (f *FieldUpdateDocumentFieldsFieldText) GetWidth() *float64 {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FieldUpdateDocumentFieldsFieldText) GetHeight() *float64 {
	if f == nil {
		return nil
	}
	return f.Height
}

type FieldUpdateDocumentFieldsTypeDateRequest1 string

const (
	FieldUpdateDocumentFieldsTypeDateRequest1Date FieldUpdateDocumentFieldsTypeDateRequest1 = "DATE"
)

func (e FieldUpdateDocumentFieldsTypeDateRequest1) ToPointer() *FieldUpdateDocumentFieldsTypeDateRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeDateRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = FieldUpdateDocumentFieldsTypeDateRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeDateRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldsTypeDateRequest2 string

const (
	FieldUpdateDocumentFieldsTypeDateRequest2Date FieldUpdateDocumentFieldsTypeDateRequest2 = "date"
)

func (e FieldUpdateDocumentFieldsTypeDateRequest2) ToPointer() *FieldUpdateDocumentFieldsTypeDateRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeDateRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldUpdateDocumentFieldsTypeDateRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeDateRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldsTextAlignDate string

const (
	FieldUpdateDocumentFieldsTextAlignDateLeft   FieldUpdateDocumentFieldsTextAlignDate = "left"
	FieldUpdateDocumentFieldsTextAlignDateCenter FieldUpdateDocumentFieldsTextAlignDate = "center"
	FieldUpdateDocumentFieldsTextAlignDateRight  FieldUpdateDocumentFieldsTextAlignDate = "right"
)

func (e FieldUpdateDocumentFieldsTextAlignDate) ToPointer() *FieldUpdateDocumentFieldsTextAlignDate {
	return &e
}
func (e *FieldUpdateDocumentFieldsTextAlignDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldsTextAlignDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTextAlignDate: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaDateRequest struct {
	Label       *string                                   `json:"label,omitempty"`
	Placeholder *string                                   `json:"placeholder,omitempty"`
	Required    *bool                                     `json:"required,omitempty"`
	ReadOnly    *bool                                     `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsTypeDateRequest2 `json:"type"`
	FontSize    *float64                                  `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateDocumentFieldsTextAlignDate   `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldMetaDateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaDateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaDateRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaDateRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaDateRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaDateRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaDateRequest) GetType() FieldUpdateDocumentFieldsTypeDateRequest2 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeDateRequest2("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaDateRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldUpdateDocumentFieldsFieldMetaDateRequest) GetTextAlign() *FieldUpdateDocumentFieldsTextAlignDate {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldUpdateDocumentFieldsFieldDate struct {
	Type      FieldUpdateDocumentFieldsTypeDateRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldMetaDateRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldDate) GetType() FieldUpdateDocumentFieldsTypeDateRequest1 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeDateRequest1("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldDate) GetFieldMeta() *FieldUpdateDocumentFieldsFieldMetaDateRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldUpdateDocumentFieldsFieldDate) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldUpdateDocumentFieldsFieldDate) GetPageNumber() *float64 {
	if f == nil {
		return nil
	}
	return f.PageNumber
}

func (f *FieldUpdateDocumentFieldsFieldDate) GetPageX() *float64 {
	if f == nil {
		return nil
	}
	return f.PageX
}

func (f *FieldUpdateDocumentFieldsFieldDate) GetPageY() *float64 {
	if f == nil {
		return nil
	}
	return f.PageY
}

func (f *FieldUpdateDocumentFieldsFieldDate) GetWidth() *float64 {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FieldUpdateDocumentFieldsFieldDate) GetHeight() *float64 {
	if f == nil {
		return nil
	}
	return f.Height
}

type FieldUpdateDocumentFieldsTypeEmailRequest1 string

const (
	FieldUpdateDocumentFieldsTypeEmailRequest1Email FieldUpdateDocumentFieldsTypeEmailRequest1 = "EMAIL"
)

func (e FieldUpdateDocumentFieldsTypeEmailRequest1) ToPointer() *FieldUpdateDocumentFieldsTypeEmailRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeEmailRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = FieldUpdateDocumentFieldsTypeEmailRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeEmailRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldsTypeEmailRequest2 string

const (
	FieldUpdateDocumentFieldsTypeEmailRequest2Email FieldUpdateDocumentFieldsTypeEmailRequest2 = "email"
)

func (e FieldUpdateDocumentFieldsTypeEmailRequest2) ToPointer() *FieldUpdateDocumentFieldsTypeEmailRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeEmailRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldUpdateDocumentFieldsTypeEmailRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeEmailRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldsTextAlignEmail string

const (
	FieldUpdateDocumentFieldsTextAlignEmailLeft   FieldUpdateDocumentFieldsTextAlignEmail = "left"
	FieldUpdateDocumentFieldsTextAlignEmailCenter FieldUpdateDocumentFieldsTextAlignEmail = "center"
	FieldUpdateDocumentFieldsTextAlignEmailRight  FieldUpdateDocumentFieldsTextAlignEmail = "right"
)

func (e FieldUpdateDocumentFieldsTextAlignEmail) ToPointer() *FieldUpdateDocumentFieldsTextAlignEmail {
	return &e
}
func (e *FieldUpdateDocumentFieldsTextAlignEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldsTextAlignEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTextAlignEmail: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaEmailRequest struct {
	Label       *string                                    `json:"label,omitempty"`
	Placeholder *string                                    `json:"placeholder,omitempty"`
	Required    *bool                                      `json:"required,omitempty"`
	ReadOnly    *bool                                      `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsTypeEmailRequest2 `json:"type"`
	FontSize    *float64                                   `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateDocumentFieldsTextAlignEmail   `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldMetaEmailRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaEmailRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaEmailRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaEmailRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaEmailRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaEmailRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaEmailRequest) GetType() FieldUpdateDocumentFieldsTypeEmailRequest2 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeEmailRequest2("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaEmailRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldUpdateDocumentFieldsFieldMetaEmailRequest) GetTextAlign() *FieldUpdateDocumentFieldsTextAlignEmail {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldUpdateDocumentFieldsFieldEmail struct {
	Type      FieldUpdateDocumentFieldsTypeEmailRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldMetaEmailRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldEmail) GetType() FieldUpdateDocumentFieldsTypeEmailRequest1 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeEmailRequest1("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldEmail) GetFieldMeta() *FieldUpdateDocumentFieldsFieldMetaEmailRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldUpdateDocumentFieldsFieldEmail) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldUpdateDocumentFieldsFieldEmail) GetPageNumber() *float64 {
	if f == nil {
		return nil
	}
	return f.PageNumber
}

func (f *FieldUpdateDocumentFieldsFieldEmail) GetPageX() *float64 {
	if f == nil {
		return nil
	}
	return f.PageX
}

func (f *FieldUpdateDocumentFieldsFieldEmail) GetPageY() *float64 {
	if f == nil {
		return nil
	}
	return f.PageY
}

func (f *FieldUpdateDocumentFieldsFieldEmail) GetWidth() *float64 {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FieldUpdateDocumentFieldsFieldEmail) GetHeight() *float64 {
	if f == nil {
		return nil
	}
	return f.Height
}

type FieldUpdateDocumentFieldsTypeNameRequest1 string

const (
	FieldUpdateDocumentFieldsTypeNameRequest1Name FieldUpdateDocumentFieldsTypeNameRequest1 = "NAME"
)

func (e FieldUpdateDocumentFieldsTypeNameRequest1) ToPointer() *FieldUpdateDocumentFieldsTypeNameRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeNameRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = FieldUpdateDocumentFieldsTypeNameRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeNameRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldsTypeNameRequest2 string

const (
	FieldUpdateDocumentFieldsTypeNameRequest2Name FieldUpdateDocumentFieldsTypeNameRequest2 = "name"
)

func (e FieldUpdateDocumentFieldsTypeNameRequest2) ToPointer() *FieldUpdateDocumentFieldsTypeNameRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeNameRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldUpdateDocumentFieldsTypeNameRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeNameRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldsTextAlignName string

const (
	FieldUpdateDocumentFieldsTextAlignNameLeft   FieldUpdateDocumentFieldsTextAlignName = "left"
	FieldUpdateDocumentFieldsTextAlignNameCenter FieldUpdateDocumentFieldsTextAlignName = "center"
	FieldUpdateDocumentFieldsTextAlignNameRight  FieldUpdateDocumentFieldsTextAlignName = "right"
)

func (e FieldUpdateDocumentFieldsTextAlignName) ToPointer() *FieldUpdateDocumentFieldsTextAlignName {
	return &e
}
func (e *FieldUpdateDocumentFieldsTextAlignName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldsTextAlignName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTextAlignName: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaNameRequest struct {
	Label       *string                                   `json:"label,omitempty"`
	Placeholder *string                                   `json:"placeholder,omitempty"`
	Required    *bool                                     `json:"required,omitempty"`
	ReadOnly    *bool                                     `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsTypeNameRequest2 `json:"type"`
	FontSize    *float64                                  `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateDocumentFieldsTextAlignName   `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldMetaNameRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaNameRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaNameRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaNameRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaNameRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaNameRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaNameRequest) GetType() FieldUpdateDocumentFieldsTypeNameRequest2 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeNameRequest2("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaNameRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldUpdateDocumentFieldsFieldMetaNameRequest) GetTextAlign() *FieldUpdateDocumentFieldsTextAlignName {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldUpdateDocumentFieldsFieldName struct {
	Type      FieldUpdateDocumentFieldsTypeNameRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldMetaNameRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldName) GetType() FieldUpdateDocumentFieldsTypeNameRequest1 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeNameRequest1("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldName) GetFieldMeta() *FieldUpdateDocumentFieldsFieldMetaNameRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldUpdateDocumentFieldsFieldName) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldUpdateDocumentFieldsFieldName) GetPageNumber() *float64 {
	if f == nil {
		return nil
	}
	return f.PageNumber
}

func (f *FieldUpdateDocumentFieldsFieldName) GetPageX() *float64 {
	if f == nil {
		return nil
	}
	return f.PageX
}

func (f *FieldUpdateDocumentFieldsFieldName) GetPageY() *float64 {
	if f == nil {
		return nil
	}
	return f.PageY
}

func (f *FieldUpdateDocumentFieldsFieldName) GetWidth() *float64 {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FieldUpdateDocumentFieldsFieldName) GetHeight() *float64 {
	if f == nil {
		return nil
	}
	return f.Height
}

type FieldUpdateDocumentFieldsTypeInitialsRequest1 string

const (
	FieldUpdateDocumentFieldsTypeInitialsRequest1Initials FieldUpdateDocumentFieldsTypeInitialsRequest1 = "INITIALS"
)

func (e FieldUpdateDocumentFieldsTypeInitialsRequest1) ToPointer() *FieldUpdateDocumentFieldsTypeInitialsRequest1 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeInitialsRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = FieldUpdateDocumentFieldsTypeInitialsRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeInitialsRequest1: %v", v)
	}
}

type FieldUpdateDocumentFieldsTypeInitialsRequest2 string

const (
	FieldUpdateDocumentFieldsTypeInitialsRequest2Initials FieldUpdateDocumentFieldsTypeInitialsRequest2 = "initials"
)

func (e FieldUpdateDocumentFieldsTypeInitialsRequest2) ToPointer() *FieldUpdateDocumentFieldsTypeInitialsRequest2 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeInitialsRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldUpdateDocumentFieldsTypeInitialsRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeInitialsRequest2: %v", v)
	}
}

type FieldUpdateDocumentFieldsTextAlignInitials string

const (
	FieldUpdateDocumentFieldsTextAlignInitialsLeft   FieldUpdateDocumentFieldsTextAlignInitials = "left"
	FieldUpdateDocumentFieldsTextAlignInitialsCenter FieldUpdateDocumentFieldsTextAlignInitials = "center"
	FieldUpdateDocumentFieldsTextAlignInitialsRight  FieldUpdateDocumentFieldsTextAlignInitials = "right"
)

func (e FieldUpdateDocumentFieldsTextAlignInitials) ToPointer() *FieldUpdateDocumentFieldsTextAlignInitials {
	return &e
}
func (e *FieldUpdateDocumentFieldsTextAlignInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldsTextAlignInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTextAlignInitials: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaInitialsRequest struct {
	Label       *string                                       `json:"label,omitempty"`
	Placeholder *string                                       `json:"placeholder,omitempty"`
	Required    *bool                                         `json:"required,omitempty"`
	ReadOnly    *bool                                         `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsTypeInitialsRequest2 `json:"type"`
	FontSize    *float64                                      `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateDocumentFieldsTextAlignInitials   `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldMetaInitialsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaInitialsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaInitialsRequest) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaInitialsRequest) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaInitialsRequest) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaInitialsRequest) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaInitialsRequest) GetType() FieldUpdateDocumentFieldsTypeInitialsRequest2 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeInitialsRequest2("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaInitialsRequest) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldUpdateDocumentFieldsFieldMetaInitialsRequest) GetTextAlign() *FieldUpdateDocumentFieldsTextAlignInitials {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldUpdateDocumentFieldsFieldInitials struct {
	Type      FieldUpdateDocumentFieldsTypeInitialsRequest1      `json:"type"`
	FieldMeta *FieldUpdateDocumentFieldsFieldMetaInitialsRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldInitials) GetType() FieldUpdateDocumentFieldsTypeInitialsRequest1 {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeInitialsRequest1("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldInitials) GetFieldMeta() *FieldUpdateDocumentFieldsFieldMetaInitialsRequest {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldUpdateDocumentFieldsFieldInitials) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldUpdateDocumentFieldsFieldInitials) GetPageNumber() *float64 {
	if f == nil {
		return nil
	}
	return f.PageNumber
}

func (f *FieldUpdateDocumentFieldsFieldInitials) GetPageX() *float64 {
	if f == nil {
		return nil
	}
	return f.PageX
}

func (f *FieldUpdateDocumentFieldsFieldInitials) GetPageY() *float64 {
	if f == nil {
		return nil
	}
	return f.PageY
}

func (f *FieldUpdateDocumentFieldsFieldInitials) GetWidth() *float64 {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FieldUpdateDocumentFieldsFieldInitials) GetHeight() *float64 {
	if f == nil {
		return nil
	}
	return f.Height
}

type FieldUpdateDocumentFieldsTypeFreeSignature string

const (
	FieldUpdateDocumentFieldsTypeFreeSignatureFreeSignature FieldUpdateDocumentFieldsTypeFreeSignature = "FREE_SIGNATURE"
)

func (e FieldUpdateDocumentFieldsTypeFreeSignature) ToPointer() *FieldUpdateDocumentFieldsTypeFreeSignature {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeFreeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldUpdateDocumentFieldsTypeFreeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeFreeSignature: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldFreeSignature struct {
	Type FieldUpdateDocumentFieldsTypeFreeSignature `json:"type"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldFreeSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldFreeSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldFreeSignature) GetType() FieldUpdateDocumentFieldsTypeFreeSignature {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeFreeSignature("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldFreeSignature) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldUpdateDocumentFieldsFieldFreeSignature) GetPageNumber() *float64 {
	if f == nil {
		return nil
	}
	return f.PageNumber
}

func (f *FieldUpdateDocumentFieldsFieldFreeSignature) GetPageX() *float64 {
	if f == nil {
		return nil
	}
	return f.PageX
}

func (f *FieldUpdateDocumentFieldsFieldFreeSignature) GetPageY() *float64 {
	if f == nil {
		return nil
	}
	return f.PageY
}

func (f *FieldUpdateDocumentFieldsFieldFreeSignature) GetWidth() *float64 {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FieldUpdateDocumentFieldsFieldFreeSignature) GetHeight() *float64 {
	if f == nil {
		return nil
	}
	return f.Height
}

type FieldUpdateDocumentFieldsTypeSignature string

const (
	FieldUpdateDocumentFieldsTypeSignatureSignature FieldUpdateDocumentFieldsTypeSignature = "SIGNATURE"
)

func (e FieldUpdateDocumentFieldsTypeSignature) ToPointer() *FieldUpdateDocumentFieldsTypeSignature {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = FieldUpdateDocumentFieldsTypeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeSignature: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldSignature struct {
	Type FieldUpdateDocumentFieldsTypeSignature `json:"type"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldSignature) GetType() FieldUpdateDocumentFieldsTypeSignature {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeSignature("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldSignature) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldUpdateDocumentFieldsFieldSignature) GetPageNumber() *float64 {
	if f == nil {
		return nil
	}
	return f.PageNumber
}

func (f *FieldUpdateDocumentFieldsFieldSignature) GetPageX() *float64 {
	if f == nil {
		return nil
	}
	return f.PageX
}

func (f *FieldUpdateDocumentFieldsFieldSignature) GetPageY() *float64 {
	if f == nil {
		return nil
	}
	return f.PageY
}

func (f *FieldUpdateDocumentFieldsFieldSignature) GetWidth() *float64 {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FieldUpdateDocumentFieldsFieldSignature) GetHeight() *float64 {
	if f == nil {
		return nil
	}
	return f.Height
}

type FieldUpdateDocumentFieldsFieldUnionType string

const (
	FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldSignature     FieldUpdateDocumentFieldsFieldUnionType = "field_updateDocumentFields_field_Signature"
	FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldFreeSignature FieldUpdateDocumentFieldsFieldUnionType = "field_updateDocumentFields_field_FreeSignature"
	FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldInitials      FieldUpdateDocumentFieldsFieldUnionType = "field_updateDocumentFields_field_Initials"
	FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldName          FieldUpdateDocumentFieldsFieldUnionType = "field_updateDocumentFields_field_Name"
	FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldEmail         FieldUpdateDocumentFieldsFieldUnionType = "field_updateDocumentFields_field_Email"
	FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldDate          FieldUpdateDocumentFieldsFieldUnionType = "field_updateDocumentFields_field_Date"
	FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldText          FieldUpdateDocumentFieldsFieldUnionType = "field_updateDocumentFields_field_Text"
	FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldNumber        FieldUpdateDocumentFieldsFieldUnionType = "field_updateDocumentFields_field_Number"
	FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldRadio         FieldUpdateDocumentFieldsFieldUnionType = "field_updateDocumentFields_field_Radio"
	FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldCheckbox      FieldUpdateDocumentFieldsFieldUnionType = "field_updateDocumentFields_field_Checkbox"
	FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldDropdown      FieldUpdateDocumentFieldsFieldUnionType = "field_updateDocumentFields_field_Dropdown"
)

type FieldUpdateDocumentFieldsFieldUnion struct {
	FieldUpdateDocumentFieldsFieldSignature     *FieldUpdateDocumentFieldsFieldSignature     `queryParam:"inline,name=field"`
	FieldUpdateDocumentFieldsFieldFreeSignature *FieldUpdateDocumentFieldsFieldFreeSignature `queryParam:"inline,name=field"`
	FieldUpdateDocumentFieldsFieldInitials      *FieldUpdateDocumentFieldsFieldInitials      `queryParam:"inline,name=field"`
	FieldUpdateDocumentFieldsFieldName          *FieldUpdateDocumentFieldsFieldName          `queryParam:"inline,name=field"`
	FieldUpdateDocumentFieldsFieldEmail         *FieldUpdateDocumentFieldsFieldEmail         `queryParam:"inline,name=field"`
	FieldUpdateDocumentFieldsFieldDate          *FieldUpdateDocumentFieldsFieldDate          `queryParam:"inline,name=field"`
	FieldUpdateDocumentFieldsFieldText          *FieldUpdateDocumentFieldsFieldText          `queryParam:"inline,name=field"`
	FieldUpdateDocumentFieldsFieldNumber        *FieldUpdateDocumentFieldsFieldNumber        `queryParam:"inline,name=field"`
	FieldUpdateDocumentFieldsFieldRadio         *FieldUpdateDocumentFieldsFieldRadio         `queryParam:"inline,name=field"`
	FieldUpdateDocumentFieldsFieldCheckbox      *FieldUpdateDocumentFieldsFieldCheckbox      `queryParam:"inline,name=field"`
	FieldUpdateDocumentFieldsFieldDropdown      *FieldUpdateDocumentFieldsFieldDropdown      `queryParam:"inline,name=field"`

	Type FieldUpdateDocumentFieldsFieldUnionType
}

func CreateFieldUpdateDocumentFieldsFieldUnionFieldUpdateDocumentFieldsFieldSignature(fieldUpdateDocumentFieldsFieldSignature FieldUpdateDocumentFieldsFieldSignature) FieldUpdateDocumentFieldsFieldUnion {
	typ := FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldSignature

	return FieldUpdateDocumentFieldsFieldUnion{
		FieldUpdateDocumentFieldsFieldSignature: &fieldUpdateDocumentFieldsFieldSignature,
		Type:                                    typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldUnionFieldUpdateDocumentFieldsFieldFreeSignature(fieldUpdateDocumentFieldsFieldFreeSignature FieldUpdateDocumentFieldsFieldFreeSignature) FieldUpdateDocumentFieldsFieldUnion {
	typ := FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldFreeSignature

	return FieldUpdateDocumentFieldsFieldUnion{
		FieldUpdateDocumentFieldsFieldFreeSignature: &fieldUpdateDocumentFieldsFieldFreeSignature,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldUnionFieldUpdateDocumentFieldsFieldInitials(fieldUpdateDocumentFieldsFieldInitials FieldUpdateDocumentFieldsFieldInitials) FieldUpdateDocumentFieldsFieldUnion {
	typ := FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldInitials

	return FieldUpdateDocumentFieldsFieldUnion{
		FieldUpdateDocumentFieldsFieldInitials: &fieldUpdateDocumentFieldsFieldInitials,
		Type:                                   typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldUnionFieldUpdateDocumentFieldsFieldName(fieldUpdateDocumentFieldsFieldName FieldUpdateDocumentFieldsFieldName) FieldUpdateDocumentFieldsFieldUnion {
	typ := FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldName

	return FieldUpdateDocumentFieldsFieldUnion{
		FieldUpdateDocumentFieldsFieldName: &fieldUpdateDocumentFieldsFieldName,
		Type:                               typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldUnionFieldUpdateDocumentFieldsFieldEmail(fieldUpdateDocumentFieldsFieldEmail FieldUpdateDocumentFieldsFieldEmail) FieldUpdateDocumentFieldsFieldUnion {
	typ := FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldEmail

	return FieldUpdateDocumentFieldsFieldUnion{
		FieldUpdateDocumentFieldsFieldEmail: &fieldUpdateDocumentFieldsFieldEmail,
		Type:                                typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldUnionFieldUpdateDocumentFieldsFieldDate(fieldUpdateDocumentFieldsFieldDate FieldUpdateDocumentFieldsFieldDate) FieldUpdateDocumentFieldsFieldUnion {
	typ := FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldDate

	return FieldUpdateDocumentFieldsFieldUnion{
		FieldUpdateDocumentFieldsFieldDate: &fieldUpdateDocumentFieldsFieldDate,
		Type:                               typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldUnionFieldUpdateDocumentFieldsFieldText(fieldUpdateDocumentFieldsFieldText FieldUpdateDocumentFieldsFieldText) FieldUpdateDocumentFieldsFieldUnion {
	typ := FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldText

	return FieldUpdateDocumentFieldsFieldUnion{
		FieldUpdateDocumentFieldsFieldText: &fieldUpdateDocumentFieldsFieldText,
		Type:                               typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldUnionFieldUpdateDocumentFieldsFieldNumber(fieldUpdateDocumentFieldsFieldNumber FieldUpdateDocumentFieldsFieldNumber) FieldUpdateDocumentFieldsFieldUnion {
	typ := FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldNumber

	return FieldUpdateDocumentFieldsFieldUnion{
		FieldUpdateDocumentFieldsFieldNumber: &fieldUpdateDocumentFieldsFieldNumber,
		Type:                                 typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldUnionFieldUpdateDocumentFieldsFieldRadio(fieldUpdateDocumentFieldsFieldRadio FieldUpdateDocumentFieldsFieldRadio) FieldUpdateDocumentFieldsFieldUnion {
	typ := FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldRadio

	return FieldUpdateDocumentFieldsFieldUnion{
		FieldUpdateDocumentFieldsFieldRadio: &fieldUpdateDocumentFieldsFieldRadio,
		Type:                                typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldUnionFieldUpdateDocumentFieldsFieldCheckbox(fieldUpdateDocumentFieldsFieldCheckbox FieldUpdateDocumentFieldsFieldCheckbox) FieldUpdateDocumentFieldsFieldUnion {
	typ := FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldCheckbox

	return FieldUpdateDocumentFieldsFieldUnion{
		FieldUpdateDocumentFieldsFieldCheckbox: &fieldUpdateDocumentFieldsFieldCheckbox,
		Type:                                   typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldUnionFieldUpdateDocumentFieldsFieldDropdown(fieldUpdateDocumentFieldsFieldDropdown FieldUpdateDocumentFieldsFieldDropdown) FieldUpdateDocumentFieldsFieldUnion {
	typ := FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldDropdown

	return FieldUpdateDocumentFieldsFieldUnion{
		FieldUpdateDocumentFieldsFieldDropdown: &fieldUpdateDocumentFieldsFieldDropdown,
		Type:                                   typ,
	}
}

func (u *FieldUpdateDocumentFieldsFieldUnion) UnmarshalJSON(data []byte) error {

	var fieldUpdateDocumentFieldsFieldSignature FieldUpdateDocumentFieldsFieldSignature = FieldUpdateDocumentFieldsFieldSignature{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldSignature, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldSignature = &fieldUpdateDocumentFieldsFieldSignature
		u.Type = FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldSignature
		return nil
	}

	var fieldUpdateDocumentFieldsFieldFreeSignature FieldUpdateDocumentFieldsFieldFreeSignature = FieldUpdateDocumentFieldsFieldFreeSignature{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldFreeSignature, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldFreeSignature = &fieldUpdateDocumentFieldsFieldFreeSignature
		u.Type = FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldFreeSignature
		return nil
	}

	var fieldUpdateDocumentFieldsFieldInitials FieldUpdateDocumentFieldsFieldInitials = FieldUpdateDocumentFieldsFieldInitials{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldInitials, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldInitials = &fieldUpdateDocumentFieldsFieldInitials
		u.Type = FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldInitials
		return nil
	}

	var fieldUpdateDocumentFieldsFieldName FieldUpdateDocumentFieldsFieldName = FieldUpdateDocumentFieldsFieldName{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldName, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldName = &fieldUpdateDocumentFieldsFieldName
		u.Type = FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldName
		return nil
	}

	var fieldUpdateDocumentFieldsFieldEmail FieldUpdateDocumentFieldsFieldEmail = FieldUpdateDocumentFieldsFieldEmail{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldEmail, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldEmail = &fieldUpdateDocumentFieldsFieldEmail
		u.Type = FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldEmail
		return nil
	}

	var fieldUpdateDocumentFieldsFieldDate FieldUpdateDocumentFieldsFieldDate = FieldUpdateDocumentFieldsFieldDate{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldDate, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldDate = &fieldUpdateDocumentFieldsFieldDate
		u.Type = FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldDate
		return nil
	}

	var fieldUpdateDocumentFieldsFieldText FieldUpdateDocumentFieldsFieldText = FieldUpdateDocumentFieldsFieldText{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldText, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldText = &fieldUpdateDocumentFieldsFieldText
		u.Type = FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldText
		return nil
	}

	var fieldUpdateDocumentFieldsFieldNumber FieldUpdateDocumentFieldsFieldNumber = FieldUpdateDocumentFieldsFieldNumber{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldNumber, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldNumber = &fieldUpdateDocumentFieldsFieldNumber
		u.Type = FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldNumber
		return nil
	}

	var fieldUpdateDocumentFieldsFieldRadio FieldUpdateDocumentFieldsFieldRadio = FieldUpdateDocumentFieldsFieldRadio{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldRadio, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldRadio = &fieldUpdateDocumentFieldsFieldRadio
		u.Type = FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldRadio
		return nil
	}

	var fieldUpdateDocumentFieldsFieldCheckbox FieldUpdateDocumentFieldsFieldCheckbox = FieldUpdateDocumentFieldsFieldCheckbox{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldCheckbox, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldCheckbox = &fieldUpdateDocumentFieldsFieldCheckbox
		u.Type = FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldCheckbox
		return nil
	}

	var fieldUpdateDocumentFieldsFieldDropdown FieldUpdateDocumentFieldsFieldDropdown = FieldUpdateDocumentFieldsFieldDropdown{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldDropdown, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldDropdown = &fieldUpdateDocumentFieldsFieldDropdown
		u.Type = FieldUpdateDocumentFieldsFieldUnionTypeFieldUpdateDocumentFieldsFieldDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldUpdateDocumentFieldsFieldUnion", string(data))
}

func (u FieldUpdateDocumentFieldsFieldUnion) MarshalJSON() ([]byte, error) {
	if u.FieldUpdateDocumentFieldsFieldSignature != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldSignature, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldFreeSignature != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldFreeSignature, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldInitials != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldInitials, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldName != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldName, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldEmail != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldEmail, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldDate != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldDate, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldText != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldText, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldNumber != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldNumber, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldRadio != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldRadio, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldCheckbox != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldCheckbox, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldDropdown != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type FieldUpdateDocumentFieldsFieldUnion: all fields are null")
}

type FieldUpdateDocumentFieldsRequest struct {
	DocumentID float64                               `json:"documentId"`
	Fields     []FieldUpdateDocumentFieldsFieldUnion `json:"fields"`
}

func (f *FieldUpdateDocumentFieldsRequest) GetDocumentID() float64 {
	if f == nil {
		return 0.0
	}
	return f.DocumentID
}

func (f *FieldUpdateDocumentFieldsRequest) GetFields() []FieldUpdateDocumentFieldsFieldUnion {
	if f == nil {
		return []FieldUpdateDocumentFieldsFieldUnion{}
	}
	return f.Fields
}

type FieldUpdateDocumentFieldsTypeResponse string

const (
	FieldUpdateDocumentFieldsTypeResponseSignature     FieldUpdateDocumentFieldsTypeResponse = "SIGNATURE"
	FieldUpdateDocumentFieldsTypeResponseFreeSignature FieldUpdateDocumentFieldsTypeResponse = "FREE_SIGNATURE"
	FieldUpdateDocumentFieldsTypeResponseInitials      FieldUpdateDocumentFieldsTypeResponse = "INITIALS"
	FieldUpdateDocumentFieldsTypeResponseName          FieldUpdateDocumentFieldsTypeResponse = "NAME"
	FieldUpdateDocumentFieldsTypeResponseEmail         FieldUpdateDocumentFieldsTypeResponse = "EMAIL"
	FieldUpdateDocumentFieldsTypeResponseDate          FieldUpdateDocumentFieldsTypeResponse = "DATE"
	FieldUpdateDocumentFieldsTypeResponseText          FieldUpdateDocumentFieldsTypeResponse = "TEXT"
	FieldUpdateDocumentFieldsTypeResponseNumber        FieldUpdateDocumentFieldsTypeResponse = "NUMBER"
	FieldUpdateDocumentFieldsTypeResponseRadio         FieldUpdateDocumentFieldsTypeResponse = "RADIO"
	FieldUpdateDocumentFieldsTypeResponseCheckbox      FieldUpdateDocumentFieldsTypeResponse = "CHECKBOX"
	FieldUpdateDocumentFieldsTypeResponseDropdown      FieldUpdateDocumentFieldsTypeResponse = "DROPDOWN"
)

func (e FieldUpdateDocumentFieldsTypeResponse) ToPointer() *FieldUpdateDocumentFieldsTypeResponse {
	return &e
}
func (e *FieldUpdateDocumentFieldsTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldUpdateDocumentFieldsTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTypeResponse: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaTypeDropdown string

const (
	FieldUpdateDocumentFieldsFieldMetaTypeDropdownDropdown FieldUpdateDocumentFieldsFieldMetaTypeDropdown = "dropdown"
)

func (e FieldUpdateDocumentFieldsFieldMetaTypeDropdown) ToPointer() *FieldUpdateDocumentFieldsFieldMetaTypeDropdown {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldUpdateDocumentFieldsFieldMetaTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaTypeDropdown: %v", v)
	}
}

type FieldUpdateDocumentFieldsValueResponse3 struct {
	Value string `json:"value"`
}

func (f FieldUpdateDocumentFieldsValueResponse3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsValueResponse3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsValueResponse3) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldUpdateDocumentFieldsFieldMetaDropdownResponse struct {
	Label        *string                                        `json:"label,omitempty"`
	Placeholder  *string                                        `json:"placeholder,omitempty"`
	Required     *bool                                          `json:"required,omitempty"`
	ReadOnly     *bool                                          `json:"readOnly,omitempty"`
	Type         FieldUpdateDocumentFieldsFieldMetaTypeDropdown `json:"type"`
	Values       []FieldUpdateDocumentFieldsValueResponse3      `json:"values,omitempty"`
	DefaultValue *string                                        `json:"defaultValue,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldMetaDropdownResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaDropdownResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaDropdownResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaDropdownResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaDropdownResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaDropdownResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaDropdownResponse) GetType() FieldUpdateDocumentFieldsFieldMetaTypeDropdown {
	if f == nil {
		return FieldUpdateDocumentFieldsFieldMetaTypeDropdown("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaDropdownResponse) GetValues() []FieldUpdateDocumentFieldsValueResponse3 {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldUpdateDocumentFieldsFieldMetaDropdownResponse) GetDefaultValue() *string {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

type FieldUpdateDocumentFieldsFieldMetaTypeCheckbox string

const (
	FieldUpdateDocumentFieldsFieldMetaTypeCheckboxCheckbox FieldUpdateDocumentFieldsFieldMetaTypeCheckbox = "checkbox"
)

func (e FieldUpdateDocumentFieldsFieldMetaTypeCheckbox) ToPointer() *FieldUpdateDocumentFieldsFieldMetaTypeCheckbox {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldUpdateDocumentFieldsFieldMetaTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaTypeCheckbox: %v", v)
	}
}

type FieldUpdateDocumentFieldsValueResponse2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldUpdateDocumentFieldsValueResponse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsValueResponse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsValueResponse2) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldUpdateDocumentFieldsValueResponse2) GetChecked() bool {
	if f == nil {
		return false
	}
	return f.Checked
}

func (f *FieldUpdateDocumentFieldsValueResponse2) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldUpdateDocumentFieldsDirectionResponse string

const (
	FieldUpdateDocumentFieldsDirectionResponseVertical   FieldUpdateDocumentFieldsDirectionResponse = "vertical"
	FieldUpdateDocumentFieldsDirectionResponseHorizontal FieldUpdateDocumentFieldsDirectionResponse = "horizontal"
)

func (e FieldUpdateDocumentFieldsDirectionResponse) ToPointer() *FieldUpdateDocumentFieldsDirectionResponse {
	return &e
}
func (e *FieldUpdateDocumentFieldsDirectionResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vertical":
		fallthrough
	case "horizontal":
		*e = FieldUpdateDocumentFieldsDirectionResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsDirectionResponse: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaCheckboxResponse struct {
	Label            *string                                        `json:"label,omitempty"`
	Placeholder      *string                                        `json:"placeholder,omitempty"`
	Required         *bool                                          `json:"required,omitempty"`
	ReadOnly         *bool                                          `json:"readOnly,omitempty"`
	Type             FieldUpdateDocumentFieldsFieldMetaTypeCheckbox `json:"type"`
	Values           []FieldUpdateDocumentFieldsValueResponse2      `json:"values,omitempty"`
	ValidationRule   *string                                        `json:"validationRule,omitempty"`
	ValidationLength *float64                                       `json:"validationLength,omitempty"`
	Direction        *FieldUpdateDocumentFieldsDirectionResponse    `default:"vertical" json:"direction"`
}

func (f FieldUpdateDocumentFieldsFieldMetaCheckboxResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxResponse) GetType() FieldUpdateDocumentFieldsFieldMetaTypeCheckbox {
	if f == nil {
		return FieldUpdateDocumentFieldsFieldMetaTypeCheckbox("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxResponse) GetValues() []FieldUpdateDocumentFieldsValueResponse2 {
	if f == nil {
		return nil
	}
	return f.Values
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxResponse) GetValidationRule() *string {
	if f == nil {
		return nil
	}
	return f.ValidationRule
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxResponse) GetValidationLength() *float64 {
	if f == nil {
		return nil
	}
	return f.ValidationLength
}

func (f *FieldUpdateDocumentFieldsFieldMetaCheckboxResponse) GetDirection() *FieldUpdateDocumentFieldsDirectionResponse {
	if f == nil {
		return nil
	}
	return f.Direction
}

type FieldUpdateDocumentFieldsFieldMetaTypeRadio string

const (
	FieldUpdateDocumentFieldsFieldMetaTypeRadioRadio FieldUpdateDocumentFieldsFieldMetaTypeRadio = "radio"
)

func (e FieldUpdateDocumentFieldsFieldMetaTypeRadio) ToPointer() *FieldUpdateDocumentFieldsFieldMetaTypeRadio {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldUpdateDocumentFieldsFieldMetaTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaTypeRadio: %v", v)
	}
}

type FieldUpdateDocumentFieldsValueResponse1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldUpdateDocumentFieldsValueResponse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsValueResponse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsValueResponse1) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldUpdateDocumentFieldsValueResponse1) GetChecked() bool {
	if f == nil {
		return false
	}
	return f.Checked
}

func (f *FieldUpdateDocumentFieldsValueResponse1) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

type FieldUpdateDocumentFieldsFieldMetaRadioResponse struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsFieldMetaTypeRadio `json:"type"`
	Values      []FieldUpdateDocumentFieldsValueResponse1   `json:"values,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldMetaRadioResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaRadioResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaRadioResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaRadioResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaRadioResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaRadioResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaRadioResponse) GetType() FieldUpdateDocumentFieldsFieldMetaTypeRadio {
	if f == nil {
		return FieldUpdateDocumentFieldsFieldMetaTypeRadio("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaRadioResponse) GetValues() []FieldUpdateDocumentFieldsValueResponse1 {
	if f == nil {
		return nil
	}
	return f.Values
}

type FieldUpdateDocumentFieldsFieldMetaTypeNumber string

const (
	FieldUpdateDocumentFieldsFieldMetaTypeNumberNumber FieldUpdateDocumentFieldsFieldMetaTypeNumber = "number"
)

func (e FieldUpdateDocumentFieldsFieldMetaTypeNumber) ToPointer() *FieldUpdateDocumentFieldsFieldMetaTypeNumber {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldUpdateDocumentFieldsFieldMetaTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaTypeNumber: %v", v)
	}
}

type FieldUpdateDocumentFieldsTextAlignResponse6 string

const (
	FieldUpdateDocumentFieldsTextAlignResponse6Left   FieldUpdateDocumentFieldsTextAlignResponse6 = "left"
	FieldUpdateDocumentFieldsTextAlignResponse6Center FieldUpdateDocumentFieldsTextAlignResponse6 = "center"
	FieldUpdateDocumentFieldsTextAlignResponse6Right  FieldUpdateDocumentFieldsTextAlignResponse6 = "right"
)

func (e FieldUpdateDocumentFieldsTextAlignResponse6) ToPointer() *FieldUpdateDocumentFieldsTextAlignResponse6 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTextAlignResponse6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldsTextAlignResponse6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTextAlignResponse6: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaNumberResponse struct {
	Label        *string                                      `json:"label,omitempty"`
	Placeholder  *string                                      `json:"placeholder,omitempty"`
	Required     *bool                                        `json:"required,omitempty"`
	ReadOnly     *bool                                        `json:"readOnly,omitempty"`
	Type         FieldUpdateDocumentFieldsFieldMetaTypeNumber `json:"type"`
	NumberFormat *string                                      `json:"numberFormat,omitempty"`
	Value        *string                                      `json:"value,omitempty"`
	MinValue     *float64                                     `json:"minValue,omitempty"`
	MaxValue     *float64                                     `json:"maxValue,omitempty"`
	FontSize     *float64                                     `json:"fontSize,omitempty"`
	TextAlign    *FieldUpdateDocumentFieldsTextAlignResponse6 `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldMetaNumberResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberResponse) GetType() FieldUpdateDocumentFieldsFieldMetaTypeNumber {
	if f == nil {
		return FieldUpdateDocumentFieldsFieldMetaTypeNumber("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberResponse) GetNumberFormat() *string {
	if f == nil {
		return nil
	}
	return f.NumberFormat
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberResponse) GetValue() *string {
	if f == nil {
		return nil
	}
	return f.Value
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberResponse) GetMinValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MinValue
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberResponse) GetMaxValue() *float64 {
	if f == nil {
		return nil
	}
	return f.MaxValue
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldUpdateDocumentFieldsFieldMetaNumberResponse) GetTextAlign() *FieldUpdateDocumentFieldsTextAlignResponse6 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldUpdateDocumentFieldsFieldMetaTypeText string

const (
	FieldUpdateDocumentFieldsFieldMetaTypeTextText FieldUpdateDocumentFieldsFieldMetaTypeText = "text"
)

func (e FieldUpdateDocumentFieldsFieldMetaTypeText) ToPointer() *FieldUpdateDocumentFieldsFieldMetaTypeText {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldUpdateDocumentFieldsFieldMetaTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaTypeText: %v", v)
	}
}

type FieldUpdateDocumentFieldsTextAlignResponse5 string

const (
	FieldUpdateDocumentFieldsTextAlignResponse5Left   FieldUpdateDocumentFieldsTextAlignResponse5 = "left"
	FieldUpdateDocumentFieldsTextAlignResponse5Center FieldUpdateDocumentFieldsTextAlignResponse5 = "center"
	FieldUpdateDocumentFieldsTextAlignResponse5Right  FieldUpdateDocumentFieldsTextAlignResponse5 = "right"
)

func (e FieldUpdateDocumentFieldsTextAlignResponse5) ToPointer() *FieldUpdateDocumentFieldsTextAlignResponse5 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTextAlignResponse5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldsTextAlignResponse5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTextAlignResponse5: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaTextResponse struct {
	Label          *string                                      `json:"label,omitempty"`
	Placeholder    *string                                      `json:"placeholder,omitempty"`
	Required       *bool                                        `json:"required,omitempty"`
	ReadOnly       *bool                                        `json:"readOnly,omitempty"`
	Type           FieldUpdateDocumentFieldsFieldMetaTypeText   `json:"type"`
	Text           *string                                      `json:"text,omitempty"`
	CharacterLimit *float64                                     `json:"characterLimit,omitempty"`
	FontSize       *float64                                     `json:"fontSize,omitempty"`
	TextAlign      *FieldUpdateDocumentFieldsTextAlignResponse5 `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldMetaTextResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextResponse) GetType() FieldUpdateDocumentFieldsFieldMetaTypeText {
	if f == nil {
		return FieldUpdateDocumentFieldsFieldMetaTypeText("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextResponse) GetText() *string {
	if f == nil {
		return nil
	}
	return f.Text
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextResponse) GetCharacterLimit() *float64 {
	if f == nil {
		return nil
	}
	return f.CharacterLimit
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldUpdateDocumentFieldsFieldMetaTextResponse) GetTextAlign() *FieldUpdateDocumentFieldsTextAlignResponse5 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldUpdateDocumentFieldsFieldMetaTypeDate string

const (
	FieldUpdateDocumentFieldsFieldMetaTypeDateDate FieldUpdateDocumentFieldsFieldMetaTypeDate = "date"
)

func (e FieldUpdateDocumentFieldsFieldMetaTypeDate) ToPointer() *FieldUpdateDocumentFieldsFieldMetaTypeDate {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldUpdateDocumentFieldsFieldMetaTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaTypeDate: %v", v)
	}
}

type FieldUpdateDocumentFieldsTextAlignResponse4 string

const (
	FieldUpdateDocumentFieldsTextAlignResponse4Left   FieldUpdateDocumentFieldsTextAlignResponse4 = "left"
	FieldUpdateDocumentFieldsTextAlignResponse4Center FieldUpdateDocumentFieldsTextAlignResponse4 = "center"
	FieldUpdateDocumentFieldsTextAlignResponse4Right  FieldUpdateDocumentFieldsTextAlignResponse4 = "right"
)

func (e FieldUpdateDocumentFieldsTextAlignResponse4) ToPointer() *FieldUpdateDocumentFieldsTextAlignResponse4 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTextAlignResponse4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldsTextAlignResponse4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTextAlignResponse4: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaDateResponse struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsFieldMetaTypeDate   `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateDocumentFieldsTextAlignResponse4 `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldMetaDateResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaDateResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaDateResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaDateResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaDateResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaDateResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaDateResponse) GetType() FieldUpdateDocumentFieldsFieldMetaTypeDate {
	if f == nil {
		return FieldUpdateDocumentFieldsFieldMetaTypeDate("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaDateResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldUpdateDocumentFieldsFieldMetaDateResponse) GetTextAlign() *FieldUpdateDocumentFieldsTextAlignResponse4 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldUpdateDocumentFieldsFieldMetaTypeEmail string

const (
	FieldUpdateDocumentFieldsFieldMetaTypeEmailEmail FieldUpdateDocumentFieldsFieldMetaTypeEmail = "email"
)

func (e FieldUpdateDocumentFieldsFieldMetaTypeEmail) ToPointer() *FieldUpdateDocumentFieldsFieldMetaTypeEmail {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldUpdateDocumentFieldsFieldMetaTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaTypeEmail: %v", v)
	}
}

type FieldUpdateDocumentFieldsTextAlignResponse3 string

const (
	FieldUpdateDocumentFieldsTextAlignResponse3Left   FieldUpdateDocumentFieldsTextAlignResponse3 = "left"
	FieldUpdateDocumentFieldsTextAlignResponse3Center FieldUpdateDocumentFieldsTextAlignResponse3 = "center"
	FieldUpdateDocumentFieldsTextAlignResponse3Right  FieldUpdateDocumentFieldsTextAlignResponse3 = "right"
)

func (e FieldUpdateDocumentFieldsTextAlignResponse3) ToPointer() *FieldUpdateDocumentFieldsTextAlignResponse3 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTextAlignResponse3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldsTextAlignResponse3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTextAlignResponse3: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaEmailResponse struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsFieldMetaTypeEmail  `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateDocumentFieldsTextAlignResponse3 `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldMetaEmailResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaEmailResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaEmailResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaEmailResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaEmailResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaEmailResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaEmailResponse) GetType() FieldUpdateDocumentFieldsFieldMetaTypeEmail {
	if f == nil {
		return FieldUpdateDocumentFieldsFieldMetaTypeEmail("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaEmailResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldUpdateDocumentFieldsFieldMetaEmailResponse) GetTextAlign() *FieldUpdateDocumentFieldsTextAlignResponse3 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldUpdateDocumentFieldsFieldMetaTypeName string

const (
	FieldUpdateDocumentFieldsFieldMetaTypeNameName FieldUpdateDocumentFieldsFieldMetaTypeName = "name"
)

func (e FieldUpdateDocumentFieldsFieldMetaTypeName) ToPointer() *FieldUpdateDocumentFieldsFieldMetaTypeName {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldUpdateDocumentFieldsFieldMetaTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaTypeName: %v", v)
	}
}

type FieldUpdateDocumentFieldsTextAlignResponse2 string

const (
	FieldUpdateDocumentFieldsTextAlignResponse2Left   FieldUpdateDocumentFieldsTextAlignResponse2 = "left"
	FieldUpdateDocumentFieldsTextAlignResponse2Center FieldUpdateDocumentFieldsTextAlignResponse2 = "center"
	FieldUpdateDocumentFieldsTextAlignResponse2Right  FieldUpdateDocumentFieldsTextAlignResponse2 = "right"
)

func (e FieldUpdateDocumentFieldsTextAlignResponse2) ToPointer() *FieldUpdateDocumentFieldsTextAlignResponse2 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTextAlignResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldsTextAlignResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTextAlignResponse2: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaNameResponse struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsFieldMetaTypeName   `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateDocumentFieldsTextAlignResponse2 `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldMetaNameResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaNameResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaNameResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaNameResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaNameResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaNameResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaNameResponse) GetType() FieldUpdateDocumentFieldsFieldMetaTypeName {
	if f == nil {
		return FieldUpdateDocumentFieldsFieldMetaTypeName("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaNameResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldUpdateDocumentFieldsFieldMetaNameResponse) GetTextAlign() *FieldUpdateDocumentFieldsTextAlignResponse2 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldUpdateDocumentFieldsFieldMetaTypeInitials string

const (
	FieldUpdateDocumentFieldsFieldMetaTypeInitialsInitials FieldUpdateDocumentFieldsFieldMetaTypeInitials = "initials"
)

func (e FieldUpdateDocumentFieldsFieldMetaTypeInitials) ToPointer() *FieldUpdateDocumentFieldsFieldMetaTypeInitials {
	return &e
}
func (e *FieldUpdateDocumentFieldsFieldMetaTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldUpdateDocumentFieldsFieldMetaTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsFieldMetaTypeInitials: %v", v)
	}
}

type FieldUpdateDocumentFieldsTextAlignResponse1 string

const (
	FieldUpdateDocumentFieldsTextAlignResponse1Left   FieldUpdateDocumentFieldsTextAlignResponse1 = "left"
	FieldUpdateDocumentFieldsTextAlignResponse1Center FieldUpdateDocumentFieldsTextAlignResponse1 = "center"
	FieldUpdateDocumentFieldsTextAlignResponse1Right  FieldUpdateDocumentFieldsTextAlignResponse1 = "right"
)

func (e FieldUpdateDocumentFieldsTextAlignResponse1) ToPointer() *FieldUpdateDocumentFieldsTextAlignResponse1 {
	return &e
}
func (e *FieldUpdateDocumentFieldsTextAlignResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateDocumentFieldsTextAlignResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateDocumentFieldsTextAlignResponse1: %v", v)
	}
}

type FieldUpdateDocumentFieldsFieldMetaInitialsResponse struct {
	Label       *string                                        `json:"label,omitempty"`
	Placeholder *string                                        `json:"placeholder,omitempty"`
	Required    *bool                                          `json:"required,omitempty"`
	ReadOnly    *bool                                          `json:"readOnly,omitempty"`
	Type        FieldUpdateDocumentFieldsFieldMetaTypeInitials `json:"type"`
	FontSize    *float64                                       `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateDocumentFieldsTextAlignResponse1   `json:"textAlign,omitempty"`
}

func (f FieldUpdateDocumentFieldsFieldMetaInitialsResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateDocumentFieldsFieldMetaInitialsResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (f *FieldUpdateDocumentFieldsFieldMetaInitialsResponse) GetLabel() *string {
	if f == nil {
		return nil
	}
	return f.Label
}

func (f *FieldUpdateDocumentFieldsFieldMetaInitialsResponse) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FieldUpdateDocumentFieldsFieldMetaInitialsResponse) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FieldUpdateDocumentFieldsFieldMetaInitialsResponse) GetReadOnly() *bool {
	if f == nil {
		return nil
	}
	return f.ReadOnly
}

func (f *FieldUpdateDocumentFieldsFieldMetaInitialsResponse) GetType() FieldUpdateDocumentFieldsFieldMetaTypeInitials {
	if f == nil {
		return FieldUpdateDocumentFieldsFieldMetaTypeInitials("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldMetaInitialsResponse) GetFontSize() *float64 {
	if f == nil {
		return nil
	}
	return f.FontSize
}

func (f *FieldUpdateDocumentFieldsFieldMetaInitialsResponse) GetTextAlign() *FieldUpdateDocumentFieldsTextAlignResponse1 {
	if f == nil {
		return nil
	}
	return f.TextAlign
}

type FieldUpdateDocumentFieldsFieldMetaUnionType string

const (
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaInitialsResponse FieldUpdateDocumentFieldsFieldMetaUnionType = "field_updateDocumentFields_fieldMeta_Initials_response"
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaNameResponse     FieldUpdateDocumentFieldsFieldMetaUnionType = "field_updateDocumentFields_fieldMeta_Name_response"
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaEmailResponse    FieldUpdateDocumentFieldsFieldMetaUnionType = "field_updateDocumentFields_fieldMeta_Email_response"
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaDateResponse     FieldUpdateDocumentFieldsFieldMetaUnionType = "field_updateDocumentFields_fieldMeta_Date_response"
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaTextResponse     FieldUpdateDocumentFieldsFieldMetaUnionType = "field_updateDocumentFields_fieldMeta_Text_response"
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaNumberResponse   FieldUpdateDocumentFieldsFieldMetaUnionType = "field_updateDocumentFields_fieldMeta_Number_response"
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaRadioResponse    FieldUpdateDocumentFieldsFieldMetaUnionType = "field_updateDocumentFields_fieldMeta_Radio_response"
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaCheckboxResponse FieldUpdateDocumentFieldsFieldMetaUnionType = "field_updateDocumentFields_fieldMeta_Checkbox_response"
	FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaDropdownResponse FieldUpdateDocumentFieldsFieldMetaUnionType = "field_updateDocumentFields_fieldMeta_Dropdown_response"
)

type FieldUpdateDocumentFieldsFieldMetaUnion struct {
	FieldUpdateDocumentFieldsFieldMetaInitialsResponse *FieldUpdateDocumentFieldsFieldMetaInitialsResponse `queryParam:"inline,name=fieldMeta"`
	FieldUpdateDocumentFieldsFieldMetaNameResponse     *FieldUpdateDocumentFieldsFieldMetaNameResponse     `queryParam:"inline,name=fieldMeta"`
	FieldUpdateDocumentFieldsFieldMetaEmailResponse    *FieldUpdateDocumentFieldsFieldMetaEmailResponse    `queryParam:"inline,name=fieldMeta"`
	FieldUpdateDocumentFieldsFieldMetaDateResponse     *FieldUpdateDocumentFieldsFieldMetaDateResponse     `queryParam:"inline,name=fieldMeta"`
	FieldUpdateDocumentFieldsFieldMetaTextResponse     *FieldUpdateDocumentFieldsFieldMetaTextResponse     `queryParam:"inline,name=fieldMeta"`
	FieldUpdateDocumentFieldsFieldMetaNumberResponse   *FieldUpdateDocumentFieldsFieldMetaNumberResponse   `queryParam:"inline,name=fieldMeta"`
	FieldUpdateDocumentFieldsFieldMetaRadioResponse    *FieldUpdateDocumentFieldsFieldMetaRadioResponse    `queryParam:"inline,name=fieldMeta"`
	FieldUpdateDocumentFieldsFieldMetaCheckboxResponse *FieldUpdateDocumentFieldsFieldMetaCheckboxResponse `queryParam:"inline,name=fieldMeta"`
	FieldUpdateDocumentFieldsFieldMetaDropdownResponse *FieldUpdateDocumentFieldsFieldMetaDropdownResponse `queryParam:"inline,name=fieldMeta"`

	Type FieldUpdateDocumentFieldsFieldMetaUnionType
}

func CreateFieldUpdateDocumentFieldsFieldMetaUnionFieldUpdateDocumentFieldsFieldMetaInitialsResponse(fieldUpdateDocumentFieldsFieldMetaInitialsResponse FieldUpdateDocumentFieldsFieldMetaInitialsResponse) FieldUpdateDocumentFieldsFieldMetaUnion {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaInitialsResponse

	return FieldUpdateDocumentFieldsFieldMetaUnion{
		FieldUpdateDocumentFieldsFieldMetaInitialsResponse: &fieldUpdateDocumentFieldsFieldMetaInitialsResponse,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldMetaUnionFieldUpdateDocumentFieldsFieldMetaNameResponse(fieldUpdateDocumentFieldsFieldMetaNameResponse FieldUpdateDocumentFieldsFieldMetaNameResponse) FieldUpdateDocumentFieldsFieldMetaUnion {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaNameResponse

	return FieldUpdateDocumentFieldsFieldMetaUnion{
		FieldUpdateDocumentFieldsFieldMetaNameResponse: &fieldUpdateDocumentFieldsFieldMetaNameResponse,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldMetaUnionFieldUpdateDocumentFieldsFieldMetaEmailResponse(fieldUpdateDocumentFieldsFieldMetaEmailResponse FieldUpdateDocumentFieldsFieldMetaEmailResponse) FieldUpdateDocumentFieldsFieldMetaUnion {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaEmailResponse

	return FieldUpdateDocumentFieldsFieldMetaUnion{
		FieldUpdateDocumentFieldsFieldMetaEmailResponse: &fieldUpdateDocumentFieldsFieldMetaEmailResponse,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldMetaUnionFieldUpdateDocumentFieldsFieldMetaDateResponse(fieldUpdateDocumentFieldsFieldMetaDateResponse FieldUpdateDocumentFieldsFieldMetaDateResponse) FieldUpdateDocumentFieldsFieldMetaUnion {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaDateResponse

	return FieldUpdateDocumentFieldsFieldMetaUnion{
		FieldUpdateDocumentFieldsFieldMetaDateResponse: &fieldUpdateDocumentFieldsFieldMetaDateResponse,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldMetaUnionFieldUpdateDocumentFieldsFieldMetaTextResponse(fieldUpdateDocumentFieldsFieldMetaTextResponse FieldUpdateDocumentFieldsFieldMetaTextResponse) FieldUpdateDocumentFieldsFieldMetaUnion {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaTextResponse

	return FieldUpdateDocumentFieldsFieldMetaUnion{
		FieldUpdateDocumentFieldsFieldMetaTextResponse: &fieldUpdateDocumentFieldsFieldMetaTextResponse,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldMetaUnionFieldUpdateDocumentFieldsFieldMetaNumberResponse(fieldUpdateDocumentFieldsFieldMetaNumberResponse FieldUpdateDocumentFieldsFieldMetaNumberResponse) FieldUpdateDocumentFieldsFieldMetaUnion {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaNumberResponse

	return FieldUpdateDocumentFieldsFieldMetaUnion{
		FieldUpdateDocumentFieldsFieldMetaNumberResponse: &fieldUpdateDocumentFieldsFieldMetaNumberResponse,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldMetaUnionFieldUpdateDocumentFieldsFieldMetaRadioResponse(fieldUpdateDocumentFieldsFieldMetaRadioResponse FieldUpdateDocumentFieldsFieldMetaRadioResponse) FieldUpdateDocumentFieldsFieldMetaUnion {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaRadioResponse

	return FieldUpdateDocumentFieldsFieldMetaUnion{
		FieldUpdateDocumentFieldsFieldMetaRadioResponse: &fieldUpdateDocumentFieldsFieldMetaRadioResponse,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldMetaUnionFieldUpdateDocumentFieldsFieldMetaCheckboxResponse(fieldUpdateDocumentFieldsFieldMetaCheckboxResponse FieldUpdateDocumentFieldsFieldMetaCheckboxResponse) FieldUpdateDocumentFieldsFieldMetaUnion {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaCheckboxResponse

	return FieldUpdateDocumentFieldsFieldMetaUnion{
		FieldUpdateDocumentFieldsFieldMetaCheckboxResponse: &fieldUpdateDocumentFieldsFieldMetaCheckboxResponse,
		Type: typ,
	}
}

func CreateFieldUpdateDocumentFieldsFieldMetaUnionFieldUpdateDocumentFieldsFieldMetaDropdownResponse(fieldUpdateDocumentFieldsFieldMetaDropdownResponse FieldUpdateDocumentFieldsFieldMetaDropdownResponse) FieldUpdateDocumentFieldsFieldMetaUnion {
	typ := FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaDropdownResponse

	return FieldUpdateDocumentFieldsFieldMetaUnion{
		FieldUpdateDocumentFieldsFieldMetaDropdownResponse: &fieldUpdateDocumentFieldsFieldMetaDropdownResponse,
		Type: typ,
	}
}

func (u *FieldUpdateDocumentFieldsFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var fieldUpdateDocumentFieldsFieldMetaInitialsResponse FieldUpdateDocumentFieldsFieldMetaInitialsResponse = FieldUpdateDocumentFieldsFieldMetaInitialsResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMetaInitialsResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldMetaInitialsResponse = &fieldUpdateDocumentFieldsFieldMetaInitialsResponse
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaInitialsResponse
		return nil
	}

	var fieldUpdateDocumentFieldsFieldMetaNameResponse FieldUpdateDocumentFieldsFieldMetaNameResponse = FieldUpdateDocumentFieldsFieldMetaNameResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMetaNameResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldMetaNameResponse = &fieldUpdateDocumentFieldsFieldMetaNameResponse
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaNameResponse
		return nil
	}

	var fieldUpdateDocumentFieldsFieldMetaEmailResponse FieldUpdateDocumentFieldsFieldMetaEmailResponse = FieldUpdateDocumentFieldsFieldMetaEmailResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMetaEmailResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldMetaEmailResponse = &fieldUpdateDocumentFieldsFieldMetaEmailResponse
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaEmailResponse
		return nil
	}

	var fieldUpdateDocumentFieldsFieldMetaDateResponse FieldUpdateDocumentFieldsFieldMetaDateResponse = FieldUpdateDocumentFieldsFieldMetaDateResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMetaDateResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldMetaDateResponse = &fieldUpdateDocumentFieldsFieldMetaDateResponse
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaDateResponse
		return nil
	}

	var fieldUpdateDocumentFieldsFieldMetaTextResponse FieldUpdateDocumentFieldsFieldMetaTextResponse = FieldUpdateDocumentFieldsFieldMetaTextResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMetaTextResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldMetaTextResponse = &fieldUpdateDocumentFieldsFieldMetaTextResponse
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaTextResponse
		return nil
	}

	var fieldUpdateDocumentFieldsFieldMetaNumberResponse FieldUpdateDocumentFieldsFieldMetaNumberResponse = FieldUpdateDocumentFieldsFieldMetaNumberResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMetaNumberResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldMetaNumberResponse = &fieldUpdateDocumentFieldsFieldMetaNumberResponse
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaNumberResponse
		return nil
	}

	var fieldUpdateDocumentFieldsFieldMetaRadioResponse FieldUpdateDocumentFieldsFieldMetaRadioResponse = FieldUpdateDocumentFieldsFieldMetaRadioResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMetaRadioResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldMetaRadioResponse = &fieldUpdateDocumentFieldsFieldMetaRadioResponse
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaRadioResponse
		return nil
	}

	var fieldUpdateDocumentFieldsFieldMetaCheckboxResponse FieldUpdateDocumentFieldsFieldMetaCheckboxResponse = FieldUpdateDocumentFieldsFieldMetaCheckboxResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMetaCheckboxResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldMetaCheckboxResponse = &fieldUpdateDocumentFieldsFieldMetaCheckboxResponse
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaCheckboxResponse
		return nil
	}

	var fieldUpdateDocumentFieldsFieldMetaDropdownResponse FieldUpdateDocumentFieldsFieldMetaDropdownResponse = FieldUpdateDocumentFieldsFieldMetaDropdownResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateDocumentFieldsFieldMetaDropdownResponse, "", true, nil); err == nil {
		u.FieldUpdateDocumentFieldsFieldMetaDropdownResponse = &fieldUpdateDocumentFieldsFieldMetaDropdownResponse
		u.Type = FieldUpdateDocumentFieldsFieldMetaUnionTypeFieldUpdateDocumentFieldsFieldMetaDropdownResponse
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldUpdateDocumentFieldsFieldMetaUnion", string(data))
}

func (u FieldUpdateDocumentFieldsFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.FieldUpdateDocumentFieldsFieldMetaInitialsResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMetaInitialsResponse, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldMetaNameResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMetaNameResponse, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldMetaEmailResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMetaEmailResponse, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldMetaDateResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMetaDateResponse, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldMetaTextResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMetaTextResponse, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldMetaNumberResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMetaNumberResponse, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldMetaRadioResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMetaRadioResponse, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldMetaCheckboxResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMetaCheckboxResponse, "", true)
	}

	if u.FieldUpdateDocumentFieldsFieldMetaDropdownResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateDocumentFieldsFieldMetaDropdownResponse, "", true)
	}

	return nil, errors.New("could not marshal union type FieldUpdateDocumentFieldsFieldMetaUnion: all fields are null")
}

type FieldUpdateDocumentFieldsFieldResponse struct {
	EnvelopeID     string                                `json:"envelopeId"`
	EnvelopeItemID string                                `json:"envelopeItemId"`
	Type           FieldUpdateDocumentFieldsTypeResponse `json:"type"`
	ID             float64                               `json:"id"`
	SecondaryID    string                                `json:"secondaryId"`
	RecipientID    float64                               `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                                  `json:"page"`
	PositionX  any                                      `json:"positionX,omitempty"`
	PositionY  any                                      `json:"positionY,omitempty"`
	Width      any                                      `json:"width,omitempty"`
	Height     any                                      `json:"height,omitempty"`
	CustomText string                                   `json:"customText"`
	Inserted   bool                                     `json:"inserted"`
	FieldMeta  *FieldUpdateDocumentFieldsFieldMetaUnion `json:"fieldMeta"`
	DocumentID *float64                                 `json:"documentId,omitempty"`
	TemplateID *float64                                 `json:"templateId,omitempty"`
}

func (f *FieldUpdateDocumentFieldsFieldResponse) GetEnvelopeID() string {
	if f == nil {
		return ""
	}
	return f.EnvelopeID
}

func (f *FieldUpdateDocumentFieldsFieldResponse) GetEnvelopeItemID() string {
	if f == nil {
		return ""
	}
	return f.EnvelopeItemID
}

func (f *FieldUpdateDocumentFieldsFieldResponse) GetType() FieldUpdateDocumentFieldsTypeResponse {
	if f == nil {
		return FieldUpdateDocumentFieldsTypeResponse("")
	}
	return f.Type
}

func (f *FieldUpdateDocumentFieldsFieldResponse) GetID() float64 {
	if f == nil {
		return 0.0
	}
	return f.ID
}

func (f *FieldUpdateDocumentFieldsFieldResponse) GetSecondaryID() string {
	if f == nil {
		return ""
	}
	return f.SecondaryID
}

func (f *FieldUpdateDocumentFieldsFieldResponse) GetRecipientID() float64 {
	if f == nil {
		return 0.0
	}
	return f.RecipientID
}

func (f *FieldUpdateDocumentFieldsFieldResponse) GetPage() float64 {
	if f == nil {
		return 0.0
	}
	return f.Page
}

func (f *FieldUpdateDocumentFieldsFieldResponse) GetPositionX() any {
	if f == nil {
		return nil
	}
	return f.PositionX
}

func (f *FieldUpdateDocumentFieldsFieldResponse) GetPositionY() any {
	if f == nil {
		return nil
	}
	return f.PositionY
}

func (f *FieldUpdateDocumentFieldsFieldResponse) GetWidth() any {
	if f == nil {
		return nil
	}
	return f.Width
}

func (f *FieldUpdateDocumentFieldsFieldResponse) GetHeight() any {
	if f == nil {
		return nil
	}
	return f.Height
}

func (f *FieldUpdateDocumentFieldsFieldResponse) GetCustomText() string {
	if f == nil {
		return ""
	}
	return f.CustomText
}

func (f *FieldUpdateDocumentFieldsFieldResponse) GetInserted() bool {
	if f == nil {
		return false
	}
	return f.Inserted
}

func (f *FieldUpdateDocumentFieldsFieldResponse) GetFieldMeta() *FieldUpdateDocumentFieldsFieldMetaUnion {
	if f == nil {
		return nil
	}
	return f.FieldMeta
}

func (f *FieldUpdateDocumentFieldsFieldResponse) GetDocumentID() *float64 {
	if f == nil {
		return nil
	}
	return f.DocumentID
}

func (f *FieldUpdateDocumentFieldsFieldResponse) GetTemplateID() *float64 {
	if f == nil {
		return nil
	}
	return f.TemplateID
}

// FieldUpdateDocumentFieldsResponseBody - Successful response
type FieldUpdateDocumentFieldsResponseBody struct {
	Fields []FieldUpdateDocumentFieldsFieldResponse `json:"fields"`
}

func (f *FieldUpdateDocumentFieldsResponseBody) GetFields() []FieldUpdateDocumentFieldsFieldResponse {
	if f == nil {
		return []FieldUpdateDocumentFieldsFieldResponse{}
	}
	return f.Fields
}

type FieldUpdateDocumentFieldsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldUpdateDocumentFieldsResponseBody
}

func (f *FieldUpdateDocumentFieldsResponse) GetHTTPMeta() components.HTTPMetadata {
	if f == nil {
		return components.HTTPMetadata{}
	}
	return f.HTTPMeta
}

func (f *FieldUpdateDocumentFieldsResponse) GetObject() *FieldUpdateDocumentFieldsResponseBody {
	if f == nil {
		return nil
	}
	return f.Object
}
