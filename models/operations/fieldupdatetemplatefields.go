// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

type FieldUpdateTemplateFieldsTypeDropdownRequest1 string

const (
	FieldUpdateTemplateFieldsTypeDropdownRequest1Dropdown FieldUpdateTemplateFieldsTypeDropdownRequest1 = "DROPDOWN"
)

func (e FieldUpdateTemplateFieldsTypeDropdownRequest1) ToPointer() *FieldUpdateTemplateFieldsTypeDropdownRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeDropdownRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DROPDOWN":
		*e = FieldUpdateTemplateFieldsTypeDropdownRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeDropdownRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldsTypeDropdownRequest2 string

const (
	FieldUpdateTemplateFieldsTypeDropdownRequest2Dropdown FieldUpdateTemplateFieldsTypeDropdownRequest2 = "dropdown"
)

func (e FieldUpdateTemplateFieldsTypeDropdownRequest2) ToPointer() *FieldUpdateTemplateFieldsTypeDropdownRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeDropdownRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldUpdateTemplateFieldsTypeDropdownRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeDropdownRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldsValueDropdown struct {
	Value string `json:"value"`
}

func (f FieldUpdateTemplateFieldsValueDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsValueDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsValueDropdown) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldsFieldMetaDropdownRequest struct {
	Label        *string                                       `json:"label,omitempty"`
	Placeholder  *string                                       `json:"placeholder,omitempty"`
	Required     *bool                                         `json:"required,omitempty"`
	ReadOnly     *bool                                         `json:"readOnly,omitempty"`
	Type         FieldUpdateTemplateFieldsTypeDropdownRequest2 `json:"type"`
	Values       []FieldUpdateTemplateFieldsValueDropdown      `json:"values,omitempty"`
	DefaultValue *string                                       `json:"defaultValue,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaDropdownRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaDropdownRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaDropdownRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaDropdownRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaDropdownRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaDropdownRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaDropdownRequest) GetType() FieldUpdateTemplateFieldsTypeDropdownRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeDropdownRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaDropdownRequest) GetValues() []FieldUpdateTemplateFieldsValueDropdown {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateTemplateFieldsFieldMetaDropdownRequest) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldUpdateTemplateFieldsFieldDropdown struct {
	Type      FieldUpdateTemplateFieldsTypeDropdownRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldMetaDropdownRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldDropdown) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldDropdown) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldDropdown) GetType() FieldUpdateTemplateFieldsTypeDropdownRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeDropdownRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldDropdown) GetFieldMeta() *FieldUpdateTemplateFieldsFieldMetaDropdownRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFieldDropdown) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFieldDropdown) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFieldDropdown) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFieldDropdown) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFieldDropdown) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFieldDropdown) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsTypeCheckboxRequest1 string

const (
	FieldUpdateTemplateFieldsTypeCheckboxRequest1Checkbox FieldUpdateTemplateFieldsTypeCheckboxRequest1 = "CHECKBOX"
)

func (e FieldUpdateTemplateFieldsTypeCheckboxRequest1) ToPointer() *FieldUpdateTemplateFieldsTypeCheckboxRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeCheckboxRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHECKBOX":
		*e = FieldUpdateTemplateFieldsTypeCheckboxRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeCheckboxRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldsTypeCheckboxRequest2 string

const (
	FieldUpdateTemplateFieldsTypeCheckboxRequest2Checkbox FieldUpdateTemplateFieldsTypeCheckboxRequest2 = "checkbox"
)

func (e FieldUpdateTemplateFieldsTypeCheckboxRequest2) ToPointer() *FieldUpdateTemplateFieldsTypeCheckboxRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeCheckboxRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldUpdateTemplateFieldsTypeCheckboxRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeCheckboxRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldsValueCheckbox struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldUpdateTemplateFieldsValueCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsValueCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsValueCheckbox) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsValueCheckbox) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateTemplateFieldsValueCheckbox) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldsFieldMetaCheckboxRequest struct {
	Label            *string                                       `json:"label,omitempty"`
	Placeholder      *string                                       `json:"placeholder,omitempty"`
	Required         *bool                                         `json:"required,omitempty"`
	ReadOnly         *bool                                         `json:"readOnly,omitempty"`
	Type             FieldUpdateTemplateFieldsTypeCheckboxRequest2 `json:"type"`
	Values           []FieldUpdateTemplateFieldsValueCheckbox      `json:"values,omitempty"`
	ValidationRule   *string                                       `json:"validationRule,omitempty"`
	ValidationLength *float64                                      `json:"validationLength,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaCheckboxRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaCheckboxRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaCheckboxRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaCheckboxRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaCheckboxRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaCheckboxRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaCheckboxRequest) GetType() FieldUpdateTemplateFieldsTypeCheckboxRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeCheckboxRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaCheckboxRequest) GetValues() []FieldUpdateTemplateFieldsValueCheckbox {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateTemplateFieldsFieldMetaCheckboxRequest) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldUpdateTemplateFieldsFieldMetaCheckboxRequest) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldUpdateTemplateFieldsFieldCheckbox struct {
	Type      FieldUpdateTemplateFieldsTypeCheckboxRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldMetaCheckboxRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldCheckbox) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldCheckbox) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldCheckbox) GetType() FieldUpdateTemplateFieldsTypeCheckboxRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeCheckboxRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldCheckbox) GetFieldMeta() *FieldUpdateTemplateFieldsFieldMetaCheckboxRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFieldCheckbox) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFieldCheckbox) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFieldCheckbox) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFieldCheckbox) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFieldCheckbox) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFieldCheckbox) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsTypeRadioRequest1 string

const (
	FieldUpdateTemplateFieldsTypeRadioRequest1Radio FieldUpdateTemplateFieldsTypeRadioRequest1 = "RADIO"
)

func (e FieldUpdateTemplateFieldsTypeRadioRequest1) ToPointer() *FieldUpdateTemplateFieldsTypeRadioRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeRadioRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO":
		*e = FieldUpdateTemplateFieldsTypeRadioRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeRadioRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldsTypeRadioRequest2 string

const (
	FieldUpdateTemplateFieldsTypeRadioRequest2Radio FieldUpdateTemplateFieldsTypeRadioRequest2 = "radio"
)

func (e FieldUpdateTemplateFieldsTypeRadioRequest2) ToPointer() *FieldUpdateTemplateFieldsTypeRadioRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeRadioRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldUpdateTemplateFieldsTypeRadioRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeRadioRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldsValueRadio struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldUpdateTemplateFieldsValueRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsValueRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsValueRadio) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsValueRadio) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateTemplateFieldsValueRadio) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldsFieldMetaRadioRequest struct {
	Label       *string                                    `json:"label,omitempty"`
	Placeholder *string                                    `json:"placeholder,omitempty"`
	Required    *bool                                      `json:"required,omitempty"`
	ReadOnly    *bool                                      `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsTypeRadioRequest2 `json:"type"`
	Values      []FieldUpdateTemplateFieldsValueRadio      `json:"values,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaRadioRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaRadioRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaRadioRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaRadioRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaRadioRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaRadioRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaRadioRequest) GetType() FieldUpdateTemplateFieldsTypeRadioRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeRadioRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaRadioRequest) GetValues() []FieldUpdateTemplateFieldsValueRadio {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldUpdateTemplateFieldsFieldRadio struct {
	Type      FieldUpdateTemplateFieldsTypeRadioRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldMetaRadioRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldRadio) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldRadio) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldRadio) GetType() FieldUpdateTemplateFieldsTypeRadioRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeRadioRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldRadio) GetFieldMeta() *FieldUpdateTemplateFieldsFieldMetaRadioRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFieldRadio) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFieldRadio) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFieldRadio) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFieldRadio) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFieldRadio) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFieldRadio) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsTypeNumberRequest1 string

const (
	FieldUpdateTemplateFieldsTypeNumberRequest1Number FieldUpdateTemplateFieldsTypeNumberRequest1 = "NUMBER"
)

func (e FieldUpdateTemplateFieldsTypeNumberRequest1) ToPointer() *FieldUpdateTemplateFieldsTypeNumberRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeNumberRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NUMBER":
		*e = FieldUpdateTemplateFieldsTypeNumberRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeNumberRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldsTypeNumberRequest2 string

const (
	FieldUpdateTemplateFieldsTypeNumberRequest2Number FieldUpdateTemplateFieldsTypeNumberRequest2 = "number"
)

func (e FieldUpdateTemplateFieldsTypeNumberRequest2) ToPointer() *FieldUpdateTemplateFieldsTypeNumberRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeNumberRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldUpdateTemplateFieldsTypeNumberRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeNumberRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldsTextAlignNumber string

const (
	FieldUpdateTemplateFieldsTextAlignNumberLeft   FieldUpdateTemplateFieldsTextAlignNumber = "left"
	FieldUpdateTemplateFieldsTextAlignNumberCenter FieldUpdateTemplateFieldsTextAlignNumber = "center"
	FieldUpdateTemplateFieldsTextAlignNumberRight  FieldUpdateTemplateFieldsTextAlignNumber = "right"
)

func (e FieldUpdateTemplateFieldsTextAlignNumber) ToPointer() *FieldUpdateTemplateFieldsTextAlignNumber {
	return &e
}
func (e *FieldUpdateTemplateFieldsTextAlignNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldsTextAlignNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTextAlignNumber: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMetaNumberRequest struct {
	Label        *string                                     `json:"label,omitempty"`
	Placeholder  *string                                     `json:"placeholder,omitempty"`
	Required     *bool                                       `json:"required,omitempty"`
	ReadOnly     *bool                                       `json:"readOnly,omitempty"`
	Type         FieldUpdateTemplateFieldsTypeNumberRequest2 `json:"type"`
	NumberFormat *string                                     `json:"numberFormat,omitempty"`
	Value        *string                                     `json:"value,omitempty"`
	MinValue     *float64                                    `json:"minValue,omitempty"`
	MaxValue     *float64                                    `json:"maxValue,omitempty"`
	FontSize     *float64                                    `json:"fontSize,omitempty"`
	TextAlign    *FieldUpdateTemplateFieldsTextAlignNumber   `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaNumberRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaNumberRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberRequest) GetType() FieldUpdateTemplateFieldsTypeNumberRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeNumberRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberRequest) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberRequest) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberRequest) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberRequest) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberRequest) GetTextAlign() *FieldUpdateTemplateFieldsTextAlignNumber {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldsFieldNumber struct {
	Type      FieldUpdateTemplateFieldsTypeNumberRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldMetaNumberRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldNumber) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldNumber) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldNumber) GetType() FieldUpdateTemplateFieldsTypeNumberRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeNumberRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldNumber) GetFieldMeta() *FieldUpdateTemplateFieldsFieldMetaNumberRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFieldNumber) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFieldNumber) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFieldNumber) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFieldNumber) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFieldNumber) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFieldNumber) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsTypeTextRequest1 string

const (
	FieldUpdateTemplateFieldsTypeTextRequest1Text FieldUpdateTemplateFieldsTypeTextRequest1 = "TEXT"
)

func (e FieldUpdateTemplateFieldsTypeTextRequest1) ToPointer() *FieldUpdateTemplateFieldsTypeTextRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeTextRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		*e = FieldUpdateTemplateFieldsTypeTextRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeTextRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldsTypeTextRequest2 string

const (
	FieldUpdateTemplateFieldsTypeTextRequest2Text FieldUpdateTemplateFieldsTypeTextRequest2 = "text"
)

func (e FieldUpdateTemplateFieldsTypeTextRequest2) ToPointer() *FieldUpdateTemplateFieldsTypeTextRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeTextRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldUpdateTemplateFieldsTypeTextRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeTextRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldsTextAlignText string

const (
	FieldUpdateTemplateFieldsTextAlignTextLeft   FieldUpdateTemplateFieldsTextAlignText = "left"
	FieldUpdateTemplateFieldsTextAlignTextCenter FieldUpdateTemplateFieldsTextAlignText = "center"
	FieldUpdateTemplateFieldsTextAlignTextRight  FieldUpdateTemplateFieldsTextAlignText = "right"
)

func (e FieldUpdateTemplateFieldsTextAlignText) ToPointer() *FieldUpdateTemplateFieldsTextAlignText {
	return &e
}
func (e *FieldUpdateTemplateFieldsTextAlignText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldsTextAlignText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTextAlignText: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMetaTextRequest struct {
	Label          *string                                   `json:"label,omitempty"`
	Placeholder    *string                                   `json:"placeholder,omitempty"`
	Required       *bool                                     `json:"required,omitempty"`
	ReadOnly       *bool                                     `json:"readOnly,omitempty"`
	Type           FieldUpdateTemplateFieldsTypeTextRequest2 `json:"type"`
	Text           *string                                   `json:"text,omitempty"`
	CharacterLimit *float64                                  `json:"characterLimit,omitempty"`
	FontSize       *float64                                  `json:"fontSize,omitempty"`
	TextAlign      *FieldUpdateTemplateFieldsTextAlignText   `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaTextRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaTextRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextRequest) GetType() FieldUpdateTemplateFieldsTypeTextRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeTextRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextRequest) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextRequest) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextRequest) GetTextAlign() *FieldUpdateTemplateFieldsTextAlignText {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldsFieldText struct {
	Type      FieldUpdateTemplateFieldsTypeTextRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldMetaTextRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldText) GetType() FieldUpdateTemplateFieldsTypeTextRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeTextRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldText) GetFieldMeta() *FieldUpdateTemplateFieldsFieldMetaTextRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFieldText) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFieldText) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFieldText) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFieldText) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFieldText) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFieldText) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsTypeDateRequest1 string

const (
	FieldUpdateTemplateFieldsTypeDateRequest1Date FieldUpdateTemplateFieldsTypeDateRequest1 = "DATE"
)

func (e FieldUpdateTemplateFieldsTypeDateRequest1) ToPointer() *FieldUpdateTemplateFieldsTypeDateRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeDateRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATE":
		*e = FieldUpdateTemplateFieldsTypeDateRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeDateRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldsTypeDateRequest2 string

const (
	FieldUpdateTemplateFieldsTypeDateRequest2Date FieldUpdateTemplateFieldsTypeDateRequest2 = "date"
)

func (e FieldUpdateTemplateFieldsTypeDateRequest2) ToPointer() *FieldUpdateTemplateFieldsTypeDateRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeDateRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldUpdateTemplateFieldsTypeDateRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeDateRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldsTextAlignDate string

const (
	FieldUpdateTemplateFieldsTextAlignDateLeft   FieldUpdateTemplateFieldsTextAlignDate = "left"
	FieldUpdateTemplateFieldsTextAlignDateCenter FieldUpdateTemplateFieldsTextAlignDate = "center"
	FieldUpdateTemplateFieldsTextAlignDateRight  FieldUpdateTemplateFieldsTextAlignDate = "right"
)

func (e FieldUpdateTemplateFieldsTextAlignDate) ToPointer() *FieldUpdateTemplateFieldsTextAlignDate {
	return &e
}
func (e *FieldUpdateTemplateFieldsTextAlignDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldsTextAlignDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTextAlignDate: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMetaDateRequest struct {
	Label       *string                                   `json:"label,omitempty"`
	Placeholder *string                                   `json:"placeholder,omitempty"`
	Required    *bool                                     `json:"required,omitempty"`
	ReadOnly    *bool                                     `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsTypeDateRequest2 `json:"type"`
	FontSize    *float64                                  `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateTemplateFieldsTextAlignDate   `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaDateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaDateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaDateRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaDateRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaDateRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaDateRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaDateRequest) GetType() FieldUpdateTemplateFieldsTypeDateRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeDateRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaDateRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldsFieldMetaDateRequest) GetTextAlign() *FieldUpdateTemplateFieldsTextAlignDate {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldsFieldDate struct {
	Type      FieldUpdateTemplateFieldsTypeDateRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldMetaDateRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldDate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldDate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldDate) GetType() FieldUpdateTemplateFieldsTypeDateRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeDateRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldDate) GetFieldMeta() *FieldUpdateTemplateFieldsFieldMetaDateRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFieldDate) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFieldDate) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFieldDate) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFieldDate) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFieldDate) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFieldDate) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsTypeEmailRequest1 string

const (
	FieldUpdateTemplateFieldsTypeEmailRequest1Email FieldUpdateTemplateFieldsTypeEmailRequest1 = "EMAIL"
)

func (e FieldUpdateTemplateFieldsTypeEmailRequest1) ToPointer() *FieldUpdateTemplateFieldsTypeEmailRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeEmailRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		*e = FieldUpdateTemplateFieldsTypeEmailRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeEmailRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldsTypeEmailRequest2 string

const (
	FieldUpdateTemplateFieldsTypeEmailRequest2Email FieldUpdateTemplateFieldsTypeEmailRequest2 = "email"
)

func (e FieldUpdateTemplateFieldsTypeEmailRequest2) ToPointer() *FieldUpdateTemplateFieldsTypeEmailRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeEmailRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldUpdateTemplateFieldsTypeEmailRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeEmailRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldsTextAlignEmail string

const (
	FieldUpdateTemplateFieldsTextAlignEmailLeft   FieldUpdateTemplateFieldsTextAlignEmail = "left"
	FieldUpdateTemplateFieldsTextAlignEmailCenter FieldUpdateTemplateFieldsTextAlignEmail = "center"
	FieldUpdateTemplateFieldsTextAlignEmailRight  FieldUpdateTemplateFieldsTextAlignEmail = "right"
)

func (e FieldUpdateTemplateFieldsTextAlignEmail) ToPointer() *FieldUpdateTemplateFieldsTextAlignEmail {
	return &e
}
func (e *FieldUpdateTemplateFieldsTextAlignEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldsTextAlignEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTextAlignEmail: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMetaEmailRequest struct {
	Label       *string                                    `json:"label,omitempty"`
	Placeholder *string                                    `json:"placeholder,omitempty"`
	Required    *bool                                      `json:"required,omitempty"`
	ReadOnly    *bool                                      `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsTypeEmailRequest2 `json:"type"`
	FontSize    *float64                                   `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateTemplateFieldsTextAlignEmail   `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaEmailRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaEmailRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaEmailRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaEmailRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaEmailRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaEmailRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaEmailRequest) GetType() FieldUpdateTemplateFieldsTypeEmailRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeEmailRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaEmailRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldsFieldMetaEmailRequest) GetTextAlign() *FieldUpdateTemplateFieldsTextAlignEmail {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldsFieldEmail struct {
	Type      FieldUpdateTemplateFieldsTypeEmailRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldMetaEmailRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldEmail) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldEmail) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldEmail) GetType() FieldUpdateTemplateFieldsTypeEmailRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeEmailRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldEmail) GetFieldMeta() *FieldUpdateTemplateFieldsFieldMetaEmailRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFieldEmail) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFieldEmail) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFieldEmail) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFieldEmail) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFieldEmail) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFieldEmail) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsTypeNameRequest1 string

const (
	FieldUpdateTemplateFieldsTypeNameRequest1Name FieldUpdateTemplateFieldsTypeNameRequest1 = "NAME"
)

func (e FieldUpdateTemplateFieldsTypeNameRequest1) ToPointer() *FieldUpdateTemplateFieldsTypeNameRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeNameRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME":
		*e = FieldUpdateTemplateFieldsTypeNameRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeNameRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldsTypeNameRequest2 string

const (
	FieldUpdateTemplateFieldsTypeNameRequest2Name FieldUpdateTemplateFieldsTypeNameRequest2 = "name"
)

func (e FieldUpdateTemplateFieldsTypeNameRequest2) ToPointer() *FieldUpdateTemplateFieldsTypeNameRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeNameRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldUpdateTemplateFieldsTypeNameRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeNameRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldsTextAlignName string

const (
	FieldUpdateTemplateFieldsTextAlignNameLeft   FieldUpdateTemplateFieldsTextAlignName = "left"
	FieldUpdateTemplateFieldsTextAlignNameCenter FieldUpdateTemplateFieldsTextAlignName = "center"
	FieldUpdateTemplateFieldsTextAlignNameRight  FieldUpdateTemplateFieldsTextAlignName = "right"
)

func (e FieldUpdateTemplateFieldsTextAlignName) ToPointer() *FieldUpdateTemplateFieldsTextAlignName {
	return &e
}
func (e *FieldUpdateTemplateFieldsTextAlignName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldsTextAlignName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTextAlignName: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMetaNameRequest struct {
	Label       *string                                   `json:"label,omitempty"`
	Placeholder *string                                   `json:"placeholder,omitempty"`
	Required    *bool                                     `json:"required,omitempty"`
	ReadOnly    *bool                                     `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsTypeNameRequest2 `json:"type"`
	FontSize    *float64                                  `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateTemplateFieldsTextAlignName   `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaNameRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaNameRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaNameRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaNameRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaNameRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaNameRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaNameRequest) GetType() FieldUpdateTemplateFieldsTypeNameRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeNameRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaNameRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldsFieldMetaNameRequest) GetTextAlign() *FieldUpdateTemplateFieldsTextAlignName {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldsFieldName struct {
	Type      FieldUpdateTemplateFieldsTypeNameRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldMetaNameRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldName) GetType() FieldUpdateTemplateFieldsTypeNameRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeNameRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldName) GetFieldMeta() *FieldUpdateTemplateFieldsFieldMetaNameRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFieldName) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFieldName) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFieldName) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFieldName) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFieldName) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFieldName) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsTypeInitialsRequest1 string

const (
	FieldUpdateTemplateFieldsTypeInitialsRequest1Initials FieldUpdateTemplateFieldsTypeInitialsRequest1 = "INITIALS"
)

func (e FieldUpdateTemplateFieldsTypeInitialsRequest1) ToPointer() *FieldUpdateTemplateFieldsTypeInitialsRequest1 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeInitialsRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALS":
		*e = FieldUpdateTemplateFieldsTypeInitialsRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeInitialsRequest1: %v", v)
	}
}

type FieldUpdateTemplateFieldsTypeInitialsRequest2 string

const (
	FieldUpdateTemplateFieldsTypeInitialsRequest2Initials FieldUpdateTemplateFieldsTypeInitialsRequest2 = "initials"
)

func (e FieldUpdateTemplateFieldsTypeInitialsRequest2) ToPointer() *FieldUpdateTemplateFieldsTypeInitialsRequest2 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeInitialsRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldUpdateTemplateFieldsTypeInitialsRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeInitialsRequest2: %v", v)
	}
}

type FieldUpdateTemplateFieldsTextAlignInitials string

const (
	FieldUpdateTemplateFieldsTextAlignInitialsLeft   FieldUpdateTemplateFieldsTextAlignInitials = "left"
	FieldUpdateTemplateFieldsTextAlignInitialsCenter FieldUpdateTemplateFieldsTextAlignInitials = "center"
	FieldUpdateTemplateFieldsTextAlignInitialsRight  FieldUpdateTemplateFieldsTextAlignInitials = "right"
)

func (e FieldUpdateTemplateFieldsTextAlignInitials) ToPointer() *FieldUpdateTemplateFieldsTextAlignInitials {
	return &e
}
func (e *FieldUpdateTemplateFieldsTextAlignInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldsTextAlignInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTextAlignInitials: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMetaInitialsRequest struct {
	Label       *string                                       `json:"label,omitempty"`
	Placeholder *string                                       `json:"placeholder,omitempty"`
	Required    *bool                                         `json:"required,omitempty"`
	ReadOnly    *bool                                         `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsTypeInitialsRequest2 `json:"type"`
	FontSize    *float64                                      `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateTemplateFieldsTextAlignInitials   `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaInitialsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaInitialsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaInitialsRequest) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaInitialsRequest) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaInitialsRequest) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaInitialsRequest) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaInitialsRequest) GetType() FieldUpdateTemplateFieldsTypeInitialsRequest2 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeInitialsRequest2("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaInitialsRequest) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldsFieldMetaInitialsRequest) GetTextAlign() *FieldUpdateTemplateFieldsTextAlignInitials {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldsFieldInitials struct {
	Type      FieldUpdateTemplateFieldsTypeInitialsRequest1      `json:"type"`
	FieldMeta *FieldUpdateTemplateFieldsFieldMetaInitialsRequest `json:"fieldMeta,omitempty"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldInitials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldInitials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldInitials) GetType() FieldUpdateTemplateFieldsTypeInitialsRequest1 {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeInitialsRequest1("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldInitials) GetFieldMeta() *FieldUpdateTemplateFieldsFieldMetaInitialsRequest {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

func (o *FieldUpdateTemplateFieldsFieldInitials) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFieldInitials) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFieldInitials) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFieldInitials) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFieldInitials) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFieldInitials) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsTypeFreeSignature string

const (
	FieldUpdateTemplateFieldsTypeFreeSignatureFreeSignature FieldUpdateTemplateFieldsTypeFreeSignature = "FREE_SIGNATURE"
)

func (e FieldUpdateTemplateFieldsTypeFreeSignature) ToPointer() *FieldUpdateTemplateFieldsTypeFreeSignature {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeFreeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREE_SIGNATURE":
		*e = FieldUpdateTemplateFieldsTypeFreeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeFreeSignature: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldFreeSignature struct {
	Type FieldUpdateTemplateFieldsTypeFreeSignature `json:"type"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldFreeSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldFreeSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldFreeSignature) GetType() FieldUpdateTemplateFieldsTypeFreeSignature {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeFreeSignature("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldFreeSignature) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFieldFreeSignature) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFieldFreeSignature) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFieldFreeSignature) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFieldFreeSignature) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFieldFreeSignature) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsTypeSignature string

const (
	FieldUpdateTemplateFieldsTypeSignatureSignature FieldUpdateTemplateFieldsTypeSignature = "SIGNATURE"
)

func (e FieldUpdateTemplateFieldsTypeSignature) ToPointer() *FieldUpdateTemplateFieldsTypeSignature {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeSignature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		*e = FieldUpdateTemplateFieldsTypeSignature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeSignature: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldSignature struct {
	Type FieldUpdateTemplateFieldsTypeSignature `json:"type"`
	// The ID of the field to update.
	ID float64 `json:"id"`
	// The page number the field will be on.
	PageNumber *float64 `json:"pageNumber,omitempty"`
	// The X coordinate of where the field will be placed.
	PageX *float64 `json:"pageX,omitempty"`
	// The Y coordinate of where the field will be placed.
	PageY *float64 `json:"pageY,omitempty"`
	// The width of the field.
	Width *float64 `json:"width,omitempty"`
	// The height of the field.
	Height *float64 `json:"height,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldSignature) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldSignature) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "id"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldSignature) GetType() FieldUpdateTemplateFieldsTypeSignature {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeSignature("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldSignature) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFieldSignature) GetPageNumber() *float64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *FieldUpdateTemplateFieldsFieldSignature) GetPageX() *float64 {
	if o == nil {
		return nil
	}
	return o.PageX
}

func (o *FieldUpdateTemplateFieldsFieldSignature) GetPageY() *float64 {
	if o == nil {
		return nil
	}
	return o.PageY
}

func (o *FieldUpdateTemplateFieldsFieldSignature) GetWidth() *float64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFieldSignature) GetHeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Height
}

type FieldUpdateTemplateFieldsFieldUnionType string

const (
	FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldSignature     FieldUpdateTemplateFieldsFieldUnionType = "field_updateTemplateFields_field_Signature"
	FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldFreeSignature FieldUpdateTemplateFieldsFieldUnionType = "field_updateTemplateFields_field_FreeSignature"
	FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldInitials      FieldUpdateTemplateFieldsFieldUnionType = "field_updateTemplateFields_field_Initials"
	FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldName          FieldUpdateTemplateFieldsFieldUnionType = "field_updateTemplateFields_field_Name"
	FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldEmail         FieldUpdateTemplateFieldsFieldUnionType = "field_updateTemplateFields_field_Email"
	FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldDate          FieldUpdateTemplateFieldsFieldUnionType = "field_updateTemplateFields_field_Date"
	FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldText          FieldUpdateTemplateFieldsFieldUnionType = "field_updateTemplateFields_field_Text"
	FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldNumber        FieldUpdateTemplateFieldsFieldUnionType = "field_updateTemplateFields_field_Number"
	FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldRadio         FieldUpdateTemplateFieldsFieldUnionType = "field_updateTemplateFields_field_Radio"
	FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldCheckbox      FieldUpdateTemplateFieldsFieldUnionType = "field_updateTemplateFields_field_Checkbox"
	FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldDropdown      FieldUpdateTemplateFieldsFieldUnionType = "field_updateTemplateFields_field_Dropdown"
)

type FieldUpdateTemplateFieldsFieldUnion struct {
	FieldUpdateTemplateFieldsFieldSignature     *FieldUpdateTemplateFieldsFieldSignature     `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldFreeSignature *FieldUpdateTemplateFieldsFieldFreeSignature `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldInitials      *FieldUpdateTemplateFieldsFieldInitials      `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldName          *FieldUpdateTemplateFieldsFieldName          `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldEmail         *FieldUpdateTemplateFieldsFieldEmail         `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldDate          *FieldUpdateTemplateFieldsFieldDate          `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldText          *FieldUpdateTemplateFieldsFieldText          `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldNumber        *FieldUpdateTemplateFieldsFieldNumber        `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldRadio         *FieldUpdateTemplateFieldsFieldRadio         `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldCheckbox      *FieldUpdateTemplateFieldsFieldCheckbox      `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldDropdown      *FieldUpdateTemplateFieldsFieldDropdown      `queryParam:"inline"`

	Type FieldUpdateTemplateFieldsFieldUnionType
}

func CreateFieldUpdateTemplateFieldsFieldUnionFieldUpdateTemplateFieldsFieldSignature(fieldUpdateTemplateFieldsFieldSignature FieldUpdateTemplateFieldsFieldSignature) FieldUpdateTemplateFieldsFieldUnion {
	typ := FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldSignature

	return FieldUpdateTemplateFieldsFieldUnion{
		FieldUpdateTemplateFieldsFieldSignature: &fieldUpdateTemplateFieldsFieldSignature,
		Type:                                    typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldUnionFieldUpdateTemplateFieldsFieldFreeSignature(fieldUpdateTemplateFieldsFieldFreeSignature FieldUpdateTemplateFieldsFieldFreeSignature) FieldUpdateTemplateFieldsFieldUnion {
	typ := FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldFreeSignature

	return FieldUpdateTemplateFieldsFieldUnion{
		FieldUpdateTemplateFieldsFieldFreeSignature: &fieldUpdateTemplateFieldsFieldFreeSignature,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldUnionFieldUpdateTemplateFieldsFieldInitials(fieldUpdateTemplateFieldsFieldInitials FieldUpdateTemplateFieldsFieldInitials) FieldUpdateTemplateFieldsFieldUnion {
	typ := FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldInitials

	return FieldUpdateTemplateFieldsFieldUnion{
		FieldUpdateTemplateFieldsFieldInitials: &fieldUpdateTemplateFieldsFieldInitials,
		Type:                                   typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldUnionFieldUpdateTemplateFieldsFieldName(fieldUpdateTemplateFieldsFieldName FieldUpdateTemplateFieldsFieldName) FieldUpdateTemplateFieldsFieldUnion {
	typ := FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldName

	return FieldUpdateTemplateFieldsFieldUnion{
		FieldUpdateTemplateFieldsFieldName: &fieldUpdateTemplateFieldsFieldName,
		Type:                               typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldUnionFieldUpdateTemplateFieldsFieldEmail(fieldUpdateTemplateFieldsFieldEmail FieldUpdateTemplateFieldsFieldEmail) FieldUpdateTemplateFieldsFieldUnion {
	typ := FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldEmail

	return FieldUpdateTemplateFieldsFieldUnion{
		FieldUpdateTemplateFieldsFieldEmail: &fieldUpdateTemplateFieldsFieldEmail,
		Type:                                typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldUnionFieldUpdateTemplateFieldsFieldDate(fieldUpdateTemplateFieldsFieldDate FieldUpdateTemplateFieldsFieldDate) FieldUpdateTemplateFieldsFieldUnion {
	typ := FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldDate

	return FieldUpdateTemplateFieldsFieldUnion{
		FieldUpdateTemplateFieldsFieldDate: &fieldUpdateTemplateFieldsFieldDate,
		Type:                               typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldUnionFieldUpdateTemplateFieldsFieldText(fieldUpdateTemplateFieldsFieldText FieldUpdateTemplateFieldsFieldText) FieldUpdateTemplateFieldsFieldUnion {
	typ := FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldText

	return FieldUpdateTemplateFieldsFieldUnion{
		FieldUpdateTemplateFieldsFieldText: &fieldUpdateTemplateFieldsFieldText,
		Type:                               typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldUnionFieldUpdateTemplateFieldsFieldNumber(fieldUpdateTemplateFieldsFieldNumber FieldUpdateTemplateFieldsFieldNumber) FieldUpdateTemplateFieldsFieldUnion {
	typ := FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldNumber

	return FieldUpdateTemplateFieldsFieldUnion{
		FieldUpdateTemplateFieldsFieldNumber: &fieldUpdateTemplateFieldsFieldNumber,
		Type:                                 typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldUnionFieldUpdateTemplateFieldsFieldRadio(fieldUpdateTemplateFieldsFieldRadio FieldUpdateTemplateFieldsFieldRadio) FieldUpdateTemplateFieldsFieldUnion {
	typ := FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldRadio

	return FieldUpdateTemplateFieldsFieldUnion{
		FieldUpdateTemplateFieldsFieldRadio: &fieldUpdateTemplateFieldsFieldRadio,
		Type:                                typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldUnionFieldUpdateTemplateFieldsFieldCheckbox(fieldUpdateTemplateFieldsFieldCheckbox FieldUpdateTemplateFieldsFieldCheckbox) FieldUpdateTemplateFieldsFieldUnion {
	typ := FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldCheckbox

	return FieldUpdateTemplateFieldsFieldUnion{
		FieldUpdateTemplateFieldsFieldCheckbox: &fieldUpdateTemplateFieldsFieldCheckbox,
		Type:                                   typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldUnionFieldUpdateTemplateFieldsFieldDropdown(fieldUpdateTemplateFieldsFieldDropdown FieldUpdateTemplateFieldsFieldDropdown) FieldUpdateTemplateFieldsFieldUnion {
	typ := FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldDropdown

	return FieldUpdateTemplateFieldsFieldUnion{
		FieldUpdateTemplateFieldsFieldDropdown: &fieldUpdateTemplateFieldsFieldDropdown,
		Type:                                   typ,
	}
}

func (u *FieldUpdateTemplateFieldsFieldUnion) UnmarshalJSON(data []byte) error {

	var fieldUpdateTemplateFieldsFieldSignature FieldUpdateTemplateFieldsFieldSignature = FieldUpdateTemplateFieldsFieldSignature{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldSignature, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldSignature = &fieldUpdateTemplateFieldsFieldSignature
		u.Type = FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldSignature
		return nil
	}

	var fieldUpdateTemplateFieldsFieldFreeSignature FieldUpdateTemplateFieldsFieldFreeSignature = FieldUpdateTemplateFieldsFieldFreeSignature{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldFreeSignature, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldFreeSignature = &fieldUpdateTemplateFieldsFieldFreeSignature
		u.Type = FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldFreeSignature
		return nil
	}

	var fieldUpdateTemplateFieldsFieldInitials FieldUpdateTemplateFieldsFieldInitials = FieldUpdateTemplateFieldsFieldInitials{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldInitials, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldInitials = &fieldUpdateTemplateFieldsFieldInitials
		u.Type = FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldInitials
		return nil
	}

	var fieldUpdateTemplateFieldsFieldName FieldUpdateTemplateFieldsFieldName = FieldUpdateTemplateFieldsFieldName{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldName, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldName = &fieldUpdateTemplateFieldsFieldName
		u.Type = FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldName
		return nil
	}

	var fieldUpdateTemplateFieldsFieldEmail FieldUpdateTemplateFieldsFieldEmail = FieldUpdateTemplateFieldsFieldEmail{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldEmail, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldEmail = &fieldUpdateTemplateFieldsFieldEmail
		u.Type = FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldEmail
		return nil
	}

	var fieldUpdateTemplateFieldsFieldDate FieldUpdateTemplateFieldsFieldDate = FieldUpdateTemplateFieldsFieldDate{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldDate, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldDate = &fieldUpdateTemplateFieldsFieldDate
		u.Type = FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldDate
		return nil
	}

	var fieldUpdateTemplateFieldsFieldText FieldUpdateTemplateFieldsFieldText = FieldUpdateTemplateFieldsFieldText{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldText, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldText = &fieldUpdateTemplateFieldsFieldText
		u.Type = FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldText
		return nil
	}

	var fieldUpdateTemplateFieldsFieldNumber FieldUpdateTemplateFieldsFieldNumber = FieldUpdateTemplateFieldsFieldNumber{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldNumber, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldNumber = &fieldUpdateTemplateFieldsFieldNumber
		u.Type = FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldNumber
		return nil
	}

	var fieldUpdateTemplateFieldsFieldRadio FieldUpdateTemplateFieldsFieldRadio = FieldUpdateTemplateFieldsFieldRadio{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldRadio, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldRadio = &fieldUpdateTemplateFieldsFieldRadio
		u.Type = FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldRadio
		return nil
	}

	var fieldUpdateTemplateFieldsFieldCheckbox FieldUpdateTemplateFieldsFieldCheckbox = FieldUpdateTemplateFieldsFieldCheckbox{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldCheckbox, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldCheckbox = &fieldUpdateTemplateFieldsFieldCheckbox
		u.Type = FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldCheckbox
		return nil
	}

	var fieldUpdateTemplateFieldsFieldDropdown FieldUpdateTemplateFieldsFieldDropdown = FieldUpdateTemplateFieldsFieldDropdown{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldDropdown, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldDropdown = &fieldUpdateTemplateFieldsFieldDropdown
		u.Type = FieldUpdateTemplateFieldsFieldUnionTypeFieldUpdateTemplateFieldsFieldDropdown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldUpdateTemplateFieldsFieldUnion", string(data))
}

func (u FieldUpdateTemplateFieldsFieldUnion) MarshalJSON() ([]byte, error) {
	if u.FieldUpdateTemplateFieldsFieldSignature != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldSignature, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldFreeSignature != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldFreeSignature, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldInitials != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldInitials, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldName != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldName, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldEmail != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldEmail, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldDate != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldDate, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldText != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldText, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldNumber != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldNumber, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldRadio != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldRadio, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldCheckbox != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldCheckbox, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldDropdown != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldDropdown, "", true)
	}

	return nil, errors.New("could not marshal union type FieldUpdateTemplateFieldsFieldUnion: all fields are null")
}

type FieldUpdateTemplateFieldsRequest struct {
	TemplateID float64                               `json:"templateId"`
	Fields     []FieldUpdateTemplateFieldsFieldUnion `json:"fields"`
}

func (o *FieldUpdateTemplateFieldsRequest) GetTemplateID() float64 {
	if o == nil {
		return 0.0
	}
	return o.TemplateID
}

func (o *FieldUpdateTemplateFieldsRequest) GetFields() []FieldUpdateTemplateFieldsFieldUnion {
	if o == nil {
		return []FieldUpdateTemplateFieldsFieldUnion{}
	}
	return o.Fields
}

type FieldUpdateTemplateFieldsTypeResponse string

const (
	FieldUpdateTemplateFieldsTypeResponseSignature     FieldUpdateTemplateFieldsTypeResponse = "SIGNATURE"
	FieldUpdateTemplateFieldsTypeResponseFreeSignature FieldUpdateTemplateFieldsTypeResponse = "FREE_SIGNATURE"
	FieldUpdateTemplateFieldsTypeResponseInitials      FieldUpdateTemplateFieldsTypeResponse = "INITIALS"
	FieldUpdateTemplateFieldsTypeResponseName          FieldUpdateTemplateFieldsTypeResponse = "NAME"
	FieldUpdateTemplateFieldsTypeResponseEmail         FieldUpdateTemplateFieldsTypeResponse = "EMAIL"
	FieldUpdateTemplateFieldsTypeResponseDate          FieldUpdateTemplateFieldsTypeResponse = "DATE"
	FieldUpdateTemplateFieldsTypeResponseText          FieldUpdateTemplateFieldsTypeResponse = "TEXT"
	FieldUpdateTemplateFieldsTypeResponseNumber        FieldUpdateTemplateFieldsTypeResponse = "NUMBER"
	FieldUpdateTemplateFieldsTypeResponseRadio         FieldUpdateTemplateFieldsTypeResponse = "RADIO"
	FieldUpdateTemplateFieldsTypeResponseCheckbox      FieldUpdateTemplateFieldsTypeResponse = "CHECKBOX"
	FieldUpdateTemplateFieldsTypeResponseDropdown      FieldUpdateTemplateFieldsTypeResponse = "DROPDOWN"
)

func (e FieldUpdateTemplateFieldsTypeResponse) ToPointer() *FieldUpdateTemplateFieldsTypeResponse {
	return &e
}
func (e *FieldUpdateTemplateFieldsTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = FieldUpdateTemplateFieldsTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTypeResponse: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMetaTypeDropdown string

const (
	FieldUpdateTemplateFieldsFieldMetaTypeDropdownDropdown FieldUpdateTemplateFieldsFieldMetaTypeDropdown = "dropdown"
)

func (e FieldUpdateTemplateFieldsFieldMetaTypeDropdown) ToPointer() *FieldUpdateTemplateFieldsFieldMetaTypeDropdown {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaTypeDropdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = FieldUpdateTemplateFieldsFieldMetaTypeDropdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaTypeDropdown: %v", v)
	}
}

type FieldUpdateTemplateFieldsValueResponse3 struct {
	Value string `json:"value"`
}

func (f FieldUpdateTemplateFieldsValueResponse3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsValueResponse3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsValueResponse3) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldsFieldMetaDropdownResponse struct {
	Label        *string                                        `json:"label,omitempty"`
	Placeholder  *string                                        `json:"placeholder,omitempty"`
	Required     *bool                                          `json:"required,omitempty"`
	ReadOnly     *bool                                          `json:"readOnly,omitempty"`
	Type         FieldUpdateTemplateFieldsFieldMetaTypeDropdown `json:"type"`
	Values       []FieldUpdateTemplateFieldsValueResponse3      `json:"values,omitempty"`
	DefaultValue *string                                        `json:"defaultValue,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaDropdownResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaDropdownResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaDropdownResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaDropdownResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaDropdownResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaDropdownResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaDropdownResponse) GetType() FieldUpdateTemplateFieldsFieldMetaTypeDropdown {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaTypeDropdown("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaDropdownResponse) GetValues() []FieldUpdateTemplateFieldsValueResponse3 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateTemplateFieldsFieldMetaDropdownResponse) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type FieldUpdateTemplateFieldsFieldMetaTypeCheckbox string

const (
	FieldUpdateTemplateFieldsFieldMetaTypeCheckboxCheckbox FieldUpdateTemplateFieldsFieldMetaTypeCheckbox = "checkbox"
)

func (e FieldUpdateTemplateFieldsFieldMetaTypeCheckbox) ToPointer() *FieldUpdateTemplateFieldsFieldMetaTypeCheckbox {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaTypeCheckbox) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = FieldUpdateTemplateFieldsFieldMetaTypeCheckbox(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaTypeCheckbox: %v", v)
	}
}

type FieldUpdateTemplateFieldsValueResponse2 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldUpdateTemplateFieldsValueResponse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsValueResponse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsValueResponse2) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsValueResponse2) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateTemplateFieldsValueResponse2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldsFieldMetaCheckboxResponse struct {
	Label            *string                                        `json:"label,omitempty"`
	Placeholder      *string                                        `json:"placeholder,omitempty"`
	Required         *bool                                          `json:"required,omitempty"`
	ReadOnly         *bool                                          `json:"readOnly,omitempty"`
	Type             FieldUpdateTemplateFieldsFieldMetaTypeCheckbox `json:"type"`
	Values           []FieldUpdateTemplateFieldsValueResponse2      `json:"values,omitempty"`
	ValidationRule   *string                                        `json:"validationRule,omitempty"`
	ValidationLength *float64                                       `json:"validationLength,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaCheckboxResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaCheckboxResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaCheckboxResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaCheckboxResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaCheckboxResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaCheckboxResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaCheckboxResponse) GetType() FieldUpdateTemplateFieldsFieldMetaTypeCheckbox {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaTypeCheckbox("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaCheckboxResponse) GetValues() []FieldUpdateTemplateFieldsValueResponse2 {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *FieldUpdateTemplateFieldsFieldMetaCheckboxResponse) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *FieldUpdateTemplateFieldsFieldMetaCheckboxResponse) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type FieldUpdateTemplateFieldsFieldMetaTypeRadio string

const (
	FieldUpdateTemplateFieldsFieldMetaTypeRadioRadio FieldUpdateTemplateFieldsFieldMetaTypeRadio = "radio"
)

func (e FieldUpdateTemplateFieldsFieldMetaTypeRadio) ToPointer() *FieldUpdateTemplateFieldsFieldMetaTypeRadio {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaTypeRadio) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = FieldUpdateTemplateFieldsFieldMetaTypeRadio(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaTypeRadio: %v", v)
	}
}

type FieldUpdateTemplateFieldsValueResponse1 struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (f FieldUpdateTemplateFieldsValueResponse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsValueResponse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"id", "checked", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsValueResponse1) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsValueResponse1) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *FieldUpdateTemplateFieldsValueResponse1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type FieldUpdateTemplateFieldsFieldMetaRadioResponse struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsFieldMetaTypeRadio `json:"type"`
	Values      []FieldUpdateTemplateFieldsValueResponse1   `json:"values,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaRadioResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaRadioResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaRadioResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaRadioResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaRadioResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaRadioResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaRadioResponse) GetType() FieldUpdateTemplateFieldsFieldMetaTypeRadio {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaTypeRadio("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaRadioResponse) GetValues() []FieldUpdateTemplateFieldsValueResponse1 {
	if o == nil {
		return nil
	}
	return o.Values
}

type FieldUpdateTemplateFieldsFieldMetaTypeNumber string

const (
	FieldUpdateTemplateFieldsFieldMetaTypeNumberNumber FieldUpdateTemplateFieldsFieldMetaTypeNumber = "number"
)

func (e FieldUpdateTemplateFieldsFieldMetaTypeNumber) ToPointer() *FieldUpdateTemplateFieldsFieldMetaTypeNumber {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaTypeNumber) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = FieldUpdateTemplateFieldsFieldMetaTypeNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaTypeNumber: %v", v)
	}
}

type FieldUpdateTemplateFieldsTextAlignResponse6 string

const (
	FieldUpdateTemplateFieldsTextAlignResponse6Left   FieldUpdateTemplateFieldsTextAlignResponse6 = "left"
	FieldUpdateTemplateFieldsTextAlignResponse6Center FieldUpdateTemplateFieldsTextAlignResponse6 = "center"
	FieldUpdateTemplateFieldsTextAlignResponse6Right  FieldUpdateTemplateFieldsTextAlignResponse6 = "right"
)

func (e FieldUpdateTemplateFieldsTextAlignResponse6) ToPointer() *FieldUpdateTemplateFieldsTextAlignResponse6 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTextAlignResponse6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldsTextAlignResponse6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTextAlignResponse6: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMetaNumberResponse struct {
	Label        *string                                      `json:"label,omitempty"`
	Placeholder  *string                                      `json:"placeholder,omitempty"`
	Required     *bool                                        `json:"required,omitempty"`
	ReadOnly     *bool                                        `json:"readOnly,omitempty"`
	Type         FieldUpdateTemplateFieldsFieldMetaTypeNumber `json:"type"`
	NumberFormat *string                                      `json:"numberFormat,omitempty"`
	Value        *string                                      `json:"value,omitempty"`
	MinValue     *float64                                     `json:"minValue,omitempty"`
	MaxValue     *float64                                     `json:"maxValue,omitempty"`
	FontSize     *float64                                     `json:"fontSize,omitempty"`
	TextAlign    *FieldUpdateTemplateFieldsTextAlignResponse6 `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaNumberResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaNumberResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberResponse) GetType() FieldUpdateTemplateFieldsFieldMetaTypeNumber {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaTypeNumber("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberResponse) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberResponse) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberResponse) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberResponse) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldsFieldMetaNumberResponse) GetTextAlign() *FieldUpdateTemplateFieldsTextAlignResponse6 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldsFieldMetaTypeText string

const (
	FieldUpdateTemplateFieldsFieldMetaTypeTextText FieldUpdateTemplateFieldsFieldMetaTypeText = "text"
)

func (e FieldUpdateTemplateFieldsFieldMetaTypeText) ToPointer() *FieldUpdateTemplateFieldsFieldMetaTypeText {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaTypeText) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = FieldUpdateTemplateFieldsFieldMetaTypeText(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaTypeText: %v", v)
	}
}

type FieldUpdateTemplateFieldsTextAlignResponse5 string

const (
	FieldUpdateTemplateFieldsTextAlignResponse5Left   FieldUpdateTemplateFieldsTextAlignResponse5 = "left"
	FieldUpdateTemplateFieldsTextAlignResponse5Center FieldUpdateTemplateFieldsTextAlignResponse5 = "center"
	FieldUpdateTemplateFieldsTextAlignResponse5Right  FieldUpdateTemplateFieldsTextAlignResponse5 = "right"
)

func (e FieldUpdateTemplateFieldsTextAlignResponse5) ToPointer() *FieldUpdateTemplateFieldsTextAlignResponse5 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTextAlignResponse5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldsTextAlignResponse5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTextAlignResponse5: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMetaTextResponse struct {
	Label          *string                                      `json:"label,omitempty"`
	Placeholder    *string                                      `json:"placeholder,omitempty"`
	Required       *bool                                        `json:"required,omitempty"`
	ReadOnly       *bool                                        `json:"readOnly,omitempty"`
	Type           FieldUpdateTemplateFieldsFieldMetaTypeText   `json:"type"`
	Text           *string                                      `json:"text,omitempty"`
	CharacterLimit *float64                                     `json:"characterLimit,omitempty"`
	FontSize       *float64                                     `json:"fontSize,omitempty"`
	TextAlign      *FieldUpdateTemplateFieldsTextAlignResponse5 `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaTextResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaTextResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextResponse) GetType() FieldUpdateTemplateFieldsFieldMetaTypeText {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaTypeText("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextResponse) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextResponse) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldsFieldMetaTextResponse) GetTextAlign() *FieldUpdateTemplateFieldsTextAlignResponse5 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldsFieldMetaTypeDate string

const (
	FieldUpdateTemplateFieldsFieldMetaTypeDateDate FieldUpdateTemplateFieldsFieldMetaTypeDate = "date"
)

func (e FieldUpdateTemplateFieldsFieldMetaTypeDate) ToPointer() *FieldUpdateTemplateFieldsFieldMetaTypeDate {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaTypeDate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = FieldUpdateTemplateFieldsFieldMetaTypeDate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaTypeDate: %v", v)
	}
}

type FieldUpdateTemplateFieldsTextAlignResponse4 string

const (
	FieldUpdateTemplateFieldsTextAlignResponse4Left   FieldUpdateTemplateFieldsTextAlignResponse4 = "left"
	FieldUpdateTemplateFieldsTextAlignResponse4Center FieldUpdateTemplateFieldsTextAlignResponse4 = "center"
	FieldUpdateTemplateFieldsTextAlignResponse4Right  FieldUpdateTemplateFieldsTextAlignResponse4 = "right"
)

func (e FieldUpdateTemplateFieldsTextAlignResponse4) ToPointer() *FieldUpdateTemplateFieldsTextAlignResponse4 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTextAlignResponse4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldsTextAlignResponse4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTextAlignResponse4: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMetaDateResponse struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsFieldMetaTypeDate   `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateTemplateFieldsTextAlignResponse4 `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaDateResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaDateResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaDateResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaDateResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaDateResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaDateResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaDateResponse) GetType() FieldUpdateTemplateFieldsFieldMetaTypeDate {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaTypeDate("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaDateResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldsFieldMetaDateResponse) GetTextAlign() *FieldUpdateTemplateFieldsTextAlignResponse4 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldsFieldMetaTypeEmail string

const (
	FieldUpdateTemplateFieldsFieldMetaTypeEmailEmail FieldUpdateTemplateFieldsFieldMetaTypeEmail = "email"
)

func (e FieldUpdateTemplateFieldsFieldMetaTypeEmail) ToPointer() *FieldUpdateTemplateFieldsFieldMetaTypeEmail {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaTypeEmail) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = FieldUpdateTemplateFieldsFieldMetaTypeEmail(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaTypeEmail: %v", v)
	}
}

type FieldUpdateTemplateFieldsTextAlignResponse3 string

const (
	FieldUpdateTemplateFieldsTextAlignResponse3Left   FieldUpdateTemplateFieldsTextAlignResponse3 = "left"
	FieldUpdateTemplateFieldsTextAlignResponse3Center FieldUpdateTemplateFieldsTextAlignResponse3 = "center"
	FieldUpdateTemplateFieldsTextAlignResponse3Right  FieldUpdateTemplateFieldsTextAlignResponse3 = "right"
)

func (e FieldUpdateTemplateFieldsTextAlignResponse3) ToPointer() *FieldUpdateTemplateFieldsTextAlignResponse3 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTextAlignResponse3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldsTextAlignResponse3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTextAlignResponse3: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMetaEmailResponse struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsFieldMetaTypeEmail  `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateTemplateFieldsTextAlignResponse3 `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaEmailResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaEmailResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaEmailResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaEmailResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaEmailResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaEmailResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaEmailResponse) GetType() FieldUpdateTemplateFieldsFieldMetaTypeEmail {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaTypeEmail("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaEmailResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldsFieldMetaEmailResponse) GetTextAlign() *FieldUpdateTemplateFieldsTextAlignResponse3 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldsFieldMetaTypeName string

const (
	FieldUpdateTemplateFieldsFieldMetaTypeNameName FieldUpdateTemplateFieldsFieldMetaTypeName = "name"
)

func (e FieldUpdateTemplateFieldsFieldMetaTypeName) ToPointer() *FieldUpdateTemplateFieldsFieldMetaTypeName {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaTypeName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = FieldUpdateTemplateFieldsFieldMetaTypeName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaTypeName: %v", v)
	}
}

type FieldUpdateTemplateFieldsTextAlignResponse2 string

const (
	FieldUpdateTemplateFieldsTextAlignResponse2Left   FieldUpdateTemplateFieldsTextAlignResponse2 = "left"
	FieldUpdateTemplateFieldsTextAlignResponse2Center FieldUpdateTemplateFieldsTextAlignResponse2 = "center"
	FieldUpdateTemplateFieldsTextAlignResponse2Right  FieldUpdateTemplateFieldsTextAlignResponse2 = "right"
)

func (e FieldUpdateTemplateFieldsTextAlignResponse2) ToPointer() *FieldUpdateTemplateFieldsTextAlignResponse2 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTextAlignResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldsTextAlignResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTextAlignResponse2: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMetaNameResponse struct {
	Label       *string                                      `json:"label,omitempty"`
	Placeholder *string                                      `json:"placeholder,omitempty"`
	Required    *bool                                        `json:"required,omitempty"`
	ReadOnly    *bool                                        `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsFieldMetaTypeName   `json:"type"`
	FontSize    *float64                                     `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateTemplateFieldsTextAlignResponse2 `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaNameResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaNameResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaNameResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaNameResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaNameResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaNameResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaNameResponse) GetType() FieldUpdateTemplateFieldsFieldMetaTypeName {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaTypeName("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaNameResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldsFieldMetaNameResponse) GetTextAlign() *FieldUpdateTemplateFieldsTextAlignResponse2 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldsFieldMetaTypeInitials string

const (
	FieldUpdateTemplateFieldsFieldMetaTypeInitialsInitials FieldUpdateTemplateFieldsFieldMetaTypeInitials = "initials"
)

func (e FieldUpdateTemplateFieldsFieldMetaTypeInitials) ToPointer() *FieldUpdateTemplateFieldsFieldMetaTypeInitials {
	return &e
}
func (e *FieldUpdateTemplateFieldsFieldMetaTypeInitials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = FieldUpdateTemplateFieldsFieldMetaTypeInitials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsFieldMetaTypeInitials: %v", v)
	}
}

type FieldUpdateTemplateFieldsTextAlignResponse1 string

const (
	FieldUpdateTemplateFieldsTextAlignResponse1Left   FieldUpdateTemplateFieldsTextAlignResponse1 = "left"
	FieldUpdateTemplateFieldsTextAlignResponse1Center FieldUpdateTemplateFieldsTextAlignResponse1 = "center"
	FieldUpdateTemplateFieldsTextAlignResponse1Right  FieldUpdateTemplateFieldsTextAlignResponse1 = "right"
)

func (e FieldUpdateTemplateFieldsTextAlignResponse1) ToPointer() *FieldUpdateTemplateFieldsTextAlignResponse1 {
	return &e
}
func (e *FieldUpdateTemplateFieldsTextAlignResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = FieldUpdateTemplateFieldsTextAlignResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldUpdateTemplateFieldsTextAlignResponse1: %v", v)
	}
}

type FieldUpdateTemplateFieldsFieldMetaInitialsResponse struct {
	Label       *string                                        `json:"label,omitempty"`
	Placeholder *string                                        `json:"placeholder,omitempty"`
	Required    *bool                                          `json:"required,omitempty"`
	ReadOnly    *bool                                          `json:"readOnly,omitempty"`
	Type        FieldUpdateTemplateFieldsFieldMetaTypeInitials `json:"type"`
	FontSize    *float64                                       `json:"fontSize,omitempty"`
	TextAlign   *FieldUpdateTemplateFieldsTextAlignResponse1   `json:"textAlign,omitempty"`
}

func (f FieldUpdateTemplateFieldsFieldMetaInitialsResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FieldUpdateTemplateFieldsFieldMetaInitialsResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *FieldUpdateTemplateFieldsFieldMetaInitialsResponse) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FieldUpdateTemplateFieldsFieldMetaInitialsResponse) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FieldUpdateTemplateFieldsFieldMetaInitialsResponse) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FieldUpdateTemplateFieldsFieldMetaInitialsResponse) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *FieldUpdateTemplateFieldsFieldMetaInitialsResponse) GetType() FieldUpdateTemplateFieldsFieldMetaTypeInitials {
	if o == nil {
		return FieldUpdateTemplateFieldsFieldMetaTypeInitials("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldMetaInitialsResponse) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

func (o *FieldUpdateTemplateFieldsFieldMetaInitialsResponse) GetTextAlign() *FieldUpdateTemplateFieldsTextAlignResponse1 {
	if o == nil {
		return nil
	}
	return o.TextAlign
}

type FieldUpdateTemplateFieldsFieldMetaUnionType string

const (
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaInitialsResponse FieldUpdateTemplateFieldsFieldMetaUnionType = "field_updateTemplateFields_fieldMeta_Initials_response"
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaNameResponse     FieldUpdateTemplateFieldsFieldMetaUnionType = "field_updateTemplateFields_fieldMeta_Name_response"
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaEmailResponse    FieldUpdateTemplateFieldsFieldMetaUnionType = "field_updateTemplateFields_fieldMeta_Email_response"
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaDateResponse     FieldUpdateTemplateFieldsFieldMetaUnionType = "field_updateTemplateFields_fieldMeta_Date_response"
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaTextResponse     FieldUpdateTemplateFieldsFieldMetaUnionType = "field_updateTemplateFields_fieldMeta_Text_response"
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaNumberResponse   FieldUpdateTemplateFieldsFieldMetaUnionType = "field_updateTemplateFields_fieldMeta_Number_response"
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaRadioResponse    FieldUpdateTemplateFieldsFieldMetaUnionType = "field_updateTemplateFields_fieldMeta_Radio_response"
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaCheckboxResponse FieldUpdateTemplateFieldsFieldMetaUnionType = "field_updateTemplateFields_fieldMeta_Checkbox_response"
	FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaDropdownResponse FieldUpdateTemplateFieldsFieldMetaUnionType = "field_updateTemplateFields_fieldMeta_Dropdown_response"
)

type FieldUpdateTemplateFieldsFieldMetaUnion struct {
	FieldUpdateTemplateFieldsFieldMetaInitialsResponse *FieldUpdateTemplateFieldsFieldMetaInitialsResponse `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldMetaNameResponse     *FieldUpdateTemplateFieldsFieldMetaNameResponse     `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldMetaEmailResponse    *FieldUpdateTemplateFieldsFieldMetaEmailResponse    `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldMetaDateResponse     *FieldUpdateTemplateFieldsFieldMetaDateResponse     `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldMetaTextResponse     *FieldUpdateTemplateFieldsFieldMetaTextResponse     `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldMetaNumberResponse   *FieldUpdateTemplateFieldsFieldMetaNumberResponse   `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldMetaRadioResponse    *FieldUpdateTemplateFieldsFieldMetaRadioResponse    `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldMetaCheckboxResponse *FieldUpdateTemplateFieldsFieldMetaCheckboxResponse `queryParam:"inline"`
	FieldUpdateTemplateFieldsFieldMetaDropdownResponse *FieldUpdateTemplateFieldsFieldMetaDropdownResponse `queryParam:"inline"`

	Type FieldUpdateTemplateFieldsFieldMetaUnionType
}

func CreateFieldUpdateTemplateFieldsFieldMetaUnionFieldUpdateTemplateFieldsFieldMetaInitialsResponse(fieldUpdateTemplateFieldsFieldMetaInitialsResponse FieldUpdateTemplateFieldsFieldMetaInitialsResponse) FieldUpdateTemplateFieldsFieldMetaUnion {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaInitialsResponse

	return FieldUpdateTemplateFieldsFieldMetaUnion{
		FieldUpdateTemplateFieldsFieldMetaInitialsResponse: &fieldUpdateTemplateFieldsFieldMetaInitialsResponse,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldMetaUnionFieldUpdateTemplateFieldsFieldMetaNameResponse(fieldUpdateTemplateFieldsFieldMetaNameResponse FieldUpdateTemplateFieldsFieldMetaNameResponse) FieldUpdateTemplateFieldsFieldMetaUnion {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaNameResponse

	return FieldUpdateTemplateFieldsFieldMetaUnion{
		FieldUpdateTemplateFieldsFieldMetaNameResponse: &fieldUpdateTemplateFieldsFieldMetaNameResponse,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldMetaUnionFieldUpdateTemplateFieldsFieldMetaEmailResponse(fieldUpdateTemplateFieldsFieldMetaEmailResponse FieldUpdateTemplateFieldsFieldMetaEmailResponse) FieldUpdateTemplateFieldsFieldMetaUnion {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaEmailResponse

	return FieldUpdateTemplateFieldsFieldMetaUnion{
		FieldUpdateTemplateFieldsFieldMetaEmailResponse: &fieldUpdateTemplateFieldsFieldMetaEmailResponse,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldMetaUnionFieldUpdateTemplateFieldsFieldMetaDateResponse(fieldUpdateTemplateFieldsFieldMetaDateResponse FieldUpdateTemplateFieldsFieldMetaDateResponse) FieldUpdateTemplateFieldsFieldMetaUnion {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaDateResponse

	return FieldUpdateTemplateFieldsFieldMetaUnion{
		FieldUpdateTemplateFieldsFieldMetaDateResponse: &fieldUpdateTemplateFieldsFieldMetaDateResponse,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldMetaUnionFieldUpdateTemplateFieldsFieldMetaTextResponse(fieldUpdateTemplateFieldsFieldMetaTextResponse FieldUpdateTemplateFieldsFieldMetaTextResponse) FieldUpdateTemplateFieldsFieldMetaUnion {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaTextResponse

	return FieldUpdateTemplateFieldsFieldMetaUnion{
		FieldUpdateTemplateFieldsFieldMetaTextResponse: &fieldUpdateTemplateFieldsFieldMetaTextResponse,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldMetaUnionFieldUpdateTemplateFieldsFieldMetaNumberResponse(fieldUpdateTemplateFieldsFieldMetaNumberResponse FieldUpdateTemplateFieldsFieldMetaNumberResponse) FieldUpdateTemplateFieldsFieldMetaUnion {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaNumberResponse

	return FieldUpdateTemplateFieldsFieldMetaUnion{
		FieldUpdateTemplateFieldsFieldMetaNumberResponse: &fieldUpdateTemplateFieldsFieldMetaNumberResponse,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldMetaUnionFieldUpdateTemplateFieldsFieldMetaRadioResponse(fieldUpdateTemplateFieldsFieldMetaRadioResponse FieldUpdateTemplateFieldsFieldMetaRadioResponse) FieldUpdateTemplateFieldsFieldMetaUnion {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaRadioResponse

	return FieldUpdateTemplateFieldsFieldMetaUnion{
		FieldUpdateTemplateFieldsFieldMetaRadioResponse: &fieldUpdateTemplateFieldsFieldMetaRadioResponse,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldMetaUnionFieldUpdateTemplateFieldsFieldMetaCheckboxResponse(fieldUpdateTemplateFieldsFieldMetaCheckboxResponse FieldUpdateTemplateFieldsFieldMetaCheckboxResponse) FieldUpdateTemplateFieldsFieldMetaUnion {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaCheckboxResponse

	return FieldUpdateTemplateFieldsFieldMetaUnion{
		FieldUpdateTemplateFieldsFieldMetaCheckboxResponse: &fieldUpdateTemplateFieldsFieldMetaCheckboxResponse,
		Type: typ,
	}
}

func CreateFieldUpdateTemplateFieldsFieldMetaUnionFieldUpdateTemplateFieldsFieldMetaDropdownResponse(fieldUpdateTemplateFieldsFieldMetaDropdownResponse FieldUpdateTemplateFieldsFieldMetaDropdownResponse) FieldUpdateTemplateFieldsFieldMetaUnion {
	typ := FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaDropdownResponse

	return FieldUpdateTemplateFieldsFieldMetaUnion{
		FieldUpdateTemplateFieldsFieldMetaDropdownResponse: &fieldUpdateTemplateFieldsFieldMetaDropdownResponse,
		Type: typ,
	}
}

func (u *FieldUpdateTemplateFieldsFieldMetaUnion) UnmarshalJSON(data []byte) error {

	var fieldUpdateTemplateFieldsFieldMetaInitialsResponse FieldUpdateTemplateFieldsFieldMetaInitialsResponse = FieldUpdateTemplateFieldsFieldMetaInitialsResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMetaInitialsResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldMetaInitialsResponse = &fieldUpdateTemplateFieldsFieldMetaInitialsResponse
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaInitialsResponse
		return nil
	}

	var fieldUpdateTemplateFieldsFieldMetaNameResponse FieldUpdateTemplateFieldsFieldMetaNameResponse = FieldUpdateTemplateFieldsFieldMetaNameResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMetaNameResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldMetaNameResponse = &fieldUpdateTemplateFieldsFieldMetaNameResponse
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaNameResponse
		return nil
	}

	var fieldUpdateTemplateFieldsFieldMetaEmailResponse FieldUpdateTemplateFieldsFieldMetaEmailResponse = FieldUpdateTemplateFieldsFieldMetaEmailResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMetaEmailResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldMetaEmailResponse = &fieldUpdateTemplateFieldsFieldMetaEmailResponse
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaEmailResponse
		return nil
	}

	var fieldUpdateTemplateFieldsFieldMetaDateResponse FieldUpdateTemplateFieldsFieldMetaDateResponse = FieldUpdateTemplateFieldsFieldMetaDateResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMetaDateResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldMetaDateResponse = &fieldUpdateTemplateFieldsFieldMetaDateResponse
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaDateResponse
		return nil
	}

	var fieldUpdateTemplateFieldsFieldMetaTextResponse FieldUpdateTemplateFieldsFieldMetaTextResponse = FieldUpdateTemplateFieldsFieldMetaTextResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMetaTextResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldMetaTextResponse = &fieldUpdateTemplateFieldsFieldMetaTextResponse
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaTextResponse
		return nil
	}

	var fieldUpdateTemplateFieldsFieldMetaNumberResponse FieldUpdateTemplateFieldsFieldMetaNumberResponse = FieldUpdateTemplateFieldsFieldMetaNumberResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMetaNumberResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldMetaNumberResponse = &fieldUpdateTemplateFieldsFieldMetaNumberResponse
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaNumberResponse
		return nil
	}

	var fieldUpdateTemplateFieldsFieldMetaRadioResponse FieldUpdateTemplateFieldsFieldMetaRadioResponse = FieldUpdateTemplateFieldsFieldMetaRadioResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMetaRadioResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldMetaRadioResponse = &fieldUpdateTemplateFieldsFieldMetaRadioResponse
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaRadioResponse
		return nil
	}

	var fieldUpdateTemplateFieldsFieldMetaCheckboxResponse FieldUpdateTemplateFieldsFieldMetaCheckboxResponse = FieldUpdateTemplateFieldsFieldMetaCheckboxResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMetaCheckboxResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldMetaCheckboxResponse = &fieldUpdateTemplateFieldsFieldMetaCheckboxResponse
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaCheckboxResponse
		return nil
	}

	var fieldUpdateTemplateFieldsFieldMetaDropdownResponse FieldUpdateTemplateFieldsFieldMetaDropdownResponse = FieldUpdateTemplateFieldsFieldMetaDropdownResponse{}
	if err := utils.UnmarshalJSON(data, &fieldUpdateTemplateFieldsFieldMetaDropdownResponse, "", true, nil); err == nil {
		u.FieldUpdateTemplateFieldsFieldMetaDropdownResponse = &fieldUpdateTemplateFieldsFieldMetaDropdownResponse
		u.Type = FieldUpdateTemplateFieldsFieldMetaUnionTypeFieldUpdateTemplateFieldsFieldMetaDropdownResponse
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldUpdateTemplateFieldsFieldMetaUnion", string(data))
}

func (u FieldUpdateTemplateFieldsFieldMetaUnion) MarshalJSON() ([]byte, error) {
	if u.FieldUpdateTemplateFieldsFieldMetaInitialsResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMetaInitialsResponse, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldMetaNameResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMetaNameResponse, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldMetaEmailResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMetaEmailResponse, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldMetaDateResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMetaDateResponse, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldMetaTextResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMetaTextResponse, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldMetaNumberResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMetaNumberResponse, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldMetaRadioResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMetaRadioResponse, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldMetaCheckboxResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMetaCheckboxResponse, "", true)
	}

	if u.FieldUpdateTemplateFieldsFieldMetaDropdownResponse != nil {
		return utils.MarshalJSON(u.FieldUpdateTemplateFieldsFieldMetaDropdownResponse, "", true)
	}

	return nil, errors.New("could not marshal union type FieldUpdateTemplateFieldsFieldMetaUnion: all fields are null")
}

type FieldUpdateTemplateFieldsFieldResponse struct {
	Type        FieldUpdateTemplateFieldsTypeResponse `json:"type"`
	ID          float64                               `json:"id"`
	SecondaryID string                                `json:"secondaryId"`
	DocumentID  *float64                              `json:"documentId"`
	TemplateID  *float64                              `json:"templateId"`
	RecipientID float64                               `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                                  `json:"page"`
	PositionX  any                                      `json:"positionX,omitempty"`
	PositionY  any                                      `json:"positionY,omitempty"`
	Width      any                                      `json:"width,omitempty"`
	Height     any                                      `json:"height,omitempty"`
	CustomText string                                   `json:"customText"`
	Inserted   bool                                     `json:"inserted"`
	FieldMeta  *FieldUpdateTemplateFieldsFieldMetaUnion `json:"fieldMeta"`
}

func (o *FieldUpdateTemplateFieldsFieldResponse) GetType() FieldUpdateTemplateFieldsTypeResponse {
	if o == nil {
		return FieldUpdateTemplateFieldsTypeResponse("")
	}
	return o.Type
}

func (o *FieldUpdateTemplateFieldsFieldResponse) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *FieldUpdateTemplateFieldsFieldResponse) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *FieldUpdateTemplateFieldsFieldResponse) GetDocumentID() *float64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *FieldUpdateTemplateFieldsFieldResponse) GetTemplateID() *float64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *FieldUpdateTemplateFieldsFieldResponse) GetRecipientID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RecipientID
}

func (o *FieldUpdateTemplateFieldsFieldResponse) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *FieldUpdateTemplateFieldsFieldResponse) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *FieldUpdateTemplateFieldsFieldResponse) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *FieldUpdateTemplateFieldsFieldResponse) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *FieldUpdateTemplateFieldsFieldResponse) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *FieldUpdateTemplateFieldsFieldResponse) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *FieldUpdateTemplateFieldsFieldResponse) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *FieldUpdateTemplateFieldsFieldResponse) GetFieldMeta() *FieldUpdateTemplateFieldsFieldMetaUnion {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

// FieldUpdateTemplateFieldsResponseBody - Successful response
type FieldUpdateTemplateFieldsResponseBody struct {
	Fields []FieldUpdateTemplateFieldsFieldResponse `json:"fields"`
}

func (o *FieldUpdateTemplateFieldsResponseBody) GetFields() []FieldUpdateTemplateFieldsFieldResponse {
	if o == nil {
		return []FieldUpdateTemplateFieldsFieldResponse{}
	}
	return o.Fields
}

type FieldUpdateTemplateFieldsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *FieldUpdateTemplateFieldsResponseBody
}

func (o *FieldUpdateTemplateFieldsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FieldUpdateTemplateFieldsResponse) GetObject() *FieldUpdateTemplateFieldsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
