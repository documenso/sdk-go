// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/documenso/sdk-go/internal/utils"
	"github.com/documenso/sdk-go/models/components"
)

// QueryParamType - Filter templates by type.
type QueryParamType string

const (
	QueryParamTypePublic  QueryParamType = "PUBLIC"
	QueryParamTypePrivate QueryParamType = "PRIVATE"
)

func (e QueryParamType) ToPointer() *QueryParamType {
	return &e
}
func (e *QueryParamType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PUBLIC":
		fallthrough
	case "PRIVATE":
		*e = QueryParamType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamType: %v", v)
	}
}

type TemplateFindTemplatesRequest struct {
	// The search query.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// The pagination page number, starts at 1.
	Page *float64 `queryParam:"style=form,explode=true,name=page"`
	// The number of items per page.
	PerPage *float64 `queryParam:"style=form,explode=true,name=perPage"`
	// Filter templates by type.
	Type *QueryParamType `queryParam:"style=form,explode=true,name=type"`
}

func (o *TemplateFindTemplatesRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *TemplateFindTemplatesRequest) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *TemplateFindTemplatesRequest) GetPerPage() *float64 {
	if o == nil {
		return nil
	}
	return o.PerPage
}

func (o *TemplateFindTemplatesRequest) GetType() *QueryParamType {
	if o == nil {
		return nil
	}
	return o.Type
}

type TemplateFindTemplatesType string

const (
	TemplateFindTemplatesTypePublic  TemplateFindTemplatesType = "PUBLIC"
	TemplateFindTemplatesTypePrivate TemplateFindTemplatesType = "PRIVATE"
)

func (e TemplateFindTemplatesType) ToPointer() *TemplateFindTemplatesType {
	return &e
}
func (e *TemplateFindTemplatesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PUBLIC":
		fallthrough
	case "PRIVATE":
		*e = TemplateFindTemplatesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesType: %v", v)
	}
}

type TemplateFindTemplatesVisibility string

const (
	TemplateFindTemplatesVisibilityEveryone        TemplateFindTemplatesVisibility = "EVERYONE"
	TemplateFindTemplatesVisibilityManagerAndAbove TemplateFindTemplatesVisibility = "MANAGER_AND_ABOVE"
	TemplateFindTemplatesVisibilityAdmin           TemplateFindTemplatesVisibility = "ADMIN"
)

func (e TemplateFindTemplatesVisibility) ToPointer() *TemplateFindTemplatesVisibility {
	return &e
}
func (e *TemplateFindTemplatesVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVERYONE":
		fallthrough
	case "MANAGER_AND_ABOVE":
		fallthrough
	case "ADMIN":
		*e = TemplateFindTemplatesVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesVisibility: %v", v)
	}
}

// TemplateFindTemplatesGlobalAccessAuth - The type of authentication required for the recipient to access the document.
type TemplateFindTemplatesGlobalAccessAuth string

const (
	TemplateFindTemplatesGlobalAccessAuthAccount TemplateFindTemplatesGlobalAccessAuth = "ACCOUNT"
)

func (e TemplateFindTemplatesGlobalAccessAuth) ToPointer() *TemplateFindTemplatesGlobalAccessAuth {
	return &e
}
func (e *TemplateFindTemplatesGlobalAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = TemplateFindTemplatesGlobalAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesGlobalAccessAuth: %v", v)
	}
}

// TemplateFindTemplatesGlobalActionAuth - The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
type TemplateFindTemplatesGlobalActionAuth string

const (
	TemplateFindTemplatesGlobalActionAuthAccount       TemplateFindTemplatesGlobalActionAuth = "ACCOUNT"
	TemplateFindTemplatesGlobalActionAuthPasskey       TemplateFindTemplatesGlobalActionAuth = "PASSKEY"
	TemplateFindTemplatesGlobalActionAuthTwoFactorAuth TemplateFindTemplatesGlobalActionAuth = "TWO_FACTOR_AUTH"
)

func (e TemplateFindTemplatesGlobalActionAuth) ToPointer() *TemplateFindTemplatesGlobalActionAuth {
	return &e
}
func (e *TemplateFindTemplatesGlobalActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		*e = TemplateFindTemplatesGlobalActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesGlobalActionAuth: %v", v)
	}
}

type TemplateFindTemplatesAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	GlobalAccessAuth *TemplateFindTemplatesGlobalAccessAuth `json:"globalAccessAuth"`
	// The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
	GlobalActionAuth *TemplateFindTemplatesGlobalActionAuth `json:"globalActionAuth"`
}

func (o *TemplateFindTemplatesAuthOptions) GetGlobalAccessAuth() *TemplateFindTemplatesGlobalAccessAuth {
	if o == nil {
		return nil
	}
	return o.GlobalAccessAuth
}

func (o *TemplateFindTemplatesAuthOptions) GetGlobalActionAuth() *TemplateFindTemplatesGlobalActionAuth {
	if o == nil {
		return nil
	}
	return o.GlobalActionAuth
}

type TemplateFindTemplatesTeam struct {
	ID  int64  `json:"id"`
	URL string `json:"url"`
}

func (o *TemplateFindTemplatesTeam) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *TemplateFindTemplatesTeam) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type TemplateFindTemplatesTemplatesType string

const (
	TemplateFindTemplatesTemplatesTypeSignature     TemplateFindTemplatesTemplatesType = "SIGNATURE"
	TemplateFindTemplatesTemplatesTypeFreeSignature TemplateFindTemplatesTemplatesType = "FREE_SIGNATURE"
	TemplateFindTemplatesTemplatesTypeInitials      TemplateFindTemplatesTemplatesType = "INITIALS"
	TemplateFindTemplatesTemplatesTypeName          TemplateFindTemplatesTemplatesType = "NAME"
	TemplateFindTemplatesTemplatesTypeEmail         TemplateFindTemplatesTemplatesType = "EMAIL"
	TemplateFindTemplatesTemplatesTypeDate          TemplateFindTemplatesTemplatesType = "DATE"
	TemplateFindTemplatesTemplatesTypeText          TemplateFindTemplatesTemplatesType = "TEXT"
	TemplateFindTemplatesTemplatesTypeNumber        TemplateFindTemplatesTemplatesType = "NUMBER"
	TemplateFindTemplatesTemplatesTypeRadio         TemplateFindTemplatesTemplatesType = "RADIO"
	TemplateFindTemplatesTemplatesTypeCheckbox      TemplateFindTemplatesTemplatesType = "CHECKBOX"
	TemplateFindTemplatesTemplatesTypeDropdown      TemplateFindTemplatesTemplatesType = "DROPDOWN"
)

func (e TemplateFindTemplatesTemplatesType) ToPointer() *TemplateFindTemplatesTemplatesType {
	return &e
}
func (e *TemplateFindTemplatesTemplatesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIGNATURE":
		fallthrough
	case "FREE_SIGNATURE":
		fallthrough
	case "INITIALS":
		fallthrough
	case "NAME":
		fallthrough
	case "EMAIL":
		fallthrough
	case "DATE":
		fallthrough
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROPDOWN":
		*e = TemplateFindTemplatesTemplatesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesTemplatesType: %v", v)
	}
}

type TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type string

const (
	TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9TypeDropdown TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type = "dropdown"
)

func (e TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type) ToPointer() *TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type {
	return &e
}
func (e *TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dropdown":
		*e = TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type: %v", v)
	}
}

type TemplateFindTemplatesFieldMetaTemplatesResponseValues struct {
	Value string `json:"value"`
}

func (o *TemplateFindTemplatesFieldMetaTemplatesResponseValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateFindTemplatesFieldMeta9 struct {
	Label        *string                                                                                      `json:"label,omitempty"`
	Placeholder  *string                                                                                      `json:"placeholder,omitempty"`
	Required     *bool                                                                                        `json:"required,omitempty"`
	ReadOnly     *bool                                                                                        `json:"readOnly,omitempty"`
	Type         TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type `json:"type"`
	Values       []TemplateFindTemplatesFieldMetaTemplatesResponseValues                                      `json:"values,omitempty"`
	DefaultValue *string                                                                                      `json:"defaultValue,omitempty"`
}

func (o *TemplateFindTemplatesFieldMeta9) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMeta9) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMeta9) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMeta9) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMeta9) GetType() TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type {
	if o == nil {
		return TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMeta9) GetValues() []TemplateFindTemplatesFieldMetaTemplatesResponseValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *TemplateFindTemplatesFieldMeta9) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

type TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType string

const (
	TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsTypeCheckbox TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType = "checkbox"
)

func (e TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType) ToPointer() *TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType {
	return &e
}
func (e *TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checkbox":
		*e = TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType: %v", v)
	}
}

type TemplateFindTemplatesFieldMetaTemplatesValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *TemplateFindTemplatesFieldMetaTemplatesValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateFindTemplatesFieldMetaTemplatesValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *TemplateFindTemplatesFieldMetaTemplatesValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateFindTemplatesFieldMeta8 struct {
	Label            *string                                                                                     `json:"label,omitempty"`
	Placeholder      *string                                                                                     `json:"placeholder,omitempty"`
	Required         *bool                                                                                       `json:"required,omitempty"`
	ReadOnly         *bool                                                                                       `json:"readOnly,omitempty"`
	Type             TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType `json:"type"`
	Values           []TemplateFindTemplatesFieldMetaTemplatesValues                                             `json:"values,omitempty"`
	ValidationRule   *string                                                                                     `json:"validationRule,omitempty"`
	ValidationLength *float64                                                                                    `json:"validationLength,omitempty"`
}

func (o *TemplateFindTemplatesFieldMeta8) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMeta8) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMeta8) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMeta8) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMeta8) GetType() TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType {
	if o == nil {
		return TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMeta8) GetValues() []TemplateFindTemplatesFieldMetaTemplatesValues {
	if o == nil {
		return nil
	}
	return o.Values
}

func (o *TemplateFindTemplatesFieldMeta8) GetValidationRule() *string {
	if o == nil {
		return nil
	}
	return o.ValidationRule
}

func (o *TemplateFindTemplatesFieldMeta8) GetValidationLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ValidationLength
}

type TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType string

const (
	TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataTypeRadio TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType = "radio"
)

func (e TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType) ToPointer() *TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType {
	return &e
}
func (e *TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radio":
		*e = TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType: %v", v)
	}
}

type TemplateFindTemplatesFieldMetaValues struct {
	ID      float64 `json:"id"`
	Checked bool    `json:"checked"`
	Value   string  `json:"value"`
}

func (o *TemplateFindTemplatesFieldMetaValues) GetID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ID
}

func (o *TemplateFindTemplatesFieldMetaValues) GetChecked() bool {
	if o == nil {
		return false
	}
	return o.Checked
}

func (o *TemplateFindTemplatesFieldMetaValues) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type TemplateFindTemplatesFieldMeta7 struct {
	Label       *string                                                                               `json:"label,omitempty"`
	Placeholder *string                                                                               `json:"placeholder,omitempty"`
	Required    *bool                                                                                 `json:"required,omitempty"`
	ReadOnly    *bool                                                                                 `json:"readOnly,omitempty"`
	Type        TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType `json:"type"`
	Values      []TemplateFindTemplatesFieldMetaValues                                                `json:"values,omitempty"`
}

func (o *TemplateFindTemplatesFieldMeta7) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMeta7) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMeta7) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMeta7) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMeta7) GetType() TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType {
	if o == nil {
		return TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMeta7) GetValues() []TemplateFindTemplatesFieldMetaValues {
	if o == nil {
		return nil
	}
	return o.Values
}

type TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType string

const (
	TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyTypeNumber TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType = "number"
)

func (e TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType) ToPointer() *TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type TemplateFindTemplatesFieldMeta6 struct {
	Label        *string                                                                           `json:"label,omitempty"`
	Placeholder  *string                                                                           `json:"placeholder,omitempty"`
	Required     *bool                                                                             `json:"required,omitempty"`
	ReadOnly     *bool                                                                             `json:"readOnly,omitempty"`
	Type         TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType `json:"type"`
	NumberFormat *string                                                                           `json:"numberFormat,omitempty"`
	Value        *string                                                                           `json:"value,omitempty"`
	MinValue     *float64                                                                          `json:"minValue,omitempty"`
	MaxValue     *float64                                                                          `json:"maxValue,omitempty"`
	FontSize     *float64                                                                          `json:"fontSize,omitempty"`
}

func (o *TemplateFindTemplatesFieldMeta6) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMeta6) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMeta6) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMeta6) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMeta6) GetType() TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMeta6) GetNumberFormat() *string {
	if o == nil {
		return nil
	}
	return o.NumberFormat
}

func (o *TemplateFindTemplatesFieldMeta6) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *TemplateFindTemplatesFieldMeta6) GetMinValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MinValue
}

func (o *TemplateFindTemplatesFieldMeta6) GetMaxValue() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxValue
}

func (o *TemplateFindTemplatesFieldMeta6) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType string

const (
	TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONTypeText TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType = "text"
)

func (e TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType) ToPointer() *TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType {
	return &e
}
func (e *TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType: %v", v)
	}
}

type TemplateFindTemplatesFieldMeta5 struct {
	Label          *string                                                               `json:"label,omitempty"`
	Placeholder    *string                                                               `json:"placeholder,omitempty"`
	Required       *bool                                                                 `json:"required,omitempty"`
	ReadOnly       *bool                                                                 `json:"readOnly,omitempty"`
	Type           TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType `json:"type"`
	Text           *string                                                               `json:"text,omitempty"`
	CharacterLimit *float64                                                              `json:"characterLimit,omitempty"`
	FontSize       *float64                                                              `json:"fontSize,omitempty"`
}

func (o *TemplateFindTemplatesFieldMeta5) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMeta5) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMeta5) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMeta5) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMeta5) GetType() TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType {
	if o == nil {
		return TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMeta5) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *TemplateFindTemplatesFieldMeta5) GetCharacterLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.CharacterLimit
}

func (o *TemplateFindTemplatesFieldMeta5) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateFindTemplatesFieldMetaTemplatesResponse200Type string

const (
	TemplateFindTemplatesFieldMetaTemplatesResponse200TypeDate TemplateFindTemplatesFieldMetaTemplatesResponse200Type = "date"
)

func (e TemplateFindTemplatesFieldMetaTemplatesResponse200Type) ToPointer() *TemplateFindTemplatesFieldMetaTemplatesResponse200Type {
	return &e
}
func (e *TemplateFindTemplatesFieldMetaTemplatesResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = TemplateFindTemplatesFieldMetaTemplatesResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesFieldMetaTemplatesResponse200Type: %v", v)
	}
}

type TemplateFindTemplatesFieldMeta4 struct {
	Label       *string                                                `json:"label,omitempty"`
	Placeholder *string                                                `json:"placeholder,omitempty"`
	Required    *bool                                                  `json:"required,omitempty"`
	ReadOnly    *bool                                                  `json:"readOnly,omitempty"`
	Type        TemplateFindTemplatesFieldMetaTemplatesResponse200Type `json:"type"`
	FontSize    *float64                                               `json:"fontSize,omitempty"`
}

func (o *TemplateFindTemplatesFieldMeta4) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMeta4) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMeta4) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMeta4) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMeta4) GetType() TemplateFindTemplatesFieldMetaTemplatesResponse200Type {
	if o == nil {
		return TemplateFindTemplatesFieldMetaTemplatesResponse200Type("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMeta4) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateFindTemplatesFieldMetaTemplatesResponseType string

const (
	TemplateFindTemplatesFieldMetaTemplatesResponseTypeEmail TemplateFindTemplatesFieldMetaTemplatesResponseType = "email"
)

func (e TemplateFindTemplatesFieldMetaTemplatesResponseType) ToPointer() *TemplateFindTemplatesFieldMetaTemplatesResponseType {
	return &e
}
func (e *TemplateFindTemplatesFieldMetaTemplatesResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = TemplateFindTemplatesFieldMetaTemplatesResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesFieldMetaTemplatesResponseType: %v", v)
	}
}

type TemplateFindTemplatesFieldMeta3 struct {
	Label       *string                                             `json:"label,omitempty"`
	Placeholder *string                                             `json:"placeholder,omitempty"`
	Required    *bool                                               `json:"required,omitempty"`
	ReadOnly    *bool                                               `json:"readOnly,omitempty"`
	Type        TemplateFindTemplatesFieldMetaTemplatesResponseType `json:"type"`
	FontSize    *float64                                            `json:"fontSize,omitempty"`
}

func (o *TemplateFindTemplatesFieldMeta3) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMeta3) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMeta3) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMeta3) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMeta3) GetType() TemplateFindTemplatesFieldMetaTemplatesResponseType {
	if o == nil {
		return TemplateFindTemplatesFieldMetaTemplatesResponseType("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMeta3) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateFindTemplatesFieldMetaTemplatesType string

const (
	TemplateFindTemplatesFieldMetaTemplatesTypeName TemplateFindTemplatesFieldMetaTemplatesType = "name"
)

func (e TemplateFindTemplatesFieldMetaTemplatesType) ToPointer() *TemplateFindTemplatesFieldMetaTemplatesType {
	return &e
}
func (e *TemplateFindTemplatesFieldMetaTemplatesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		*e = TemplateFindTemplatesFieldMetaTemplatesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesFieldMetaTemplatesType: %v", v)
	}
}

type TemplateFindTemplatesFieldMeta2 struct {
	Label       *string                                     `json:"label,omitempty"`
	Placeholder *string                                     `json:"placeholder,omitempty"`
	Required    *bool                                       `json:"required,omitempty"`
	ReadOnly    *bool                                       `json:"readOnly,omitempty"`
	Type        TemplateFindTemplatesFieldMetaTemplatesType `json:"type"`
	FontSize    *float64                                    `json:"fontSize,omitempty"`
}

func (o *TemplateFindTemplatesFieldMeta2) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMeta2) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMeta2) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMeta2) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMeta2) GetType() TemplateFindTemplatesFieldMetaTemplatesType {
	if o == nil {
		return TemplateFindTemplatesFieldMetaTemplatesType("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMeta2) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateFindTemplatesFieldMetaType string

const (
	TemplateFindTemplatesFieldMetaTypeInitials TemplateFindTemplatesFieldMetaType = "initials"
)

func (e TemplateFindTemplatesFieldMetaType) ToPointer() *TemplateFindTemplatesFieldMetaType {
	return &e
}
func (e *TemplateFindTemplatesFieldMetaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initials":
		*e = TemplateFindTemplatesFieldMetaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesFieldMetaType: %v", v)
	}
}

type TemplateFindTemplatesFieldMeta1 struct {
	Label       *string                            `json:"label,omitempty"`
	Placeholder *string                            `json:"placeholder,omitempty"`
	Required    *bool                              `json:"required,omitempty"`
	ReadOnly    *bool                              `json:"readOnly,omitempty"`
	Type        TemplateFindTemplatesFieldMetaType `json:"type"`
	FontSize    *float64                           `json:"fontSize,omitempty"`
}

func (o *TemplateFindTemplatesFieldMeta1) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TemplateFindTemplatesFieldMeta1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TemplateFindTemplatesFieldMeta1) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TemplateFindTemplatesFieldMeta1) GetReadOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnly
}

func (o *TemplateFindTemplatesFieldMeta1) GetType() TemplateFindTemplatesFieldMetaType {
	if o == nil {
		return TemplateFindTemplatesFieldMetaType("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFieldMeta1) GetFontSize() *float64 {
	if o == nil {
		return nil
	}
	return o.FontSize
}

type TemplateFindTemplatesFieldMetaUnionType string

const (
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta1 TemplateFindTemplatesFieldMetaUnionType = "template-findTemplates_fieldMeta_1"
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta2 TemplateFindTemplatesFieldMetaUnionType = "template-findTemplates_fieldMeta_2"
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta3 TemplateFindTemplatesFieldMetaUnionType = "template-findTemplates_fieldMeta_3"
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta4 TemplateFindTemplatesFieldMetaUnionType = "template-findTemplates_fieldMeta_4"
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta5 TemplateFindTemplatesFieldMetaUnionType = "template-findTemplates_fieldMeta_5"
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta6 TemplateFindTemplatesFieldMetaUnionType = "template-findTemplates_fieldMeta_6"
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta7 TemplateFindTemplatesFieldMetaUnionType = "template-findTemplates_fieldMeta_7"
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta8 TemplateFindTemplatesFieldMetaUnionType = "template-findTemplates_fieldMeta_8"
	TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta9 TemplateFindTemplatesFieldMetaUnionType = "template-findTemplates_fieldMeta_9"
)

type TemplateFindTemplatesFieldMeta struct {
	TemplateFindTemplatesFieldMeta1 *TemplateFindTemplatesFieldMeta1 `queryParam:"inline"`
	TemplateFindTemplatesFieldMeta2 *TemplateFindTemplatesFieldMeta2 `queryParam:"inline"`
	TemplateFindTemplatesFieldMeta3 *TemplateFindTemplatesFieldMeta3 `queryParam:"inline"`
	TemplateFindTemplatesFieldMeta4 *TemplateFindTemplatesFieldMeta4 `queryParam:"inline"`
	TemplateFindTemplatesFieldMeta5 *TemplateFindTemplatesFieldMeta5 `queryParam:"inline"`
	TemplateFindTemplatesFieldMeta6 *TemplateFindTemplatesFieldMeta6 `queryParam:"inline"`
	TemplateFindTemplatesFieldMeta7 *TemplateFindTemplatesFieldMeta7 `queryParam:"inline"`
	TemplateFindTemplatesFieldMeta8 *TemplateFindTemplatesFieldMeta8 `queryParam:"inline"`
	TemplateFindTemplatesFieldMeta9 *TemplateFindTemplatesFieldMeta9 `queryParam:"inline"`

	Type TemplateFindTemplatesFieldMetaUnionType
}

func CreateTemplateFindTemplatesFieldMetaTemplateFindTemplatesFieldMeta1(templateFindTemplatesFieldMeta1 TemplateFindTemplatesFieldMeta1) TemplateFindTemplatesFieldMeta {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta1

	return TemplateFindTemplatesFieldMeta{
		TemplateFindTemplatesFieldMeta1: &templateFindTemplatesFieldMeta1,
		Type:                            typ,
	}
}

func CreateTemplateFindTemplatesFieldMetaTemplateFindTemplatesFieldMeta2(templateFindTemplatesFieldMeta2 TemplateFindTemplatesFieldMeta2) TemplateFindTemplatesFieldMeta {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta2

	return TemplateFindTemplatesFieldMeta{
		TemplateFindTemplatesFieldMeta2: &templateFindTemplatesFieldMeta2,
		Type:                            typ,
	}
}

func CreateTemplateFindTemplatesFieldMetaTemplateFindTemplatesFieldMeta3(templateFindTemplatesFieldMeta3 TemplateFindTemplatesFieldMeta3) TemplateFindTemplatesFieldMeta {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta3

	return TemplateFindTemplatesFieldMeta{
		TemplateFindTemplatesFieldMeta3: &templateFindTemplatesFieldMeta3,
		Type:                            typ,
	}
}

func CreateTemplateFindTemplatesFieldMetaTemplateFindTemplatesFieldMeta4(templateFindTemplatesFieldMeta4 TemplateFindTemplatesFieldMeta4) TemplateFindTemplatesFieldMeta {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta4

	return TemplateFindTemplatesFieldMeta{
		TemplateFindTemplatesFieldMeta4: &templateFindTemplatesFieldMeta4,
		Type:                            typ,
	}
}

func CreateTemplateFindTemplatesFieldMetaTemplateFindTemplatesFieldMeta5(templateFindTemplatesFieldMeta5 TemplateFindTemplatesFieldMeta5) TemplateFindTemplatesFieldMeta {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta5

	return TemplateFindTemplatesFieldMeta{
		TemplateFindTemplatesFieldMeta5: &templateFindTemplatesFieldMeta5,
		Type:                            typ,
	}
}

func CreateTemplateFindTemplatesFieldMetaTemplateFindTemplatesFieldMeta6(templateFindTemplatesFieldMeta6 TemplateFindTemplatesFieldMeta6) TemplateFindTemplatesFieldMeta {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta6

	return TemplateFindTemplatesFieldMeta{
		TemplateFindTemplatesFieldMeta6: &templateFindTemplatesFieldMeta6,
		Type:                            typ,
	}
}

func CreateTemplateFindTemplatesFieldMetaTemplateFindTemplatesFieldMeta7(templateFindTemplatesFieldMeta7 TemplateFindTemplatesFieldMeta7) TemplateFindTemplatesFieldMeta {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta7

	return TemplateFindTemplatesFieldMeta{
		TemplateFindTemplatesFieldMeta7: &templateFindTemplatesFieldMeta7,
		Type:                            typ,
	}
}

func CreateTemplateFindTemplatesFieldMetaTemplateFindTemplatesFieldMeta8(templateFindTemplatesFieldMeta8 TemplateFindTemplatesFieldMeta8) TemplateFindTemplatesFieldMeta {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta8

	return TemplateFindTemplatesFieldMeta{
		TemplateFindTemplatesFieldMeta8: &templateFindTemplatesFieldMeta8,
		Type:                            typ,
	}
}

func CreateTemplateFindTemplatesFieldMetaTemplateFindTemplatesFieldMeta9(templateFindTemplatesFieldMeta9 TemplateFindTemplatesFieldMeta9) TemplateFindTemplatesFieldMeta {
	typ := TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta9

	return TemplateFindTemplatesFieldMeta{
		TemplateFindTemplatesFieldMeta9: &templateFindTemplatesFieldMeta9,
		Type:                            typ,
	}
}

func (u *TemplateFindTemplatesFieldMeta) UnmarshalJSON(data []byte) error {

	var templateFindTemplatesFieldMeta1 TemplateFindTemplatesFieldMeta1 = TemplateFindTemplatesFieldMeta1{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMeta1, "", true, true); err == nil {
		u.TemplateFindTemplatesFieldMeta1 = &templateFindTemplatesFieldMeta1
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta1
		return nil
	}

	var templateFindTemplatesFieldMeta2 TemplateFindTemplatesFieldMeta2 = TemplateFindTemplatesFieldMeta2{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMeta2, "", true, true); err == nil {
		u.TemplateFindTemplatesFieldMeta2 = &templateFindTemplatesFieldMeta2
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta2
		return nil
	}

	var templateFindTemplatesFieldMeta3 TemplateFindTemplatesFieldMeta3 = TemplateFindTemplatesFieldMeta3{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMeta3, "", true, true); err == nil {
		u.TemplateFindTemplatesFieldMeta3 = &templateFindTemplatesFieldMeta3
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta3
		return nil
	}

	var templateFindTemplatesFieldMeta4 TemplateFindTemplatesFieldMeta4 = TemplateFindTemplatesFieldMeta4{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMeta4, "", true, true); err == nil {
		u.TemplateFindTemplatesFieldMeta4 = &templateFindTemplatesFieldMeta4
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta4
		return nil
	}

	var templateFindTemplatesFieldMeta7 TemplateFindTemplatesFieldMeta7 = TemplateFindTemplatesFieldMeta7{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMeta7, "", true, true); err == nil {
		u.TemplateFindTemplatesFieldMeta7 = &templateFindTemplatesFieldMeta7
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta7
		return nil
	}

	var templateFindTemplatesFieldMeta9 TemplateFindTemplatesFieldMeta9 = TemplateFindTemplatesFieldMeta9{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMeta9, "", true, true); err == nil {
		u.TemplateFindTemplatesFieldMeta9 = &templateFindTemplatesFieldMeta9
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta9
		return nil
	}

	var templateFindTemplatesFieldMeta5 TemplateFindTemplatesFieldMeta5 = TemplateFindTemplatesFieldMeta5{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMeta5, "", true, true); err == nil {
		u.TemplateFindTemplatesFieldMeta5 = &templateFindTemplatesFieldMeta5
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta5
		return nil
	}

	var templateFindTemplatesFieldMeta8 TemplateFindTemplatesFieldMeta8 = TemplateFindTemplatesFieldMeta8{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMeta8, "", true, true); err == nil {
		u.TemplateFindTemplatesFieldMeta8 = &templateFindTemplatesFieldMeta8
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta8
		return nil
	}

	var templateFindTemplatesFieldMeta6 TemplateFindTemplatesFieldMeta6 = TemplateFindTemplatesFieldMeta6{}
	if err := utils.UnmarshalJSON(data, &templateFindTemplatesFieldMeta6, "", true, true); err == nil {
		u.TemplateFindTemplatesFieldMeta6 = &templateFindTemplatesFieldMeta6
		u.Type = TemplateFindTemplatesFieldMetaUnionTypeTemplateFindTemplatesFieldMeta6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TemplateFindTemplatesFieldMeta", string(data))
}

func (u TemplateFindTemplatesFieldMeta) MarshalJSON() ([]byte, error) {
	if u.TemplateFindTemplatesFieldMeta1 != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMeta1, "", true)
	}

	if u.TemplateFindTemplatesFieldMeta2 != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMeta2, "", true)
	}

	if u.TemplateFindTemplatesFieldMeta3 != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMeta3, "", true)
	}

	if u.TemplateFindTemplatesFieldMeta4 != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMeta4, "", true)
	}

	if u.TemplateFindTemplatesFieldMeta5 != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMeta5, "", true)
	}

	if u.TemplateFindTemplatesFieldMeta6 != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMeta6, "", true)
	}

	if u.TemplateFindTemplatesFieldMeta7 != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMeta7, "", true)
	}

	if u.TemplateFindTemplatesFieldMeta8 != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMeta8, "", true)
	}

	if u.TemplateFindTemplatesFieldMeta9 != nil {
		return utils.MarshalJSON(u.TemplateFindTemplatesFieldMeta9, "", true)
	}

	return nil, errors.New("could not marshal union type TemplateFindTemplatesFieldMeta: all fields are null")
}

type TemplateFindTemplatesFields struct {
	Type        TemplateFindTemplatesTemplatesType `json:"type"`
	ID          int64                              `json:"id"`
	SecondaryID string                             `json:"secondaryId"`
	DocumentID  *int64                             `json:"documentId"`
	TemplateID  *int64                             `json:"templateId"`
	RecipientID int64                              `json:"recipientId"`
	// The page number of the field on the document. Starts from 1.
	Page       float64                         `json:"page"`
	PositionX  any                             `json:"positionX,omitempty"`
	PositionY  any                             `json:"positionY,omitempty"`
	Width      any                             `json:"width,omitempty"`
	Height     any                             `json:"height,omitempty"`
	CustomText string                          `json:"customText"`
	Inserted   bool                            `json:"inserted"`
	FieldMeta  *TemplateFindTemplatesFieldMeta `json:"fieldMeta"`
}

func (o *TemplateFindTemplatesFields) GetType() TemplateFindTemplatesTemplatesType {
	if o == nil {
		return TemplateFindTemplatesTemplatesType("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesFields) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *TemplateFindTemplatesFields) GetSecondaryID() string {
	if o == nil {
		return ""
	}
	return o.SecondaryID
}

func (o *TemplateFindTemplatesFields) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *TemplateFindTemplatesFields) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *TemplateFindTemplatesFields) GetRecipientID() int64 {
	if o == nil {
		return 0
	}
	return o.RecipientID
}

func (o *TemplateFindTemplatesFields) GetPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.Page
}

func (o *TemplateFindTemplatesFields) GetPositionX() any {
	if o == nil {
		return nil
	}
	return o.PositionX
}

func (o *TemplateFindTemplatesFields) GetPositionY() any {
	if o == nil {
		return nil
	}
	return o.PositionY
}

func (o *TemplateFindTemplatesFields) GetWidth() any {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *TemplateFindTemplatesFields) GetHeight() any {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *TemplateFindTemplatesFields) GetCustomText() string {
	if o == nil {
		return ""
	}
	return o.CustomText
}

func (o *TemplateFindTemplatesFields) GetInserted() bool {
	if o == nil {
		return false
	}
	return o.Inserted
}

func (o *TemplateFindTemplatesFields) GetFieldMeta() *TemplateFindTemplatesFieldMeta {
	if o == nil {
		return nil
	}
	return o.FieldMeta
}

type TemplateFindTemplatesRole string

const (
	TemplateFindTemplatesRoleCc       TemplateFindTemplatesRole = "CC"
	TemplateFindTemplatesRoleSigner   TemplateFindTemplatesRole = "SIGNER"
	TemplateFindTemplatesRoleViewer   TemplateFindTemplatesRole = "VIEWER"
	TemplateFindTemplatesRoleApprover TemplateFindTemplatesRole = "APPROVER"
)

func (e TemplateFindTemplatesRole) ToPointer() *TemplateFindTemplatesRole {
	return &e
}
func (e *TemplateFindTemplatesRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CC":
		fallthrough
	case "SIGNER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "APPROVER":
		*e = TemplateFindTemplatesRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesRole: %v", v)
	}
}

type TemplateFindTemplatesReadStatus string

const (
	TemplateFindTemplatesReadStatusNotOpened TemplateFindTemplatesReadStatus = "NOT_OPENED"
	TemplateFindTemplatesReadStatusOpened    TemplateFindTemplatesReadStatus = "OPENED"
)

func (e TemplateFindTemplatesReadStatus) ToPointer() *TemplateFindTemplatesReadStatus {
	return &e
}
func (e *TemplateFindTemplatesReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_OPENED":
		fallthrough
	case "OPENED":
		*e = TemplateFindTemplatesReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesReadStatus: %v", v)
	}
}

type TemplateFindTemplatesSigningStatus string

const (
	TemplateFindTemplatesSigningStatusNotSigned TemplateFindTemplatesSigningStatus = "NOT_SIGNED"
	TemplateFindTemplatesSigningStatusSigned    TemplateFindTemplatesSigningStatus = "SIGNED"
	TemplateFindTemplatesSigningStatusRejected  TemplateFindTemplatesSigningStatus = "REJECTED"
)

func (e TemplateFindTemplatesSigningStatus) ToPointer() *TemplateFindTemplatesSigningStatus {
	return &e
}
func (e *TemplateFindTemplatesSigningStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SIGNED":
		fallthrough
	case "SIGNED":
		fallthrough
	case "REJECTED":
		*e = TemplateFindTemplatesSigningStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesSigningStatus: %v", v)
	}
}

type TemplateFindTemplatesSendStatus string

const (
	TemplateFindTemplatesSendStatusNotSent TemplateFindTemplatesSendStatus = "NOT_SENT"
	TemplateFindTemplatesSendStatusSent    TemplateFindTemplatesSendStatus = "SENT"
)

func (e TemplateFindTemplatesSendStatus) ToPointer() *TemplateFindTemplatesSendStatus {
	return &e
}
func (e *TemplateFindTemplatesSendStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_SENT":
		fallthrough
	case "SENT":
		*e = TemplateFindTemplatesSendStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesSendStatus: %v", v)
	}
}

// TemplateFindTemplatesAccessAuth - The type of authentication required for the recipient to access the document.
type TemplateFindTemplatesAccessAuth string

const (
	TemplateFindTemplatesAccessAuthAccount TemplateFindTemplatesAccessAuth = "ACCOUNT"
)

func (e TemplateFindTemplatesAccessAuth) ToPointer() *TemplateFindTemplatesAccessAuth {
	return &e
}
func (e *TemplateFindTemplatesAccessAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		*e = TemplateFindTemplatesAccessAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesAccessAuth: %v", v)
	}
}

// TemplateFindTemplatesActionAuth - The type of authentication required for the recipient to sign the document.
type TemplateFindTemplatesActionAuth string

const (
	TemplateFindTemplatesActionAuthAccount       TemplateFindTemplatesActionAuth = "ACCOUNT"
	TemplateFindTemplatesActionAuthPasskey       TemplateFindTemplatesActionAuth = "PASSKEY"
	TemplateFindTemplatesActionAuthTwoFactorAuth TemplateFindTemplatesActionAuth = "TWO_FACTOR_AUTH"
	TemplateFindTemplatesActionAuthExplicitNone  TemplateFindTemplatesActionAuth = "EXPLICIT_NONE"
)

func (e TemplateFindTemplatesActionAuth) ToPointer() *TemplateFindTemplatesActionAuth {
	return &e
}
func (e *TemplateFindTemplatesActionAuth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "PASSKEY":
		fallthrough
	case "TWO_FACTOR_AUTH":
		fallthrough
	case "EXPLICIT_NONE":
		*e = TemplateFindTemplatesActionAuth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesActionAuth: %v", v)
	}
}

type TemplateFindTemplatesTemplatesAuthOptions struct {
	// The type of authentication required for the recipient to access the document.
	AccessAuth *TemplateFindTemplatesAccessAuth `json:"accessAuth"`
	// The type of authentication required for the recipient to sign the document.
	ActionAuth *TemplateFindTemplatesActionAuth `json:"actionAuth"`
}

func (o *TemplateFindTemplatesTemplatesAuthOptions) GetAccessAuth() *TemplateFindTemplatesAccessAuth {
	if o == nil {
		return nil
	}
	return o.AccessAuth
}

func (o *TemplateFindTemplatesTemplatesAuthOptions) GetActionAuth() *TemplateFindTemplatesActionAuth {
	if o == nil {
		return nil
	}
	return o.ActionAuth
}

type TemplateFindTemplatesRecipients struct {
	Role              TemplateFindTemplatesRole                  `json:"role"`
	ReadStatus        TemplateFindTemplatesReadStatus            `json:"readStatus"`
	SigningStatus     TemplateFindTemplatesSigningStatus         `json:"signingStatus"`
	SendStatus        TemplateFindTemplatesSendStatus            `json:"sendStatus"`
	ID                int64                                      `json:"id"`
	DocumentID        *int64                                     `json:"documentId"`
	TemplateID        *int64                                     `json:"templateId"`
	Email             string                                     `json:"email"`
	Name              string                                     `json:"name"`
	Token             string                                     `json:"token"`
	DocumentDeletedAt *string                                    `json:"documentDeletedAt"`
	Expired           *string                                    `json:"expired"`
	SignedAt          *string                                    `json:"signedAt"`
	AuthOptions       *TemplateFindTemplatesTemplatesAuthOptions `json:"authOptions"`
	// The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
	SigningOrder    *float64 `json:"signingOrder"`
	RejectionReason *string  `json:"rejectionReason"`
}

func (o *TemplateFindTemplatesRecipients) GetRole() TemplateFindTemplatesRole {
	if o == nil {
		return TemplateFindTemplatesRole("")
	}
	return o.Role
}

func (o *TemplateFindTemplatesRecipients) GetReadStatus() TemplateFindTemplatesReadStatus {
	if o == nil {
		return TemplateFindTemplatesReadStatus("")
	}
	return o.ReadStatus
}

func (o *TemplateFindTemplatesRecipients) GetSigningStatus() TemplateFindTemplatesSigningStatus {
	if o == nil {
		return TemplateFindTemplatesSigningStatus("")
	}
	return o.SigningStatus
}

func (o *TemplateFindTemplatesRecipients) GetSendStatus() TemplateFindTemplatesSendStatus {
	if o == nil {
		return TemplateFindTemplatesSendStatus("")
	}
	return o.SendStatus
}

func (o *TemplateFindTemplatesRecipients) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *TemplateFindTemplatesRecipients) GetDocumentID() *int64 {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *TemplateFindTemplatesRecipients) GetTemplateID() *int64 {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *TemplateFindTemplatesRecipients) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *TemplateFindTemplatesRecipients) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TemplateFindTemplatesRecipients) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *TemplateFindTemplatesRecipients) GetDocumentDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DocumentDeletedAt
}

func (o *TemplateFindTemplatesRecipients) GetExpired() *string {
	if o == nil {
		return nil
	}
	return o.Expired
}

func (o *TemplateFindTemplatesRecipients) GetSignedAt() *string {
	if o == nil {
		return nil
	}
	return o.SignedAt
}

func (o *TemplateFindTemplatesRecipients) GetAuthOptions() *TemplateFindTemplatesTemplatesAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *TemplateFindTemplatesRecipients) GetSigningOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *TemplateFindTemplatesRecipients) GetRejectionReason() *string {
	if o == nil {
		return nil
	}
	return o.RejectionReason
}

type TemplateFindTemplatesSigningOrder string

const (
	TemplateFindTemplatesSigningOrderParallel   TemplateFindTemplatesSigningOrder = "PARALLEL"
	TemplateFindTemplatesSigningOrderSequential TemplateFindTemplatesSigningOrder = "SEQUENTIAL"
)

func (e TemplateFindTemplatesSigningOrder) ToPointer() *TemplateFindTemplatesSigningOrder {
	return &e
}
func (e *TemplateFindTemplatesSigningOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARALLEL":
		fallthrough
	case "SEQUENTIAL":
		*e = TemplateFindTemplatesSigningOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesSigningOrder: %v", v)
	}
}

type TemplateFindTemplatesDistributionMethod string

const (
	TemplateFindTemplatesDistributionMethodEmail TemplateFindTemplatesDistributionMethod = "EMAIL"
	TemplateFindTemplatesDistributionMethodNone  TemplateFindTemplatesDistributionMethod = "NONE"
)

func (e TemplateFindTemplatesDistributionMethod) ToPointer() *TemplateFindTemplatesDistributionMethod {
	return &e
}
func (e *TemplateFindTemplatesDistributionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EMAIL":
		fallthrough
	case "NONE":
		*e = TemplateFindTemplatesDistributionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TemplateFindTemplatesDistributionMethod: %v", v)
	}
}

type TemplateFindTemplatesTemplateMeta struct {
	SigningOrder       *TemplateFindTemplatesSigningOrder      `json:"signingOrder"`
	DistributionMethod TemplateFindTemplatesDistributionMethod `json:"distributionMethod"`
}

func (o *TemplateFindTemplatesTemplateMeta) GetSigningOrder() *TemplateFindTemplatesSigningOrder {
	if o == nil {
		return nil
	}
	return o.SigningOrder
}

func (o *TemplateFindTemplatesTemplateMeta) GetDistributionMethod() TemplateFindTemplatesDistributionMethod {
	if o == nil {
		return TemplateFindTemplatesDistributionMethod("")
	}
	return o.DistributionMethod
}

type TemplateFindTemplatesDirectLink struct {
	Token   string `json:"token"`
	Enabled bool   `json:"enabled"`
}

func (o *TemplateFindTemplatesDirectLink) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *TemplateFindTemplatesDirectLink) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

type TemplateFindTemplatesData struct {
	Type                   TemplateFindTemplatesType          `json:"type"`
	Visibility             TemplateFindTemplatesVisibility    `json:"visibility"`
	ID                     int64                              `json:"id"`
	ExternalID             *string                            `json:"externalId"`
	Title                  string                             `json:"title"`
	UserID                 int64                              `json:"userId"`
	TeamID                 *int64                             `json:"teamId"`
	AuthOptions            *TemplateFindTemplatesAuthOptions  `json:"authOptions"`
	TemplateDocumentDataID string                             `json:"templateDocumentDataId"`
	CreatedAt              string                             `json:"createdAt"`
	UpdatedAt              string                             `json:"updatedAt"`
	PublicTitle            string                             `json:"publicTitle"`
	PublicDescription      string                             `json:"publicDescription"`
	Team                   *TemplateFindTemplatesTeam         `json:"team"`
	Fields                 []TemplateFindTemplatesFields      `json:"fields"`
	Recipients             []TemplateFindTemplatesRecipients  `json:"recipients"`
	TemplateMeta           *TemplateFindTemplatesTemplateMeta `json:"templateMeta"`
	DirectLink             *TemplateFindTemplatesDirectLink   `json:"directLink"`
}

func (o *TemplateFindTemplatesData) GetType() TemplateFindTemplatesType {
	if o == nil {
		return TemplateFindTemplatesType("")
	}
	return o.Type
}

func (o *TemplateFindTemplatesData) GetVisibility() TemplateFindTemplatesVisibility {
	if o == nil {
		return TemplateFindTemplatesVisibility("")
	}
	return o.Visibility
}

func (o *TemplateFindTemplatesData) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *TemplateFindTemplatesData) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *TemplateFindTemplatesData) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *TemplateFindTemplatesData) GetUserID() int64 {
	if o == nil {
		return 0
	}
	return o.UserID
}

func (o *TemplateFindTemplatesData) GetTeamID() *int64 {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *TemplateFindTemplatesData) GetAuthOptions() *TemplateFindTemplatesAuthOptions {
	if o == nil {
		return nil
	}
	return o.AuthOptions
}

func (o *TemplateFindTemplatesData) GetTemplateDocumentDataID() string {
	if o == nil {
		return ""
	}
	return o.TemplateDocumentDataID
}

func (o *TemplateFindTemplatesData) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *TemplateFindTemplatesData) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *TemplateFindTemplatesData) GetPublicTitle() string {
	if o == nil {
		return ""
	}
	return o.PublicTitle
}

func (o *TemplateFindTemplatesData) GetPublicDescription() string {
	if o == nil {
		return ""
	}
	return o.PublicDescription
}

func (o *TemplateFindTemplatesData) GetTeam() *TemplateFindTemplatesTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *TemplateFindTemplatesData) GetFields() []TemplateFindTemplatesFields {
	if o == nil {
		return []TemplateFindTemplatesFields{}
	}
	return o.Fields
}

func (o *TemplateFindTemplatesData) GetRecipients() []TemplateFindTemplatesRecipients {
	if o == nil {
		return []TemplateFindTemplatesRecipients{}
	}
	return o.Recipients
}

func (o *TemplateFindTemplatesData) GetTemplateMeta() *TemplateFindTemplatesTemplateMeta {
	if o == nil {
		return nil
	}
	return o.TemplateMeta
}

func (o *TemplateFindTemplatesData) GetDirectLink() *TemplateFindTemplatesDirectLink {
	if o == nil {
		return nil
	}
	return o.DirectLink
}

// TemplateFindTemplatesResponseBody - Successful response
type TemplateFindTemplatesResponseBody struct {
	Data []TemplateFindTemplatesData `json:"data"`
	// The total number of items.
	Count float64 `json:"count"`
	// The current page number, starts at 1.
	CurrentPage float64 `json:"currentPage"`
	// The number of items per page.
	PerPage float64 `json:"perPage"`
	// The total number of pages.
	TotalPages float64 `json:"totalPages"`
}

func (o *TemplateFindTemplatesResponseBody) GetData() []TemplateFindTemplatesData {
	if o == nil {
		return []TemplateFindTemplatesData{}
	}
	return o.Data
}

func (o *TemplateFindTemplatesResponseBody) GetCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Count
}

func (o *TemplateFindTemplatesResponseBody) GetCurrentPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentPage
}

func (o *TemplateFindTemplatesResponseBody) GetPerPage() float64 {
	if o == nil {
		return 0.0
	}
	return o.PerPage
}

func (o *TemplateFindTemplatesResponseBody) GetTotalPages() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalPages
}

type TemplateFindTemplatesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	Object *TemplateFindTemplatesResponseBody
}

func (o *TemplateFindTemplatesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *TemplateFindTemplatesResponse) GetObject() *TemplateFindTemplatesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
